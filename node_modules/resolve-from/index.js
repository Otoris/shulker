'use strict';
const path = require('path');
const Module = require('module');
const fs = require('fs');

const resolveFrom = (fromDir, moduleId, silent) => ***REMOVED***
	if (typeof fromDir !== 'string') ***REMOVED***
		throw new TypeError(`Expected \`fromDir\` to be of type \`string\`, got \`$***REMOVED***typeof fromDir***REMOVED***\``);
	***REMOVED***

	if (typeof moduleId !== 'string') ***REMOVED***
		throw new TypeError(`Expected \`moduleId\` to be of type \`string\`, got \`$***REMOVED***typeof moduleId***REMOVED***\``);
	***REMOVED***

	try ***REMOVED***
		fromDir = fs.realpathSync(fromDir);
	***REMOVED*** catch (err) ***REMOVED***
		if (err.code === 'ENOENT') ***REMOVED***
			fromDir = path.resolve(fromDir);
		***REMOVED*** else if (silent) ***REMOVED***
			return null;
		***REMOVED*** else ***REMOVED***
			throw err;
		***REMOVED***
	***REMOVED***

	const fromFile = path.join(fromDir, 'noop.js');

	const resolveFileName = () => Module._resolveFilename(moduleId, ***REMOVED***
		id: fromFile,
		filename: fromFile,
		paths: Module._nodeModulePaths(fromDir)
	***REMOVED***);

	if (silent) ***REMOVED***
		try ***REMOVED***
			return resolveFileName();
		***REMOVED*** catch (err) ***REMOVED***
			return null;
		***REMOVED***
	***REMOVED***

	return resolveFileName();
***REMOVED***;

module.exports = (fromDir, moduleId) => resolveFrom(fromDir, moduleId);
module.exports.silent = (fromDir, moduleId) => resolveFrom(fromDir, moduleId, true);
