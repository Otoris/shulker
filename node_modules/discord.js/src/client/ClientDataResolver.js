const path = require('path');
const fs = require('fs');
const snekfetch = require('snekfetch');

const Constants = require('../util/Constants');
const convertToBuffer = require('../util/Util').convertToBuffer;
const User = require('../structures/User');
const Message = require('../structures/Message');
const Guild = require('../structures/Guild');
const Channel = require('../structures/Channel');
const GuildMember = require('../structures/GuildMember');
const Emoji = require('../structures/Emoji');
const ReactionEmoji = require('../structures/ReactionEmoji');
const Role = require('../structures/Role');

/**
 * The DataResolver identifies different objects and tries to resolve a specific piece of information from them, e.g.
 * extracting a User from a Message object.
 * @private
 */
class ClientDataResolver ***REMOVED***
  /**
   * @param ***REMOVED***Client***REMOVED*** client The client the resolver is for
   */
  constructor(client) ***REMOVED***
    this.client = client;
  ***REMOVED***

  /**
   * Data that resolves to give a User object. This can be:
   * * A User object
   * * A Snowflake
   * * A Message object (resolves to the message author)
   * * A Guild object (owner of the guild)
   * * A GuildMember object
   * @typedef ***REMOVED***User|Snowflake|Message|Guild|GuildMember***REMOVED*** UserResolvable
   */

  /**
   * Resolves a UserResolvable to a User object.
   * @param ***REMOVED***UserResolvable***REMOVED*** user The UserResolvable to identify
   * @returns ***REMOVED***?User***REMOVED***
   */
  resolveUser(user) ***REMOVED***
    if (user instanceof User) return user;
    if (typeof user === 'string') return this.client.users.get(user) || null;
    if (user instanceof GuildMember) return user.user;
    if (user instanceof Message) return user.author;
    if (user instanceof Guild) return this.resolveUser(user.ownerID);
    return null;
  ***REMOVED***

  /**
   * Resolves a UserResolvable to a user ID string.
   * @param ***REMOVED***UserResolvable***REMOVED*** user The UserResolvable to identify
   * @returns ***REMOVED***?Snowflake***REMOVED***
   */
  resolveUserID(user) ***REMOVED***
    if (user instanceof User || user instanceof GuildMember) return user.id;
    if (typeof user === 'string') return user || null;
    if (user instanceof Message) return user.author.id;
    if (user instanceof Guild) return user.ownerID;
    return null;
  ***REMOVED***

  /**
   * Data that resolves to give a Guild object. This can be:
   * * A Guild object
   * * A Snowflake
   * @typedef ***REMOVED***Guild|Snowflake***REMOVED*** GuildResolvable
   */

  /**
   * Resolves a GuildResolvable to a Guild object.
   * @param ***REMOVED***GuildResolvable***REMOVED*** guild The GuildResolvable to identify
   * @returns ***REMOVED***?Guild***REMOVED***
   */
  resolveGuild(guild) ***REMOVED***
    if (guild instanceof Guild) return guild;
    if (typeof guild === 'string') return this.client.guilds.get(guild) || null;
    return null;
  ***REMOVED***

  /**
   * Data that resolves to give a GuildMember object. This can be:
   * * A GuildMember object
   * * A User object
   * @typedef ***REMOVED***GuildMember|User***REMOVED*** GuildMemberResolvable
   */

  /**
   * Resolves a GuildMemberResolvable to a GuildMember object.
   * @param ***REMOVED***GuildResolvable***REMOVED*** guild The guild that the member is part of
   * @param ***REMOVED***UserResolvable***REMOVED*** user The user that is part of the guild
   * @returns ***REMOVED***?GuildMember***REMOVED***
   */
  resolveGuildMember(guild, user) ***REMOVED***
    if (user instanceof GuildMember) return user;
    guild = this.resolveGuild(guild);
    user = this.resolveUser(user);
    if (!guild || !user) return null;
    return guild.members.get(user.id) || null;
  ***REMOVED***

  /**
   * Data that can be resolved to a Role object. This can be:
   * * A Role
   * * A Snowflake
   * @typedef ***REMOVED***Role|Snowflake***REMOVED*** RoleResolvable
   */

  /**
    * Resolves a RoleResolvable to a Role object.
    * @param ***REMOVED***GuildResolvable***REMOVED*** guild The guild that this role is part of
    * @param ***REMOVED***RoleResolvable***REMOVED*** role The role resolvable to resolve
    * @returns ***REMOVED***?Role***REMOVED***
    */
  resolveRole(guild, role) ***REMOVED***
    if (role instanceof Role) return role;
    guild = this.resolveGuild(guild);
    if (!guild) return null;
    if (typeof role === 'string') return guild.roles.get(role);
    return null;
  ***REMOVED***

  /**
   * Data that can be resolved to give a Channel object. This can be:
   * * A Channel object
   * * A Message object (the channel the message was sent in)
   * * A Guild object (the #general channel)
   * * A Snowflake
   * @typedef ***REMOVED***Channel|Guild|Message|Snowflake***REMOVED*** ChannelResolvable
   */

  /**
   * Resolves a ChannelResolvable to a Channel object.
   * @param ***REMOVED***ChannelResolvable***REMOVED*** channel The channel resolvable to resolve
   * @returns ***REMOVED***?Channel***REMOVED***
   */
  resolveChannel(channel) ***REMOVED***
    if (channel instanceof Channel) return channel;
    if (typeof channel === 'string') return this.client.channels.get(channel) || null;
    if (channel instanceof Message) return channel.channel;
    if (channel instanceof Guild) return channel.channels.get(channel.id) || null;
    return null;
  ***REMOVED***

  /**
   * Resolves a ChannelResolvable to a channel ID.
   * @param ***REMOVED***ChannelResolvable***REMOVED*** channel The channel resolvable to resolve
   * @returns ***REMOVED***?Snowflake***REMOVED***
   */
  resolveChannelID(channel) ***REMOVED***
    if (channel instanceof Channel) return channel.id;
    if (typeof channel === 'string') return channel;
    if (channel instanceof Message) return channel.channel.id;
    if (channel instanceof Guild) return channel.defaultChannel.id;
    return null;
  ***REMOVED***

  /**
   * Data that can be resolved to give an invite code. This can be:
   * * An invite code
   * * An invite URL
   * @typedef ***REMOVED***string***REMOVED*** InviteResolvable
   */

  /**
   * Resolves InviteResolvable to an invite code.
   * @param ***REMOVED***InviteResolvable***REMOVED*** data The invite resolvable to resolve
   * @returns ***REMOVED***string***REMOVED***
   */
  resolveInviteCode(data) ***REMOVED***
    const inviteRegex = /discord(?:app\.com\/invite|\.gg(?:\/invite)?)\/([\w-]***REMOVED***2,255***REMOVED***)/i;
    const match = inviteRegex.exec(data);
    if (match && match[1]) return match[1];
    return data;
  ***REMOVED***

  /**
   * Data that can be resolved to give a string. This can be:
   * * A string
   * * An array (joined with a new line delimiter to give a string)
   * * Any value
   * @typedef ***REMOVED***string|Array|****REMOVED*** StringResolvable
   */

  /**
   * Resolves a StringResolvable to a string.
   * @param ***REMOVED***StringResolvable***REMOVED*** data The string resolvable to resolve
   * @returns ***REMOVED***string***REMOVED***
   */
  resolveString(data) ***REMOVED***
    if (typeof data === 'string') return data;
    if (data instanceof Array) return data.join('\n');
    return String(data);
  ***REMOVED***


  /**
   * Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.
   * @param ***REMOVED***BufferResolvable|Base64Resolvable***REMOVED*** image The image to be resolved
   * @returns ***REMOVED***Promise<?string>***REMOVED***
   */
  resolveImage(image) ***REMOVED***
    if (!image) return Promise.resolve(null);
    if (typeof image === 'string' && image.startsWith('data:')) ***REMOVED***
      return Promise.resolve(image);
    ***REMOVED***
    return this.resolveFile(image).then(this.resolveBase64);
  ***REMOVED***

  /**
   * Data that resolves to give a Base64 string, typically for image uploading. This can be:
   * * A Buffer
   * * A base64 string
   * @typedef ***REMOVED***Buffer|string***REMOVED*** Base64Resolvable
   */

  /**
   * Resolves a Base64Resolvable to a Base 64 image.
   * @param ***REMOVED***Base64Resolvable***REMOVED*** data The base 64 resolvable you want to resolve
   * @returns ***REMOVED***?string***REMOVED***
   */
  resolveBase64(data) ***REMOVED***
    if (data instanceof Buffer) return `data:image/jpg;base64,$***REMOVED***data.toString('base64')***REMOVED***`;
    return data;
  ***REMOVED***

  /**
    * Data that can be resolved to give a Buffer. This can be:
    * * A Buffer
    * * The path to a local file
    * * A URL
    * * A Stream
    * @typedef ***REMOVED***string|Buffer***REMOVED*** BufferResolvable
    */

  /**
    * @external Stream
    * @see ***REMOVED***@link https://nodejs.org/api/stream.html***REMOVED***
    */

  /**
    * Resolves a BufferResolvable to a Buffer.
    * @param ***REMOVED***BufferResolvable|Stream***REMOVED*** resource The buffer or stream resolvable to resolve
    * @returns ***REMOVED***Promise<Buffer>***REMOVED***
    */
  resolveFile(resource) ***REMOVED***
    if (resource instanceof Buffer) return Promise.resolve(resource);
    if (this.client.browser && resource instanceof ArrayBuffer) return Promise.resolve(convertToBuffer(resource));

    if (typeof resource === 'string') ***REMOVED***
      if (/^https?:\/\//.test(resource)) ***REMOVED***
        return snekfetch.get(resource).then(res => res.body instanceof Buffer ? res.body : Buffer.from(res.text));
      ***REMOVED***
      return new Promise((resolve, reject) => ***REMOVED***
        const file = path.resolve(resource);
        fs.stat(file, (err, stats) => ***REMOVED***
          if (err) return reject(err);
          if (!stats || !stats.isFile()) return reject(new Error(`The file could not be found: $***REMOVED***file***REMOVED***`));
          fs.readFile(file, (err2, data) => ***REMOVED***
            if (err2) reject(err2);
            else resolve(data);
          ***REMOVED***);
          return null;
        ***REMOVED***);
      ***REMOVED***);
    ***REMOVED*** else if (resource && resource.pipe && typeof resource.pipe === 'function') ***REMOVED***
      return new Promise((resolve, reject) => ***REMOVED***
        const buffers = [];
        resource.once('error', reject);
        resource.on('data', data => buffers.push(data));
        resource.once('end', () => resolve(Buffer.concat(buffers)));
      ***REMOVED***);
    ***REMOVED***

    return Promise.reject(new TypeError('The resource must be a string or Buffer.'));
  ***REMOVED***

  /**
   * Data that can be resolved to give an emoji identifier. This can be:
   * * The unicode representation of an emoji
   * * A custom emoji ID
   * * An Emoji object
   * * A ReactionEmoji object
   * @typedef ***REMOVED***string|Emoji|ReactionEmoji***REMOVED*** EmojiIdentifierResolvable
   */

  /**
   * Resolves an EmojiResolvable to an emoji identifier.
   * @param ***REMOVED***EmojiIdentifierResolvable***REMOVED*** emoji The emoji resolvable to resolve
   * @returns ***REMOVED***?string***REMOVED***
   */
  resolveEmojiIdentifier(emoji) ***REMOVED***
    if (emoji instanceof Emoji || emoji instanceof ReactionEmoji) return emoji.identifier;
    if (typeof emoji === 'string') ***REMOVED***
      if (this.client.emojis.has(emoji)) return this.client.emojis.get(emoji).identifier;
      else if (!emoji.includes('%')) return encodeURIComponent(emoji);
      else return emoji;
    ***REMOVED***
    return null;
  ***REMOVED***

  /**
   * Can be a Hex Literal, Hex String, Number, RGB Array, or one of the following
   * ```
   * [
   *   'DEFAULT',
   *   'WHITE',
   *   'AQUA',
   *   'GREEN',
   *   'BLUE',
   *   'PURPLE',
   *   'LUMINOUS_VIVID_PINK',
   *   'GOLD',
   *   'ORANGE',
   *   'RED',
   *   'GREY',
   *   'DARKER_GREY',
   *   'NAVY',
   *   'DARK_AQUA',
   *   'DARK_GREEN',
   *   'DARK_BLUE',
   *   'DARK_PURPLE',
   *   'DARK_VIVID_PINK',
   *   'DARK_GOLD',
   *   'DARK_ORANGE',
   *   'DARK_RED',
   *   'DARK_GREY',
   *   'LIGHT_GREY',
   *   'DARK_NAVY',
   *   'RANDOM',
   * ]
   * ```
   * or something like
   * ```
   * [255, 0, 255]
   * ```
   * for purple
   * @typedef ***REMOVED***string|number|Array***REMOVED*** ColorResolvable
   */

  /**
   * Resolves a ColorResolvable into a color number.
   * @param ***REMOVED***ColorResolvable***REMOVED*** color Color to resolve
   * @returns ***REMOVED***number***REMOVED*** A color
   */
  static resolveColor(color) ***REMOVED***
    if (typeof color === 'string') ***REMOVED***
      if (color === 'RANDOM') return Math.floor(Math.random() * (0xFFFFFF + 1));
      if (color === 'DEFAULT') return 0;
      color = Constants.Colors[color] || parseInt(color.replace('#', ''), 16);
    ***REMOVED*** else if (color instanceof Array) ***REMOVED***
      color = (color[0] << 16) + (color[1] << 8) + color[2];
    ***REMOVED***

    if (color < 0 || color > 0xFFFFFF) ***REMOVED***
      throw new RangeError('Color must be within the range 0 - 16777215 (0xFFFFFF).');
    ***REMOVED*** else if (color && isNaN(color)) ***REMOVED***
      throw new TypeError('Unable to convert color to a number.');
    ***REMOVED***

    return color;
  ***REMOVED***

  /**
   * @param ***REMOVED***ColorResolvable***REMOVED*** color Color to resolve
   * @returns ***REMOVED***number***REMOVED*** A color
   */
  resolveColor(color) ***REMOVED***
    return this.constructor.resolveColor(color);
  ***REMOVED***
***REMOVED***

module.exports = ClientDataResolver;
