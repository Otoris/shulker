const EventEmitter = require('events').EventEmitter;
const Constants = require('../../util/Constants');
const WebSocketConnection = require('./WebSocketConnection');

/**
 * WebSocket Manager of the client.
 * @private
 */
class WebSocketManager extends EventEmitter ***REMOVED***
  constructor(client) ***REMOVED***
    super();
    /**
     * The client that instantiated this WebSocketManager
     * @type ***REMOVED***Client***REMOVED***
     */
    this.client = client;

    /**
     * The WebSocket connection of this manager
     * @type ***REMOVED***?WebSocketConnection***REMOVED***
     */
    this.connection = null;
  ***REMOVED***

  /**
   * Sends a heartbeat on the available connection.
   * @returns ***REMOVED***void***REMOVED***
   */
  heartbeat() ***REMOVED***
    if (!this.connection) return this.debug('No connection to heartbeat');
    return this.connection.heartbeat();
  ***REMOVED***

  /**
   * Emits a debug event.
   * @param ***REMOVED***string***REMOVED*** message Debug message
   * @returns ***REMOVED***void***REMOVED***
   */
  debug(message) ***REMOVED***
    return this.client.emit('debug', `[ws] $***REMOVED***message***REMOVED***`);
  ***REMOVED***

  /**
   * Destroy the client.
   * @returns ***REMOVED***void***REMOVED*** Whether or not destruction was successful
   */
  destroy() ***REMOVED***
    if (!this.connection) ***REMOVED***
      this.debug('Attempted to destroy WebSocket but no connection exists!');
      return false;
    ***REMOVED***
    return this.connection.destroy();
  ***REMOVED***

  /**
   * Send a packet on the available WebSocket.
   * @param ***REMOVED***Object***REMOVED*** packet Packet to send
   * @returns ***REMOVED***void***REMOVED***
   */
  send(packet) ***REMOVED***
    if (!this.connection) ***REMOVED***
      this.debug('No connection to websocket');
      return;
    ***REMOVED***
    this.connection.send(packet);
  ***REMOVED***

  /**
   * Connects the client to a gateway.
   * @param ***REMOVED***string***REMOVED*** gateway The gateway to connect to
   * @returns ***REMOVED***boolean***REMOVED***
   */
  connect(gateway) ***REMOVED***
    if (!this.connection) ***REMOVED***
      this.connection = new WebSocketConnection(this, gateway);
      return true;
    ***REMOVED***
    switch (this.connection.status) ***REMOVED***
      case Constants.Status.IDLE:
      case Constants.Status.DISCONNECTED:
        this.connection.connect(gateway, 5500);
        return true;
      default:
        this.debug(`Couldn't connect to $***REMOVED***gateway***REMOVED*** as the websocket is at state $***REMOVED***this.connection.status***REMOVED***`);
        return false;
    ***REMOVED***
  ***REMOVED***
***REMOVED***

module.exports = WebSocketManager;
