const AbstractHandler = require('./AbstractHandler');
const Constants = require('../../../../util/Constants');

class TypingStartHandler extends AbstractHandler ***REMOVED***
  handle(packet) ***REMOVED***
    const client = this.packetManager.client;
    const data = packet.d;
    const channel = client.channels.get(data.channel_id);
    const user = client.users.get(data.user_id);
    const timestamp = new Date(data.timestamp * 1000);

    if (channel && user) ***REMOVED***
      if (channel.type === 'voice') ***REMOVED***
        client.emit(Constants.Events.WARN, `Discord sent a typing packet to voice channel $***REMOVED***channel.id***REMOVED***`);
        return;
      ***REMOVED***
      if (channel._typing.has(user.id)) ***REMOVED***
        const typing = channel._typing.get(user.id);
        typing.lastTimestamp = timestamp;
        typing.resetTimeout(tooLate(channel, user));
      ***REMOVED*** else ***REMOVED***
        channel._typing.set(user.id, new TypingData(client, timestamp, timestamp, tooLate(channel, user)));
        client.emit(Constants.Events.TYPING_START, channel, user);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***

class TypingData ***REMOVED***
  constructor(client, since, lastTimestamp, _timeout) ***REMOVED***
    this.client = client;
    this.since = since;
    this.lastTimestamp = lastTimestamp;
    this._timeout = _timeout;
  ***REMOVED***

  resetTimeout(_timeout) ***REMOVED***
    this.client.clearTimeout(this._timeout);
    this._timeout = _timeout;
  ***REMOVED***

  get elapsedTime() ***REMOVED***
    return Date.now() - this.since;
  ***REMOVED***
***REMOVED***

function tooLate(channel, user) ***REMOVED***
  return channel.client.setTimeout(() => ***REMOVED***
    channel.client.emit(Constants.Events.TYPING_STOP, channel, user, channel._typing.get(user.id));
    channel._typing.delete(user.id);
  ***REMOVED***, 6000);
***REMOVED***

/**
 * Emitted whenever a user starts typing in a channel.
 * @event Client#typingStart
 * @param ***REMOVED***Channel***REMOVED*** channel The channel the user started typing in
 * @param ***REMOVED***User***REMOVED*** user The user that started typing
 */

/**
 * Emitted whenever a user stops typing in a channel.
 * @event Client#typingStop
 * @param ***REMOVED***Channel***REMOVED*** channel The channel the user stopped typing in
 * @param ***REMOVED***User***REMOVED*** user The user that stopped typing
 */

module.exports = TypingStartHandler;
