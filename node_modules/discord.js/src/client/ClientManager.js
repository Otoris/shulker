const Constants = require('../util/Constants');
const WebSocketConnection = require('./websocket/WebSocketConnection');

/**
 * Manages the state and background tasks of the client.
 * @private
 */
class ClientManager ***REMOVED***
  constructor(client) ***REMOVED***
    /**
     * The client that instantiated this Manager
     * @type ***REMOVED***Client***REMOVED***
     */
    this.client = client;

    /**
     * The heartbeat interval
     * @type ***REMOVED***?number***REMOVED***
     */
    this.heartbeatInterval = null;
  ***REMOVED***

  /**
   * The status of the client
   * @type ***REMOVED***number***REMOVED***
   */
  get status() ***REMOVED***
    return this.connection ? this.connection.status : Constants.Status.IDLE;
  ***REMOVED***

  /**
   * Connects the client to the WebSocket.
   * @param ***REMOVED***string***REMOVED*** token The authorization token
   * @param ***REMOVED***Function***REMOVED*** resolve Function to run when connection is successful
   * @param ***REMOVED***Function***REMOVED*** reject Function to run when connection fails
   */
  connectToWebSocket(token, resolve, reject) ***REMOVED***
    this.client.emit(Constants.Events.DEBUG, `Authenticated using token $***REMOVED***token***REMOVED***`);
    this.client.token = token;
    const timeout = this.client.setTimeout(() => reject(new Error(Constants.Errors.TOOK_TOO_LONG)), 1000 * 300);
    this.client.rest.methods.getGateway().then(res => ***REMOVED***
      const protocolVersion = Constants.DefaultOptions.ws.version;
      const gateway = `$***REMOVED***res.url***REMOVED***/?v=$***REMOVED***protocolVersion***REMOVED***&encoding=$***REMOVED***WebSocketConnection.ENCODING***REMOVED***`;
      this.client.emit(Constants.Events.DEBUG, `Using gateway $***REMOVED***gateway***REMOVED***`);
      this.client.ws.connect(gateway);
      this.client.ws.connection.once('error', reject);
      this.client.ws.connection.once('close', event => ***REMOVED***
        if (event.code === 4004) reject(new Error(Constants.Errors.BAD_LOGIN));
        if (event.code === 4010) reject(new Error(Constants.Errors.INVALID_SHARD));
        if (event.code === 4011) reject(new Error(Constants.Errors.SHARDING_REQUIRED));
      ***REMOVED***);
      this.client.once(Constants.Events.READY, () => ***REMOVED***
        resolve(token);
        this.client.clearTimeout(timeout);
      ***REMOVED***);
    ***REMOVED***, reject);
  ***REMOVED***

  destroy() ***REMOVED***
    this.client.ws.destroy();
    this.client.rest.destroy();
    if (!this.client.user) return Promise.resolve();
    if (this.client.user.bot) ***REMOVED***
      this.client.token = null;
      return Promise.resolve();
    ***REMOVED*** else ***REMOVED***
      return this.client.rest.methods.logout().then(() => ***REMOVED***
        this.client.token = null;
      ***REMOVED***);
    ***REMOVED***
  ***REMOVED***
***REMOVED***

module.exports = ClientManager;
