const UserAgentManager = require('./UserAgentManager');
const RESTMethods = require('./RESTMethods');
const SequentialRequestHandler = require('./RequestHandlers/Sequential');
const BurstRequestHandler = require('./RequestHandlers/Burst');
const APIRequest = require('./APIRequest');
const Constants = require('../../util/Constants');

class RESTManager ***REMOVED***
  constructor(client) ***REMOVED***
    this.client = client;
    this.handlers = ***REMOVED******REMOVED***;
    this.userAgentManager = new UserAgentManager(this);
    this.methods = new RESTMethods(this);
    this.rateLimitedEndpoints = ***REMOVED******REMOVED***;
    this.globallyRateLimited = false;
  ***REMOVED***

  destroy() ***REMOVED***
    for (const handlerKey of Object.keys(this.handlers)) ***REMOVED***
      const handler = this.handlers[handlerKey];
      if (handler.destroy) handler.destroy();
    ***REMOVED***
  ***REMOVED***

  push(handler, apiRequest) ***REMOVED***
    return new Promise((resolve, reject) => ***REMOVED***
      handler.push(***REMOVED***
        request: apiRequest,
        resolve,
        reject,
        retries: 0,
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***

  getRequestHandler() ***REMOVED***
    switch (this.client.options.apiRequestMethod) ***REMOVED***
      case 'sequential':
        return SequentialRequestHandler;
      case 'burst':
        return BurstRequestHandler;
      default:
        throw new Error(Constants.Errors.INVALID_RATE_LIMIT_METHOD);
    ***REMOVED***
  ***REMOVED***

  makeRequest(method, url, auth, data, file, reason) ***REMOVED***
    const apiRequest = new APIRequest(this, method, url, auth, data, file, reason);
    if (!this.handlers[apiRequest.route]) ***REMOVED***
      const RequestHandlerType = this.getRequestHandler();
      this.handlers[apiRequest.route] = new RequestHandlerType(this, apiRequest.route);
    ***REMOVED***

    return this.push(this.handlers[apiRequest.route], apiRequest);
  ***REMOVED***
***REMOVED***

module.exports = RESTManager;
