/**
 * Represents an error from the Discord API.
 * @extends Error
 */
class DiscordAPIError extends Error ***REMOVED***
  constructor(path, error, method) ***REMOVED***
    super();
    const flattened = this.constructor.flattenErrors(error.errors || error).join('\n');
    this.name = 'DiscordAPIError';
    this.message = error.message && flattened ? `$***REMOVED***error.message***REMOVED***\n$***REMOVED***flattened***REMOVED***` : error.message || flattened;

    /**
     * The path of the request relative to the HTTP endpoint
     * @type ***REMOVED***string***REMOVED***
     */
    this.path = path;

    /**
     * HTTP error code returned by Discord
     * @type ***REMOVED***number***REMOVED***
     */
    this.code = error.code;

    /**
     * The HTTP method used for the request
     * @type ***REMOVED***string***REMOVED***
     */
    this.method = method;
  ***REMOVED***

  /**
   * Flattens an errors object returned from the API into an array.
   * @param ***REMOVED***Object***REMOVED*** obj Discord errors object
   * @param ***REMOVED***string***REMOVED*** [key] Used internally to determine key names of nested fields
   * @returns ***REMOVED***string[]***REMOVED***
   * @private
   */
  static flattenErrors(obj, key = '') ***REMOVED***
    let messages = [];

    for (const k of Object.keys(obj)) ***REMOVED***
      if (k === 'message') continue;
      const newKey = key ? isNaN(k) ? `$***REMOVED***key***REMOVED***.$***REMOVED***k***REMOVED***` : `$***REMOVED***key***REMOVED***[$***REMOVED***k***REMOVED***]` : k;

      if (obj[k]._errors) ***REMOVED***
        messages.push(`$***REMOVED***newKey***REMOVED***: $***REMOVED***obj[k]._errors.map(e => e.message).join(' ')***REMOVED***`);
      ***REMOVED*** else if (obj[k].code || obj[k].message) ***REMOVED***
        messages.push(`$***REMOVED***obj[k].code ? `$***REMOVED***obj[k].code***REMOVED***: ` : ''***REMOVED***: $***REMOVED***obj[k].message***REMOVED***`.trim());
      ***REMOVED*** else if (typeof obj[k] === 'string') ***REMOVED***
        messages.push(obj[k]);
      ***REMOVED*** else ***REMOVED***
        messages = messages.concat(this.flattenErrors(obj[k], newKey));
      ***REMOVED***
    ***REMOVED***

    return messages;
  ***REMOVED***
***REMOVED***

module.exports = DiscordAPIError;
