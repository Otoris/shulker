const EventEmitter = require('events');

/**
 * An interface class for volume transformation.
 * @extends ***REMOVED***EventEmitter***REMOVED***
 */
class VolumeInterface extends EventEmitter ***REMOVED***
  constructor(***REMOVED*** volume = 1 ***REMOVED*** = ***REMOVED******REMOVED***) ***REMOVED***
    super();
    this.setVolume(volume);
  ***REMOVED***

  /**
   * The current volume of the broadcast
   * @readonly
   * @type ***REMOVED***number***REMOVED***
   */
  get volume() ***REMOVED***
    return this._volume;
  ***REMOVED***

  /**
   * The current volume of the broadcast in decibels
   * @readonly
   * @type ***REMOVED***number***REMOVED***
   */
  get volumeDecibels() ***REMOVED***
    return Math.log10(this._volume) * 20;
  ***REMOVED***

  /**
   * The current volume of the broadcast from a logarithmic scale
   * @readonly
   * @type ***REMOVED***number***REMOVED***
   */
  get volumeLogarithmic() ***REMOVED***
    return Math.pow(this._volume, 1 / 1.660964);
  ***REMOVED***

  applyVolume(buffer, volume) ***REMOVED***
    volume = volume || this._volume;
    if (volume === 1) return buffer;

    const out = Buffer.alloc(buffer.length);
    for (let i = 0; i < buffer.length; i += 2) ***REMOVED***
      if (i >= buffer.length - 1) break;
      const uint = Math.min(32767, Math.max(-32767, Math.floor(volume * buffer.readInt16LE(i))));
      out.writeInt16LE(uint, i);
    ***REMOVED***

    return out;
  ***REMOVED***

  /**
   * Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.
   * @param ***REMOVED***number***REMOVED*** volume The volume that you want to set
   */
  setVolume(volume) ***REMOVED***
    /**
     * Emitted when the volume of this interface changes.
     * @event VolumeInterface#volumeChange
     * @param ***REMOVED***number***REMOVED*** oldVolume The old volume of this interface
     * @param ***REMOVED***number***REMOVED*** newVolume The new volume of this interface
     */
    this.emit('volumeChange', this._volume, volume);
    this._volume = volume;
  ***REMOVED***

  /**
   * Set the volume in decibels.
   * @param ***REMOVED***number***REMOVED*** db The decibels
   */
  setVolumeDecibels(db) ***REMOVED***
    this.setVolume(Math.pow(10, db / 20));
  ***REMOVED***

  /**
   * Set the volume so that a perceived value of 0.5 is half the perceived volume etc.
   * @param ***REMOVED***number***REMOVED*** value The value for the volume
   */
  setVolumeLogarithmic(value) ***REMOVED***
    this.setVolume(Math.pow(value, 1.660964));
  ***REMOVED***
***REMOVED***

module.exports = VolumeInterface;
