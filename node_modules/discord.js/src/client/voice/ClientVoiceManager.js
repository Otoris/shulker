const Collection = require('../../util/Collection');
const VoiceConnection = require('./VoiceConnection');

/**
 * Manages all the voice stuff for the client.
 * @private
 */
class ClientVoiceManager ***REMOVED***
  constructor(client) ***REMOVED***
    /**
     * The client that instantiated this voice manager
     * @type ***REMOVED***Client***REMOVED***
     */
    this.client = client;

    /**
     * A collection mapping connection IDs to the Connection objects
     * @type ***REMOVED***Collection<Snowflake, VoiceConnection>***REMOVED***
     */
    this.connections = new Collection();

    this.client.on('self.voiceServer', this.onVoiceServer.bind(this));
    this.client.on('self.voiceStateUpdate', this.onVoiceStateUpdate.bind(this));
  ***REMOVED***

  onVoiceServer(***REMOVED*** guild_id, token, endpoint ***REMOVED***) ***REMOVED***
    const connection = this.connections.get(guild_id);
    if (connection) connection.setTokenAndEndpoint(token, endpoint);
  ***REMOVED***

  onVoiceStateUpdate(***REMOVED*** guild_id, session_id, channel_id ***REMOVED***) ***REMOVED***
    const connection = this.connections.get(guild_id);
    if (!connection) return;
    if (!channel_id) ***REMOVED***
      connection._disconnect();
      this.connections.delete(guild_id);
      return;
    ***REMOVED***

    connection.channel = this.client.channels.get(channel_id);
    connection.setSessionID(session_id);
  ***REMOVED***

  /**
   * Sets up a request to join a voice channel.
   * @param ***REMOVED***VoiceChannel***REMOVED*** channel The voice channel to join
   * @returns ***REMOVED***Promise<VoiceConnection>***REMOVED***
   */
  joinChannel(channel) ***REMOVED***
    return new Promise((resolve, reject) => ***REMOVED***
      if (!channel.joinable) ***REMOVED***
        if (channel.full) ***REMOVED***
          throw new Error('You do not have permission to join this voice channel; it is full.');
        ***REMOVED*** else ***REMOVED***
          throw new Error('You do not have permission to join this voice channel.');
        ***REMOVED***
      ***REMOVED***

      let connection = this.connections.get(channel.guild.id);

      if (connection) ***REMOVED***
        if (connection.channel.id !== channel.id) ***REMOVED***
          this.connections.get(channel.guild.id).updateChannel(channel);
        ***REMOVED***
        resolve(connection);
        return;
      ***REMOVED*** else ***REMOVED***
        connection = new VoiceConnection(this, channel);
        this.connections.set(channel.guild.id, connection);
      ***REMOVED***

      connection.once('failed', reason => ***REMOVED***
        this.connections.delete(channel.guild.id);
        reject(reason);
      ***REMOVED***);

      connection.once('authenticated', () => ***REMOVED***
        connection.once('ready', () => resolve(connection));
        connection.once('error', reject);
        connection.once('disconnect', () => this.connections.delete(channel.guild.id));
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***
***REMOVED***

module.exports = ClientVoiceManager;
