const EventEmitter = require('events').EventEmitter;
const Prism = require('prism-media');
const StreamDispatcher = require('../dispatcher/StreamDispatcher');
const Collection = require('../../../util/Collection');
const OpusEncoders = require('../opus/OpusEngineList');

const ffmpegArguments = [
  '-analyzeduration', '0',
  '-loglevel', '0',
  '-f', 's16le',
  '-ar', '48000',
  '-ac', '2',
];

/**
 * An Audio Player for a Voice Connection.
 * @private
 * @extends ***REMOVED***EventEmitter***REMOVED***
 */
class AudioPlayer extends EventEmitter ***REMOVED***
  constructor(voiceConnection) ***REMOVED***
    super();
    /**
     * The voice connection that the player serves
     * @type ***REMOVED***VoiceConnection***REMOVED***
     */
    this.voiceConnection = voiceConnection;
    /**
     * The prism transcoder that the player uses
     * @type ***REMOVED***Prism***REMOVED***
     */
    this.prism = new Prism();
    this.streams = new Collection();
    this.currentStream = ***REMOVED******REMOVED***;
    this.streamingData = ***REMOVED***
      channels: 2,
      count: 0,
      sequence: 0,
      timestamp: 0,
      pausedTime: 0,
    ***REMOVED***;
    this.voiceConnection.once('closing', () => this.destroyCurrentStream());
  ***REMOVED***

  /**
   * The current transcoder
   * @type ***REMOVED***?Object***REMOVED***
   * @readonly
   */
  get transcoder() ***REMOVED***
    return this.currentStream.transcoder;
  ***REMOVED***

  /**
   * The current dispatcher
   * @type ***REMOVED***?StreamDispatcher***REMOVED***
   * @readonly
   */
  get dispatcher() ***REMOVED***
    return this.currentStream.dispatcher;
  ***REMOVED***

  destroy() ***REMOVED***
    if (this.opusEncoder) this.opusEncoder.destroy();
    this.opusEncoder = null;
  ***REMOVED***

  destroyCurrentStream() ***REMOVED***
    const transcoder = this.transcoder;
    const dispatcher = this.dispatcher;
    if (transcoder) transcoder.kill();
    if (dispatcher) ***REMOVED***
      const end = dispatcher.listeners('end')[0];
      const error = dispatcher.listeners('error')[0];
      if (end) dispatcher.removeListener('end', end);
      if (error) dispatcher.removeListener('error', error);
      dispatcher.destroy('end');
    ***REMOVED***
    this.currentStream = ***REMOVED******REMOVED***;
  ***REMOVED***

  /**
   * Set the bitrate of the current Opus encoder.
   * @param ***REMOVED***number***REMOVED*** value New bitrate, in kbps
   * If set to 'auto', the voice channel's bitrate will be used
   */
  setBitrate(value) ***REMOVED***
    if (!value) return;
    if (!this.opusEncoder) return;
    const bitrate = value === 'auto' ? this.voiceConnection.channel.bitrate : value;
    this.opusEncoder.setBitrate(bitrate);
  ***REMOVED***

  playUnknownStream(stream, options = ***REMOVED******REMOVED***) ***REMOVED***
    this.destroy();
    this.opusEncoder = OpusEncoders.fetch(options);
    const transcoder = this.prism.transcode(***REMOVED***
      type: 'ffmpeg',
      media: stream,
      ffmpegArguments: ffmpegArguments.concat(['-ss', String(options.seek || 0)]),
    ***REMOVED***);
    this.destroyCurrentStream();
    this.currentStream = ***REMOVED***
      transcoder: transcoder,
      output: transcoder.output,
      input: stream,
    ***REMOVED***;
    transcoder.on('error', e => ***REMOVED***
      this.destroyCurrentStream();
      if (this.listenerCount('error') > 0) this.emit('error', e);
      this.emit('warn', `prism transcoder error - $***REMOVED***e***REMOVED***`);
    ***REMOVED***);
    return this.playPCMStream(transcoder.output, options, true);
  ***REMOVED***

  playPCMStream(stream, options = ***REMOVED******REMOVED***, fromUnknown = false) ***REMOVED***
    this.destroy();
    this.opusEncoder = OpusEncoders.fetch(options);
    this.setBitrate(options.bitrate);
    const dispatcher = this.createDispatcher(stream, options);
    if (fromUnknown) ***REMOVED***
      this.currentStream.dispatcher = dispatcher;
    ***REMOVED*** else ***REMOVED***
      this.destroyCurrentStream();
      this.currentStream = ***REMOVED***
        dispatcher,
        input: stream,
        output: stream,
      ***REMOVED***;
    ***REMOVED***
    return dispatcher;
  ***REMOVED***

  playOpusStream(stream, options = ***REMOVED******REMOVED***) ***REMOVED***
    options.opus = true;
    this.destroyCurrentStream();
    const dispatcher = this.createDispatcher(stream, options);
    this.currentStream = ***REMOVED***
      dispatcher,
      input: stream,
      output: stream,
    ***REMOVED***;
    return dispatcher;
  ***REMOVED***

  playBroadcast(broadcast, options) ***REMOVED***
    this.destroyCurrentStream();
    const dispatcher = this.createDispatcher(broadcast, options);
    this.currentStream = ***REMOVED***
      dispatcher,
      broadcast,
      input: broadcast,
      output: broadcast,
    ***REMOVED***;
    broadcast.registerDispatcher(dispatcher);
    return dispatcher;
  ***REMOVED***

  createDispatcher(stream, ***REMOVED*** seek = 0, volume = 1, passes = 1, opus ***REMOVED*** = ***REMOVED******REMOVED***) ***REMOVED***
    const options = ***REMOVED*** seek, volume, passes, opus ***REMOVED***;

    const dispatcher = new StreamDispatcher(this, stream, options);
    dispatcher.on('end', () => this.destroyCurrentStream());
    dispatcher.on('error', () => this.destroyCurrentStream());
    dispatcher.on('speaking', value => this.voiceConnection.setSpeaking(value));
    return dispatcher;
  ***REMOVED***
***REMOVED***

module.exports = AudioPlayer;
