const Constants = require('../util/Constants');
const Util = require('../util/Util');
const Guild = require('../structures/Guild');
const User = require('../structures/User');
const Emoji = require('../structures/Emoji');
const GuildChannel = require('../structures/GuildChannel');
const TextChannel = require('../structures/TextChannel');
const VoiceChannel = require('../structures/VoiceChannel');
const CategoryChannel = require('../structures/CategoryChannel');
const NewsChannel = require('../structures/NewsChannel');
const StoreChannel = require('../structures/StoreChannel');
const DMChannel = require('../structures/DMChannel');
const GroupDMChannel = require('../structures/GroupDMChannel');

class ClientDataManager ***REMOVED***
  constructor(client) ***REMOVED***
    this.client = client;
  ***REMOVED***

  get pastReady() ***REMOVED***
    return this.client.ws.connection.status === Constants.Status.READY;
  ***REMOVED***

  newGuild(data) ***REMOVED***
    const already = this.client.guilds.has(data.id);
    const guild = new Guild(this.client, data);
    this.client.guilds.set(guild.id, guild);
    if (this.pastReady && !already) ***REMOVED***
      /**
       * Emitted whenever the client joins a guild.
       * @event Client#guildCreate
       * @param ***REMOVED***Guild***REMOVED*** guild The created guild
       */
      if (this.client.options.fetchAllMembers) ***REMOVED***
        guild.fetchMembers().then(() => ***REMOVED*** this.client.emit(Constants.Events.GUILD_CREATE, guild); ***REMOVED***);
      ***REMOVED*** else ***REMOVED***
        this.client.emit(Constants.Events.GUILD_CREATE, guild);
      ***REMOVED***
    ***REMOVED***

    return guild;
  ***REMOVED***

  newUser(data, cache = true) ***REMOVED***
    if (this.client.users.has(data.id)) return this.client.users.get(data.id);
    const user = new User(this.client, data);
    if (cache) this.client.users.set(user.id, user);
    return user;
  ***REMOVED***

  newChannel(data, guild) ***REMOVED***
    const already = this.client.channels.has(data.id);
    let channel;
    if (data.type === Constants.ChannelTypes.DM) ***REMOVED***
      channel = new DMChannel(this.client, data);
    ***REMOVED*** else if (data.type === Constants.ChannelTypes.GROUP_DM) ***REMOVED***
      channel = new GroupDMChannel(this.client, data);
    ***REMOVED*** else ***REMOVED***
      guild = guild || this.client.guilds.get(data.guild_id);
      if (already) ***REMOVED***
        channel = this.client.channels.get(data.id);
      ***REMOVED*** else if (guild) ***REMOVED***
        switch (data.type) ***REMOVED***
          case Constants.ChannelTypes.TEXT:
            channel = new TextChannel(guild, data);
            break;
          case Constants.ChannelTypes.VOICE:
            channel = new VoiceChannel(guild, data);
            break;
          case Constants.ChannelTypes.CATEGORY:
            channel = new CategoryChannel(guild, data);
            break;
          case Constants.ChannelTypes.NEWS:
            channel = new NewsChannel(guild, data);
            break;
          case Constants.ChannelTypes.STORE:
            channel = new StoreChannel(guild, data);
            break;
        ***REMOVED***

        guild.channels.set(channel.id, channel);
      ***REMOVED***
    ***REMOVED***

    if (channel && !already) ***REMOVED***
      if (this.pastReady) this.client.emit(Constants.Events.CHANNEL_CREATE, channel);
      this.client.channels.set(channel.id, channel);
      return channel;
    ***REMOVED*** else if (already) ***REMOVED***
      return channel;
    ***REMOVED***

    return null;
  ***REMOVED***

  newEmoji(data, guild) ***REMOVED***
    const already = guild.emojis.has(data.id);
    if (data && !already) ***REMOVED***
      let emoji = new Emoji(guild, data);
      this.client.emit(Constants.Events.GUILD_EMOJI_CREATE, emoji);
      guild.emojis.set(emoji.id, emoji);
      return emoji;
    ***REMOVED*** else if (already) ***REMOVED***
      return guild.emojis.get(data.id);
    ***REMOVED***

    return null;
  ***REMOVED***

  killEmoji(emoji) ***REMOVED***
    if (!(emoji instanceof Emoji && emoji.guild)) return;
    this.client.emit(Constants.Events.GUILD_EMOJI_DELETE, emoji);
    emoji.guild.emojis.delete(emoji.id);
  ***REMOVED***

  killGuild(guild) ***REMOVED***
    const already = this.client.guilds.has(guild.id);
    this.client.guilds.delete(guild.id);
    if (already && this.pastReady) this.client.emit(Constants.Events.GUILD_DELETE, guild);
  ***REMOVED***

  killUser(user) ***REMOVED***
    this.client.users.delete(user.id);
  ***REMOVED***

  killChannel(channel) ***REMOVED***
    this.client.channels.delete(channel.id);
    if (channel instanceof GuildChannel) channel.guild.channels.delete(channel.id);
  ***REMOVED***

  updateGuild(currentGuild, newData) ***REMOVED***
    const oldGuild = Util.cloneObject(currentGuild);
    currentGuild.setup(newData);
    if (this.pastReady) this.client.emit(Constants.Events.GUILD_UPDATE, oldGuild, currentGuild);
  ***REMOVED***

  updateChannel(currentChannel, newData) ***REMOVED***
    currentChannel.setup(newData);
  ***REMOVED***

  updateEmoji(currentEmoji, newData) ***REMOVED***
    const oldEmoji = Util.cloneObject(currentEmoji);
    currentEmoji.setup(newData);
    this.client.emit(Constants.Events.GUILD_EMOJI_UPDATE, oldEmoji, currentEmoji);
    return currentEmoji;
  ***REMOVED***
***REMOVED***

module.exports = ClientDataManager;
