const TextBasedChannel = require('./interfaces/TextBasedChannel');
const Role = require('./Role');
const Permissions = require('../util/Permissions');
const Collection = require('../util/Collection');
const ***REMOVED*** Presence ***REMOVED*** = require('./Presence');
const util = require('util');

/**
 * Represents a member of a guild on Discord.
 * @implements ***REMOVED***TextBasedChannel***REMOVED***
 */
class GuildMember ***REMOVED***
  constructor(guild, data) ***REMOVED***
    /**
     * The client that instantiated this GuildMember
     * @name GuildMember#client
     * @type ***REMOVED***Client***REMOVED***
     * @readonly
     */
    Object.defineProperty(this, 'client', ***REMOVED*** value: guild.client ***REMOVED***);

    /**
     * The guild that this member is part of
     * @type ***REMOVED***Guild***REMOVED***
     */
    this.guild = guild;

    /**
     * The user that this member instance Represents
     * @type ***REMOVED***User***REMOVED***
     */
    this.user = ***REMOVED******REMOVED***;

    /**
     * The timestamp this member joined the guild at
     * @type ***REMOVED***number***REMOVED***
     */
    this.joinedTimestamp = null;

    /**
     * The timestamp of when the member used their Nitro boost on the guild, if it was used
     * @type ***REMOVED***?number***REMOVED***
     */
    this.premiumSinceTimestamp = null;

    this._roles = [];
    if (data) this.setup(data);

    /**
     * The ID of the last message sent by this member in their guild, if one was sent
     * @type ***REMOVED***?Snowflake***REMOVED***
     */
    this.lastMessageID = null;

    /**
     * The Message object of the last message sent by this member in their guild, if one was sent
     * @type ***REMOVED***?Message***REMOVED***
     */
    this.lastMessage = null;

    /**
     * Whether the member has been removed from the guild
     * @type ***REMOVED***boolean***REMOVED***
     */
    this.deleted = false;
  ***REMOVED***

  setup(data) ***REMOVED***
    /**
     * Whether this member is deafened server-wide
     * @type ***REMOVED***boolean***REMOVED***
     */
    this.serverDeaf = data.deaf;

    /**
     * Whether this member is muted server-wide
     * @type ***REMOVED***boolean***REMOVED***
     */
    this.serverMute = data.mute;

    /**
     * Whether this member is self-muted
     * @type ***REMOVED***boolean***REMOVED***
     */
    this.selfMute = data.self_mute;

    /**
     * Whether this member is self-deafened
     * @type ***REMOVED***boolean***REMOVED***
     */
    this.selfDeaf = data.self_deaf;

    /**
     * Whether this member is streaming using "Go Live"
     * @type ***REMOVED***boolean***REMOVED***
     */
    this.selfStream = data.self_stream || false;

    /**
     * The voice session ID of this member, if any
     * @type ***REMOVED***?Snowflake***REMOVED***
     */
    this.voiceSessionID = data.session_id;

    /**
     * The voice channel ID of this member, if any
     * @type ***REMOVED***?Snowflake***REMOVED***
     */
    this.voiceChannelID = data.channel_id;

    /**
     * Whether this member is speaking and the client is in the same channel
     * @type ***REMOVED***boolean***REMOVED***
     */
    this.speaking = false;

    /**
     * The nickname of this member, if they have one
     * @type ***REMOVED***?string***REMOVED***
     */
    this.nickname = data.nick || null;

    if (data.joined_at) this.joinedTimestamp = new Date(data.joined_at).getTime();
    if (data.premium_since) this.premiumSinceTimestamp = new Date(data.premium_since).getTime();

    this.user = data.user;
    this._roles = data.roles;
  ***REMOVED***

  /**
   * The time this member joined the guild
   * @type ***REMOVED***?Date***REMOVED***
   * @readonly
   */
  get joinedAt() ***REMOVED***
    return this.joinedTimestamp ? new Date(this.joinedTimestamp) : null;
  ***REMOVED***

  /**
   * The time of when the member used their Nitro boost on the guild, if it was used
   * @type ***REMOVED***?Date***REMOVED***
   * @readonly
   */
  get premiumSince() ***REMOVED***
    return this.premiumSinceTimestamp ? new Date(this.premiumSinceTimestamp) : null;
  ***REMOVED***

  /**
   * The presence of this member
   * @type ***REMOVED***Presence***REMOVED***
   * @readonly
   */
  get presence() ***REMOVED***
    return this.frozenPresence || this.guild.presences.get(this.id) || new Presence(undefined, this.client);
  ***REMOVED***

  /**
   * A list of roles that are applied to this member, mapped by the role ID
   * @type ***REMOVED***Collection<Snowflake, Role>***REMOVED***
   * @readonly
   */
  get roles() ***REMOVED***
    const list = new Collection();
    const everyoneRole = this.guild.roles.get(this.guild.id);

    if (everyoneRole) list.set(everyoneRole.id, everyoneRole);

    for (const roleID of this._roles) ***REMOVED***
      const role = this.guild.roles.get(roleID);
      if (role) list.set(role.id, role);
    ***REMOVED***

    return list;
  ***REMOVED***

  /**
   * The role of this member with the highest position
   * @type ***REMOVED***Role***REMOVED***
   * @readonly
   */
  get highestRole() ***REMOVED***
    return this.roles.reduce((prev, role) => !prev || role.comparePositionTo(prev) > 0 ? role : prev);
  ***REMOVED***

  /**
   * The role of this member used to set their color
   * @type ***REMOVED***?Role***REMOVED***
   * @readonly
   */
  get colorRole() ***REMOVED***
    const coloredRoles = this.roles.filter(role => role.color);
    if (!coloredRoles.size) return null;
    return coloredRoles.reduce((prev, role) => !prev || role.comparePositionTo(prev) > 0 ? role : prev);
  ***REMOVED***

  /**
   * The displayed color of this member in base 10
   * @type ***REMOVED***number***REMOVED***
   * @readonly
   */
  get displayColor() ***REMOVED***
    const role = this.colorRole;
    return (role && role.color) || 0;
  ***REMOVED***

  /**
   * The displayed color of this member in hexadecimal
   * @type ***REMOVED***string***REMOVED***
   * @readonly
   */
  get displayHexColor() ***REMOVED***
    const role = this.colorRole;
    return (role && role.hexColor) || '#000000';
  ***REMOVED***

  /**
   * The role of this member used to hoist them in a separate category in the users list
   * @type ***REMOVED***?Role***REMOVED***
   * @readonly
   */
  get hoistRole() ***REMOVED***
    const hoistedRoles = this.roles.filter(role => role.hoist);
    if (!hoistedRoles.size) return null;
    return hoistedRoles.reduce((prev, role) => !prev || role.comparePositionTo(prev) > 0 ? role : prev);
  ***REMOVED***

  /**
   * Whether this member is muted in any way
   * @type ***REMOVED***boolean***REMOVED***
   * @readonly
   */
  get mute() ***REMOVED***
    return this.selfMute || this.serverMute;
  ***REMOVED***

  /**
   * Whether this member is deafened in any way
   * @type ***REMOVED***boolean***REMOVED***
   * @readonly
   */
  get deaf() ***REMOVED***
    return this.selfDeaf || this.serverDeaf;
  ***REMOVED***

  /**
   * The voice channel this member is in, if any
   * @type ***REMOVED***?VoiceChannel***REMOVED***
   * @readonly
   */
  get voiceChannel() ***REMOVED***
    return this.guild.channels.get(this.voiceChannelID);
  ***REMOVED***

  /**
   * The ID of this user
   * @type ***REMOVED***Snowflake***REMOVED***
   * @readonly
   */
  get id() ***REMOVED***
    return this.user.id;
  ***REMOVED***

  /**
   * The nickname of this member, or their username if they don't have one
   * @type ***REMOVED***string***REMOVED***
   * @readonly
   */
  get displayName() ***REMOVED***
    return this.nickname || this.user.username;
  ***REMOVED***

  /**
   * The overall set of permissions for this member, taking only roles into account
   * @type ***REMOVED***Permissions***REMOVED***
   * @readonly
   */
  get permissions() ***REMOVED***
    if (this.user.id === this.guild.ownerID) return new Permissions(this, Permissions.ALL);

    let permissions = 0;
    const roles = this.roles;
    for (const role of roles.values()) permissions |= role.permissions;

    return new Permissions(this, permissions);
  ***REMOVED***

  /**
   * Whether this member is manageable in terms of role hierarchy by the client user
   * @type ***REMOVED***boolean***REMOVED***
   * @readonly
   */
  get manageable() ***REMOVED***
    if (this.user.id === this.guild.ownerID) return false;
    if (this.user.id === this.client.user.id) return false;
    if (this.client.user.id === this.guild.ownerID) return true;
    return this.guild.me.highestRole.comparePositionTo(this.highestRole) > 0;
  ***REMOVED***

  /**
   * Whether this member is kickable by the client user
   * @type ***REMOVED***boolean***REMOVED***
   * @readonly
   */
  get kickable() ***REMOVED***
    return this.manageable && this.guild.me.permissions.has(Permissions.FLAGS.KICK_MEMBERS);
  ***REMOVED***

  /**
   * Whether this member is bannable by the client user
   * @type ***REMOVED***boolean***REMOVED***
   * @readonly
   */
  get bannable() ***REMOVED***
    return this.manageable && this.guild.me.permissions.has(Permissions.FLAGS.BAN_MEMBERS);
  ***REMOVED***

  /**
   * Returns `channel.permissionsFor(guildMember)`. Returns permissions for this member in a guild channel,
   * taking into account roles and permission overwrites.
   * @param ***REMOVED***ChannelResolvable***REMOVED*** channel The guild channel to use as context
   * @returns ***REMOVED***?Permissions***REMOVED***
   */
  permissionsIn(channel) ***REMOVED***
    channel = this.client.resolver.resolveChannel(channel);
    if (!channel || !channel.guild) throw new Error('Could not resolve channel to a guild channel.');
    return channel.permissionsFor(this);
  ***REMOVED***

  /**
   * Checks if any of this member's roles have a permission.
   * @param ***REMOVED***PermissionResolvable***REMOVED*** permission Permission(s) to check for
   * @param ***REMOVED***boolean***REMOVED*** [explicit=false] Whether to require the role to explicitly have the exact permission
   * **(deprecated)**
   * @param ***REMOVED***boolean***REMOVED*** [checkAdmin] Whether to allow the administrator permission to override
   * (takes priority over `explicit`)
   * @param ***REMOVED***boolean***REMOVED*** [checkOwner] Whether to allow being the guild's owner to override
   * (takes priority over `explicit`)
   * @returns ***REMOVED***boolean***REMOVED***
   */
  hasPermission(permission, explicit = false, checkAdmin, checkOwner) ***REMOVED***
    if (typeof checkAdmin === 'undefined') checkAdmin = !explicit;
    if (typeof checkOwner === 'undefined') checkOwner = !explicit;
    if (checkOwner && this.user.id === this.guild.ownerID) return true;
    return this.roles.some(r => r.hasPermission(permission, undefined, checkAdmin));
  ***REMOVED***

  /**
   * Checks whether the roles of this member allows them to perform specific actions.
   * @param ***REMOVED***PermissionResolvable***REMOVED*** permissions The permissions to check for
   * @param ***REMOVED***boolean***REMOVED*** [explicit=false] Whether to require the member to explicitly have the exact permissions
   * @returns ***REMOVED***boolean***REMOVED***
   * @deprecated
   */
  hasPermissions(permissions, explicit = false) ***REMOVED***
    if (!explicit && this.user.id === this.guild.ownerID) return true;
    return this.hasPermission(permissions, explicit);
  ***REMOVED***

  /**
   * Checks whether the roles of this member allows them to perform specific actions, and lists any missing permissions.
   * @param ***REMOVED***PermissionResolvable***REMOVED*** permissions The permissions to check for
   * @param ***REMOVED***boolean***REMOVED*** [explicit=false] Whether to require the member to explicitly have the exact permissions
   * @returns ***REMOVED***PermissionResolvable***REMOVED***
   */
  missingPermissions(permissions, explicit = false) ***REMOVED***
    if (!(permissions instanceof Array)) permissions = [permissions];
    return this.permissions.missing(permissions, explicit);
  ***REMOVED***

  /**
   * The data for editing this member.
   * @typedef ***REMOVED***Object***REMOVED*** GuildMemberEditData
   * @property ***REMOVED***string***REMOVED*** [nick] The nickname to set for the member
   * @property ***REMOVED***Collection<Snowflake, Role>|RoleResolvable[]***REMOVED*** [roles] The roles or role IDs to apply
   * @property ***REMOVED***boolean***REMOVED*** [mute] Whether or not the member should be muted
   * @property ***REMOVED***boolean***REMOVED*** [deaf] Whether or not the member should be deafened
   * @property ***REMOVED***ChannelResolvable|null***REMOVED*** [channel] Channel to move member to (if they are connected to voice), or `null`
   * if you want to kick them from voice
   */

  /**
   * Edits this member.
   * @param ***REMOVED***GuildMemberEditData***REMOVED*** data The data to edit the member with
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for editing this user
   * @returns ***REMOVED***Promise<GuildMember>***REMOVED***
   * @example
   * // Set a member's nickname and clear their roles
   * message.member.edit(***REMOVED***
   *   nick: 'Cool Name',
   *   roles: []
   * ***REMOVED***)
   *   .then(console.log)
   *   .catch(console.error);
   */
  edit(data, reason) ***REMOVED***
    return this.client.rest.methods.updateGuildMember(this, data, reason);
  ***REMOVED***

  /**
   * Mute/unmute this member.
   * @param ***REMOVED***boolean***REMOVED*** mute Whether or not the member should be muted
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for muting or unmuting
   * @returns ***REMOVED***Promise<GuildMember>***REMOVED***
   * @example
   * // Mute a member with a reason
   * message.member.setMute(true, 'It needed to be done')
   *   .then(() => console.log(`Muted $***REMOVED***message.member.displayName***REMOVED***`)))
   *   .catch(console.error);
   */
  setMute(mute, reason) ***REMOVED***
    return this.edit(***REMOVED*** mute ***REMOVED***, reason);
  ***REMOVED***

  /**
   * Deafen/undeafen this member.
   * @param ***REMOVED***boolean***REMOVED*** deaf Whether or not the member should be deafened
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for deafening or undeafening
   * @returns ***REMOVED***Promise<GuildMember>***REMOVED***
   * @example
   * // Deafen a member
   * message.member.setDeaf(true)
   *   .then(() => console.log(`Deafened $***REMOVED***message.member.displayName***REMOVED***`))
   *   .catch(console.error);
   */
  setDeaf(deaf, reason) ***REMOVED***
    return this.edit(***REMOVED*** deaf ***REMOVED***, reason);
  ***REMOVED***

  /**
   * Moves this member to the given channel.
   * @param ***REMOVED***ChannelResolvable|null***REMOVED*** channel Channel to move the member to, or `null` if you want to kick them from
   * voice
   * @returns ***REMOVED***Promise<GuildMember>***REMOVED***
   * @example
   * // Moves a member to a voice channel
   * member.setVoiceChannel('174674066072928256')
   *   .then(() => console.log(`Moved $***REMOVED***member.displayName***REMOVED***`))
   *   .catch(console.error);
   */
  setVoiceChannel(channel) ***REMOVED***
    return this.edit(***REMOVED*** channel ***REMOVED***);
  ***REMOVED***

  /**
   * Sets the roles applied to this member.
   * @param ***REMOVED***Collection<Snowflake, Role>|RoleResolvable[]***REMOVED*** roles The roles or role IDs to apply
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for applying the roles
   * @returns ***REMOVED***Promise<GuildMember>***REMOVED***
   * @example
   * // Set the member's roles to a single role
   * guildMember.setRoles(['391156570408615936'])
   *   .then(console.log)
   *   .catch(console.error);
   * @example
   * // Remove all of the member's roles
   * guildMember.setRoles([])
   *   .then(member => console.log(`$***REMOVED***member.displayName***REMOVED*** now has $***REMOVED***member.roles.size***REMOVED*** roles`))
   *   .catch(console.error);
   */
  setRoles(roles, reason) ***REMOVED***
    return this.edit(***REMOVED*** roles ***REMOVED***, reason);
  ***REMOVED***

  /**
   * Adds a single role to this member.
   * @param ***REMOVED***RoleResolvable***REMOVED*** role The role or ID of the role to add
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for adding the role
   * @returns ***REMOVED***Promise<GuildMember>***REMOVED***
   * @example
   * // Give a role to a member
   * message.member.addRole('193654001089118208')
   *   .then(console.log)
   *   .catch(console.error);
   */
  addRole(role, reason) ***REMOVED***
    if (!(role instanceof Role)) role = this.guild.roles.get(role);
    if (!role) return Promise.reject(new TypeError('Supplied parameter was neither a Role nor a Snowflake.'));
    return this.client.rest.methods.addMemberRole(this, role, reason);
  ***REMOVED***

  /**
   * Adds multiple roles to this member.
   * @param ***REMOVED***Collection<Snowflake, Role>|RoleResolvable[]***REMOVED*** roles The roles or role IDs to add
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for adding the roles
   * @returns ***REMOVED***Promise<GuildMember>***REMOVED***
   * @example
   * // Gives a member a few roles
   * message.member.addRoles(['193654001089118208', '369308579892690945'])
   *   .then(console.log)
   *   .catch(console.error);
   */
  addRoles(roles, reason) ***REMOVED***
    let allRoles;
    if (roles instanceof Collection) ***REMOVED***
      allRoles = this._roles.slice();
      for (const role of roles.values()) allRoles.push(role.id);
    ***REMOVED*** else ***REMOVED***
      allRoles = this._roles.concat(roles);
    ***REMOVED***
    return this.edit(***REMOVED*** roles: allRoles ***REMOVED***, reason);
  ***REMOVED***

  /**
   * Removes a single role from this member.
   * @param ***REMOVED***RoleResolvable***REMOVED*** role The role or ID of the role to remove
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for removing the role
   * @returns ***REMOVED***Promise<GuildMember>***REMOVED***
   * @example
   * // Remove a role from a member
   * message.member.removeRole('193654001089118208')
   *   .then(console.log)
   *   .catch(console.error);
   */
  removeRole(role, reason) ***REMOVED***
    if (!(role instanceof Role)) role = this.guild.roles.get(role);
    if (!role) return Promise.reject(new TypeError('Supplied parameter was neither a Role nor a Snowflake.'));
    return this.client.rest.methods.removeMemberRole(this, role, reason);
  ***REMOVED***

  /**
   * Removes multiple roles from this member.
   * @param ***REMOVED***Collection<Snowflake, Role>|RoleResolvable[]***REMOVED*** roles The roles or role IDs to remove
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for removing the roles
   * @returns ***REMOVED***Promise<GuildMember>***REMOVED***
   * @example
   * // Removes a few roles from the member
   * message.member.removeRoles(['193654001089118208', '369308579892690945'])
   *   .then(console.log)
   *   .catch(console.error);
   */
  removeRoles(roles, reason) ***REMOVED***
    const allRoles = this._roles.slice();
    if (roles instanceof Collection) ***REMOVED***
      for (const role of roles.values()) ***REMOVED***
        const index = allRoles.indexOf(role.id);
        if (index >= 0) allRoles.splice(index, 1);
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      for (const role of roles) ***REMOVED***
        const index = allRoles.indexOf(role instanceof Role ? role.id : role);
        if (index >= 0) allRoles.splice(index, 1);
      ***REMOVED***
    ***REMOVED***
    return this.edit(***REMOVED*** roles: allRoles ***REMOVED***, reason);
  ***REMOVED***

  /**
   * Set the nickname for this member.
   * @param ***REMOVED***string***REMOVED*** nick The nickname for the guild member
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for setting the nickname
   * @returns ***REMOVED***Promise<GuildMember>***REMOVED***
   * @example
   * // Update the member's nickname
   * message.member.setNickname('Cool Name')
   *   .then(console.log)
   *   .catch(console.error);
   */
  setNickname(nick, reason) ***REMOVED***
    return this.edit(***REMOVED*** nick ***REMOVED***, reason);
  ***REMOVED***

  /**
   * Creates a DM channel between the client and this member.
   * @returns ***REMOVED***Promise<DMChannel>***REMOVED***
   */
  createDM() ***REMOVED***
    return this.user.createDM();
  ***REMOVED***

  /**
   * Deletes any DMs with this guild member.
   * @returns ***REMOVED***Promise<DMChannel>***REMOVED***
   */
  deleteDM() ***REMOVED***
    return this.user.deleteDM();
  ***REMOVED***

  /**
   * Kick this member from the guild.
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for kicking user
   * @returns ***REMOVED***Promise<GuildMember>***REMOVED***
   * @example
   * // Kick a member
   * member.kick()
   *   .then(() => console.log(`Kicked $***REMOVED***member.displayName***REMOVED***`))
   *   .catch(console.error);
   */
  kick(reason) ***REMOVED***
    return this.client.rest.methods.kickGuildMember(this.guild, this, reason);
  ***REMOVED***

  /**
   * Ban this member.
   * @param ***REMOVED***Object|number|string***REMOVED*** [options] Ban options. If a number, the number of days to delete messages for, if a
   * string, the ban reason. Supplying an object allows you to do both.
   * @param ***REMOVED***number***REMOVED*** [options.days=0] Number of days of messages to delete
   * @param ***REMOVED***string***REMOVED*** [options.reason] Reason for banning
   * @returns ***REMOVED***Promise<GuildMember>***REMOVED***
   * @example
   * // Ban a guild member
   * member.ban(7)
   *   .then(() => console.log(`Banned $***REMOVED***member.displayName***REMOVED***`))
   *   .catch(console.error);
   */
  ban(options) ***REMOVED***
    return this.guild.ban(this, options);
  ***REMOVED***

  /**
   * When concatenated with a string, this automatically concatenates the user's mention instead of the Member object.
   * @returns ***REMOVED***string***REMOVED***
   * @example
   * // Logs: Hello from <@123456789>!
   * console.log(`Hello from $***REMOVED***member***REMOVED***!`);
   */
  toString() ***REMOVED***
    return `<@$***REMOVED***this.nickname ? '!' : ''***REMOVED***$***REMOVED***this.user.id***REMOVED***>`;
  ***REMOVED***

  // These are here only for documentation purposes - they are implemented by TextBasedChannel
  /* eslint-disable no-empty-function */
  send() ***REMOVED******REMOVED***
  sendMessage() ***REMOVED******REMOVED***
  sendEmbed() ***REMOVED******REMOVED***
  sendFile() ***REMOVED******REMOVED***
  sendCode() ***REMOVED******REMOVED***
***REMOVED***

TextBasedChannel.applyToClass(GuildMember);

GuildMember.prototype.hasPermissions = util.deprecate(GuildMember.prototype.hasPermissions,
  'GuildMember#hasPermissions is deprecated - use GuildMember#hasPermission, it now takes an array');
GuildMember.prototype.missingPermissions = util.deprecate(GuildMember.prototype.missingPermissions,
  'GuildMember#missingPermissions is deprecated - use GuildMember#permissions.missing, it now takes an array');

module.exports = GuildMember;
