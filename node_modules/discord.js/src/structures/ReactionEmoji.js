const Constants = require('../util/Constants');
const Snowflake = require('../util/Snowflake');

/**
 * Represents a limited emoji set used for both custom and unicode emojis. Custom emojis
 * will use this class opposed to the Emoji class when the client doesn't know enough
 * information about them.
 */
class ReactionEmoji ***REMOVED***
  constructor(reaction, emoji) ***REMOVED***
    /**
     * The client that instantiated this object
     * @name ReactionEmoji#client
     * @type ***REMOVED***Client***REMOVED***
     * @readonly
     */
    Object.defineProperty(this, 'client', ***REMOVED*** value: reaction.message.client ***REMOVED***);

    /**
     * The message reaction this emoji refers to
     * @type ***REMOVED***MessageReaction***REMOVED***
     */
    this.reaction = reaction;

    /**
     * The name of this reaction emoji
     * @type ***REMOVED***string***REMOVED***
     */
    this.name = emoji.name;

    /**
     * The ID of this reaction emoji
     * @type ***REMOVED***?Snowflake***REMOVED***
     */
    this.id = emoji.id;

    /**
     * Whether this reaction emoji is animated
     * @type ***REMOVED***boolean***REMOVED***
     */
    this.animated = emoji.animated || false;
  ***REMOVED***

  /**
   * The timestamp the reaction emoji was created at, or null if unicode
   * @type ***REMOVED***?number***REMOVED***
   * @readonly
   */
  get createdTimestamp() ***REMOVED***
    if (!this.id) return null;
    return Snowflake.deconstruct(this.id).timestamp;
  ***REMOVED***

  /**
   * The time the reaction emoji was created, or null if unicode
   * @type ***REMOVED***?Date***REMOVED***
   * @readonly
   */
  get createdAt() ***REMOVED***
    if (!this.id) return null;
    return new Date(this.createdTimestamp);
  ***REMOVED***

  /**
   * The URL to the reaction emoji file, or null if unicode
   * @type ***REMOVED***string***REMOVED***
   * @readonly
   */
  get url() ***REMOVED***
    if (!this.id) return null;
    return Constants.Endpoints.CDN(this.client.options.http.cdn).Emoji(this.id, this.animated ? 'gif' : 'png');
  ***REMOVED***

  /**
   * The identifier of this emoji, used for message reactions
   * @type ***REMOVED***string***REMOVED***
   * @readonly
   */
  get identifier() ***REMOVED***
    if (this.id) return `$***REMOVED***this.name***REMOVED***:$***REMOVED***this.id***REMOVED***`;
    return encodeURIComponent(this.name);
  ***REMOVED***

  /**
   * Creates the text required to form a graphical emoji on Discord.
   * @example
   * // Send the emoji used in a reaction to the channel the reaction is part of
   * reaction.message.channel.send(`The emoji used is $***REMOVED***reaction.emoji***REMOVED***`);
   * @returns ***REMOVED***string***REMOVED***
   */
  toString() ***REMOVED***
    if (!this.id) return this.name;

    return `<$***REMOVED***this.animated ? 'a' : ''***REMOVED***:$***REMOVED***this.name***REMOVED***:$***REMOVED***this.id***REMOVED***>`;
  ***REMOVED***
***REMOVED***

module.exports = ReactionEmoji;
