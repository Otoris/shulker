const GuildChannel = require('./GuildChannel');
const Collection = require('../util/Collection');
const Permissions = require('../util/Permissions');

/**
 * Represents a guild voice channel on Discord.
 * @extends ***REMOVED***GuildChannel***REMOVED***
 */
class VoiceChannel extends GuildChannel ***REMOVED***
  constructor(guild, data) ***REMOVED***
    super(guild, data);

    /**
     * The members in this voice channel
     * @type ***REMOVED***Collection<Snowflake, GuildMember>***REMOVED***
     */
    this.members = new Collection();

    this.type = 'voice';
  ***REMOVED***

  setup(data) ***REMOVED***
    super.setup(data);

    /**
     * The bitrate of this voice channel
     * @type ***REMOVED***number***REMOVED***
     */
    this.bitrate = data.bitrate * 0.001;

    /**
     * The maximum amount of users allowed in this channel - 0 means unlimited.
     * @type ***REMOVED***number***REMOVED***
     */
    this.userLimit = data.user_limit;
  ***REMOVED***

  /**
   * The voice connection for this voice channel, if the client is connected
   * @type ***REMOVED***?VoiceConnection***REMOVED***
   * @readonly
   */
  get connection() ***REMOVED***
    const connection = this.guild.voiceConnection;
    if (connection && connection.channel.id === this.id) return connection;
    return null;
  ***REMOVED***

  /**
   * Checks if the voice channel is full
   * @type ***REMOVED***boolean***REMOVED***
   * @readonly
   */
  get full() ***REMOVED***
    return this.userLimit > 0 && this.members.size >= this.userLimit;
  ***REMOVED***

  /**
   * Whether the channel is deletable by the client user
   * @type ***REMOVED***boolean***REMOVED***
   * @readonly
   */
  get deletable() ***REMOVED***
    return super.deletable && this.permissionsFor(this.client.user).has(Permissions.FLAGS.CONNECT);
  ***REMOVED***

  /**
   * Checks if the client has permission join the voice channel
   * @type ***REMOVED***boolean***REMOVED***
   * @readonly
   */
  get joinable() ***REMOVED***
    if (this.client.browser) return false;
    if (!this.permissionsFor(this.client.user).has('CONNECT')) return false;
    if (this.full && !this.permissionsFor(this.client.user).has('MOVE_MEMBERS')) return false;
    return true;
  ***REMOVED***

  /**
   * Checks if the client has permission to send audio to the voice channel
   * @type ***REMOVED***boolean***REMOVED***
   * @readonly
   */
  get speakable() ***REMOVED***
    return this.permissionsFor(this.client.user).has('SPEAK');
  ***REMOVED***

  /**
   * Sets the bitrate of the channel (in kbps).
   * @param ***REMOVED***number***REMOVED*** bitrate The new bitrate
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for changing the channel's bitrate
   * @returns ***REMOVED***Promise<VoiceChannel>***REMOVED***
   * @example
   * // Set the bitrate of a voice channel
   * voiceChannel.setBitrate(48)
   *   .then(vc => console.log(`Set bitrate to $***REMOVED***vc.bitrate***REMOVED***kbps for $***REMOVED***vc.name***REMOVED***`))
   *   .catch(console.error);
   */
  setBitrate(bitrate, reason) ***REMOVED***
    bitrate *= 1000;
    return this.edit(***REMOVED*** bitrate ***REMOVED***, reason);
  ***REMOVED***

  /**
   * Sets the user limit of the channel.
   * @param ***REMOVED***number***REMOVED*** userLimit The new user limit
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for changing the user limit
   * @returns ***REMOVED***Promise<VoiceChannel>***REMOVED***
   * @example
   * // Set the user limit of a voice channel
   * voiceChannel.setUserLimit(42)
   *   .then(vc => console.log(`Set user limit to $***REMOVED***vc.userLimit***REMOVED*** for $***REMOVED***vc.name***REMOVED***`))
   *   .catch(console.error);
   */
  setUserLimit(userLimit, reason) ***REMOVED***
    return this.edit(***REMOVED*** userLimit ***REMOVED***, reason);
  ***REMOVED***

  /**
   * Attempts to join this voice channel.
   * @returns ***REMOVED***Promise<VoiceConnection>***REMOVED***
   * @example
   * // Join a voice channel
   * voiceChannel.join()
   *   .then(connection => console.log('Connected!'))
   *   .catch(console.error);
   */
  join() ***REMOVED***
    if (this.client.browser) return Promise.reject(new Error('Voice connections are not available in browsers.'));
    return this.client.voice.joinChannel(this);
  ***REMOVED***

  /**
   * Leaves this voice channel.
   * @example
   * // Leave a voice channel
   * voiceChannel.leave();
   */
  leave() ***REMOVED***
    if (this.client.browser) return;
    const connection = this.client.voice.connections.get(this.guild.id);
    if (connection && connection.channel.id === this.id) connection.disconnect();
  ***REMOVED***
***REMOVED***

module.exports = VoiceChannel;
