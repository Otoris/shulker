const Collector = require('./interfaces/Collector');
const Collection = require('../util/Collection');

/**
 * @typedef ***REMOVED***CollectorOptions***REMOVED*** ReactionCollectorOptions
 * @property ***REMOVED***number***REMOVED*** max The maximum total amount of reactions to collect
 * @property ***REMOVED***number***REMOVED*** maxEmojis The maximum number of emojis to collect
 * @property ***REMOVED***number***REMOVED*** maxUsers The maximum number of users to react
 */

/**
 * Collects reactions on messages.
 * @extends ***REMOVED***Collector***REMOVED***
 */
class ReactionCollector extends Collector ***REMOVED***
  /**
   * @param ***REMOVED***Message***REMOVED*** message The message upon which to collect reactions
   * @param ***REMOVED***CollectorFilter***REMOVED*** filter The filter to apply to this collector
   * @param ***REMOVED***ReactionCollectorOptions***REMOVED*** [options=***REMOVED******REMOVED***] The options to apply to this collector
   */
  constructor(message, filter, options = ***REMOVED******REMOVED***) ***REMOVED***
    super(message.client, filter, options);

    /**
     * The message
     * @type ***REMOVED***Message***REMOVED***
     */
    this.message = message;

    /**
     * The users which have reacted
     * @type ***REMOVED***Collection***REMOVED***
     */
    this.users = new Collection();

    /**
     * The total number of reactions collected
     * @type ***REMOVED***number***REMOVED***
     */
    this.total = 0;

    if (this.client.getMaxListeners() !== 0) this.client.setMaxListeners(this.client.getMaxListeners() + 1);
    this.client.on('messageReactionAdd', this.listener);

    this.on('fullCollect', (reaction, user) => ***REMOVED***
      this.users.set(user.id, user);
      this.total++;
    ***REMOVED***);
  ***REMOVED***

  /**
   * Handle an incoming reaction for possible collection.
   * @param ***REMOVED***MessageReaction***REMOVED*** reaction The reaction to possibly collect
   * @returns ***REMOVED***?***REMOVED***key: Snowflake, value: MessageReaction***REMOVED******REMOVED***
   * @private
   */
  handle(reaction) ***REMOVED***
    if (reaction.message.id !== this.message.id) return null;
    return ***REMOVED***
      key: reaction.emoji.id || reaction.emoji.name,
      value: reaction,
    ***REMOVED***;
  ***REMOVED***

  /**
   * Check after collection to see if the collector is done.
   * @param ***REMOVED***MessageReaction***REMOVED*** reaction The reaction that was collected
   * @param ***REMOVED***User***REMOVED*** user The user that reacted
   * @returns ***REMOVED***?string***REMOVED*** Reason to end the collector, if any
   * @private
   */
  postCheck() ***REMOVED***
    if (this.options.max && this.total >= this.options.max) return 'limit';
    if (this.options.maxEmojis && this.collected.size >= this.options.maxEmojis) return 'emojiLimit';
    if (this.options.maxUsers && this.users.size >= this.options.maxUsers) return 'userLimit';
    return null;
  ***REMOVED***

  /**
   * Remove event listeners.
   * @private
   */
  cleanup() ***REMOVED***
    this.client.removeListener('messageReactionAdd', this.listener);
    if (this.client.getMaxListeners() !== 0) this.client.setMaxListeners(this.client.getMaxListeners() - 1);
  ***REMOVED***
***REMOVED***

module.exports = ReactionCollector;
