const PartialGuild = require('./PartialGuild');
const PartialGuildChannel = require('./PartialGuildChannel');
const Constants = require('../util/Constants');

/**
 * Represents an invitation to a guild channel.
 * <warn>The only guaranteed properties are `code`, `url`, `guild`, and `channel`.
 * Other properties can be missing.</warn>
 */
class Invite ***REMOVED***
  constructor(client, data) ***REMOVED***
    /**
     * The client that instantiated the invite
     * @name Invite#client
     * @type ***REMOVED***Client***REMOVED***
     * @readonly
     */
    Object.defineProperty(this, 'client', ***REMOVED*** value: client ***REMOVED***);

    this.setup(data);
  ***REMOVED***

  setup(data) ***REMOVED***
    /**
     * The guild the invite is for. If this guild is already known, this will be a guild object. If the guild is
     * unknown, this will be a PartialGuild object
     * @type ***REMOVED***Guild|PartialGuild***REMOVED***
     */
    this.guild = this.client.guilds.get(data.guild.id) || new PartialGuild(this.client, data.guild);

    /**
     * The code for this invite
     * @type ***REMOVED***string***REMOVED***
     */
    this.code = data.code;

    /**
     * The approximate number of online members of the guild this invite is for
     * @type ***REMOVED***number***REMOVED***
     */
    this.presenceCount = data.approximate_presence_count;

    /**
     * The approximate total number of members of the guild this invite is for
     * @type ***REMOVED***number***REMOVED***
     */
    this.memberCount = data.approximate_member_count;

    /**
     * The number of text channels the guild this invite goes to has
     * @type ***REMOVED***number***REMOVED***
     */
    this.textChannelCount = data.guild.text_channel_count;

    /**
     * The number of voice channels the guild this invite goes to has
     * @type ***REMOVED***number***REMOVED***
     */
    this.voiceChannelCount = data.guild.voice_channel_count;

    /**
     * Whether or not this invite is temporary
     * @type ***REMOVED***boolean***REMOVED***
     */
    this.temporary = data.temporary;

    /**
     * The maximum age of the invite, in seconds
     * @type ***REMOVED***?number***REMOVED***
     */
    this.maxAge = data.max_age;

    /**
     * How many times this invite has been used
     * @type ***REMOVED***number***REMOVED***
     */
    this.uses = data.uses;

    /**
     * The maximum uses of this invite
     * @type ***REMOVED***number***REMOVED***
     */
    this.maxUses = data.max_uses;

    if (data.inviter) ***REMOVED***
      /**
       * The user who created this invite
       * @type ***REMOVED***?User***REMOVED***
       */
      this.inviter = this.client.dataManager.newUser(data.inviter);
    ***REMOVED***

    /**
     * The channel the invite is for. If this channel is already known, this will be a GuildChannel object.
     * If the channel is unknown, this will be a PartialGuildChannel object.
     * @type ***REMOVED***GuildChannel|PartialGuildChannel***REMOVED***
     */
    this.channel = this.client.channels.get(data.channel.id) || new PartialGuildChannel(this.client, data.channel);

    /**
     * The timestamp the invite was created at
     * @type ***REMOVED***number***REMOVED***
     */
    this.createdTimestamp = new Date(data.created_at).getTime();
  ***REMOVED***

  /**
   * The time the invite was created
   * @type ***REMOVED***Date***REMOVED***
   * @readonly
   */
  get createdAt() ***REMOVED***
    return new Date(this.createdTimestamp);
  ***REMOVED***

  /**
   * The timestamp the invite will expire at
   * @type ***REMOVED***number***REMOVED***
   * @readonly
   */
  get expiresTimestamp() ***REMOVED***
    return this.createdTimestamp + (this.maxAge * 1000);
  ***REMOVED***

  /**
   * The time the invite will expire
   * @type ***REMOVED***Date***REMOVED***
   * @readonly
   */
  get expiresAt() ***REMOVED***
    return new Date(this.expiresTimestamp);
  ***REMOVED***

  /**
   * The URL to the invite
   * @type ***REMOVED***string***REMOVED***
   * @readonly
   */
  get url() ***REMOVED***
    return Constants.Endpoints.inviteLink(this.code);
  ***REMOVED***

  /**
   * Deletes this invite.
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for deleting this invite
   * @returns ***REMOVED***Promise<Invite>***REMOVED***
   */
  delete(reason) ***REMOVED***
    return this.client.rest.methods.deleteInvite(this, reason);
  ***REMOVED***

  /**
   * When concatenated with a string, this automatically concatenates the invite's URL instead of the object.
   * @returns ***REMOVED***string***REMOVED***
   * @example
   * // Logs: Invite: https://discord.gg/A1b2C3
   * console.log(`Invite: $***REMOVED***invite***REMOVED***`);
   */
  toString() ***REMOVED***
    return this.url;
  ***REMOVED***
***REMOVED***

module.exports = Invite;
