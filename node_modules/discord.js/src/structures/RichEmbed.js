const Attachment = require('./Attachment');
const MessageEmbed = require('./MessageEmbed');
const util = require('../util/Util');
let ClientDataResolver;

/**
 * A rich embed to be sent with a message with a fluent interface for creation.
 * @param ***REMOVED***Object***REMOVED*** [data] Data to set in the rich embed
 */
class RichEmbed ***REMOVED***
  constructor(data = ***REMOVED******REMOVED***) ***REMOVED***
    /**
     * Title for this Embed
     * @type ***REMOVED***string***REMOVED***
     */
    this.title = data.title;

    /**
     * Description for this Embed
     * @type ***REMOVED***string***REMOVED***
     */
    this.description = data.description;

    /**
     * URL for this Embed
     * @type ***REMOVED***string***REMOVED***
     */
    this.url = data.url;

    /**
     * Color for this Embed
     * @type ***REMOVED***number***REMOVED***
     */
    this.color = data.color;

    /**
     * Author for this Embed
     * @type ***REMOVED***Object***REMOVED***
     */
    this.author = data.author;

    /**
     * Timestamp for this Embed
     * @type ***REMOVED***Date***REMOVED***
     */
    this.timestamp = data.timestamp;

    /**
     * Fields for this Embed
     * @type ***REMOVED***Object[]***REMOVED***
     */
    this.fields = data.fields || [];

    /**
     * Thumbnail for this Embed
     * @type ***REMOVED***Object***REMOVED***
     */
    this.thumbnail = data.thumbnail;

    /**
     * Image for this Embed
     * @type ***REMOVED***Object***REMOVED***
     */
    this.image = data.image;

    /**
     * Footer for this Embed
     * @type ***REMOVED***Object***REMOVED***
     */
    this.footer = data.footer;

    /**
     * File to upload alongside this Embed
     * @type ***REMOVED***FileOptions|string|Attachment***REMOVED***
     */
    this.file = data.file;

    /**
     * The files to upload alongside this Embed
     * @type ***REMOVED***Array<FileOptions|string|Attachment>***REMOVED***
     */
    this.files = [];
  ***REMOVED***

  /**
   * Sets the title of this embed.
   * @param ***REMOVED***StringResolvable***REMOVED*** title The title
   * @returns ***REMOVED***RichEmbed***REMOVED*** This embed
   */
  setTitle(title) ***REMOVED***
    title = util.resolveString(title);
    if (title.length > 256) throw new RangeError('RichEmbed titles may not exceed 256 characters.');
    this.title = title;
    return this;
  ***REMOVED***

  /**
   * Sets the description of this embed.
   * @param ***REMOVED***StringResolvable***REMOVED*** description The description
   * @returns ***REMOVED***RichEmbed***REMOVED*** This embed
   */
  setDescription(description) ***REMOVED***
    description = util.resolveString(description);
    if (description.length > 2048) throw new RangeError('RichEmbed descriptions may not exceed 2048 characters.');
    this.description = description;
    return this;
  ***REMOVED***

  /**
   * Sets the URL of this embed.
   * @param ***REMOVED***string***REMOVED*** url The URL
   * @returns ***REMOVED***RichEmbed***REMOVED*** This embed
   */
  setURL(url) ***REMOVED***
    this.url = url;
    return this;
  ***REMOVED***

  /**
   * Sets the color of this embed.
   * @param ***REMOVED***ColorResolvable***REMOVED*** color The color of the embed
   * @returns ***REMOVED***RichEmbed***REMOVED*** This embed
   */
  setColor(color) ***REMOVED***
    if (!ClientDataResolver) ClientDataResolver = require('../client/ClientDataResolver');
    this.color = ClientDataResolver.resolveColor(color);
    return this;
  ***REMOVED***

  /**
   * Sets the author of this embed.
   * @param ***REMOVED***StringResolvable***REMOVED*** name The name of the author
   * @param ***REMOVED***string***REMOVED*** [icon] The icon URL of the author
   * @param ***REMOVED***string***REMOVED*** [url] The URL of the author
   * @returns ***REMOVED***RichEmbed***REMOVED*** This embed
   */
  setAuthor(name, icon, url) ***REMOVED***
    this.author = ***REMOVED*** name: util.resolveString(name), icon_url: icon, url ***REMOVED***;
    return this;
  ***REMOVED***

  /**
   * Sets the timestamp of this embed.
   * @param ***REMOVED***Date|number***REMOVED*** [timestamp=Date.now()] The timestamp or date
   * @returns ***REMOVED***RichEmbed***REMOVED*** This embed
   */
  setTimestamp(timestamp = Date.now()) ***REMOVED***
    if (timestamp instanceof Date) timestamp = timestamp.getTime();
    this.timestamp = timestamp;
    return this;
  ***REMOVED***

  /**
   * Adds a field to the embed (max 25).
   * @param ***REMOVED***StringResolvable***REMOVED*** name The name of the field
   * @param ***REMOVED***StringResolvable***REMOVED*** value The value of the field
   * @param ***REMOVED***boolean***REMOVED*** [inline=false] Set the field to display inline
   * @returns ***REMOVED***RichEmbed***REMOVED*** This embed
   */
  addField(name, value, inline = false) ***REMOVED***
    if (this.fields.length >= 25) throw new RangeError('RichEmbeds may not exceed 25 fields.');
    this.fields.push(this.constructor.normalizeField(name, value, inline));
    return this;
  ***REMOVED***

  /**
   * Convenience function for `<RichEmbed>.addField('\u200B', '\u200B', inline)`.
   * @param ***REMOVED***boolean***REMOVED*** [inline=false] Set the field to display inline
   * @returns ***REMOVED***RichEmbed***REMOVED*** This embed
   */
  addBlankField(inline = false) ***REMOVED***
    return this.addField('\u200B', '\u200B', inline);
  ***REMOVED***

  /**
  * @typedef ***REMOVED***Object***REMOVED*** EmbedField
  * @property ***REMOVED***string***REMOVED*** name The name of this field
  * @property ***REMOVED***string***REMOVED*** value The value of this field
  * @property ***REMOVED***boolean***REMOVED*** inline If this field will be displayed inline
  */

  /**
  * @typedef ***REMOVED***Object***REMOVED*** EmbedFieldData
  * @property ***REMOVED***StringResolvable***REMOVED*** name The name of this field
  * @property ***REMOVED***StringResolvable***REMOVED*** value The value of this field
  * @property ***REMOVED***boolean***REMOVED*** [inline=false] If this field will be displayed inline
  */

  /**
   * Removes, replaces, and inserts fields in the embed (max 25).
   * @param ***REMOVED***number***REMOVED*** index The index to start at
   * @param ***REMOVED***number***REMOVED*** deleteCount The number of fields to remove
   * @param ***REMOVED***...EmbedFieldData***REMOVED*** [fields] The replacing field objects
   * @returns ***REMOVED***RichEmbed***REMOVED***
   */
  spliceFields(index, deleteCount, ...fields) ***REMOVED***
    if (fields) ***REMOVED***
      const mapper = (***REMOVED*** name, value, inline ***REMOVED***) => this.constructor.normalizeField(name, value, inline);
      this.fields.splice(index, deleteCount, ...fields.map(mapper));
    ***REMOVED*** else ***REMOVED***
      this.fields.splice(index, deleteCount);
    ***REMOVED***
    return this;
  ***REMOVED***

  /**
   * Set the thumbnail of this embed.
   * @param ***REMOVED***string***REMOVED*** url The URL of the thumbnail
   * @returns ***REMOVED***RichEmbed***REMOVED*** This embed
   */
  setThumbnail(url) ***REMOVED***
    this.thumbnail = ***REMOVED*** url ***REMOVED***;
    return this;
  ***REMOVED***

  /**
   * Set the image of this embed.
   * @param ***REMOVED***string***REMOVED*** url The URL of the image
   * @returns ***REMOVED***RichEmbed***REMOVED*** This embed
   */
  setImage(url) ***REMOVED***
    this.image = ***REMOVED*** url ***REMOVED***;
    return this;
  ***REMOVED***

  /**
   * Sets the footer of this embed.
   * @param ***REMOVED***StringResolvable***REMOVED*** text The text of the footer
   * @param ***REMOVED***string***REMOVED*** [icon] The icon URL of the footer
   * @returns ***REMOVED***RichEmbed***REMOVED*** This embed
   */
  setFooter(text, icon) ***REMOVED***
    text = util.resolveString(text);
    if (text.length > 2048) throw new RangeError('RichEmbed footer text may not exceed 2048 characters.');
    this.footer = ***REMOVED*** text, icon_url: icon ***REMOVED***;
    return this;
  ***REMOVED***

  /**
   * Sets the file to upload alongside the embed. This file can be accessed via `attachment://fileName.extension` when
   * setting an embed image or author/footer icons. Only one file may be attached.
   * @param ***REMOVED***FileOptions|string|Attachment***REMOVED*** file Local path or URL to the file to attach,
   * or valid FileOptions for a file to attach
   * @returns ***REMOVED***RichEmbed***REMOVED*** This embed
   */
  attachFile(file) ***REMOVED***
    if (this.file) throw new RangeError('You may not upload more than one file at once.');
    if (file instanceof Attachment) file = file.file;
    this.file = file;
    return this;
  ***REMOVED***

  /**
   * Sets the files to upload alongside the embed. A file can be accessed via `attachment://fileName.extension` when
   * setting an embed image or author/footer icons. Multiple files can be attached.
   * @param ***REMOVED***Array<FileOptions|string|Attachment>***REMOVED*** files Files to attach
   * @returns ***REMOVED***RichEmbed***REMOVED***
   */
  attachFiles(files) ***REMOVED***
    files = files.map(file => file instanceof Attachment ? file.file : file);
    this.files = this.files.concat(files);
    return this;
  ***REMOVED***

  /**
   * The accumulated length for the embed title, description, fields, author and footer text
   * @type ***REMOVED***number***REMOVED***
   * @readonly
   */
  get length() ***REMOVED***
    return (
      (this.title ? this.title.length : 0) +
      (this.description ? this.description.length : 0) +
      (this.fields.length >= 1 ? this.fields.reduce((prev, curr) =>
        prev + curr.name.length + curr.value.length, 0) : 0) +
      (this.footer ? this.footer.text.length : 0) +
      (this.author ? this.author.name.length : 0));
  ***REMOVED***

  /**
   * Transforms the embed to a plain object.
   * @returns ***REMOVED***Object***REMOVED*** The raw data of this embed
   */
  toJSON() ***REMOVED***
    return ***REMOVED***
      title: this.title,
      type: 'rich',
      description: this.description,
      url: this.url,
      timestamp: this.timestamp ? new Date(this.timestamp) : null,
      color: this.color,
      fields: this.fields ?
        this.fields.map(field => (***REMOVED*** name: field.name, value: field.value, inline: field.inline ***REMOVED***)) :
        null,
      thumbnail: this.thumbnail ? ***REMOVED***
        url: this.thumbnail.url,
      ***REMOVED*** : null,
      image: this.image ? ***REMOVED***
        url: this.image.url,
      ***REMOVED*** : null,
      author: this.author ? ***REMOVED***
        name: this.author.name,
        url: this.author.url,
        icon_url: this.author instanceof MessageEmbed.Author ? this.author.iconURL : this.author.icon_url,
      ***REMOVED*** : null,
      footer: this.footer ? ***REMOVED***
        text: this.footer.text,
        icon_url: this.footer instanceof MessageEmbed.Footer ? this.footer.iconURL : this.footer.icon_url,
      ***REMOVED*** : null,
    ***REMOVED***;
  ***REMOVED***

  /**
   * Normalizes field input and resolves strings.
   * @param ***REMOVED***StringResolvable***REMOVED*** name The name of the field
   * @param ***REMOVED***StringResolvable***REMOVED*** value The value of the field
   * @param ***REMOVED***boolean***REMOVED*** [inline=false] Set the field to display inline
   * @returns ***REMOVED***EmbedField***REMOVED***
   */
  static normalizeField(name, value, inline = false) ***REMOVED***
    name = util.resolveString(name);
    if (name.length > 256) throw new RangeError('RichEmbed field names may not exceed 256 characters.');
    if (!/\S/.test(name)) throw new RangeError('RichEmbed field names may not be empty.');
    value = util.resolveString(value);
    if (value.length > 1024) throw new RangeError('RichEmbed field values may not exceed 1024 characters.');
    if (!/\S/.test(value)) throw new RangeError('RichEmbed field values may not be empty.');
    return ***REMOVED*** name, value, inline ***REMOVED***;
  ***REMOVED***
***REMOVED***

module.exports = RichEmbed;
