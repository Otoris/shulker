const Collector = require('./interfaces/Collector');
const util = require('util');

/**
 * @typedef ***REMOVED***CollectorOptions***REMOVED*** MessageCollectorOptions
 * @property ***REMOVED***number***REMOVED*** max The maximum amount of messages to process
 * @property ***REMOVED***number***REMOVED*** maxMatches The maximum amount of messages to collect
 */

/**
 * Collects messages on a channel.
 * @extends ***REMOVED***Collector***REMOVED***
 */
class MessageCollector extends Collector ***REMOVED***
  /**
   * @param ***REMOVED***TextChannel|DMChannel|GroupDMChannel***REMOVED*** channel The channel
   * @param ***REMOVED***CollectorFilter***REMOVED*** filter The filter to be applied to this collector
   * @param ***REMOVED***MessageCollectorOptions***REMOVED*** options The options to be applied to this collector
   * @emits MessageCollector#message
   */
  constructor(channel, filter, options = ***REMOVED******REMOVED***) ***REMOVED***
    super(channel.client, filter, options);

    /**
     * The channel
     * @type ***REMOVED***TextBasedChannel***REMOVED***
     */
    this.channel = channel;

    /**
     * Total number of messages that were received in the channel during message collection
     * @type ***REMOVED***number***REMOVED***
     */
    this.received = 0;

    if (this.client.getMaxListeners() !== 0) this.client.setMaxListeners(this.client.getMaxListeners() + 1);
    this.client.on('message', this.listener);

    this._reEmitter = message => ***REMOVED***
      /**
       * Emitted when the collector receives a message.
       * @event MessageCollector#message
       * @param ***REMOVED***Message***REMOVED*** message The message
       * @deprecated
       */
      this.emit('message', message);
    ***REMOVED***;
    this.on('collect', this._reEmitter);
  ***REMOVED***

  // Remove in v12
  on(eventName, listener) ***REMOVED***
    if (eventName === 'message') ***REMOVED***
      listener = util.deprecate(listener, 'MessageCollector will soon no longer emit "message", use "collect" instead');
    ***REMOVED***
    super.on(eventName, listener);
  ***REMOVED***

  /**
   * Handle an incoming message for possible collection.
   * @param ***REMOVED***Message***REMOVED*** message The message that could be collected
   * @returns ***REMOVED***?***REMOVED***key: Snowflake, value: Message***REMOVED******REMOVED***
   * @private
   */
  handle(message) ***REMOVED***
    if (message.channel.id !== this.channel.id) return null;
    this.received++;
    return ***REMOVED***
      key: message.id,
      value: message,
    ***REMOVED***;
  ***REMOVED***

  /**
   * Check after collection to see if the collector is done.
   * @returns ***REMOVED***?string***REMOVED*** Reason to end the collector, if any
   * @private
   */
  postCheck() ***REMOVED***
    // Consider changing the end reasons for v12
    if (this.options.maxMatches && this.collected.size >= this.options.maxMatches) return 'matchesLimit';
    if (this.options.max && this.received >= this.options.max) return 'limit';
    return null;
  ***REMOVED***

  /**
   * Removes event listeners.
   * @private
   */
  cleanup() ***REMOVED***
    this.removeListener('collect', this._reEmitter);
    this.client.removeListener('message', this.listener);
    if (this.client.getMaxListeners() !== 0) this.client.setMaxListeners(this.client.getMaxListeners() - 1);
  ***REMOVED***
***REMOVED***

module.exports = MessageCollector;
