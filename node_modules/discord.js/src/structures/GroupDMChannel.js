const Channel = require('./Channel');
const TextBasedChannel = require('./interfaces/TextBasedChannel');
const Collection = require('../util/Collection');
const Constants = require('../util/Constants');

/*
***REMOVED*** type: 3,
  recipients:
   [ ***REMOVED*** username: 'Charlie',
       id: '123',
       discriminator: '6631',
       avatar: '123' ***REMOVED***,
     ***REMOVED*** username: 'Ben',
       id: '123',
       discriminator: '2055',
       avatar: '123' ***REMOVED***,
     ***REMOVED*** username: 'Adam',
       id: '123',
       discriminator: '2406',
       avatar: '123' ***REMOVED*** ],
  owner_id: '123',
  name: null,
  last_message_id: '123',
  id: '123',
  icon: null ***REMOVED***
*/

/**
 * Represents a Group DM on Discord.
 * @extends ***REMOVED***Channel***REMOVED***
 * @implements ***REMOVED***TextBasedChannel***REMOVED***
 */
class GroupDMChannel extends Channel ***REMOVED***
  constructor(client, data) ***REMOVED***
    super(client, data);
    this.type = 'group';
    this.messages = new Collection();
    this._typing = new Map();
  ***REMOVED***

  setup(data) ***REMOVED***
    super.setup(data);

    /**
     * The name of this Group DM, can be null if one isn't set
     * @type ***REMOVED***string***REMOVED***
     */
    this.name = data.name;

    /**
     * A hash of this Group DM icon
     * @type ***REMOVED***?string***REMOVED***
     */
    this.icon = data.icon;

    /**
     * The user ID of this Group DM's owner
     * @type ***REMOVED***string***REMOVED***
     */
    this.ownerID = data.owner_id;

    /**
     * If the DM is managed by an application
     * @type ***REMOVED***boolean***REMOVED***
     */
    this.managed = data.managed;

    /**
     * Application ID of the application that made this Group DM, if applicable
     * @type ***REMOVED***?string***REMOVED***
     */
    this.applicationID = data.application_id;

    if (data.nicks) ***REMOVED***
      /**
       * Nicknames for group members
       * @type ***REMOVED***?Collection<Snowflake, string>***REMOVED***
       */
      this.nicks = new Collection(data.nicks.map(n => [n.id, n.nick]));
    ***REMOVED***

    if (!this.recipients) ***REMOVED***
      /**
       * A collection of the recipients of this DM, mapped by their ID
       * @type ***REMOVED***Collection<Snowflake, User>***REMOVED***
       */
      this.recipients = new Collection();
    ***REMOVED***

    if (data.recipients) ***REMOVED***
      for (const recipient of data.recipients) ***REMOVED***
        const user = this.client.dataManager.newUser(recipient);
        this.recipients.set(user.id, user);
      ***REMOVED***
    ***REMOVED***

    /**
     * The ID of the last message in the channel, if one was sent
     * @type ***REMOVED***?Snowflake***REMOVED***
     */
    this.lastMessageID = data.last_message_id;

    /**
     * The timestamp when the last pinned message was pinned, if there was one
     * @type ***REMOVED***?number***REMOVED***
     */
    this.lastPinTimestamp = data.last_pin_timestamp ? new Date(data.last_pin_timestamp).getTime() : null;
  ***REMOVED***

  /**
   * The owner of this Group DM
   * @type ***REMOVED***User***REMOVED***
   * @readonly
   */
  get owner() ***REMOVED***
    return this.client.users.get(this.ownerID);
  ***REMOVED***

  /**
   * The URL to this guild's icon
   * @type ***REMOVED***?string***REMOVED***
   * @readonly
   */
  get iconURL() ***REMOVED***
    if (!this.icon) return null;
    return Constants.Endpoints.Channel(this).Icon(this.client.options.http.cdn, this.icon);
  ***REMOVED***

  edit(data) ***REMOVED***
    const _data = ***REMOVED******REMOVED***;
    if (data.name) _data.name = data.name;
    if (typeof data.icon !== 'undefined') _data.icon = data.icon;
    return this.client.rest.methods.updateGroupDMChannel(this, _data);
  ***REMOVED***

  /**
   * Whether this channel equals another channel. It compares all properties, so for most operations
   * it is advisable to just compare `channel.id === channel2.id` as it is much faster and is often
   * what most users need.
   * @param ***REMOVED***GroupDMChannel***REMOVED*** channel Channel to compare with
   * @returns ***REMOVED***boolean***REMOVED***
   */
  equals(channel) ***REMOVED***
    const equal = channel &&
      this.id === channel.id &&
      this.name === channel.name &&
      this.icon === channel.icon &&
      this.ownerID === channel.ownerID;

    if (equal) ***REMOVED***
      return this.recipients.equals(channel.recipients);
    ***REMOVED***

    return equal;
  ***REMOVED***

  /**
   * Add a user to the DM
   * @param ***REMOVED***UserResolvable|string***REMOVED*** accessTokenOrID Access token or user resolvable
   * @param ***REMOVED***string***REMOVED*** [nick] Permanent nickname to give the user (only available if a bot is creating the DM)
   * @returns ***REMOVED***Promise<GroupDMChannel>***REMOVED***
   */

  addUser(accessTokenOrID, nick) ***REMOVED***
    return this.client.rest.methods.addUserToGroupDM(this, ***REMOVED***
      nick,
      id: this.client.resolver.resolveUserID(accessTokenOrID),
      accessToken: accessTokenOrID,
    ***REMOVED***);
  ***REMOVED***

  /**
   * Set a new GroupDMChannel icon.
   * @param ***REMOVED***Base64Resolvable|BufferResolvable***REMOVED*** icon The new icon of the group dm
   * @returns ***REMOVED***Promise<GroupDMChannel>***REMOVED***
   * @example
   * // Edit the group dm icon
   * channel.setIcon('./icon.png')
   *  .then(updated => console.log('Updated the channel icon'))
   *  .catch(console.error);
   */
  setIcon(icon) ***REMOVED***
    return this.client.resolver.resolveImage(icon).then(data => this.edit(***REMOVED*** icon: data ***REMOVED***));
  ***REMOVED***

  /**
   * Sets a new name for this Group DM.
   * @param ***REMOVED***string***REMOVED*** name New name for this Group DM
   * @returns ***REMOVED***Promise<GroupDMChannel>***REMOVED***
   */
  setName(name) ***REMOVED***
    return this.edit(***REMOVED*** name ***REMOVED***);
  ***REMOVED***

  /**
   * Removes a user from this Group DM.
   * @param ***REMOVED***UserResolvable***REMOVED*** user User to remove
   * @returns ***REMOVED***Promise<GroupDMChannel>***REMOVED***
   */
  removeUser(user) ***REMOVED***
    const id = this.client.resolver.resolveUserID(user);
    return this.client.rest.methods.removeUserFromGroupDM(this, id);
  ***REMOVED***

  /**
   * When concatenated with a string, this automatically concatenates the channel's name instead of the Channel object.
   * @returns ***REMOVED***string***REMOVED***
   * @example
   * // Logs: Hello from My Group DM!
   * console.log(`Hello from $***REMOVED***channel***REMOVED***!`);
   * @example
   * // Logs: Hello from My Group DM!
   * console.log(`Hello from ' + channel + '!');
   */
  toString() ***REMOVED***
    return this.name;
  ***REMOVED***

  // These are here only for documentation purposes - they are implemented by TextBasedChannel
  /* eslint-disable no-empty-function */
  get lastPinAt() ***REMOVED******REMOVED***
  send() ***REMOVED******REMOVED***
  sendMessage() ***REMOVED******REMOVED***
  sendEmbed() ***REMOVED******REMOVED***
  sendFile() ***REMOVED******REMOVED***
  sendFiles() ***REMOVED******REMOVED***
  sendCode() ***REMOVED******REMOVED***
  fetchMessage() ***REMOVED******REMOVED***
  fetchMessages() ***REMOVED******REMOVED***
  fetchPinnedMessages() ***REMOVED******REMOVED***
  search() ***REMOVED******REMOVED***
  startTyping() ***REMOVED******REMOVED***
  stopTyping() ***REMOVED******REMOVED***
  get typing() ***REMOVED******REMOVED***
  get typingCount() ***REMOVED******REMOVED***
  createCollector() ***REMOVED******REMOVED***
  createMessageCollector() ***REMOVED******REMOVED***
  awaitMessages() ***REMOVED******REMOVED***
  // Doesn't work on Group DMs; bulkDelete() ***REMOVED******REMOVED***
  acknowledge() ***REMOVED******REMOVED***
  _cacheMessage() ***REMOVED******REMOVED***
***REMOVED***

TextBasedChannel.applyToClass(GroupDMChannel, true, ['bulkDelete']);

module.exports = GroupDMChannel;
