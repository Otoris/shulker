const Snowflake = require('../util/Snowflake');
const Permissions = require('../util/Permissions');
const util = require('util');

/**
 * Represents a role on Discord.
 */
class Role ***REMOVED***
  constructor(guild, data) ***REMOVED***
    /**
     * The client that instantiated the role
     * @name Role#client
     * @type ***REMOVED***Client***REMOVED***
     * @readonly
     */
    Object.defineProperty(this, 'client', ***REMOVED*** value: guild.client ***REMOVED***);

    /**
     * The guild that the role belongs to
     * @type ***REMOVED***Guild***REMOVED***
     */
    this.guild = guild;

    /**
     * Whether the role has been deleted
     * @type ***REMOVED***boolean***REMOVED***
     */
    this.deleted = false;

    if (data) this.setup(data);
  ***REMOVED***

  setup(data) ***REMOVED***
    /**
     * The ID of the role (unique to the guild it is part of)
     * @type ***REMOVED***Snowflake***REMOVED***
     */
    this.id = data.id;

    /**
     * The name of the role
     * @type ***REMOVED***string***REMOVED***
     */
    this.name = data.name;

    /**
     * The base 10 color of the role
     * @type ***REMOVED***number***REMOVED***
     */
    this.color = data.color;

    /**
     * If true, users that are part of this role will appear in a separate category in the users list
     * @type ***REMOVED***boolean***REMOVED***
     */
    this.hoist = data.hoist;

    /**
     * The position of the role from the API
     * @type ***REMOVED***number***REMOVED***
     */
    this.position = data.position;

    /**
     * The permissions bitfield of the role
     * @type ***REMOVED***number***REMOVED***
     */
    this.permissions = data.permissions;

    /**
     * Whether or not the role is managed by an external service
     * @type ***REMOVED***boolean***REMOVED***
     */
    this.managed = data.managed;

    /**
     * Whether or not the role can be mentioned by anyone
     * @type ***REMOVED***boolean***REMOVED***
     */
    this.mentionable = data.mentionable;
  ***REMOVED***

  /**
   * The timestamp the role was created at
   * @type ***REMOVED***number***REMOVED***
   * @readonly
   */
  get createdTimestamp() ***REMOVED***
    return Snowflake.deconstruct(this.id).timestamp;
  ***REMOVED***

  /**
   * The time the role was created
   * @type ***REMOVED***Date***REMOVED***
   * @readonly
   */
  get createdAt() ***REMOVED***
    return new Date(this.createdTimestamp);
  ***REMOVED***

  /**
   * The hexadecimal version of the role color, with a leading hashtag
   * @type ***REMOVED***string***REMOVED***
   * @readonly
   */
  get hexColor() ***REMOVED***
    let col = this.color.toString(16);
    while (col.length < 6) col = `0$***REMOVED***col***REMOVED***`;
    return `#$***REMOVED***col***REMOVED***`;
  ***REMOVED***

  /**
   * The cached guild members that have this role
   * @type ***REMOVED***Collection<Snowflake, GuildMember>***REMOVED***
   * @readonly
   */
  get members() ***REMOVED***
    return this.guild.members.filter(m => m.roles.has(this.id));
  ***REMOVED***

  /**
   * Whether the role is editable by the client user
   * @type ***REMOVED***boolean***REMOVED***
   * @readonly
   */
  get editable() ***REMOVED***
    if (this.managed) return false;
    const clientMember = this.guild.member(this.client.user);
    if (!clientMember.permissions.has(Permissions.FLAGS.MANAGE_ROLES_OR_PERMISSIONS)) return false;
    return clientMember.highestRole.comparePositionTo(this) > 0;
  ***REMOVED***

  /**
   * The position of the role in the role manager
   * @type ***REMOVED***number***REMOVED***
   * @readonly
   */
  get calculatedPosition() ***REMOVED***
    const sorted = this.guild._sortedRoles;
    return sorted.array().indexOf(sorted.get(this.id));
  ***REMOVED***

  /**
   * Get an object mapping permission names to whether or not the role enables that permission.
   * @returns ***REMOVED***Object<string, boolean>***REMOVED***
   * @example
   * // Print the serialized role permissions
   * console.log(role.serialize());
   */
  serialize() ***REMOVED***
    return new Permissions(this.permissions).serialize();
  ***REMOVED***

  /**
   * Checks if the role has a permission.
   * @param ***REMOVED***PermissionResolvable***REMOVED*** permission Permission(s) to check for
   * @param ***REMOVED***boolean***REMOVED*** [explicit=false] Whether to require the role to explicitly have the exact permission
   * **(deprecated)**
   * @param ***REMOVED***boolean***REMOVED*** [checkAdmin] Whether to allow the administrator permission to override
   * (takes priority over `explicit`)
   * @returns ***REMOVED***boolean***REMOVED***
   * @example
   * // See if a role can ban a member
   * if (role.hasPermission('BAN_MEMBERS')) ***REMOVED***
   *   console.log('This role can ban members');
   * ***REMOVED*** else ***REMOVED***
   *   console.log('This role can\'t ban members');
   * ***REMOVED***
   */
  hasPermission(permission, explicit = false, checkAdmin) ***REMOVED***
    return new Permissions(this.permissions).has(
      permission, typeof checkAdmin !== 'undefined' ? checkAdmin : !explicit
    );
  ***REMOVED***

  /**
   * Checks if the role has all specified permissions.
   * @param ***REMOVED***PermissionResolvable***REMOVED*** permissions The permissions to check for
   * @param ***REMOVED***boolean***REMOVED*** [explicit=false] Whether to require the role to explicitly have the exact permissions
   * @returns ***REMOVED***boolean***REMOVED***
   * @deprecated
   */
  hasPermissions(permissions, explicit = false) ***REMOVED***
    return new Permissions(this.permissions).has(permissions, !explicit);
  ***REMOVED***

  /**
   * Compares this role's position to another role's.
   * @param ***REMOVED***Role***REMOVED*** role Role to compare to this one
   * @returns ***REMOVED***number***REMOVED*** Negative number if this role's position is lower (other role's is higher),
   * positive number if this one is higher (other's is lower), 0 if equal
   */
  comparePositionTo(role) ***REMOVED***
    return this.constructor.comparePositions(this, role);
  ***REMOVED***

  /**
   * The data for a role.
   * @typedef ***REMOVED***Object***REMOVED*** RoleData
   * @property ***REMOVED***string***REMOVED*** [name] The name of the role
   * @property ***REMOVED***ColorResolvable***REMOVED*** [color] The color of the role, either a hex string or a base 10 number
   * @property ***REMOVED***boolean***REMOVED*** [hoist] Whether or not the role should be hoisted
   * @property ***REMOVED***number***REMOVED*** [position] The position of the role
   * @property ***REMOVED***PermissionResolvable|number***REMOVED*** [permissions] The permissions of the role
   * @property ***REMOVED***boolean***REMOVED*** [mentionable] Whether or not the role should be mentionable
   */

  /**
   * Edits the role.
   * @param ***REMOVED***RoleData***REMOVED*** data The new data for the role
   * @param ***REMOVED***string***REMOVED*** [reason] The reason for editing this role
   * @returns ***REMOVED***Promise<Role>***REMOVED***
   * @example
   * // Edit name of a role
   * role.edit(***REMOVED*** name: 'New Name' ***REMOVED***)
   *   .then(updated => console.log(`Edited role name from $***REMOVED***role.name***REMOVED*** to $***REMOVED***updated.name***REMOVED***`))
   *   .catch(console.error);
   */
  edit(data, reason) ***REMOVED***
    return this.client.rest.methods.updateGuildRole(this, data, reason);
  ***REMOVED***

  /**
   * Set a new name for the role.
   * @param ***REMOVED***string***REMOVED*** name The new name of the role
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for changing the role's name
   * @returns ***REMOVED***Promise<Role>***REMOVED***
   * @example
   * // Set the name of the role
   * role.setName('New Name')
   *   .then(updated => console.log(`Edited role name from $***REMOVED***role.name***REMOVED*** to $***REMOVED***updated.name***REMOVED***`))
   *   .catch(console.error);
   */
  setName(name, reason) ***REMOVED***
    return this.edit(***REMOVED*** name ***REMOVED***, reason);
  ***REMOVED***

  /**
   * Set a new color for the role.
   * @param ***REMOVED***ColorResolvable***REMOVED*** color The color of the role
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for changing the role's color
   * @returns ***REMOVED***Promise<Role>***REMOVED***
   * @example
   * // Set the color of a role
   * role.setColor('#FF0000')
   *   .then(updated => console.log(`Set color of role to $***REMOVED***role.color***REMOVED***`))
   *   .catch(console.error);
   */
  setColor(color, reason) ***REMOVED***
    return this.edit(***REMOVED*** color ***REMOVED***, reason);
  ***REMOVED***

  /**
   * Set whether or not the role should be hoisted.
   * @param ***REMOVED***boolean***REMOVED*** hoist Whether or not to hoist the role
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for setting whether or not the role should be hoisted
   * @returns ***REMOVED***Promise<Role>***REMOVED***
   * @example
   * // Set the hoist of the role
   * role.setHoist(true)
   *   .then(updated => console.log(`Role hoisted: $***REMOVED***updated.hoist***REMOVED***`))
   *   .catch(console.error);
   */
  setHoist(hoist, reason) ***REMOVED***
    return this.edit(***REMOVED*** hoist ***REMOVED***, reason);
  ***REMOVED***

  /**
   * Set the position of the role.
   * @param ***REMOVED***number***REMOVED*** position The position of the role
   * @param ***REMOVED***boolean***REMOVED*** [relative=false] Move the position relative to its current value
   * @returns ***REMOVED***Promise<Role>***REMOVED***
   * @example
   * // Set the position of the role
   * role.setPosition(1)
   *   .then(updated => console.log(`Role position: $***REMOVED***updated.position***REMOVED***`))
   *   .catch(console.error);
   */
  setPosition(position, relative) ***REMOVED***
    return this.guild.setRolePosition(this, position, relative).then(() => this);
  ***REMOVED***

  /**
   * Set the permissions of the role.
   * @param ***REMOVED***PermissionResolvable***REMOVED*** permissions The permissions of the role
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for changing the role's permissions
   * @returns ***REMOVED***Promise<Role>***REMOVED***
   * @example
   * // Set the permissions of the role
   * role.setPermissions(['KICK_MEMBERS', 'BAN_MEMBERS'])
   *   .then(updated => console.log(`Updated permissions to $***REMOVED***updated.permissions.bitfield***REMOVED***`))
   *   .catch(console.error);
   * @example
   * // Remove all permissions from a role
   * role.setPermissions(0)
   *   .then(updated => console.log(`Updated permissions to $***REMOVED***updated.permissions.bitfield***REMOVED***`))
   *   .catch(console.error);
   */
  setPermissions(permissions, reason) ***REMOVED***
    return this.edit(***REMOVED*** permissions ***REMOVED***, reason);
  ***REMOVED***

  /**
   * Set whether this role is mentionable.
   * @param ***REMOVED***boolean***REMOVED*** mentionable Whether this role should be mentionable
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for setting whether or not this role should be mentionable
   * @returns ***REMOVED***Promise<Role>***REMOVED***
   * @example
   * // Make the role mentionable
   * role.setMentionable(true, 'Role needs to be pinged')
   *   .then(updated => console.log(`Role mentionable: $***REMOVED***updated.mentionable***REMOVED***`))
   *   .catch(console.error);
   */
  setMentionable(mentionable, reason) ***REMOVED***
    return this.edit(***REMOVED*** mentionable ***REMOVED***, reason);
  ***REMOVED***

  /**
   * Deletes the role.
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for deleting the role
   * @returns ***REMOVED***Promise<Role>***REMOVED***
   * @example
   * // Delete a role
   * role.delete('The role needed to go')
   *   .then(deleted => console.log(`Deleted role $***REMOVED***deleted.name***REMOVED***`))
   *   .catch(console.error);
   */
  delete(reason) ***REMOVED***
    return this.client.rest.methods.deleteGuildRole(this, reason);
  ***REMOVED***

  /**
   * Whether this role equals another role. It compares all properties, so for most operations
   * it is advisable to just compare `role.id === role2.id` as it is much faster and is often
   * what most users need.
   * @param ***REMOVED***Role***REMOVED*** role Role to compare with
   * @returns ***REMOVED***boolean***REMOVED***
   */
  equals(role) ***REMOVED***
    return role &&
      this.id === role.id &&
      this.name === role.name &&
      this.color === role.color &&
      this.hoist === role.hoist &&
      this.position === role.position &&
      this.permissions === role.permissions &&
      this.managed === role.managed;
  ***REMOVED***

  /**
   * When concatenated with a string, this automatically concatenates the role mention rather than the Role object.
   * @returns ***REMOVED***string***REMOVED***
   */
  toString() ***REMOVED***
    if (this.id === this.guild.id) return '@everyone';
    return `<@&$***REMOVED***this.id***REMOVED***>`;
  ***REMOVED***

  /**
   * Compares the positions of two roles.
   * @param ***REMOVED***Role***REMOVED*** role1 First role to compare
   * @param ***REMOVED***Role***REMOVED*** role2 Second role to compare
   * @returns ***REMOVED***number***REMOVED*** Negative number if the first role's position is lower (second role's is higher),
   * positive number if the first's is higher (second's is lower), 0 if equal
   */
  static comparePositions(role1, role2) ***REMOVED***
    if (role1.position === role2.position) return role2.id - role1.id;
    return role1.position - role2.position;
  ***REMOVED***
***REMOVED***

Role.prototype.hasPermissions = util
  .deprecate(Role.prototype.hasPermissions,
    'Role#hasPermissions is deprecated - use Role#hasPermission instead, it now takes an array');

module.exports = Role;
