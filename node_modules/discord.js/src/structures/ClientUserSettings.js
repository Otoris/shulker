const Constants = require('../util/Constants');
const Util = require('../util/Util');

/**
 * A wrapper around the ClientUser's settings.
 */
class ClientUserSettings ***REMOVED***
  constructor(user, data) ***REMOVED***
    this.user = user;
    this.patch(data);
  ***REMOVED***

  /**
   * Patch the data contained in this class with new partial data.
   * @param ***REMOVED***Object***REMOVED*** data Data to patch this with
   * @returns ***REMOVED***void***REMOVED***
   * @private
   */
  patch(data) ***REMOVED***
    for (const key of Object.keys(Constants.UserSettingsMap)) ***REMOVED***
      const value = Constants.UserSettingsMap[key];
      if (!data.hasOwnProperty(key)) continue;
      if (typeof value === 'function') ***REMOVED***
        this[value.name] = value(data[key]);
      ***REMOVED*** else ***REMOVED***
        this[value] = data[key];
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  /**
   * Update a specific property of of user settings.
   * @param ***REMOVED***string***REMOVED*** name Name of property
   * @param ***REMOVED*******REMOVED*** value Value to patch
   * @returns ***REMOVED***Promise<Object>***REMOVED***
   */
  update(name, value) ***REMOVED***
    return this.user.client.rest.methods.patchUserSettings(***REMOVED*** [name]: value ***REMOVED***);
  ***REMOVED***

  /**
   * Sets the position at which this guild will appear in the Discord client.
   * @param ***REMOVED***Guild***REMOVED*** guild The guild to move
   * @param ***REMOVED***number***REMOVED*** position Absolute or relative position
   * @param ***REMOVED***boolean***REMOVED*** [relative=false] Whether to position relatively or absolutely
   * @returns ***REMOVED***Promise<Guild>***REMOVED***
   */
  setGuildPosition(guild, position, relative) ***REMOVED***
    const temp = Object.assign([], this.guildPositions);
    Util.moveElementInArray(temp, guild.id, position, relative);
    return this.update('guild_positions', temp).then(() => guild);
  ***REMOVED***

  /**
   * Add a guild to the list of restricted guilds.
   * @param ***REMOVED***Guild***REMOVED*** guild The guild to add
   * @returns ***REMOVED***Promise<Guild>***REMOVED***
   */
  addRestrictedGuild(guild) ***REMOVED***
    const temp = Object.assign([], this.restrictedGuilds);
    if (temp.includes(guild.id)) return Promise.reject(new Error('Guild is already restricted'));
    temp.push(guild.id);
    return this.update('restricted_guilds', temp).then(() => guild);
  ***REMOVED***

  /**
   * Remove a guild from the list of restricted guilds.
   * @param ***REMOVED***Guild***REMOVED*** guild The guild to remove
   * @returns ***REMOVED***Promise<Guild>***REMOVED***
   */
  removeRestrictedGuild(guild) ***REMOVED***
    const temp = Object.assign([], this.restrictedGuilds);
    const index = temp.indexOf(guild.id);
    if (index < 0) return Promise.reject(new Error('Guild is not restricted'));
    temp.splice(index, 1);
    return this.update('restricted_guilds', temp).then(() => guild);
  ***REMOVED***
***REMOVED***

module.exports = ClientUserSettings;
