/**
 * The information account for an integration
 * @typedef ***REMOVED***Object***REMOVED*** IntegrationAccount
 * @property ***REMOVED***string***REMOVED*** id The id of the account
 * @property ***REMOVED***string***REMOVED*** name The name of the account
 */

/**
 *  Represents a guild integration.
 */
class Integration ***REMOVED***
  constructor(client, data, guild) ***REMOVED***
    /**
     * The client that created this integration
     * @name Integration#client
     * @type ***REMOVED***Client***REMOVED***
     * @readonly
     */
    Object.defineProperty(this, 'client', ***REMOVED*** value: client ***REMOVED***);

    /**
     * The guild this integration belongs to
     * @type ***REMOVED***Guild***REMOVED***
     */
    this.guild = guild;

    /**
     * The integration id
     * @type ***REMOVED***Snowflake***REMOVED***
     */
    this.id = data.id;

    /**
     * The integration name
     * @type ***REMOVED***string***REMOVED***
     */
    this.name = data.name;
    /**
     * The integration type (twitch, youtube, etc)
     * @type ***REMOVED***string***REMOVED***
     */
    this.type = data.type;

    /**
     * Whether this integration is enabled
     * @type ***REMOVED***boolean***REMOVED***
     */
    this.enabled = data.enabled;

    /**
     * Whether this integration is syncing
     * @type ***REMOVED***boolean***REMOVED***
     */
    this.syncing = data.syncing;

    /**
     * The role that this integration uses for subscribers
     * @type ***REMOVED***Role***REMOVED***
     */
    this.role = this.guild.roles.get(data.role_id);

    /**
     * The user for this integration
     * @type ***REMOVED***User***REMOVED***
     */
    this.user = this.client.dataManager.newUser(data.user);

    /**
     * The account integration information
     * @type ***REMOVED***IntegrationAccount***REMOVED***
     */
    this.account = data.account;

    /**
     * The last time this integration was last synced
     * @type ***REMOVED***number***REMOVED***
     */
    this.syncedAt = data.synced_at;
    this._patch(data);
  ***REMOVED***

  _patch(data) ***REMOVED***
    /**
     * The behavior of expiring subscribers
     * @type ***REMOVED***number***REMOVED***
     */
    this.expireBehavior = data.expire_behavior;

    /**
     * The grace period before expiring subscribers
     * @type ***REMOVED***number***REMOVED***
     */
    this.expireGracePeriod = data.expire_grace_period;
  ***REMOVED***

  /**
   * Syncs this integration
   * @returns ***REMOVED***Promise<Integration>***REMOVED***
   */
  sync() ***REMOVED***
    this.syncing = true;
    return this.client.rest.methods.syncIntegration(this)
      .then(() => ***REMOVED***
        this.syncing = false;
        this.syncedAt = Date.now();
        return this;
      ***REMOVED***);
  ***REMOVED***

  /**
   * The data for editing an integration.
   * @typedef ***REMOVED***Object***REMOVED*** IntegrationEditData
   * @property ***REMOVED***number***REMOVED*** [expireBehavior] The new behaviour of expiring subscribers
   * @property ***REMOVED***number***REMOVED*** [expireGracePeriod] The new grace period before expiring subscribers
   */

  /**
   * Edits this integration.
   * @param ***REMOVED***IntegrationEditData***REMOVED*** data The data to edit this integration with
   * @param ***REMOVED***string***REMOVED*** reason Reason for editing this integration
   * @returns ***REMOVED***Promise<Integration>***REMOVED***
   */
  edit(data, reason) ***REMOVED***
    if ('expireBehavior' in data) ***REMOVED***
      data.expire_behavior = data.expireBehavior;
      data.expireBehavior = undefined;
    ***REMOVED***
    if ('expireGracePeriod' in data) ***REMOVED***
      data.expire_grace_period = data.expireGracePeriod;
      data.expireGracePeriod = undefined;
    ***REMOVED***
    // The option enable_emoticons is only available for Twitch at this moment
    return this.client.rest.methods.editIntegration(this, data, reason)
      .then(() => ***REMOVED***
        this._patch(data);
        return this;
      ***REMOVED***);
  ***REMOVED***

  /**
   * Deletes this integration.
   * @returns ***REMOVED***Promise<Integration>***REMOVED***
   * @param ***REMOVED***string***REMOVED*** [reason] Reason for deleting this integration
   */
  delete(reason) ***REMOVED***
    return this.client.rest.methods.deleteIntegration(this, reason)
      .then(() => this);
  ***REMOVED***
***REMOVED***

module.exports = Integration;
