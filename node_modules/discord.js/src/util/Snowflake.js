const Long = require('long');

// Discord epoch (2015-01-01T00:00:00.000Z)
const EPOCH = 1420070400000;
let INCREMENT = 0;

/**
 * A container for useful snowflake-related methods.
 */
class SnowflakeUtil ***REMOVED***
  constructor() ***REMOVED***
    throw new Error(`The $***REMOVED***this.constructor.name***REMOVED*** class may not be instantiated.`);
  ***REMOVED***

  /**
   * A Twitter snowflake, except the epoch is 2015-01-01T00:00:00.000Z
   * ```
   * If we have a snowflake '266241948824764416' we can represent it as binary:
   *
   * 64                                          22     17     12          0
   *  000000111011000111100001101001000101000000  00001  00000  000000000000
   *       number of ms since Discord epoch       worker  pid    increment
   * ```
   * @typedef ***REMOVED***string***REMOVED*** Snowflake
   */

  /**
   * Generates a Discord snowflake.
   * <info>This hardcodes the worker ID as 1 and the process ID as 0.</info>
   * @param ***REMOVED***number|Date***REMOVED*** [timestamp=Date.now()] Timestamp or date of the snowflake to generate
   * @returns ***REMOVED***Snowflake***REMOVED*** The generated snowflake
   */
  static generate(timestamp = Date.now()) ***REMOVED***
    if (timestamp instanceof Date) timestamp = timestamp.getTime();
    if (typeof timestamp !== 'number' || isNaN(timestamp)) ***REMOVED***
      throw new TypeError(
        `"timestamp" argument must be a number (received $***REMOVED***isNaN(timestamp) ? 'NaN' : typeof timestamp***REMOVED***)`
      );
    ***REMOVED***
    if (INCREMENT >= 4095) INCREMENT = 0;
    const BINARY = `$***REMOVED***pad((timestamp - EPOCH).toString(2), 42)***REMOVED***0000100000$***REMOVED***pad((INCREMENT++).toString(2), 12)***REMOVED***`;
    return Long.fromString(BINARY, 2).toString();
  ***REMOVED***

  /**
   * A deconstructed snowflake.
   * @typedef ***REMOVED***Object***REMOVED*** DeconstructedSnowflake
   * @property ***REMOVED***number***REMOVED*** timestamp Timestamp the snowflake was created
   * @property ***REMOVED***Date***REMOVED*** date Date the snowflake was created
   * @property ***REMOVED***number***REMOVED*** workerID Worker ID in the snowflake
   * @property ***REMOVED***number***REMOVED*** processID Process ID in the snowflake
   * @property ***REMOVED***number***REMOVED*** increment Increment in the snowflake
   * @property ***REMOVED***string***REMOVED*** binary Binary representation of the snowflake
   */

  /**
   * Deconstructs a Discord snowflake.
   * @param ***REMOVED***Snowflake***REMOVED*** snowflake Snowflake to deconstruct
   * @returns ***REMOVED***DeconstructedSnowflake***REMOVED*** Deconstructed snowflake
   */
  static deconstruct(snowflake) ***REMOVED***
    const BINARY = pad(Long.fromString(snowflake).toString(2), 64);
    const res = ***REMOVED***
      timestamp: parseInt(BINARY.substring(0, 42), 2) + EPOCH,
      workerID: parseInt(BINARY.substring(42, 47), 2),
      processID: parseInt(BINARY.substring(47, 52), 2),
      increment: parseInt(BINARY.substring(52, 64), 2),
      binary: BINARY,
    ***REMOVED***;
    Object.defineProperty(res, 'date', ***REMOVED***
      get: function get() ***REMOVED*** return new Date(this.timestamp); ***REMOVED***,
      enumerable: true,
    ***REMOVED***);
    return res;
  ***REMOVED***
***REMOVED***

function pad(v, n, c = '0') ***REMOVED***
  return String(v).length >= n ? String(v) : (String(c).repeat(n) + v).slice(-n);
***REMOVED***

module.exports = SnowflakeUtil;
