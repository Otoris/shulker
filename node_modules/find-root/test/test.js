/* globals describe, it */
var chai = require('chai')
chai.should()
var expect = chai.expect
var moquire = require('moquire')

var MODULE = '../'

describe('find-root', function () ***REMOVED***
  it('recursively looks for package.json', function () ***REMOVED***
    var checked = []
    var fs = ***REMOVED***
      existsSync: function (path) ***REMOVED***
        checked.push(path)
        return path === '/foo/package.json'
      ***REMOVED***
    ***REMOVED***

    var findRoot = moquire(MODULE, ***REMOVED***fs: fs***REMOVED***)

    findRoot('/foo/bar/baz')
      .should.equal('/foo')

    checked.should.deep.equal([
      '/foo/bar/baz/package.json',
      '/foo/bar/package.json',
      '/foo/package.json'
    ])
  ***REMOVED***)

  it('can take a custom check argument', function () ***REMOVED***
    var checked = []

    var findRoot = require(MODULE)

    findRoot('/foo/bar/baz', function (dir) ***REMOVED***
      checked.push(dir)
      return dir === '/foo/bar'
    ***REMOVED***)
    .should.equal('/foo/bar')

    checked.should.deep.equal([
      '/foo/bar/baz',
      '/foo/bar'
    ])
  ***REMOVED***)

  it('throws if not found', function () ***REMOVED***
    var fs = ***REMOVED***
      statSync: function (path) ***REMOVED***
        throw new Error()
      ***REMOVED***
    ***REMOVED***

    var findRoot = moquire(MODULE, ***REMOVED***fs: fs***REMOVED***)

    expect(function () ***REMOVED***
      findRoot('/foo/bar/baz/')
    ***REMOVED***).to.throw('not found')
  ***REMOVED***)
***REMOVED***)
