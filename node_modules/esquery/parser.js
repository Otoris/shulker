var result = (function()***REMOVED***
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) ***REMOVED***
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  ***REMOVED***
  
  var result = ***REMOVED***
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) ***REMOVED***
      var parseFunctions = ***REMOVED***
        "start": parse_start,
        "_": parse__,
        "identifierName": parse_identifierName,
        "binaryOp": parse_binaryOp,
        "selectors": parse_selectors,
        "selector": parse_selector,
        "sequence": parse_sequence,
        "atom": parse_atom,
        "wildcard": parse_wildcard,
        "identifier": parse_identifier,
        "attr": parse_attr,
        "attrOps": parse_attrOps,
        "attrEqOps": parse_attrEqOps,
        "attrName": parse_attrName,
        "attrValue": parse_attrValue,
        "string": parse_string,
        "number": parse_number,
        "path": parse_path,
        "type": parse_type,
        "regex": parse_regex,
        "field": parse_field,
        "negation": parse_negation,
        "matches": parse_matches,
        "has": parse_has,
        "firstChild": parse_firstChild,
        "lastChild": parse_lastChild,
        "nthChild": parse_nthChild,
        "nthLastChild": parse_nthLastChild,
        "class": parse_class
      ***REMOVED***;
      
      if (startRule !== undefined) ***REMOVED***
        if (parseFunctions[startRule] === undefined) ***REMOVED***
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        startRule = "start";
      ***REMOVED***
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      var cache = ***REMOVED******REMOVED***;
      
      function padLeft(input, padding, length) ***REMOVED***
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) ***REMOVED***
          result = padding + result;
        ***REMOVED***
        
        return result;
      ***REMOVED***
      
      function escape(ch) ***REMOVED***
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) ***REMOVED***
          escapeChar = 'x';
          length = 2;
        ***REMOVED*** else ***REMOVED***
          escapeChar = 'u';
          length = 4;
        ***REMOVED***
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      ***REMOVED***
      
      function matchFailed(failure) ***REMOVED***
        if (pos < rightmostFailuresPos) ***REMOVED***
          return;
        ***REMOVED***
        
        if (pos > rightmostFailuresPos) ***REMOVED***
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        ***REMOVED***
        
        rightmostFailuresExpected.push(failure);
      ***REMOVED***
      
      function parse_start() ***REMOVED***
        var cacheKey = "start@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse__();
        if (result0 !== null) ***REMOVED***
          result1 = parse_selectors();
          if (result1 !== null) ***REMOVED***
            result2 = parse__();
            if (result2 !== null) ***REMOVED***
              result0 = [result0, result1, result2];
            ***REMOVED*** else ***REMOVED***
              result0 = null;
              pos = pos1;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, ss) ***REMOVED*** return ss.length === 1 ? ss[0] : ***REMOVED*** type: 'matches', selectors: ss ***REMOVED***; ***REMOVED***)(pos0, result0[1]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos0 = pos;
          result0 = parse__();
          if (result0 !== null) ***REMOVED***
            result0 = (function(offset) ***REMOVED*** return void 0; ***REMOVED***)(pos0);
          ***REMOVED***
          if (result0 === null) ***REMOVED***
            pos = pos0;
          ***REMOVED***
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse__() ***REMOVED***
        var cacheKey = "_@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1;
        
        result0 = [];
        if (input.charCodeAt(pos) === 32) ***REMOVED***
          result1 = " ";
          pos++;
        ***REMOVED*** else ***REMOVED***
          result1 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("\" \"");
          ***REMOVED***
        ***REMOVED***
        while (result1 !== null) ***REMOVED***
          result0.push(result1);
          if (input.charCodeAt(pos) === 32) ***REMOVED***
            result1 = " ";
            pos++;
          ***REMOVED*** else ***REMOVED***
            result1 = null;
            if (reportFailures === 0) ***REMOVED***
              matchFailed("\" \"");
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_identifierName() ***REMOVED***
        var cacheKey = "identifierName@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[^ [\],():#!=><~+.]/.test(input.charAt(pos))) ***REMOVED***
          result1 = input.charAt(pos);
          pos++;
        ***REMOVED*** else ***REMOVED***
          result1 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("[^ [\\],():#!=><~+.]");
          ***REMOVED***
        ***REMOVED***
        if (result1 !== null) ***REMOVED***
          result0 = [];
          while (result1 !== null) ***REMOVED***
            result0.push(result1);
            if (/^[^ [\],():#!=><~+.]/.test(input.charAt(pos))) ***REMOVED***
              result1 = input.charAt(pos);
              pos++;
            ***REMOVED*** else ***REMOVED***
              result1 = null;
              if (reportFailures === 0) ***REMOVED***
                matchFailed("[^ [\\],():#!=><~+.]");
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, i) ***REMOVED*** return i.join(''); ***REMOVED***)(pos0, result0);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_binaryOp() ***REMOVED***
        var cacheKey = "binaryOp@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse__();
        if (result0 !== null) ***REMOVED***
          if (input.charCodeAt(pos) === 62) ***REMOVED***
            result1 = ">";
            pos++;
          ***REMOVED*** else ***REMOVED***
            result1 = null;
            if (reportFailures === 0) ***REMOVED***
              matchFailed("\">\"");
            ***REMOVED***
          ***REMOVED***
          if (result1 !== null) ***REMOVED***
            result2 = parse__();
            if (result2 !== null) ***REMOVED***
              result0 = [result0, result1, result2];
            ***REMOVED*** else ***REMOVED***
              result0 = null;
              pos = pos1;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset) ***REMOVED*** return 'child'; ***REMOVED***)(pos0);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos0 = pos;
          pos1 = pos;
          result0 = parse__();
          if (result0 !== null) ***REMOVED***
            if (input.charCodeAt(pos) === 126) ***REMOVED***
              result1 = "~";
              pos++;
            ***REMOVED*** else ***REMOVED***
              result1 = null;
              if (reportFailures === 0) ***REMOVED***
                matchFailed("\"~\"");
              ***REMOVED***
            ***REMOVED***
            if (result1 !== null) ***REMOVED***
              result2 = parse__();
              if (result2 !== null) ***REMOVED***
                result0 = [result0, result1, result2];
              ***REMOVED*** else ***REMOVED***
                result0 = null;
                pos = pos1;
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result0 = null;
              pos = pos1;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
          if (result0 !== null) ***REMOVED***
            result0 = (function(offset) ***REMOVED*** return 'sibling'; ***REMOVED***)(pos0);
          ***REMOVED***
          if (result0 === null) ***REMOVED***
            pos = pos0;
          ***REMOVED***
          if (result0 === null) ***REMOVED***
            pos0 = pos;
            pos1 = pos;
            result0 = parse__();
            if (result0 !== null) ***REMOVED***
              if (input.charCodeAt(pos) === 43) ***REMOVED***
                result1 = "+";
                pos++;
              ***REMOVED*** else ***REMOVED***
                result1 = null;
                if (reportFailures === 0) ***REMOVED***
                  matchFailed("\"+\"");
                ***REMOVED***
              ***REMOVED***
              if (result1 !== null) ***REMOVED***
                result2 = parse__();
                if (result2 !== null) ***REMOVED***
                  result0 = [result0, result1, result2];
                ***REMOVED*** else ***REMOVED***
                  result0 = null;
                  pos = pos1;
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                result0 = null;
                pos = pos1;
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result0 = null;
              pos = pos1;
            ***REMOVED***
            if (result0 !== null) ***REMOVED***
              result0 = (function(offset) ***REMOVED*** return 'adjacent'; ***REMOVED***)(pos0);
            ***REMOVED***
            if (result0 === null) ***REMOVED***
              pos = pos0;
            ***REMOVED***
            if (result0 === null) ***REMOVED***
              pos0 = pos;
              pos1 = pos;
              if (input.charCodeAt(pos) === 32) ***REMOVED***
                result0 = " ";
                pos++;
              ***REMOVED*** else ***REMOVED***
                result0 = null;
                if (reportFailures === 0) ***REMOVED***
                  matchFailed("\" \"");
                ***REMOVED***
              ***REMOVED***
              if (result0 !== null) ***REMOVED***
                result1 = parse__();
                if (result1 !== null) ***REMOVED***
                  result0 = [result0, result1];
                ***REMOVED*** else ***REMOVED***
                  result0 = null;
                  pos = pos1;
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                result0 = null;
                pos = pos1;
              ***REMOVED***
              if (result0 !== null) ***REMOVED***
                result0 = (function(offset) ***REMOVED*** return 'descendant'; ***REMOVED***)(pos0);
              ***REMOVED***
              if (result0 === null) ***REMOVED***
                pos = pos0;
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_selectors() ***REMOVED***
        var cacheKey = "selectors@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_selector();
        if (result0 !== null) ***REMOVED***
          result1 = [];
          pos2 = pos;
          result2 = parse__();
          if (result2 !== null) ***REMOVED***
            if (input.charCodeAt(pos) === 44) ***REMOVED***
              result3 = ",";
              pos++;
            ***REMOVED*** else ***REMOVED***
              result3 = null;
              if (reportFailures === 0) ***REMOVED***
                matchFailed("\",\"");
              ***REMOVED***
            ***REMOVED***
            if (result3 !== null) ***REMOVED***
              result4 = parse__();
              if (result4 !== null) ***REMOVED***
                result5 = parse_selector();
                if (result5 !== null) ***REMOVED***
                  result2 = [result2, result3, result4, result5];
                ***REMOVED*** else ***REMOVED***
                  result2 = null;
                  pos = pos2;
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                result2 = null;
                pos = pos2;
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result2 = null;
              pos = pos2;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result2 = null;
            pos = pos2;
          ***REMOVED***
          while (result2 !== null) ***REMOVED***
            result1.push(result2);
            pos2 = pos;
            result2 = parse__();
            if (result2 !== null) ***REMOVED***
              if (input.charCodeAt(pos) === 44) ***REMOVED***
                result3 = ",";
                pos++;
              ***REMOVED*** else ***REMOVED***
                result3 = null;
                if (reportFailures === 0) ***REMOVED***
                  matchFailed("\",\"");
                ***REMOVED***
              ***REMOVED***
              if (result3 !== null) ***REMOVED***
                result4 = parse__();
                if (result4 !== null) ***REMOVED***
                  result5 = parse_selector();
                  if (result5 !== null) ***REMOVED***
                    result2 = [result2, result3, result4, result5];
                  ***REMOVED*** else ***REMOVED***
                    result2 = null;
                    pos = pos2;
                  ***REMOVED***
                ***REMOVED*** else ***REMOVED***
                  result2 = null;
                  pos = pos2;
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                result2 = null;
                pos = pos2;
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result2 = null;
              pos = pos2;
            ***REMOVED***
          ***REMOVED***
          if (result1 !== null) ***REMOVED***
            result0 = [result0, result1];
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, s, ss) ***REMOVED***
          return [s].concat(ss.map(function (s) ***REMOVED*** return s[3]; ***REMOVED***));
        ***REMOVED***)(pos0, result0[0], result0[1]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_selector() ***REMOVED***
        var cacheKey = "selector@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_sequence();
        if (result0 !== null) ***REMOVED***
          result1 = [];
          pos2 = pos;
          result2 = parse_binaryOp();
          if (result2 !== null) ***REMOVED***
            result3 = parse_sequence();
            if (result3 !== null) ***REMOVED***
              result2 = [result2, result3];
            ***REMOVED*** else ***REMOVED***
              result2 = null;
              pos = pos2;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result2 = null;
            pos = pos2;
          ***REMOVED***
          while (result2 !== null) ***REMOVED***
            result1.push(result2);
            pos2 = pos;
            result2 = parse_binaryOp();
            if (result2 !== null) ***REMOVED***
              result3 = parse_sequence();
              if (result3 !== null) ***REMOVED***
                result2 = [result2, result3];
              ***REMOVED*** else ***REMOVED***
                result2 = null;
                pos = pos2;
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result2 = null;
              pos = pos2;
            ***REMOVED***
          ***REMOVED***
          if (result1 !== null) ***REMOVED***
            result0 = [result0, result1];
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, a, ops) ***REMOVED***
            return ops.reduce(function (memo, rhs) ***REMOVED***
              return ***REMOVED*** type: rhs[0], left: memo, right: rhs[1] ***REMOVED***;
            ***REMOVED***, a);
          ***REMOVED***)(pos0, result0[0], result0[1]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_sequence() ***REMOVED***
        var cacheKey = "sequence@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 33) ***REMOVED***
          result0 = "!";
          pos++;
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("\"!\"");
          ***REMOVED***
        ***REMOVED***
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) ***REMOVED***
          result2 = parse_atom();
          if (result2 !== null) ***REMOVED***
            result1 = [];
            while (result2 !== null) ***REMOVED***
              result1.push(result2);
              result2 = parse_atom();
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result1 = null;
          ***REMOVED***
          if (result1 !== null) ***REMOVED***
            result0 = [result0, result1];
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, subject, as) ***REMOVED***
            var b = as.length === 1 ? as[0] : ***REMOVED*** type: 'compound', selectors: as ***REMOVED***;
            if(subject) b.subject = true;
            return b;
          ***REMOVED***)(pos0, result0[0], result0[1]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_atom() ***REMOVED***
        var cacheKey = "atom@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0;
        
        result0 = parse_wildcard();
        if (result0 === null) ***REMOVED***
          result0 = parse_identifier();
          if (result0 === null) ***REMOVED***
            result0 = parse_attr();
            if (result0 === null) ***REMOVED***
              result0 = parse_field();
              if (result0 === null) ***REMOVED***
                result0 = parse_negation();
                if (result0 === null) ***REMOVED***
                  result0 = parse_matches();
                  if (result0 === null) ***REMOVED***
                    result0 = parse_has();
                    if (result0 === null) ***REMOVED***
                      result0 = parse_firstChild();
                      if (result0 === null) ***REMOVED***
                        result0 = parse_lastChild();
                        if (result0 === null) ***REMOVED***
                          result0 = parse_nthChild();
                          if (result0 === null) ***REMOVED***
                            result0 = parse_nthLastChild();
                            if (result0 === null) ***REMOVED***
                              result0 = parse_class();
                            ***REMOVED***
                          ***REMOVED***
                        ***REMOVED***
                      ***REMOVED***
                    ***REMOVED***
                  ***REMOVED***
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_wildcard() ***REMOVED***
        var cacheKey = "wildcard@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 42) ***REMOVED***
          result0 = "*";
          pos++;
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("\"*\"");
          ***REMOVED***
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, a) ***REMOVED*** return ***REMOVED*** type: 'wildcard', value: a ***REMOVED***; ***REMOVED***)(pos0, result0);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_identifier() ***REMOVED***
        var cacheKey = "identifier@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 35) ***REMOVED***
          result0 = "#";
          pos++;
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("\"#\"");
          ***REMOVED***
        ***REMOVED***
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) ***REMOVED***
          result1 = parse_identifierName();
          if (result1 !== null) ***REMOVED***
            result0 = [result0, result1];
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, i) ***REMOVED*** return ***REMOVED*** type: 'identifier', value: i ***REMOVED***; ***REMOVED***)(pos0, result0[1]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_attr() ***REMOVED***
        var cacheKey = "attr@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 91) ***REMOVED***
          result0 = "[";
          pos++;
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("\"[\"");
          ***REMOVED***
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result1 = parse__();
          if (result1 !== null) ***REMOVED***
            result2 = parse_attrValue();
            if (result2 !== null) ***REMOVED***
              result3 = parse__();
              if (result3 !== null) ***REMOVED***
                if (input.charCodeAt(pos) === 93) ***REMOVED***
                  result4 = "]";
                  pos++;
                ***REMOVED*** else ***REMOVED***
                  result4 = null;
                  if (reportFailures === 0) ***REMOVED***
                    matchFailed("\"]\"");
                  ***REMOVED***
                ***REMOVED***
                if (result4 !== null) ***REMOVED***
                  result0 = [result0, result1, result2, result3, result4];
                ***REMOVED*** else ***REMOVED***
                  result0 = null;
                  pos = pos1;
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                result0 = null;
                pos = pos1;
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result0 = null;
              pos = pos1;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, v) ***REMOVED*** return v; ***REMOVED***)(pos0, result0[2]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_attrOps() ***REMOVED***
        var cacheKey = "attrOps@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[><!]/.test(input.charAt(pos))) ***REMOVED***
          result0 = input.charAt(pos);
          pos++;
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("[><!]");
          ***REMOVED***
        ***REMOVED***
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) ***REMOVED***
          if (input.charCodeAt(pos) === 61) ***REMOVED***
            result1 = "=";
            pos++;
          ***REMOVED*** else ***REMOVED***
            result1 = null;
            if (reportFailures === 0) ***REMOVED***
              matchFailed("\"=\"");
            ***REMOVED***
          ***REMOVED***
          if (result1 !== null) ***REMOVED***
            result0 = [result0, result1];
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, a) ***REMOVED*** return a + '='; ***REMOVED***)(pos0, result0[0]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          if (/^[><]/.test(input.charAt(pos))) ***REMOVED***
            result0 = input.charAt(pos);
            pos++;
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            if (reportFailures === 0) ***REMOVED***
              matchFailed("[><]");
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_attrEqOps() ***REMOVED***
        var cacheKey = "attrEqOps@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 33) ***REMOVED***
          result0 = "!";
          pos++;
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("\"!\"");
          ***REMOVED***
        ***REMOVED***
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) ***REMOVED***
          if (input.charCodeAt(pos) === 61) ***REMOVED***
            result1 = "=";
            pos++;
          ***REMOVED*** else ***REMOVED***
            result1 = null;
            if (reportFailures === 0) ***REMOVED***
              matchFailed("\"=\"");
            ***REMOVED***
          ***REMOVED***
          if (result1 !== null) ***REMOVED***
            result0 = [result0, result1];
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, a) ***REMOVED*** return a + '='; ***REMOVED***)(pos0, result0[0]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_attrName() ***REMOVED***
        var cacheKey = "attrName@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_identifierName();
        if (result1 === null) ***REMOVED***
          if (input.charCodeAt(pos) === 46) ***REMOVED***
            result1 = ".";
            pos++;
          ***REMOVED*** else ***REMOVED***
            result1 = null;
            if (reportFailures === 0) ***REMOVED***
              matchFailed("\".\"");
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
        if (result1 !== null) ***REMOVED***
          result0 = [];
          while (result1 !== null) ***REMOVED***
            result0.push(result1);
            result1 = parse_identifierName();
            if (result1 === null) ***REMOVED***
              if (input.charCodeAt(pos) === 46) ***REMOVED***
                result1 = ".";
                pos++;
              ***REMOVED*** else ***REMOVED***
                result1 = null;
                if (reportFailures === 0) ***REMOVED***
                  matchFailed("\".\"");
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, i) ***REMOVED*** return i.join(''); ***REMOVED***)(pos0, result0);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_attrValue() ***REMOVED***
        var cacheKey = "attrValue@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_attrName();
        if (result0 !== null) ***REMOVED***
          result1 = parse__();
          if (result1 !== null) ***REMOVED***
            result2 = parse_attrEqOps();
            if (result2 !== null) ***REMOVED***
              result3 = parse__();
              if (result3 !== null) ***REMOVED***
                result4 = parse_type();
                if (result4 === null) ***REMOVED***
                  result4 = parse_regex();
                ***REMOVED***
                if (result4 !== null) ***REMOVED***
                  result0 = [result0, result1, result2, result3, result4];
                ***REMOVED*** else ***REMOVED***
                  result0 = null;
                  pos = pos1;
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                result0 = null;
                pos = pos1;
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result0 = null;
              pos = pos1;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, name, op, value) ***REMOVED***
              return ***REMOVED*** type: 'attribute', name: name, operator: op, value: value ***REMOVED***;
            ***REMOVED***)(pos0, result0[0], result0[2], result0[4]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos0 = pos;
          pos1 = pos;
          result0 = parse_attrName();
          if (result0 !== null) ***REMOVED***
            result1 = parse__();
            if (result1 !== null) ***REMOVED***
              result2 = parse_attrOps();
              if (result2 !== null) ***REMOVED***
                result3 = parse__();
                if (result3 !== null) ***REMOVED***
                  result4 = parse_string();
                  if (result4 === null) ***REMOVED***
                    result4 = parse_number();
                    if (result4 === null) ***REMOVED***
                      result4 = parse_path();
                    ***REMOVED***
                  ***REMOVED***
                  if (result4 !== null) ***REMOVED***
                    result0 = [result0, result1, result2, result3, result4];
                  ***REMOVED*** else ***REMOVED***
                    result0 = null;
                    pos = pos1;
                  ***REMOVED***
                ***REMOVED*** else ***REMOVED***
                  result0 = null;
                  pos = pos1;
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                result0 = null;
                pos = pos1;
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result0 = null;
              pos = pos1;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
          if (result0 !== null) ***REMOVED***
            result0 = (function(offset, name, op, value) ***REMOVED***
                return ***REMOVED*** type: 'attribute', name: name, operator: op, value: value ***REMOVED***;
              ***REMOVED***)(pos0, result0[0], result0[2], result0[4]);
          ***REMOVED***
          if (result0 === null) ***REMOVED***
            pos = pos0;
          ***REMOVED***
          if (result0 === null) ***REMOVED***
            pos0 = pos;
            result0 = parse_attrName();
            if (result0 !== null) ***REMOVED***
              result0 = (function(offset, name) ***REMOVED*** return ***REMOVED*** type: 'attribute', name: name ***REMOVED***; ***REMOVED***)(pos0, result0);
            ***REMOVED***
            if (result0 === null) ***REMOVED***
              pos = pos0;
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_string() ***REMOVED***
        var cacheKey = "string@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 34) ***REMOVED***
          result0 = "\"";
          pos++;
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("\"\\\"\"");
          ***REMOVED***
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result1 = [];
          if (/^[^\\"]/.test(input.charAt(pos))) ***REMOVED***
            result2 = input.charAt(pos);
            pos++;
          ***REMOVED*** else ***REMOVED***
            result2 = null;
            if (reportFailures === 0) ***REMOVED***
              matchFailed("[^\\\\\"]");
            ***REMOVED***
          ***REMOVED***
          if (result2 === null) ***REMOVED***
            pos2 = pos;
            pos3 = pos;
            if (input.charCodeAt(pos) === 92) ***REMOVED***
              result2 = "\\";
              pos++;
            ***REMOVED*** else ***REMOVED***
              result2 = null;
              if (reportFailures === 0) ***REMOVED***
                matchFailed("\"\\\\\"");
              ***REMOVED***
            ***REMOVED***
            if (result2 !== null) ***REMOVED***
              if (input.length > pos) ***REMOVED***
                result3 = input.charAt(pos);
                pos++;
              ***REMOVED*** else ***REMOVED***
                result3 = null;
                if (reportFailures === 0) ***REMOVED***
                  matchFailed("any character");
                ***REMOVED***
              ***REMOVED***
              if (result3 !== null) ***REMOVED***
                result2 = [result2, result3];
              ***REMOVED*** else ***REMOVED***
                result2 = null;
                pos = pos3;
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result2 = null;
              pos = pos3;
            ***REMOVED***
            if (result2 !== null) ***REMOVED***
              result2 = (function(offset, a, b) ***REMOVED*** return a + b; ***REMOVED***)(pos2, result2[0], result2[1]);
            ***REMOVED***
            if (result2 === null) ***REMOVED***
              pos = pos2;
            ***REMOVED***
          ***REMOVED***
          while (result2 !== null) ***REMOVED***
            result1.push(result2);
            if (/^[^\\"]/.test(input.charAt(pos))) ***REMOVED***
              result2 = input.charAt(pos);
              pos++;
            ***REMOVED*** else ***REMOVED***
              result2 = null;
              if (reportFailures === 0) ***REMOVED***
                matchFailed("[^\\\\\"]");
              ***REMOVED***
            ***REMOVED***
            if (result2 === null) ***REMOVED***
              pos2 = pos;
              pos3 = pos;
              if (input.charCodeAt(pos) === 92) ***REMOVED***
                result2 = "\\";
                pos++;
              ***REMOVED*** else ***REMOVED***
                result2 = null;
                if (reportFailures === 0) ***REMOVED***
                  matchFailed("\"\\\\\"");
                ***REMOVED***
              ***REMOVED***
              if (result2 !== null) ***REMOVED***
                if (input.length > pos) ***REMOVED***
                  result3 = input.charAt(pos);
                  pos++;
                ***REMOVED*** else ***REMOVED***
                  result3 = null;
                  if (reportFailures === 0) ***REMOVED***
                    matchFailed("any character");
                  ***REMOVED***
                ***REMOVED***
                if (result3 !== null) ***REMOVED***
                  result2 = [result2, result3];
                ***REMOVED*** else ***REMOVED***
                  result2 = null;
                  pos = pos3;
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                result2 = null;
                pos = pos3;
              ***REMOVED***
              if (result2 !== null) ***REMOVED***
                result2 = (function(offset, a, b) ***REMOVED*** return a + b; ***REMOVED***)(pos2, result2[0], result2[1]);
              ***REMOVED***
              if (result2 === null) ***REMOVED***
                pos = pos2;
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
          if (result1 !== null) ***REMOVED***
            if (input.charCodeAt(pos) === 34) ***REMOVED***
              result2 = "\"";
              pos++;
            ***REMOVED*** else ***REMOVED***
              result2 = null;
              if (reportFailures === 0) ***REMOVED***
                matchFailed("\"\\\"\"");
              ***REMOVED***
            ***REMOVED***
            if (result2 !== null) ***REMOVED***
              result0 = [result0, result1, result2];
            ***REMOVED*** else ***REMOVED***
              result0 = null;
              pos = pos1;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, d) ***REMOVED***
                return ***REMOVED*** type: 'literal', value: strUnescape(d.join('')) ***REMOVED***;
              ***REMOVED***)(pos0, result0[1]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 39) ***REMOVED***
            result0 = "'";
            pos++;
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            if (reportFailures === 0) ***REMOVED***
              matchFailed("\"'\"");
            ***REMOVED***
          ***REMOVED***
          if (result0 !== null) ***REMOVED***
            result1 = [];
            if (/^[^\\']/.test(input.charAt(pos))) ***REMOVED***
              result2 = input.charAt(pos);
              pos++;
            ***REMOVED*** else ***REMOVED***
              result2 = null;
              if (reportFailures === 0) ***REMOVED***
                matchFailed("[^\\\\']");
              ***REMOVED***
            ***REMOVED***
            if (result2 === null) ***REMOVED***
              pos2 = pos;
              pos3 = pos;
              if (input.charCodeAt(pos) === 92) ***REMOVED***
                result2 = "\\";
                pos++;
              ***REMOVED*** else ***REMOVED***
                result2 = null;
                if (reportFailures === 0) ***REMOVED***
                  matchFailed("\"\\\\\"");
                ***REMOVED***
              ***REMOVED***
              if (result2 !== null) ***REMOVED***
                if (input.length > pos) ***REMOVED***
                  result3 = input.charAt(pos);
                  pos++;
                ***REMOVED*** else ***REMOVED***
                  result3 = null;
                  if (reportFailures === 0) ***REMOVED***
                    matchFailed("any character");
                  ***REMOVED***
                ***REMOVED***
                if (result3 !== null) ***REMOVED***
                  result2 = [result2, result3];
                ***REMOVED*** else ***REMOVED***
                  result2 = null;
                  pos = pos3;
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                result2 = null;
                pos = pos3;
              ***REMOVED***
              if (result2 !== null) ***REMOVED***
                result2 = (function(offset, a, b) ***REMOVED*** return a + b; ***REMOVED***)(pos2, result2[0], result2[1]);
              ***REMOVED***
              if (result2 === null) ***REMOVED***
                pos = pos2;
              ***REMOVED***
            ***REMOVED***
            while (result2 !== null) ***REMOVED***
              result1.push(result2);
              if (/^[^\\']/.test(input.charAt(pos))) ***REMOVED***
                result2 = input.charAt(pos);
                pos++;
              ***REMOVED*** else ***REMOVED***
                result2 = null;
                if (reportFailures === 0) ***REMOVED***
                  matchFailed("[^\\\\']");
                ***REMOVED***
              ***REMOVED***
              if (result2 === null) ***REMOVED***
                pos2 = pos;
                pos3 = pos;
                if (input.charCodeAt(pos) === 92) ***REMOVED***
                  result2 = "\\";
                  pos++;
                ***REMOVED*** else ***REMOVED***
                  result2 = null;
                  if (reportFailures === 0) ***REMOVED***
                    matchFailed("\"\\\\\"");
                  ***REMOVED***
                ***REMOVED***
                if (result2 !== null) ***REMOVED***
                  if (input.length > pos) ***REMOVED***
                    result3 = input.charAt(pos);
                    pos++;
                  ***REMOVED*** else ***REMOVED***
                    result3 = null;
                    if (reportFailures === 0) ***REMOVED***
                      matchFailed("any character");
                    ***REMOVED***
                  ***REMOVED***
                  if (result3 !== null) ***REMOVED***
                    result2 = [result2, result3];
                  ***REMOVED*** else ***REMOVED***
                    result2 = null;
                    pos = pos3;
                  ***REMOVED***
                ***REMOVED*** else ***REMOVED***
                  result2 = null;
                  pos = pos3;
                ***REMOVED***
                if (result2 !== null) ***REMOVED***
                  result2 = (function(offset, a, b) ***REMOVED*** return a + b; ***REMOVED***)(pos2, result2[0], result2[1]);
                ***REMOVED***
                if (result2 === null) ***REMOVED***
                  pos = pos2;
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***
            if (result1 !== null) ***REMOVED***
              if (input.charCodeAt(pos) === 39) ***REMOVED***
                result2 = "'";
                pos++;
              ***REMOVED*** else ***REMOVED***
                result2 = null;
                if (reportFailures === 0) ***REMOVED***
                  matchFailed("\"'\"");
                ***REMOVED***
              ***REMOVED***
              if (result2 !== null) ***REMOVED***
                result0 = [result0, result1, result2];
              ***REMOVED*** else ***REMOVED***
                result0 = null;
                pos = pos1;
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result0 = null;
              pos = pos1;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
          if (result0 !== null) ***REMOVED***
            result0 = (function(offset, d) ***REMOVED***
                  return ***REMOVED*** type: 'literal', value: strUnescape(d.join('')) ***REMOVED***;
                ***REMOVED***)(pos0, result0[1]);
          ***REMOVED***
          if (result0 === null) ***REMOVED***
            pos = pos0;
          ***REMOVED***
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_number() ***REMOVED***
        var cacheKey = "number@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = [];
        if (/^[0-9]/.test(input.charAt(pos))) ***REMOVED***
          result1 = input.charAt(pos);
          pos++;
        ***REMOVED*** else ***REMOVED***
          result1 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("[0-9]");
          ***REMOVED***
        ***REMOVED***
        while (result1 !== null) ***REMOVED***
          result0.push(result1);
          if (/^[0-9]/.test(input.charAt(pos))) ***REMOVED***
            result1 = input.charAt(pos);
            pos++;
          ***REMOVED*** else ***REMOVED***
            result1 = null;
            if (reportFailures === 0) ***REMOVED***
              matchFailed("[0-9]");
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          if (input.charCodeAt(pos) === 46) ***REMOVED***
            result1 = ".";
            pos++;
          ***REMOVED*** else ***REMOVED***
            result1 = null;
            if (reportFailures === 0) ***REMOVED***
              matchFailed("\".\"");
            ***REMOVED***
          ***REMOVED***
          if (result1 !== null) ***REMOVED***
            result0 = [result0, result1];
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos2;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos2;
        ***REMOVED***
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) ***REMOVED***
          if (/^[0-9]/.test(input.charAt(pos))) ***REMOVED***
            result2 = input.charAt(pos);
            pos++;
          ***REMOVED*** else ***REMOVED***
            result2 = null;
            if (reportFailures === 0) ***REMOVED***
              matchFailed("[0-9]");
            ***REMOVED***
          ***REMOVED***
          if (result2 !== null) ***REMOVED***
            result1 = [];
            while (result2 !== null) ***REMOVED***
              result1.push(result2);
              if (/^[0-9]/.test(input.charAt(pos))) ***REMOVED***
                result2 = input.charAt(pos);
                pos++;
              ***REMOVED*** else ***REMOVED***
                result2 = null;
                if (reportFailures === 0) ***REMOVED***
                  matchFailed("[0-9]");
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result1 = null;
          ***REMOVED***
          if (result1 !== null) ***REMOVED***
            result0 = [result0, result1];
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, a, b) ***REMOVED***
                return ***REMOVED*** type: 'literal', value: parseFloat((a ? a.join('') : '') + b.join('')) ***REMOVED***;
              ***REMOVED***)(pos0, result0[0], result0[1]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_path() ***REMOVED***
        var cacheKey = "path@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_identifierName();
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, i) ***REMOVED*** return ***REMOVED*** type: 'literal', value: i ***REMOVED***; ***REMOVED***)(pos0, result0);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_type() ***REMOVED***
        var cacheKey = "type@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 5) === "type(") ***REMOVED***
          result0 = "type(";
          pos += 5;
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("\"type(\"");
          ***REMOVED***
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result1 = parse__();
          if (result1 !== null) ***REMOVED***
            if (/^[^ )]/.test(input.charAt(pos))) ***REMOVED***
              result3 = input.charAt(pos);
              pos++;
            ***REMOVED*** else ***REMOVED***
              result3 = null;
              if (reportFailures === 0) ***REMOVED***
                matchFailed("[^ )]");
              ***REMOVED***
            ***REMOVED***
            if (result3 !== null) ***REMOVED***
              result2 = [];
              while (result3 !== null) ***REMOVED***
                result2.push(result3);
                if (/^[^ )]/.test(input.charAt(pos))) ***REMOVED***
                  result3 = input.charAt(pos);
                  pos++;
                ***REMOVED*** else ***REMOVED***
                  result3 = null;
                  if (reportFailures === 0) ***REMOVED***
                    matchFailed("[^ )]");
                  ***REMOVED***
                ***REMOVED***
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result2 = null;
            ***REMOVED***
            if (result2 !== null) ***REMOVED***
              result3 = parse__();
              if (result3 !== null) ***REMOVED***
                if (input.charCodeAt(pos) === 41) ***REMOVED***
                  result4 = ")";
                  pos++;
                ***REMOVED*** else ***REMOVED***
                  result4 = null;
                  if (reportFailures === 0) ***REMOVED***
                    matchFailed("\")\"");
                  ***REMOVED***
                ***REMOVED***
                if (result4 !== null) ***REMOVED***
                  result0 = [result0, result1, result2, result3, result4];
                ***REMOVED*** else ***REMOVED***
                  result0 = null;
                  pos = pos1;
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                result0 = null;
                pos = pos1;
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result0 = null;
              pos = pos1;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, t) ***REMOVED*** return ***REMOVED*** type: 'type', value: t.join('') ***REMOVED***; ***REMOVED***)(pos0, result0[2]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_regex() ***REMOVED***
        var cacheKey = "regex@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 47) ***REMOVED***
          result0 = "/";
          pos++;
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("\"/\"");
          ***REMOVED***
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          if (/^[^\/]/.test(input.charAt(pos))) ***REMOVED***
            result2 = input.charAt(pos);
            pos++;
          ***REMOVED*** else ***REMOVED***
            result2 = null;
            if (reportFailures === 0) ***REMOVED***
              matchFailed("[^\\/]");
            ***REMOVED***
          ***REMOVED***
          if (result2 !== null) ***REMOVED***
            result1 = [];
            while (result2 !== null) ***REMOVED***
              result1.push(result2);
              if (/^[^\/]/.test(input.charAt(pos))) ***REMOVED***
                result2 = input.charAt(pos);
                pos++;
              ***REMOVED*** else ***REMOVED***
                result2 = null;
                if (reportFailures === 0) ***REMOVED***
                  matchFailed("[^\\/]");
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result1 = null;
          ***REMOVED***
          if (result1 !== null) ***REMOVED***
            if (input.charCodeAt(pos) === 47) ***REMOVED***
              result2 = "/";
              pos++;
            ***REMOVED*** else ***REMOVED***
              result2 = null;
              if (reportFailures === 0) ***REMOVED***
                matchFailed("\"/\"");
              ***REMOVED***
            ***REMOVED***
            if (result2 !== null) ***REMOVED***
              result0 = [result0, result1, result2];
            ***REMOVED*** else ***REMOVED***
              result0 = null;
              pos = pos1;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, d) ***REMOVED*** return ***REMOVED*** type: 'regexp', value: new RegExp(d.join('')) ***REMOVED***; ***REMOVED***)(pos0, result0[1]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_field() ***REMOVED***
        var cacheKey = "field@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 46) ***REMOVED***
          result0 = ".";
          pos++;
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("\".\"");
          ***REMOVED***
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result1 = parse_identifierName();
          if (result1 !== null) ***REMOVED***
            result2 = [];
            pos2 = pos;
            if (input.charCodeAt(pos) === 46) ***REMOVED***
              result3 = ".";
              pos++;
            ***REMOVED*** else ***REMOVED***
              result3 = null;
              if (reportFailures === 0) ***REMOVED***
                matchFailed("\".\"");
              ***REMOVED***
            ***REMOVED***
            if (result3 !== null) ***REMOVED***
              result4 = parse_identifierName();
              if (result4 !== null) ***REMOVED***
                result3 = [result3, result4];
              ***REMOVED*** else ***REMOVED***
                result3 = null;
                pos = pos2;
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result3 = null;
              pos = pos2;
            ***REMOVED***
            while (result3 !== null) ***REMOVED***
              result2.push(result3);
              pos2 = pos;
              if (input.charCodeAt(pos) === 46) ***REMOVED***
                result3 = ".";
                pos++;
              ***REMOVED*** else ***REMOVED***
                result3 = null;
                if (reportFailures === 0) ***REMOVED***
                  matchFailed("\".\"");
                ***REMOVED***
              ***REMOVED***
              if (result3 !== null) ***REMOVED***
                result4 = parse_identifierName();
                if (result4 !== null) ***REMOVED***
                  result3 = [result3, result4];
                ***REMOVED*** else ***REMOVED***
                  result3 = null;
                  pos = pos2;
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                result3 = null;
                pos = pos2;
              ***REMOVED***
            ***REMOVED***
            if (result2 !== null) ***REMOVED***
              result0 = [result0, result1, result2];
            ***REMOVED*** else ***REMOVED***
              result0 = null;
              pos = pos1;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, i, is) ***REMOVED***
          return ***REMOVED*** type: 'field', name: is.reduce(function(memo, p)***REMOVED*** return memo + p[0] + p[1]; ***REMOVED***, i)***REMOVED***;
        ***REMOVED***)(pos0, result0[1], result0[2]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_negation() ***REMOVED***
        var cacheKey = "negation@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 5) === ":not(") ***REMOVED***
          result0 = ":not(";
          pos += 5;
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("\":not(\"");
          ***REMOVED***
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result1 = parse__();
          if (result1 !== null) ***REMOVED***
            result2 = parse_selectors();
            if (result2 !== null) ***REMOVED***
              result3 = parse__();
              if (result3 !== null) ***REMOVED***
                if (input.charCodeAt(pos) === 41) ***REMOVED***
                  result4 = ")";
                  pos++;
                ***REMOVED*** else ***REMOVED***
                  result4 = null;
                  if (reportFailures === 0) ***REMOVED***
                    matchFailed("\")\"");
                  ***REMOVED***
                ***REMOVED***
                if (result4 !== null) ***REMOVED***
                  result0 = [result0, result1, result2, result3, result4];
                ***REMOVED*** else ***REMOVED***
                  result0 = null;
                  pos = pos1;
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                result0 = null;
                pos = pos1;
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result0 = null;
              pos = pos1;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, ss) ***REMOVED*** return ***REMOVED*** type: 'not', selectors: ss ***REMOVED***; ***REMOVED***)(pos0, result0[2]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_matches() ***REMOVED***
        var cacheKey = "matches@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 9) === ":matches(") ***REMOVED***
          result0 = ":matches(";
          pos += 9;
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("\":matches(\"");
          ***REMOVED***
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result1 = parse__();
          if (result1 !== null) ***REMOVED***
            result2 = parse_selectors();
            if (result2 !== null) ***REMOVED***
              result3 = parse__();
              if (result3 !== null) ***REMOVED***
                if (input.charCodeAt(pos) === 41) ***REMOVED***
                  result4 = ")";
                  pos++;
                ***REMOVED*** else ***REMOVED***
                  result4 = null;
                  if (reportFailures === 0) ***REMOVED***
                    matchFailed("\")\"");
                  ***REMOVED***
                ***REMOVED***
                if (result4 !== null) ***REMOVED***
                  result0 = [result0, result1, result2, result3, result4];
                ***REMOVED*** else ***REMOVED***
                  result0 = null;
                  pos = pos1;
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                result0 = null;
                pos = pos1;
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result0 = null;
              pos = pos1;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, ss) ***REMOVED*** return ***REMOVED*** type: 'matches', selectors: ss ***REMOVED***; ***REMOVED***)(pos0, result0[2]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_has() ***REMOVED***
        var cacheKey = "has@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 5) === ":has(") ***REMOVED***
          result0 = ":has(";
          pos += 5;
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("\":has(\"");
          ***REMOVED***
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result1 = parse__();
          if (result1 !== null) ***REMOVED***
            result2 = parse_selectors();
            if (result2 !== null) ***REMOVED***
              result3 = parse__();
              if (result3 !== null) ***REMOVED***
                if (input.charCodeAt(pos) === 41) ***REMOVED***
                  result4 = ")";
                  pos++;
                ***REMOVED*** else ***REMOVED***
                  result4 = null;
                  if (reportFailures === 0) ***REMOVED***
                    matchFailed("\")\"");
                  ***REMOVED***
                ***REMOVED***
                if (result4 !== null) ***REMOVED***
                  result0 = [result0, result1, result2, result3, result4];
                ***REMOVED*** else ***REMOVED***
                  result0 = null;
                  pos = pos1;
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                result0 = null;
                pos = pos1;
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result0 = null;
              pos = pos1;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, ss) ***REMOVED*** return ***REMOVED*** type: 'has', selectors: ss ***REMOVED***; ***REMOVED***)(pos0, result0[2]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_firstChild() ***REMOVED***
        var cacheKey = "firstChild@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 12) === ":first-child") ***REMOVED***
          result0 = ":first-child";
          pos += 12;
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("\":first-child\"");
          ***REMOVED***
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset) ***REMOVED*** return nth(1); ***REMOVED***)(pos0);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_lastChild() ***REMOVED***
        var cacheKey = "lastChild@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 11) === ":last-child") ***REMOVED***
          result0 = ":last-child";
          pos += 11;
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("\":last-child\"");
          ***REMOVED***
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset) ***REMOVED*** return nthLast(1); ***REMOVED***)(pos0);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_nthChild() ***REMOVED***
        var cacheKey = "nthChild@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 11) === ":nth-child(") ***REMOVED***
          result0 = ":nth-child(";
          pos += 11;
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("\":nth-child(\"");
          ***REMOVED***
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result1 = parse__();
          if (result1 !== null) ***REMOVED***
            if (/^[0-9]/.test(input.charAt(pos))) ***REMOVED***
              result3 = input.charAt(pos);
              pos++;
            ***REMOVED*** else ***REMOVED***
              result3 = null;
              if (reportFailures === 0) ***REMOVED***
                matchFailed("[0-9]");
              ***REMOVED***
            ***REMOVED***
            if (result3 !== null) ***REMOVED***
              result2 = [];
              while (result3 !== null) ***REMOVED***
                result2.push(result3);
                if (/^[0-9]/.test(input.charAt(pos))) ***REMOVED***
                  result3 = input.charAt(pos);
                  pos++;
                ***REMOVED*** else ***REMOVED***
                  result3 = null;
                  if (reportFailures === 0) ***REMOVED***
                    matchFailed("[0-9]");
                  ***REMOVED***
                ***REMOVED***
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result2 = null;
            ***REMOVED***
            if (result2 !== null) ***REMOVED***
              result3 = parse__();
              if (result3 !== null) ***REMOVED***
                if (input.charCodeAt(pos) === 41) ***REMOVED***
                  result4 = ")";
                  pos++;
                ***REMOVED*** else ***REMOVED***
                  result4 = null;
                  if (reportFailures === 0) ***REMOVED***
                    matchFailed("\")\"");
                  ***REMOVED***
                ***REMOVED***
                if (result4 !== null) ***REMOVED***
                  result0 = [result0, result1, result2, result3, result4];
                ***REMOVED*** else ***REMOVED***
                  result0 = null;
                  pos = pos1;
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                result0 = null;
                pos = pos1;
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result0 = null;
              pos = pos1;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, n) ***REMOVED*** return nth(parseInt(n.join(''), 10)); ***REMOVED***)(pos0, result0[2]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_nthLastChild() ***REMOVED***
        var cacheKey = "nthLastChild@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 16) === ":nth-last-child(") ***REMOVED***
          result0 = ":nth-last-child(";
          pos += 16;
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("\":nth-last-child(\"");
          ***REMOVED***
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result1 = parse__();
          if (result1 !== null) ***REMOVED***
            if (/^[0-9]/.test(input.charAt(pos))) ***REMOVED***
              result3 = input.charAt(pos);
              pos++;
            ***REMOVED*** else ***REMOVED***
              result3 = null;
              if (reportFailures === 0) ***REMOVED***
                matchFailed("[0-9]");
              ***REMOVED***
            ***REMOVED***
            if (result3 !== null) ***REMOVED***
              result2 = [];
              while (result3 !== null) ***REMOVED***
                result2.push(result3);
                if (/^[0-9]/.test(input.charAt(pos))) ***REMOVED***
                  result3 = input.charAt(pos);
                  pos++;
                ***REMOVED*** else ***REMOVED***
                  result3 = null;
                  if (reportFailures === 0) ***REMOVED***
                    matchFailed("[0-9]");
                  ***REMOVED***
                ***REMOVED***
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result2 = null;
            ***REMOVED***
            if (result2 !== null) ***REMOVED***
              result3 = parse__();
              if (result3 !== null) ***REMOVED***
                if (input.charCodeAt(pos) === 41) ***REMOVED***
                  result4 = ")";
                  pos++;
                ***REMOVED*** else ***REMOVED***
                  result4 = null;
                  if (reportFailures === 0) ***REMOVED***
                    matchFailed("\")\"");
                  ***REMOVED***
                ***REMOVED***
                if (result4 !== null) ***REMOVED***
                  result0 = [result0, result1, result2, result3, result4];
                ***REMOVED*** else ***REMOVED***
                  result0 = null;
                  pos = pos1;
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                result0 = null;
                pos = pos1;
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              result0 = null;
              pos = pos1;
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, n) ***REMOVED*** return nthLast(parseInt(n.join(''), 10)); ***REMOVED***)(pos0, result0[2]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      function parse_class() ***REMOVED***
        var cacheKey = "class@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) ***REMOVED***
          pos = cachedResult.nextPos;
          return cachedResult.result;
        ***REMOVED***
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 58) ***REMOVED***
          result0 = ":";
          pos++;
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          if (reportFailures === 0) ***REMOVED***
            matchFailed("\":\"");
          ***REMOVED***
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          if (input.substr(pos, 9).toLowerCase() === "statement") ***REMOVED***
            result1 = input.substr(pos, 9);
            pos += 9;
          ***REMOVED*** else ***REMOVED***
            result1 = null;
            if (reportFailures === 0) ***REMOVED***
              matchFailed("\"statement\"");
            ***REMOVED***
          ***REMOVED***
          if (result1 === null) ***REMOVED***
            if (input.substr(pos, 10).toLowerCase() === "expression") ***REMOVED***
              result1 = input.substr(pos, 10);
              pos += 10;
            ***REMOVED*** else ***REMOVED***
              result1 = null;
              if (reportFailures === 0) ***REMOVED***
                matchFailed("\"expression\"");
              ***REMOVED***
            ***REMOVED***
            if (result1 === null) ***REMOVED***
              if (input.substr(pos, 11).toLowerCase() === "declaration") ***REMOVED***
                result1 = input.substr(pos, 11);
                pos += 11;
              ***REMOVED*** else ***REMOVED***
                result1 = null;
                if (reportFailures === 0) ***REMOVED***
                  matchFailed("\"declaration\"");
                ***REMOVED***
              ***REMOVED***
              if (result1 === null) ***REMOVED***
                if (input.substr(pos, 8).toLowerCase() === "function") ***REMOVED***
                  result1 = input.substr(pos, 8);
                  pos += 8;
                ***REMOVED*** else ***REMOVED***
                  result1 = null;
                  if (reportFailures === 0) ***REMOVED***
                    matchFailed("\"function\"");
                  ***REMOVED***
                ***REMOVED***
                if (result1 === null) ***REMOVED***
                  if (input.substr(pos, 7).toLowerCase() === "pattern") ***REMOVED***
                    result1 = input.substr(pos, 7);
                    pos += 7;
                  ***REMOVED*** else ***REMOVED***
                    result1 = null;
                    if (reportFailures === 0) ***REMOVED***
                      matchFailed("\"pattern\"");
                    ***REMOVED***
                  ***REMOVED***
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
          if (result1 !== null) ***REMOVED***
            result0 = [result0, result1];
          ***REMOVED*** else ***REMOVED***
            result0 = null;
            pos = pos1;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          result0 = null;
          pos = pos1;
        ***REMOVED***
        if (result0 !== null) ***REMOVED***
          result0 = (function(offset, c) ***REMOVED***
          return ***REMOVED*** type: 'class', name: c ***REMOVED***;
        ***REMOVED***)(pos0, result0[1]);
        ***REMOVED***
        if (result0 === null) ***REMOVED***
          pos = pos0;
        ***REMOVED***
        
        cache[cacheKey] = ***REMOVED***
          nextPos: pos,
          result:  result0
        ***REMOVED***;
        return result0;
      ***REMOVED***
      
      
      function cleanupExpected(expected) ***REMOVED***
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) ***REMOVED***
          if (expected[i] !== lastExpected) ***REMOVED***
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          ***REMOVED***
        ***REMOVED***
        return cleanExpected;
      ***REMOVED***
      
      function computeErrorPosition() ***REMOVED***
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) ***REMOVED***
          var ch = input.charAt(i);
          if (ch === "\n") ***REMOVED***
            if (!seenCR) ***REMOVED*** line++; ***REMOVED***
            column = 1;
            seenCR = false;
          ***REMOVED*** else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") ***REMOVED***
            line++;
            column = 1;
            seenCR = true;
          ***REMOVED*** else ***REMOVED***
            column++;
            seenCR = false;
          ***REMOVED***
        ***REMOVED***
        
        return ***REMOVED*** line: line, column: column ***REMOVED***;
      ***REMOVED***
      
      
        function nth(n) ***REMOVED*** return ***REMOVED*** type: 'nth-child', index: ***REMOVED*** type: 'literal', value: n ***REMOVED*** ***REMOVED***; ***REMOVED***
        function nthLast(n) ***REMOVED*** return ***REMOVED*** type: 'nth-last-child', index: ***REMOVED*** type: 'literal', value: n ***REMOVED*** ***REMOVED***; ***REMOVED***
        function strUnescape(s) ***REMOVED***
          return s.replace(/\\(.)/g, function(match, ch) ***REMOVED***
            switch(ch) ***REMOVED***
              case 'a': return '\a';
              case 'b': return '\b';
              case 'f': return '\f';
              case 'n': return '\n';
              case 'r': return '\r';
              case 't': return '\t';
              case 'v': return '\v';
              default: return ch;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) ***REMOVED***
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      ***REMOVED***
      
      return result;
    ***REMOVED***,
    
    /* Returns the parser source code. */
    toSource: function() ***REMOVED*** return this._source; ***REMOVED***
  ***REMOVED***;
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) ***REMOVED***
    function buildMessage(expected, found) ***REMOVED***
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) ***REMOVED***
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      ***REMOVED***
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    ***REMOVED***
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  ***REMOVED***;
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
***REMOVED***)();
if (typeof define === "function" && define.amd) ***REMOVED*** define(function()***REMOVED*** return result; ***REMOVED***); ***REMOVED*** else if (typeof module !== "undefined" && module.exports) ***REMOVED*** module.exports = result; ***REMOVED*** else ***REMOVED*** this.esquery = result; ***REMOVED***
