var Stream = require('stream')
var tap = require('tap')
var MS = require('../mute.js')

// some marker objects
var END = ***REMOVED******REMOVED***
var PAUSE = ***REMOVED******REMOVED***
var RESUME = ***REMOVED******REMOVED***

function PassThrough () ***REMOVED***
  Stream.call(this)
  this.readable = this.writable = true
***REMOVED***

PassThrough.prototype = Object.create(Stream.prototype, ***REMOVED***
  constructor: ***REMOVED***
    value: PassThrough
  ***REMOVED***,
  write: ***REMOVED***
    value: function (c) ***REMOVED***
      this.emit('data', c)
      return true
    ***REMOVED***
  ***REMOVED***,
  end: ***REMOVED***
    value: function (c) ***REMOVED***
      if (c) this.write(c)
      this.emit('end')
    ***REMOVED***
  ***REMOVED***,
  pause: ***REMOVED***
    value: function () ***REMOVED***
      this.emit('pause')
    ***REMOVED***
  ***REMOVED***,
  resume: ***REMOVED***
    value: function () ***REMOVED***
      this.emit('resume')
    ***REMOVED***
  ***REMOVED***
***REMOVED***)

tap.test('incoming', function (t) ***REMOVED***
  var ms = new MS
  var str = new PassThrough
  str.pipe(ms)

  var expect = ['foo', 'boo', END]
  ms.on('data', function (c) ***REMOVED***
    t.equal(c, expect.shift())
  ***REMOVED***)
  ms.on('end', function () ***REMOVED***
    t.equal(END, expect.shift())
    t.end()
  ***REMOVED***)
  str.write('foo')
  ms.mute()
  str.write('bar')
  ms.unmute()
  str.write('boo')
  ms.mute()
  str.write('blaz')
  str.end('grelb')
***REMOVED***)

tap.test('outgoing', function (t) ***REMOVED***
  var ms = new MS
  var str = new PassThrough
  ms.pipe(str)

  var expect = ['foo', 'boo', END]
  str.on('data', function (c) ***REMOVED***
    t.equal(c, expect.shift())
  ***REMOVED***)
  str.on('end', function () ***REMOVED***
    t.equal(END, expect.shift())
    t.end()
  ***REMOVED***)

  ms.write('foo')
  ms.mute()
  ms.write('bar')
  ms.unmute()
  ms.write('boo')
  ms.mute()
  ms.write('blaz')
  ms.end('grelb')
***REMOVED***)

tap.test('isTTY', function (t) ***REMOVED***
  var str = new PassThrough
  str.isTTY = true
  str.columns=80
  str.rows=24

  var ms = new MS
  t.equal(ms.isTTY, false)
  t.equal(ms.columns, undefined)
  t.equal(ms.rows, undefined)
  ms.pipe(str)
  t.equal(ms.isTTY, true)
  t.equal(ms.columns, 80)
  t.equal(ms.rows, 24)
  str.isTTY = false
  t.equal(ms.isTTY, false)
  t.equal(ms.columns, 80)
  t.equal(ms.rows, 24)
  str.isTTY = true
  t.equal(ms.isTTY, true)
  t.equal(ms.columns, 80)
  t.equal(ms.rows, 24)
  ms.isTTY = false
  t.equal(ms.isTTY, false)
  t.equal(ms.columns, 80)
  t.equal(ms.rows, 24)

  ms = new MS
  t.equal(ms.isTTY, false)
  str.pipe(ms)
  t.equal(ms.isTTY, true)
  str.isTTY = false
  t.equal(ms.isTTY, false)
  str.isTTY = true
  t.equal(ms.isTTY, true)
  ms.isTTY = false
  t.equal(ms.isTTY, false)

  t.end()
***REMOVED***)

tap.test('pause/resume incoming', function (t) ***REMOVED***
  var str = new PassThrough
  var ms = new MS
  str.on('pause', function () ***REMOVED***
    t.equal(PAUSE, expect.shift())
  ***REMOVED***)
  str.on('resume', function () ***REMOVED***
    t.equal(RESUME, expect.shift())
  ***REMOVED***)
  var expect = [PAUSE, RESUME, PAUSE, RESUME]
  str.pipe(ms)
  ms.pause()
  ms.resume()
  ms.pause()
  ms.resume()
  t.equal(expect.length, 0, 'saw all events')
  t.end()
***REMOVED***)

tap.test('replace with *', function (t) ***REMOVED***
  var str = new PassThrough
  var ms = new MS(***REMOVED***replace: '*'***REMOVED***)
  str.pipe(ms)
  var expect = ['foo', '*****', 'bar', '***', 'baz', 'boo', '**', '****']

  ms.on('data', function (c) ***REMOVED***
    t.equal(c, expect.shift())
  ***REMOVED***)

  str.write('foo')
  ms.mute()
  str.write('12345')
  ms.unmute()
  str.write('bar')
  ms.mute()
  str.write('baz')
  ms.unmute()
  str.write('baz')
  str.write('boo')
  ms.mute()
  str.write('xy')
  str.write('xyzΩ')

  t.equal(expect.length, 0)
  t.end()
***REMOVED***)

tap.test('replace with ~YARG~', function (t) ***REMOVED***
  var str = new PassThrough
  var ms = new MS(***REMOVED***replace: '~YARG~'***REMOVED***)
  str.pipe(ms)
  var expect = ['foo', '~YARG~~YARG~~YARG~~YARG~~YARG~', 'bar',
                '~YARG~~YARG~~YARG~', 'baz', 'boo', '~YARG~~YARG~',
                '~YARG~~YARG~~YARG~~YARG~']

  ms.on('data', function (c) ***REMOVED***
    t.equal(c, expect.shift())
  ***REMOVED***)

  // also throw some unicode in there, just for good measure.
  str.write('foo')
  ms.mute()
  str.write('ΩΩ')
  ms.unmute()
  str.write('bar')
  ms.mute()
  str.write('Ω')
  ms.unmute()
  str.write('baz')
  str.write('boo')
  ms.mute()
  str.write('Ω')
  str.write('ΩΩ')

  t.equal(expect.length, 0)
  t.end()
***REMOVED***)
