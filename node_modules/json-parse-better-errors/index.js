'use strict'

module.exports = parseJson
function parseJson (txt, reviver, context) ***REMOVED***
  context = context || 20
  try ***REMOVED***
    return JSON.parse(txt, reviver)
  ***REMOVED*** catch (e) ***REMOVED***
    if (typeof txt !== 'string') ***REMOVED***
      const isEmptyArray = Array.isArray(txt) && txt.length === 0
      const errorMessage = 'Cannot parse ' +
      (isEmptyArray ? 'an empty array' : String(txt))
      throw new TypeError(errorMessage)
    ***REMOVED***
    const syntaxErr = e.message.match(/^Unexpected token.*position\s+(\d+)/i)
    const errIdx = syntaxErr
    ? +syntaxErr[1]
    : e.message.match(/^Unexpected end of JSON.*/i)
    ? txt.length - 1
    : null
    if (errIdx != null) ***REMOVED***
      const start = errIdx <= context
      ? 0
      : errIdx - context
      const end = errIdx + context >= txt.length
      ? txt.length
      : errIdx + context
      e.message += ` while parsing near '$***REMOVED***
        start === 0 ? '' : '...'
      ***REMOVED***$***REMOVED***txt.slice(start, end)***REMOVED***$***REMOVED***
        end === txt.length ? '' : '...'
      ***REMOVED***'`
    ***REMOVED*** else ***REMOVED***
      e.message += ` while parsing '$***REMOVED***txt.slice(0, context * 2)***REMOVED***'`
    ***REMOVED***
    throw e
  ***REMOVED***
***REMOVED***
