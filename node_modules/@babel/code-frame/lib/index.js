"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
***REMOVED***);
exports.codeFrameColumns = codeFrameColumns;
exports.default = _default;

var _highlight = _interopRequireWildcard(require("@babel/highlight"));

function _getRequireWildcardCache() ***REMOVED*** if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () ***REMOVED*** return cache; ***REMOVED***; return cache; ***REMOVED***

function _interopRequireWildcard(obj) ***REMOVED*** if (obj && obj.__esModule) ***REMOVED*** return obj; ***REMOVED*** if (obj === null || typeof obj !== "object" && typeof obj !== "function") ***REMOVED*** return ***REMOVED*** default: obj ***REMOVED***; ***REMOVED*** var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) ***REMOVED*** return cache.get(obj); ***REMOVED*** var newObj = ***REMOVED******REMOVED***; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) ***REMOVED*** if (Object.prototype.hasOwnProperty.call(obj, key)) ***REMOVED*** var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) ***REMOVED*** Object.defineProperty(newObj, key, desc); ***REMOVED*** else ***REMOVED*** newObj[key] = obj[key]; ***REMOVED*** ***REMOVED*** ***REMOVED*** newObj.default = obj; if (cache) ***REMOVED*** cache.set(obj, newObj); ***REMOVED*** return newObj; ***REMOVED***

let deprecationWarningShown = false;

function getDefs(chalk) ***REMOVED***
  return ***REMOVED***
    gutter: chalk.grey,
    marker: chalk.red.bold,
    message: chalk.red.bold
  ***REMOVED***;
***REMOVED***

const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;

function getMarkerLines(loc, source, opts) ***REMOVED***
  const startLoc = Object.assign(***REMOVED***
    column: 0,
    line: -1
  ***REMOVED***, loc.start);
  const endLoc = Object.assign(***REMOVED******REMOVED***, startLoc, ***REMOVED******REMOVED***, loc.end);
  const ***REMOVED***
    linesAbove = 2,
    linesBelow = 3
  ***REMOVED*** = opts || ***REMOVED******REMOVED***;
  const startLine = startLoc.line;
  const startColumn = startLoc.column;
  const endLine = endLoc.line;
  const endColumn = endLoc.column;
  let start = Math.max(startLine - (linesAbove + 1), 0);
  let end = Math.min(source.length, endLine + linesBelow);

  if (startLine === -1) ***REMOVED***
    start = 0;
  ***REMOVED***

  if (endLine === -1) ***REMOVED***
    end = source.length;
  ***REMOVED***

  const lineDiff = endLine - startLine;
  const markerLines = ***REMOVED******REMOVED***;

  if (lineDiff) ***REMOVED***
    for (let i = 0; i <= lineDiff; i++) ***REMOVED***
      const lineNumber = i + startLine;

      if (!startColumn) ***REMOVED***
        markerLines[lineNumber] = true;
      ***REMOVED*** else if (i === 0) ***REMOVED***
        const sourceLength = source[lineNumber - 1].length;
        markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];
      ***REMOVED*** else if (i === lineDiff) ***REMOVED***
        markerLines[lineNumber] = [0, endColumn];
      ***REMOVED*** else ***REMOVED***
        const sourceLength = source[lineNumber - i].length;
        markerLines[lineNumber] = [0, sourceLength];
      ***REMOVED***
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
    if (startColumn === endColumn) ***REMOVED***
      if (startColumn) ***REMOVED***
        markerLines[startLine] = [startColumn, 0];
      ***REMOVED*** else ***REMOVED***
        markerLines[startLine] = true;
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      markerLines[startLine] = [startColumn, endColumn - startColumn];
    ***REMOVED***
  ***REMOVED***

  return ***REMOVED***
    start,
    end,
    markerLines
  ***REMOVED***;
***REMOVED***

function codeFrameColumns(rawLines, loc, opts = ***REMOVED******REMOVED***) ***REMOVED***
  const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);
  const chalk = (0, _highlight.getChalk)(opts);
  const defs = getDefs(chalk);

  const maybeHighlight = (chalkFn, string) => ***REMOVED***
    return highlighted ? chalkFn(string) : string;
  ***REMOVED***;

  const lines = rawLines.split(NEWLINE);
  const ***REMOVED***
    start,
    end,
    markerLines
  ***REMOVED*** = getMarkerLines(loc, lines, opts);
  const hasColumns = loc.start && typeof loc.start.column === "number";
  const numberMaxWidth = String(end).length;
  const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines;
  let frame = highlightedLines.split(NEWLINE).slice(start, end).map((line, index) => ***REMOVED***
    const number = start + 1 + index;
    const paddedNumber = ` $***REMOVED***number***REMOVED***`.slice(-numberMaxWidth);
    const gutter = ` $***REMOVED***paddedNumber***REMOVED*** | `;
    const hasMarker = markerLines[number];
    const lastMarkerLine = !markerLines[number + 1];

    if (hasMarker) ***REMOVED***
      let markerLine = "";

      if (Array.isArray(hasMarker)) ***REMOVED***
        const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\t]/g, " ");
        const numberOfMarkers = hasMarker[1] || 1;
        markerLine = ["\n ", maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")), markerSpacing, maybeHighlight(defs.marker, "^").repeat(numberOfMarkers)].join("");

        if (lastMarkerLine && opts.message) ***REMOVED***
          markerLine += " " + maybeHighlight(defs.message, opts.message);
        ***REMOVED***
      ***REMOVED***

      return [maybeHighlight(defs.marker, ">"), maybeHighlight(defs.gutter, gutter), line, markerLine].join("");
    ***REMOVED*** else ***REMOVED***
      return ` $***REMOVED***maybeHighlight(defs.gutter, gutter)***REMOVED***$***REMOVED***line***REMOVED***`;
    ***REMOVED***
  ***REMOVED***).join("\n");

  if (opts.message && !hasColumns) ***REMOVED***
    frame = `$***REMOVED***" ".repeat(numberMaxWidth + 1)***REMOVED***$***REMOVED***opts.message***REMOVED***\n$***REMOVED***frame***REMOVED***`;
  ***REMOVED***

  if (highlighted) ***REMOVED***
    return chalk.reset(frame);
  ***REMOVED*** else ***REMOVED***
    return frame;
  ***REMOVED***
***REMOVED***

function _default(rawLines, lineNumber, colNumber, opts = ***REMOVED******REMOVED***) ***REMOVED***
  if (!deprecationWarningShown) ***REMOVED***
    deprecationWarningShown = true;
    const message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";

    if (process.emitWarning) ***REMOVED***
      process.emitWarning(message, "DeprecationWarning");
    ***REMOVED*** else ***REMOVED***
      const deprecationError = new Error(message);
      deprecationError.name = "DeprecationWarning";
      console.warn(new Error(message));
    ***REMOVED***
  ***REMOVED***

  colNumber = Math.max(colNumber, 0);
  const location = ***REMOVED***
    start: ***REMOVED***
      column: colNumber,
      line: lineNumber
    ***REMOVED***
  ***REMOVED***;
  return codeFrameColumns(rawLines, location, opts);
***REMOVED***