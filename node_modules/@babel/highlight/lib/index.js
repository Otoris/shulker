"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
***REMOVED***);
exports.shouldHighlight = shouldHighlight;
exports.getChalk = getChalk;
exports.default = highlight;

var _jsTokens = _interopRequireWildcard(require("js-tokens"));

var _esutils = _interopRequireDefault(require("esutils"));

var _chalk = _interopRequireDefault(require("chalk"));

function _interopRequireDefault(obj) ***REMOVED*** return obj && obj.__esModule ? obj : ***REMOVED*** default: obj ***REMOVED***; ***REMOVED***

function _getRequireWildcardCache() ***REMOVED*** if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () ***REMOVED*** return cache; ***REMOVED***; return cache; ***REMOVED***

function _interopRequireWildcard(obj) ***REMOVED*** if (obj && obj.__esModule) ***REMOVED*** return obj; ***REMOVED*** if (obj === null || typeof obj !== "object" && typeof obj !== "function") ***REMOVED*** return ***REMOVED*** default: obj ***REMOVED***; ***REMOVED*** var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) ***REMOVED*** return cache.get(obj); ***REMOVED*** var newObj = ***REMOVED******REMOVED***; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) ***REMOVED*** if (Object.prototype.hasOwnProperty.call(obj, key)) ***REMOVED*** var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) ***REMOVED*** Object.defineProperty(newObj, key, desc); ***REMOVED*** else ***REMOVED*** newObj[key] = obj[key]; ***REMOVED*** ***REMOVED*** ***REMOVED*** newObj.default = obj; if (cache) ***REMOVED*** cache.set(obj, newObj); ***REMOVED*** return newObj; ***REMOVED***

function getDefs(chalk) ***REMOVED***
  return ***REMOVED***
    keyword: chalk.cyan,
    capitalized: chalk.yellow,
    jsx_tag: chalk.yellow,
    punctuator: chalk.yellow,
    number: chalk.magenta,
    string: chalk.green,
    regex: chalk.magenta,
    comment: chalk.grey,
    invalid: chalk.white.bgRed.bold
  ***REMOVED***;
***REMOVED***

const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
const JSX_TAG = /^[a-z][\w-]*$/i;
const BRACKET = /^[()[\]***REMOVED******REMOVED***]$/;

function getTokenType(match) ***REMOVED***
  const [offset, text] = match.slice(-2);
  const token = (0, _jsTokens.matchToToken)(match);

  if (token.type === "name") ***REMOVED***
    if (_esutils.default.keyword.isReservedWordES6(token.value)) ***REMOVED***
      return "keyword";
    ***REMOVED***

    if (JSX_TAG.test(token.value) && (text[offset - 1] === "<" || text.substr(offset - 2, 2) == "</")) ***REMOVED***
      return "jsx_tag";
    ***REMOVED***

    if (token.value[0] !== token.value[0].toLowerCase()) ***REMOVED***
      return "capitalized";
    ***REMOVED***
  ***REMOVED***

  if (token.type === "punctuator" && BRACKET.test(token.value)) ***REMOVED***
    return "bracket";
  ***REMOVED***

  if (token.type === "invalid" && (token.value === "@" || token.value === "#")) ***REMOVED***
    return "punctuator";
  ***REMOVED***

  return token.type;
***REMOVED***

function highlightTokens(defs, text) ***REMOVED***
  return text.replace(_jsTokens.default, function (...args) ***REMOVED***
    const type = getTokenType(args);
    const colorize = defs[type];

    if (colorize) ***REMOVED***
      return args[0].split(NEWLINE).map(str => colorize(str)).join("\n");
    ***REMOVED*** else ***REMOVED***
      return args[0];
    ***REMOVED***
  ***REMOVED***);
***REMOVED***

function shouldHighlight(options) ***REMOVED***
  return _chalk.default.supportsColor || options.forceColor;
***REMOVED***

function getChalk(options) ***REMOVED***
  let chalk = _chalk.default;

  if (options.forceColor) ***REMOVED***
    chalk = new _chalk.default.constructor(***REMOVED***
      enabled: true,
      level: 1
    ***REMOVED***);
  ***REMOVED***

  return chalk;
***REMOVED***

function highlight(code, options = ***REMOVED******REMOVED***) ***REMOVED***
  if (shouldHighlight(options)) ***REMOVED***
    const chalk = getChalk(options);
    const defs = getDefs(chalk);
    return highlightTokens(defs, code);
  ***REMOVED*** else ***REMOVED***
    return code;
  ***REMOVED***
***REMOVED***