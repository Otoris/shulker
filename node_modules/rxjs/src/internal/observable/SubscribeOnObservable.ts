import ***REMOVED*** SchedulerLike, SchedulerAction ***REMOVED*** from '../types';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** asap ***REMOVED*** from '../scheduler/asap';
import ***REMOVED*** isNumeric ***REMOVED*** from '../util/isNumeric';

export interface DispatchArg<T> ***REMOVED***
  source: Observable<T>;
  subscriber: Subscriber<T>;
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends ***REMOVED***Ignored***REMOVED***
 * @hide true
 */
export class SubscribeOnObservable<T> extends Observable<T> ***REMOVED***
  /** @nocollapse */
  static create<T>(source: Observable<T>, delay: number = 0, scheduler: SchedulerLike = asap): Observable<T> ***REMOVED***
    return new SubscribeOnObservable(source, delay, scheduler);
  ***REMOVED***

  /** @nocollapse */
  static dispatch<T>(this: SchedulerAction<T>, arg: DispatchArg<T>): Subscription ***REMOVED***
    const ***REMOVED*** source, subscriber ***REMOVED*** = arg;
    return this.add(source.subscribe(subscriber));
  ***REMOVED***

  constructor(public source: Observable<T>,
              private delayTime: number = 0,
              private scheduler: SchedulerLike = asap) ***REMOVED***
    super();
    if (!isNumeric(delayTime) || delayTime < 0) ***REMOVED***
      this.delayTime = 0;
    ***REMOVED***
    if (!scheduler || typeof scheduler.schedule !== 'function') ***REMOVED***
      this.scheduler = asap;
    ***REMOVED***
  ***REMOVED***

  /** @deprecated This is an internal implementation detail, do not use. */
  _subscribe(subscriber: Subscriber<T>) ***REMOVED***
    const delay = this.delayTime;
    const source = this.source;
    const scheduler = this.scheduler;

    return scheduler.schedule<DispatchArg<any>>(SubscribeOnObservable.dispatch, delay, ***REMOVED***
      source, subscriber
    ***REMOVED***);
  ***REMOVED***
***REMOVED***
