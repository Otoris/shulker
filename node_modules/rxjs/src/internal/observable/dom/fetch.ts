import ***REMOVED*** Observable ***REMOVED*** from '../../Observable';

/**
 * Uses [the Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to
 * make an HTTP request.
 *
 * **WARNING** Parts of the fetch API are still experimental. `AbortController` is
 * required for this implementation to work and use cancellation appropriately.
 *
 * Will automatically set up an internal [AbortController](https://developer.mozilla.org/en-US/docs/Web/API/AbortController)
 * in order to teardown the internal `fetch` when the subscription tears down.
 *
 * If a `signal` is provided via the `init` argument, it will behave like it usually does with
 * `fetch`. If the provided `signal` aborts, the error that `fetch` normally rejects with
 * in that scenario will be emitted as an error from the observable.
 *
 * ### Basic Use
 *
 * ```ts
 * import ***REMOVED*** of ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** fromFetch ***REMOVED*** from 'rxjs/fetch';
 * import ***REMOVED*** switchMap, catchError ***REMOVED*** from 'rxjs/operators';
 *
 * const data$ = fromFetch('https://api.github.com/users?per_page=5').pipe(
 *  switchMap(response => ***REMOVED***
 *    if (response.ok) ***REMOVED***
 *      // OK return data
 *      return response.json();
 *    ***REMOVED*** else ***REMOVED***
 *      // Server is returning a status requiring the client to try something else.
 *      return of(***REMOVED*** error: true, message: `Error $***REMOVED***response.status***REMOVED***` ***REMOVED***);
 *    ***REMOVED***
 *  ***REMOVED***),
 *  catchError(err => ***REMOVED***
 *    // Network or other error, handle appropriately
 *    console.error(err);
 *    return of(***REMOVED*** error: true, message: err.message ***REMOVED***)
 *  ***REMOVED***)
 * );
 *
 * data$.subscribe(***REMOVED***
 *  next: result => console.log(result),
 *  complete: () => console.log('done')
 * ***REMOVED***)
 * ```
 *
 * @param input The resource you would like to fetch. Can be a url or a request object.
 * @param init A configuration object for the fetch.
 * [See MDN for more details](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)
 * @returns An Observable, that when subscribed to performs an HTTP request using the native `fetch`
 * function. The ***REMOVED***@link Subscription***REMOVED*** is tied to an `AbortController` for the the fetch.
 */
export function fromFetch(input: string | Request, init?: RequestInit): Observable<Response> ***REMOVED***
  return new Observable<Response>(subscriber => ***REMOVED***
    const controller = new AbortController();
    const signal = controller.signal;
    let outerSignalHandler: () => void;
    let abortable = true;
    let unsubscribed = false;

    if (init) ***REMOVED***
      // If a signal is provided, just have it teardown. It's a cancellation token, basically.
      if (init.signal) ***REMOVED***
        if (init.signal.aborted) ***REMOVED***
          controller.abort();
        ***REMOVED*** else ***REMOVED***
          outerSignalHandler = () => ***REMOVED***
            if (!signal.aborted) ***REMOVED***
              controller.abort();
            ***REMOVED***
          ***REMOVED***;
          init.signal.addEventListener('abort', outerSignalHandler);
        ***REMOVED***
      ***REMOVED***
      init = ***REMOVED*** ...init, signal ***REMOVED***;
    ***REMOVED*** else ***REMOVED***
      init = ***REMOVED*** signal ***REMOVED***;
    ***REMOVED***

    fetch(input, init).then(response => ***REMOVED***
      abortable = false;
      subscriber.next(response);
      subscriber.complete();
    ***REMOVED***).catch(err => ***REMOVED***
      abortable = false;
      if (!unsubscribed) ***REMOVED***
        // Only forward the error if it wasn't an abort.
        subscriber.error(err);
      ***REMOVED***
    ***REMOVED***);

    return () => ***REMOVED***
      unsubscribed = true;
      if (abortable) ***REMOVED***
        controller.abort();
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***);
***REMOVED***
