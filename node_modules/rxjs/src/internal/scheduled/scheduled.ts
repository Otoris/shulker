import ***REMOVED*** scheduleObservable ***REMOVED*** from './scheduleObservable';
import ***REMOVED*** schedulePromise ***REMOVED*** from './schedulePromise';
import ***REMOVED*** scheduleArray ***REMOVED*** from './scheduleArray';
import ***REMOVED*** scheduleIterable ***REMOVED*** from './scheduleIterable';
import ***REMOVED*** ObservableInput, SchedulerLike, Observable ***REMOVED*** from 'rxjs';
import ***REMOVED*** isInteropObservable ***REMOVED*** from '../util/isInteropObservable';
import ***REMOVED*** isPromise ***REMOVED*** from '../util/isPromise';
import ***REMOVED*** isArrayLike ***REMOVED*** from '../util/isArrayLike';
import ***REMOVED*** isIterable ***REMOVED*** from '../util/isIterable';

/**
 * Converts from a common ***REMOVED***@link ObservableInput***REMOVED*** type to an observable where subscription and emissions
 * are scheduled on the provided scheduler.
 *
 * @see from
 * @see of
 *
 * @param input The observable, array, promise, iterable, etc you would like to schedule
 * @param scheduler The scheduler to use to schedule the subscription and emissions from
 * the returned observable.
 */
export function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> ***REMOVED***
  if (input != null) ***REMOVED***
    if (isInteropObservable(input)) ***REMOVED***
      return scheduleObservable(input, scheduler);
    ***REMOVED*** else if (isPromise(input)) ***REMOVED***
      return schedulePromise(input, scheduler);
    ***REMOVED*** else if (isArrayLike(input)) ***REMOVED***
      return scheduleArray(input, scheduler);
    ***REMOVED***  else if (isIterable(input) || typeof input === 'string') ***REMOVED***
      return scheduleIterable(input, scheduler);
    ***REMOVED***
  ***REMOVED***

  throw new TypeError((input !== null && typeof input || input) + ' is not observable');
***REMOVED***
