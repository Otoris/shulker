import ***REMOVED*** Subject ***REMOVED*** from './Subject';
import ***REMOVED*** Subscriber ***REMOVED*** from './Subscriber';
import ***REMOVED*** Subscription ***REMOVED*** from './Subscription';
import ***REMOVED*** SubscriptionLike ***REMOVED*** from './types';
import ***REMOVED*** ObjectUnsubscribedError ***REMOVED*** from './util/ObjectUnsubscribedError';

/**
 * A variant of Subject that requires an initial value and emits its current
 * value whenever it is subscribed to.
 *
 * @class BehaviorSubject<T>
 */
export class BehaviorSubject<T> extends Subject<T> ***REMOVED***

  constructor(private _value: T) ***REMOVED***
    super();
  ***REMOVED***

  get value(): T ***REMOVED***
    return this.getValue();
  ***REMOVED***

  /** @deprecated This is an internal implementation detail, do not use. */
  _subscribe(subscriber: Subscriber<T>): Subscription ***REMOVED***
    const subscription = super._subscribe(subscriber);
    if (subscription && !(<SubscriptionLike>subscription).closed) ***REMOVED***
      subscriber.next(this._value);
    ***REMOVED***
    return subscription;
  ***REMOVED***

  getValue(): T ***REMOVED***
    if (this.hasError) ***REMOVED***
      throw this.thrownError;
    ***REMOVED*** else if (this.closed) ***REMOVED***
      throw new ObjectUnsubscribedError();
    ***REMOVED*** else ***REMOVED***
      return this._value;
    ***REMOVED***
  ***REMOVED***

  next(value: T): void ***REMOVED***
    super.next(this._value = value);
  ***REMOVED***
***REMOVED***
