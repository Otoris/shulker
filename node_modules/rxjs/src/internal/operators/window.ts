import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** OperatorFunction ***REMOVED*** from '../types';
import ***REMOVED*** Subject ***REMOVED*** from '../Subject';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
import ***REMOVED*** Operator ***REMOVED*** from '../Operator';

/**
 * Branch out the source Observable values as a nested Observable whenever
 * `windowBoundaries` emits.
 *
 * <span class="informal">It's like ***REMOVED***@link buffer***REMOVED***, but emits a nested Observable
 * instead of an array.</span>
 *
 * ![](window.png)
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits connected, non-overlapping
 * windows. It emits the current window and opens a new one whenever the
 * Observable `windowBoundaries` emits an item. Because each window is an
 * Observable, the output is a higher-order Observable.
 *
 * ## Example
 * In every window of 1 second each, emit at most 2 click events
 * ```ts
 * import ***REMOVED*** fromEvent, interval ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** window, mergeAll, map, take ***REMOVED*** from 'rxjs/operators';
 *
 *  const clicks = fromEvent(document, 'click');
 *  const sec = interval(1000);
 *  const result = clicks.pipe(
 *      window(sec),
 *      map(win => win.pipe(take(2))), // each window has at most 2 emissions
 *      mergeAll(),              // flatten the Observable-of-Observables
 *  );
 *  result.subscribe(x => console.log(x));
 * ```
 * @see ***REMOVED***@link windowCount***REMOVED***
 * @see ***REMOVED***@link windowTime***REMOVED***
 * @see ***REMOVED***@link windowToggle***REMOVED***
 * @see ***REMOVED***@link windowWhen***REMOVED***
 * @see ***REMOVED***@link buffer***REMOVED***
 *
 * @param ***REMOVED***Observable<any>***REMOVED*** windowBoundaries An Observable that completes the
 * previous window and starts a new window.
 * @return ***REMOVED***Observable<Observable<T>>***REMOVED*** An Observable of windows, which are
 * Observables emitting values of the source Observable.
 * @method window
 * @owner Observable
 */
export function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> ***REMOVED***
  return function windowOperatorFunction(source: Observable<T>) ***REMOVED***
    return source.lift(new WindowOperator(windowBoundaries));
  ***REMOVED***;
***REMOVED***

class WindowOperator<T> implements Operator<T, Observable<T>> ***REMOVED***

  constructor(private windowBoundaries: Observable<any>) ***REMOVED***
  ***REMOVED***

  call(subscriber: Subscriber<Observable<T>>, source: any): any ***REMOVED***
    const windowSubscriber = new WindowSubscriber(subscriber);
    const sourceSubscription = source.subscribe(windowSubscriber);
    if (!sourceSubscription.closed) ***REMOVED***
      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));
    ***REMOVED***
    return sourceSubscription;
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class WindowSubscriber<T> extends OuterSubscriber<T, any> ***REMOVED***

  private window: Subject<T> = new Subject<T>();

  constructor(destination: Subscriber<Observable<T>>) ***REMOVED***
    super(destination);
    destination.next(this.window);
  ***REMOVED***

  notifyNext(outerValue: T, innerValue: any,
             outerIndex: number, innerIndex: number,
             innerSub: InnerSubscriber<T, any>): void ***REMOVED***
    this.openWindow();
  ***REMOVED***

  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void ***REMOVED***
    this._error(error);
  ***REMOVED***

  notifyComplete(innerSub: InnerSubscriber<T, any>): void ***REMOVED***
    this._complete();
  ***REMOVED***

  protected _next(value: T): void ***REMOVED***
    this.window.next(value);
  ***REMOVED***

  protected _error(err: any): void ***REMOVED***
    this.window.error(err);
    this.destination.error(err);
  ***REMOVED***

  protected _complete(): void ***REMOVED***
    this.window.complete();
    this.destination.complete();
  ***REMOVED***

  /** @deprecated This is an internal implementation detail, do not use. */
  _unsubscribe() ***REMOVED***
    this.window = null;
  ***REMOVED***

  private openWindow(): void  ***REMOVED***
    const prevWindow = this.window;
    if (prevWindow) ***REMOVED***
      prevWindow.complete();
    ***REMOVED***
    const destination = this.destination;
    const newWindow = this.window = new Subject<T>();
    destination.next(newWindow);
  ***REMOVED***
***REMOVED***
