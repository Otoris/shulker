import ***REMOVED*** EmptyError ***REMOVED*** from '../util/EmptyError';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** TeardownLogic, MonoTypeOperatorFunction ***REMOVED*** from '../types';

/**
 * If the source observable completes without emitting a value, it will emit
 * an error. The error will be created at that time by the optional
 * `errorFactory` argument, otherwise, the error will be ***REMOVED***@link EmptyError***REMOVED***.
 *
 * ![](throwIfEmpty.png)
 *
 * ## Example
 * ```ts
 * import ***REMOVED*** fromEvent, timer ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** throwIfEmpty, takeUntil ***REMOVED*** from 'rxjs/operators';
 *
 * const click$ = fromEvent(document, 'click');
 *
 * click$.pipe(
 *   takeUntil(timer(1000)),
 *   throwIfEmpty(
 *     () => new Error('the document was not clicked within 1 second')
 *   ),
 * )
 * .subscribe(***REMOVED***
 *   next() ***REMOVED*** console.log('The button was clicked'); ***REMOVED***,
 *   error(err) ***REMOVED*** console.error(err); ***REMOVED***
 * ***REMOVED***);
 * ```
 *
 * @param errorFactory A factory function called to produce the
 * error to be thrown when the source observable completes without emitting a
 * value.
 */
export function throwIfEmpty <T>(errorFactory: (() => any) = defaultErrorFactory): MonoTypeOperatorFunction<T> ***REMOVED***
  return (source: Observable<T>) => ***REMOVED***
    return source.lift(new ThrowIfEmptyOperator(errorFactory));
  ***REMOVED***;
***REMOVED***

class ThrowIfEmptyOperator<T> implements Operator<T, T> ***REMOVED***
  constructor(private errorFactory: () => any) ***REMOVED***
  ***REMOVED***

  call(subscriber: Subscriber<T>, source: any): TeardownLogic ***REMOVED***
    return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));
  ***REMOVED***
***REMOVED***

class ThrowIfEmptySubscriber<T> extends Subscriber<T> ***REMOVED***
  private hasValue: boolean = false;

  constructor(destination: Subscriber<T>, private errorFactory: () => any) ***REMOVED***
    super(destination);
  ***REMOVED***

  protected _next(value: T): void ***REMOVED***
    this.hasValue = true;
    this.destination.next(value);
  ***REMOVED***

  protected _complete() ***REMOVED***
    if (!this.hasValue) ***REMOVED***
      let err: any;
      try ***REMOVED***
        err = this.errorFactory();
      ***REMOVED*** catch (e) ***REMOVED***
        err = e;
      ***REMOVED***
      this.destination.error(err);
    ***REMOVED*** else ***REMOVED***
        return this.destination.complete();
    ***REMOVED***
  ***REMOVED***
***REMOVED***

function defaultErrorFactory() ***REMOVED***
  return new EmptyError();
***REMOVED***
