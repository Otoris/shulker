
import ***REMOVED*** async ***REMOVED*** from '../scheduler/async';
import ***REMOVED*** OperatorFunction, SchedulerLike, Timestamp as TimestampInterface ***REMOVED*** from '../types';
import ***REMOVED*** map ***REMOVED*** from './map';

/**
 * Attaches a timestamp to each item emitted by an observable indicating when it was emitted
 *
 * The `timestamp` operator maps the *source* observable stream to an object of type
 * `***REMOVED***value: T, timestamp: R***REMOVED***`. The properties are generically typed. The `value` property contains the value
 * and type of the *source* observable. The `timestamp` is generated by the schedulers `now` function. By
 * default it uses the *async* scheduler which simply returns `Date.now()` (milliseconds since 1970/01/01
 * 00:00:00:000) and therefore is of type `number`.
 *
 * ![](timestamp.png)
 *
 * ## Example
 *
 * In this example there is a timestamp attached to the documents click event.
 *
 * ```ts
 * import ***REMOVED*** fromEvent ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** timestamp ***REMOVED*** from 'rxjs/operators';
 *
 * const clickWithTimestamp = fromEvent(document, 'click').pipe(
 *   timestamp()
 * );
 *
 * // Emits data of type ***REMOVED***value: MouseEvent, timestamp: number***REMOVED***
 * clickWithTimestamp.subscribe(data => ***REMOVED***
 *   console.log(data);
 * ***REMOVED***);
 * ```
 *
 * @param scheduler
 * @return ***REMOVED***Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>***REMOVED***
 * @method timestamp
 * @owner Observable
 */
export function timestamp<T>(scheduler: SchedulerLike = async): OperatorFunction<T, Timestamp<T>> ***REMOVED***
  return map((value: T) => new Timestamp(value, scheduler.now()));
  // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));
***REMOVED***

export class Timestamp<T> implements TimestampInterface<T> ***REMOVED***
  constructor(public value: T, public timestamp: number) ***REMOVED***
  ***REMOVED***
***REMOVED***
