import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
import ***REMOVED*** OperatorFunction ***REMOVED*** from '../types';

/**
 * Buffers the source Observable values, using a factory function of closing
 * Observables to determine when to close, emit, and reset the buffer.
 *
 * <span class="informal">Collects values from the past as an array. When it
 * starts collecting values, it calls a function that returns an Observable that
 * tells when to close the buffer and restart collecting.</span>
 *
 * ![](bufferWhen.png)
 *
 * Opens a buffer immediately, then closes the buffer when the observable
 * returned by calling `closingSelector` function emits a value. When it closes
 * the buffer, it immediately opens a new buffer and repeats the process.
 *
 * ## Example
 *
 * Emit an array of the last clicks every [1-5] random seconds
 *
 * ```ts
 * import ***REMOVED*** fromEvent, interval ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** bufferWhen ***REMOVED*** from 'rxjs/operators';
 *
 * const clicks = fromEvent(document, 'click');
 * const buffered = clicks.pipe(bufferWhen(() =>
 *   interval(1000 + Math.random() * 4000)
 * ));
 * buffered.subscribe(x => console.log(x));
 * ```
 *
 *
 * @see ***REMOVED***@link buffer***REMOVED***
 * @see ***REMOVED***@link bufferCount***REMOVED***
 * @see ***REMOVED***@link bufferTime***REMOVED***
 * @see ***REMOVED***@link bufferToggle***REMOVED***
 * @see ***REMOVED***@link windowWhen***REMOVED***
 *
 * @param ***REMOVED***function(): Observable***REMOVED*** closingSelector A function that takes no
 * arguments and returns an Observable that signals buffer closure.
 * @return ***REMOVED***Observable<T[]>***REMOVED*** An observable of arrays of buffered values.
 * @method bufferWhen
 * @owner Observable
 */
export function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> ***REMOVED***
  return function (source: Observable<T>) ***REMOVED***
    return source.lift(new BufferWhenOperator(closingSelector));
  ***REMOVED***;
***REMOVED***

class BufferWhenOperator<T> implements Operator<T, T[]> ***REMOVED***

  constructor(private closingSelector: () => Observable<any>) ***REMOVED***
  ***REMOVED***

  call(subscriber: Subscriber<T[]>, source: any): any ***REMOVED***
    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class BufferWhenSubscriber<T> extends OuterSubscriber<T, any> ***REMOVED***
  private buffer: T[];
  private subscribing: boolean = false;
  private closingSubscription: Subscription;

  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) ***REMOVED***
    super(destination);
    this.openBuffer();
  ***REMOVED***

  protected _next(value: T) ***REMOVED***
    this.buffer.push(value);
  ***REMOVED***

  protected _complete() ***REMOVED***
    const buffer = this.buffer;
    if (buffer) ***REMOVED***
      this.destination.next(buffer);
    ***REMOVED***
    super._complete();
  ***REMOVED***

  /** @deprecated This is an internal implementation detail, do not use. */
  _unsubscribe() ***REMOVED***
    this.buffer = null;
    this.subscribing = false;
  ***REMOVED***

  notifyNext(outerValue: T, innerValue: any,
             outerIndex: number, innerIndex: number,
             innerSub: InnerSubscriber<T, any>): void ***REMOVED***
    this.openBuffer();
  ***REMOVED***

  notifyComplete(): void ***REMOVED***
    if (this.subscribing) ***REMOVED***
      this.complete();
    ***REMOVED*** else ***REMOVED***
      this.openBuffer();
    ***REMOVED***
  ***REMOVED***

  openBuffer() ***REMOVED***
    let ***REMOVED*** closingSubscription ***REMOVED*** = this;

    if (closingSubscription) ***REMOVED***
      this.remove(closingSubscription);
      closingSubscription.unsubscribe();
    ***REMOVED***

    const buffer = this.buffer;
    if (this.buffer) ***REMOVED***
      this.destination.next(buffer);
    ***REMOVED***

    this.buffer = [];

    let closingNotifier;
    try ***REMOVED***
      const ***REMOVED*** closingSelector ***REMOVED*** = this;
      closingNotifier = closingSelector();
    ***REMOVED*** catch (err) ***REMOVED***
      return this.error(err);
    ***REMOVED***
    closingSubscription = new Subscription();
    this.closingSubscription = closingSubscription;
    this.add(closingSubscription);
    this.subscribing = true;
    closingSubscription.add(subscribeToResult(this, closingNotifier));
    this.subscribing = false;
  ***REMOVED***
***REMOVED***
