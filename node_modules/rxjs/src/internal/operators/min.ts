import ***REMOVED*** reduce ***REMOVED*** from './reduce';
import ***REMOVED*** MonoTypeOperatorFunction ***REMOVED*** from '../types';

/**
 * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),
 * and when source Observable completes it emits a single item: the item with the smallest value.
 *
 * ![](min.png)
 *
 * ## Examples
 * Get the minimal value of a series of numbers
 * ```ts
 * import ***REMOVED*** of ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** min ***REMOVED*** from 'rxjs/operators';
 *
 * of(5, 4, 7, 2, 8).pipe(
 *   min(),
 * )
 * .subscribe(x => console.log(x)); // -> 2
 * ```
 *
 * Use a comparer function to get the minimal item
 * ```typescript
 * import ***REMOVED*** of ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** min ***REMOVED*** from 'rxjs/operators';
 *
 * interface Person ***REMOVED***
 *   age: number,
 *   name: string
 * ***REMOVED***
 * of<Person>(
 *   ***REMOVED***age: 7, name: 'Foo'***REMOVED***,
 *   ***REMOVED***age: 5, name: 'Bar'***REMOVED***,
 *   ***REMOVED***age: 9, name: 'Beer'***REMOVED***,
 * ).pipe(
 *   min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1),
 * )
 * .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'
 * ```
 * @see ***REMOVED***@link max***REMOVED***
 *
 * @param ***REMOVED***Function***REMOVED*** [comparer] - Optional comparer function that it will use instead of its default to compare the
 * value of two items.
 * @return ***REMOVED***Observable<R>***REMOVED*** An Observable that emits item with the smallest value.
 * @method min
 * @owner Observable
 */
export function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> ***REMOVED***
  const min: (x: T, y: T) => T = (typeof comparer === 'function')
    ? (x, y) => comparer(x, y) < 0 ? x : y
    : (x, y) => x < y ? x : y;
  return reduce(min);
***REMOVED***
