import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';

import ***REMOVED*** MonoTypeOperatorFunction, TeardownLogic ***REMOVED*** from '../types';

/**
 * Emits the most recently emitted value from the source Observable whenever
 * another Observable, the `notifier`, emits.
 *
 * <span class="informal">It's like ***REMOVED***@link sampleTime***REMOVED***, but samples whenever
 * the `notifier` Observable emits something.</span>
 *
 * ![](sample.png)
 *
 * Whenever the `notifier` Observable emits a value or completes, `sample`
 * looks at the source Observable and emits whichever value it has most recently
 * emitted since the previous sampling, unless the source has not emitted
 * anything since the previous sampling. The `notifier` is subscribed to as soon
 * as the output Observable is subscribed.
 *
 * ## Example
 * On every click, sample the most recent "seconds" timer
 * ```ts
 * import ***REMOVED*** fromEvent, interval ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** sample ***REMOVED*** from 'rxjs/operators';
 *
 * const seconds = interval(1000);
 * const clicks = fromEvent(document, 'click');
 * const result = seconds.pipe(sample(clicks));
 * result.subscribe(x => console.log(x));
 * ```
 *
 * @see ***REMOVED***@link audit***REMOVED***
 * @see ***REMOVED***@link debounce***REMOVED***
 * @see ***REMOVED***@link sampleTime***REMOVED***
 * @see ***REMOVED***@link throttle***REMOVED***
 *
 * @param ***REMOVED***Observable<any>***REMOVED*** notifier The Observable to use for sampling the
 * source Observable.
 * @return ***REMOVED***Observable<T>***REMOVED*** An Observable that emits the results of sampling the
 * values emitted by the source Observable whenever the notifier Observable
 * emits value or completes.
 * @method sample
 * @owner Observable
 */
export function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> ***REMOVED***
  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));
***REMOVED***

class SampleOperator<T> implements Operator<T, T> ***REMOVED***
  constructor(private notifier: Observable<any>) ***REMOVED***
  ***REMOVED***

  call(subscriber: Subscriber<T>, source: any): TeardownLogic ***REMOVED***
    const sampleSubscriber = new SampleSubscriber(subscriber);
    const subscription = source.subscribe(sampleSubscriber);
    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));
    return subscription;
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class SampleSubscriber<T, R> extends OuterSubscriber<T, R> ***REMOVED***
  private value: T;
  private hasValue: boolean = false;

  protected _next(value: T) ***REMOVED***
    this.value = value;
    this.hasValue = true;
  ***REMOVED***

  notifyNext(outerValue: T, innerValue: R,
             outerIndex: number, innerIndex: number,
             innerSub: InnerSubscriber<T, R>): void ***REMOVED***
    this.emitValue();
  ***REMOVED***

  notifyComplete(): void ***REMOVED***
    this.emitValue();
  ***REMOVED***

  emitValue() ***REMOVED***
    if (this.hasValue) ***REMOVED***
      this.hasValue = false;
      this.destination.next(this.value);
    ***REMOVED***
  ***REMOVED***
***REMOVED***
