import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** async ***REMOVED*** from '../scheduler/async';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** isScheduler ***REMOVED*** from '../util/isScheduler';
import ***REMOVED*** OperatorFunction, SchedulerAction, SchedulerLike ***REMOVED*** from '../types';

/* tslint:disable:max-line-length */
export function bufferTime<T>(bufferTimeSpan: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;
export function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number | null | undefined, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;
export function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number | null | undefined, maxBufferSize: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;
/* tslint:enable:max-line-length */

/**
 * Buffers the source Observable values for a specific time period.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * those arrays periodically in time.</span>
 *
 * ![](bufferTime.png)
 *
 * Buffers values from the source for a specific time duration `bufferTimeSpan`.
 * Unless the optional argument `bufferCreationInterval` is given, it emits and
 * resets the buffer every `bufferTimeSpan` milliseconds. If
 * `bufferCreationInterval` is given, this operator opens the buffer every
 * `bufferCreationInterval` milliseconds and closes (emits and resets) the
 * buffer every `bufferTimeSpan` milliseconds. When the optional argument
 * `maxBufferSize` is specified, the buffer will be closed either after
 * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.
 *
 * ## Examples
 *
 * Every second, emit an array of the recent click events
 *
 * ```ts
 * import ***REMOVED*** fromEvent ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** bufferTime ***REMOVED*** from 'rxjs/operators';
 *
 * const clicks = fromEvent(document, 'click');
 * const buffered = clicks.pipe(bufferTime(1000));
 * buffered.subscribe(x => console.log(x));
 * ```
 *
 * Every 5 seconds, emit the click events from the next 2 seconds
 *
 * ```ts
 * import ***REMOVED*** fromEvent ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** bufferTime ***REMOVED*** from 'rxjs/operators';
 *
 * const clicks = fromEvent(document, 'click');
 * const buffered = clicks.pipe(bufferTime(2000, 5000));
 * buffered.subscribe(x => console.log(x));
 * ```
 *
 * @see ***REMOVED***@link buffer***REMOVED***
 * @see ***REMOVED***@link bufferCount***REMOVED***
 * @see ***REMOVED***@link bufferToggle***REMOVED***
 * @see ***REMOVED***@link bufferWhen***REMOVED***
 * @see ***REMOVED***@link windowTime***REMOVED***
 *
 * @param ***REMOVED***number***REMOVED*** bufferTimeSpan The amount of time to fill each buffer array.
 * @param ***REMOVED***number***REMOVED*** [bufferCreationInterval] The interval at which to start new
 * buffers.
 * @param ***REMOVED***number***REMOVED*** [maxBufferSize] The maximum buffer size.
 * @param ***REMOVED***SchedulerLike***REMOVED*** [scheduler=async] The scheduler on which to schedule the
 * intervals that determine buffer boundaries.
 * @return ***REMOVED***Observable<T[]>***REMOVED*** An observable of arrays of buffered values.
 * @method bufferTime
 * @owner Observable
 */
export function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> ***REMOVED***
  let length: number = arguments.length;

  let scheduler: SchedulerLike = async;
  if (isScheduler(arguments[arguments.length - 1])) ***REMOVED***
    scheduler = arguments[arguments.length - 1];
    length--;
  ***REMOVED***

  let bufferCreationInterval: number = null;
  if (length >= 2) ***REMOVED***
    bufferCreationInterval = arguments[1];
  ***REMOVED***

  let maxBufferSize: number = Number.POSITIVE_INFINITY;
  if (length >= 3) ***REMOVED***
    maxBufferSize = arguments[2];
  ***REMOVED***

  return function bufferTimeOperatorFunction(source: Observable<T>) ***REMOVED***
    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
  ***REMOVED***;
***REMOVED***

class BufferTimeOperator<T> implements Operator<T, T[]> ***REMOVED***
  constructor(private bufferTimeSpan: number,
              private bufferCreationInterval: number,
              private maxBufferSize: number,
              private scheduler: SchedulerLike) ***REMOVED***
  ***REMOVED***

  call(subscriber: Subscriber<T[]>, source: any): any ***REMOVED***
    return source.subscribe(new BufferTimeSubscriber(
      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler
    ));
  ***REMOVED***
***REMOVED***

class Context<T> ***REMOVED***
  buffer: T[] = [];
  closeAction: Subscription;
***REMOVED***

interface DispatchCreateArg<T> ***REMOVED***
  bufferTimeSpan: number;
  bufferCreationInterval: number;
  subscriber: BufferTimeSubscriber<T>;
  scheduler: SchedulerLike;
***REMOVED***

interface DispatchCloseArg<T> ***REMOVED***
  subscriber: BufferTimeSubscriber<T>;
  context: Context<T>;
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class BufferTimeSubscriber<T> extends Subscriber<T> ***REMOVED***
  private contexts: Array<Context<T>> = [];
  private timespanOnly: boolean;

  constructor(destination: Subscriber<T[]>,
              private bufferTimeSpan: number,
              private bufferCreationInterval: number,
              private maxBufferSize: number,
              private scheduler: SchedulerLike) ***REMOVED***
    super(destination);
    const context = this.openContext();
    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
    if (this.timespanOnly) ***REMOVED***
      const timeSpanOnlyState = ***REMOVED*** subscriber: this, context, bufferTimeSpan ***REMOVED***;
      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
    ***REMOVED*** else ***REMOVED***
      const closeState = ***REMOVED*** subscriber: this, context ***REMOVED***;
      const creationState: DispatchCreateArg<T> = ***REMOVED*** bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler ***REMOVED***;
      this.add(context.closeAction = scheduler.schedule<DispatchCloseArg<T>>(dispatchBufferClose, bufferTimeSpan, closeState));
      this.add(scheduler.schedule<DispatchCreateArg<T>>(dispatchBufferCreation, bufferCreationInterval, creationState));
    ***REMOVED***
  ***REMOVED***

  protected _next(value: T) ***REMOVED***
    const contexts = this.contexts;
    const len = contexts.length;
    let filledBufferContext: Context<T>;
    for (let i = 0; i < len; i++) ***REMOVED***
      const context = contexts[i];
      const buffer = context.buffer;
      buffer.push(value);
      if (buffer.length == this.maxBufferSize) ***REMOVED***
        filledBufferContext = context;
      ***REMOVED***
    ***REMOVED***

    if (filledBufferContext) ***REMOVED***
      this.onBufferFull(filledBufferContext);
    ***REMOVED***
  ***REMOVED***

  protected _error(err: any) ***REMOVED***
    this.contexts.length = 0;
    super._error(err);
  ***REMOVED***

  protected _complete() ***REMOVED***
    const ***REMOVED*** contexts, destination ***REMOVED*** = this;
    while (contexts.length > 0) ***REMOVED***
      const context = contexts.shift();
      destination.next(context.buffer);
    ***REMOVED***
    super._complete();
  ***REMOVED***

  /** @deprecated This is an internal implementation detail, do not use. */
  _unsubscribe() ***REMOVED***
    this.contexts = null;
  ***REMOVED***

  protected onBufferFull(context: Context<T>) ***REMOVED***
    this.closeContext(context);
    const closeAction = context.closeAction;
    closeAction.unsubscribe();
    this.remove(closeAction);

    if (!this.closed && this.timespanOnly) ***REMOVED***
      context = this.openContext();
      const bufferTimeSpan = this.bufferTimeSpan;
      const timeSpanOnlyState = ***REMOVED*** subscriber: this, context, bufferTimeSpan ***REMOVED***;
      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
    ***REMOVED***
  ***REMOVED***

  openContext(): Context<T> ***REMOVED***
    const context: Context<T> = new Context<T>();
    this.contexts.push(context);
    return context;
  ***REMOVED***

  closeContext(context: Context<T>) ***REMOVED***
    this.destination.next(context.buffer);
    const contexts = this.contexts;

    const spliceIndex = contexts ? contexts.indexOf(context) : -1;
    if (spliceIndex >= 0) ***REMOVED***
      contexts.splice(contexts.indexOf(context), 1);
    ***REMOVED***
  ***REMOVED***
***REMOVED***

function dispatchBufferTimeSpanOnly(this: SchedulerAction<any>, state: any) ***REMOVED***
  const subscriber: BufferTimeSubscriber<any> = state.subscriber;

  const prevContext = state.context;
  if (prevContext) ***REMOVED***
    subscriber.closeContext(prevContext);
  ***REMOVED***

  if (!subscriber.closed) ***REMOVED***
    state.context = subscriber.openContext();
    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
  ***REMOVED***
***REMOVED***

function dispatchBufferCreation<T>(this: SchedulerAction<DispatchCreateArg<T>>, state: DispatchCreateArg<T>) ***REMOVED***
  const ***REMOVED*** bufferCreationInterval, bufferTimeSpan, subscriber, scheduler ***REMOVED*** = state;
  const context = subscriber.openContext();
  const action = <SchedulerAction<DispatchCreateArg<T>>>this;
  if (!subscriber.closed) ***REMOVED***
    subscriber.add(context.closeAction = scheduler.schedule<DispatchCloseArg<T>>(dispatchBufferClose, bufferTimeSpan, ***REMOVED*** subscriber, context ***REMOVED***));
    action.schedule(state, bufferCreationInterval);
  ***REMOVED***
***REMOVED***

function dispatchBufferClose<T>(arg: DispatchCloseArg<T>) ***REMOVED***
  const ***REMOVED*** subscriber, context ***REMOVED*** = arg;
  subscriber.closeContext(context);
***REMOVED***
