import ***REMOVED*** Subject ***REMOVED*** from '../Subject';
import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** async ***REMOVED*** from '../scheduler/async';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** isNumeric ***REMOVED*** from '../util/isNumeric';
import ***REMOVED*** isScheduler ***REMOVED*** from '../util/isScheduler';
import ***REMOVED*** OperatorFunction, SchedulerLike, SchedulerAction ***REMOVED*** from '../types';

/**
 * Branch out the source Observable values as a nested Observable periodically
 * in time.
 *
 * <span class="informal">It's like ***REMOVED***@link bufferTime***REMOVED***, but emits a nested
 * Observable instead of an array.</span>
 *
 * ![](windowTime.png)
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable starts a new window periodically, as
 * determined by the `windowCreationInterval` argument. It emits each window
 * after a fixed timespan, specified by the `windowTimeSpan` argument. When the
 * source Observable completes or encounters an error, the output Observable
 * emits the current window and propagates the notification from the source
 * Observable. If `windowCreationInterval` is not provided, the output
 * Observable starts a new window when the previous window of duration
 * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window
 * will emit at most fixed number of values. Window will complete immediately
 * after emitting last value and next one still will open as specified by
 * `windowTimeSpan` and `windowCreationInterval` arguments.
 *
 * ## Examples
 * In every window of 1 second each, emit at most 2 click events
 * ```ts
 * import ***REMOVED*** fromEvent ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** windowTime, map, mergeAll, take ***REMOVED*** from 'rxjs/operators';
 *
 * const clicks = fromEvent(document, 'click');
 * const result = clicks.pipe(
 *   windowTime(1000),
 *   map(win => win.pipe(take(2))), // each window has at most 2 emissions
 *   mergeAll(),                    // flatten the Observable-of-Observables
 * );
 * result.subscribe(x => console.log(x));
 * ```
 *
 * Every 5 seconds start a window 1 second long, and emit at most 2 click events per window
 * ```ts
 * import ***REMOVED*** fromEvent ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** windowTime, map, mergeAll, take ***REMOVED*** from 'rxjs/operators';
 *
 * const clicks = fromEvent(document, 'click');
 * const result = clicks.pipe(
 *   windowTime(1000, 5000),
 *   map(win => win.pipe(take(2))), // each window has at most 2 emissions
 *   mergeAll(),                    // flatten the Observable-of-Observables
 * );
 * result.subscribe(x => console.log(x));
 * ```
 *
 * Same as example above but with maxWindowCount instead of take
 * ```ts
 * import ***REMOVED*** fromEvent ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** windowTime, mergeAll ***REMOVED*** from 'rxjs/operators';
 *
 * const clicks = fromEvent(document, 'click');
 * const result = clicks.pipe(
 *   windowTime(1000, 5000, 2), // each window has still at most 2 emissions
 *   mergeAll(),                // flatten the Observable-of-Observables
 * );
 * result.subscribe(x => console.log(x));
 * ```
 *
 * @see ***REMOVED***@link window***REMOVED***
 * @see ***REMOVED***@link windowCount***REMOVED***
 * @see ***REMOVED***@link windowToggle***REMOVED***
 * @see ***REMOVED***@link windowWhen***REMOVED***
 * @see ***REMOVED***@link bufferTime***REMOVED***
 *
 * @param ***REMOVED***number***REMOVED*** windowTimeSpan The amount of time to fill each window.
 * @param ***REMOVED***number***REMOVED*** [windowCreationInterval] The interval at which to start new
 * windows.
 * @param ***REMOVED***number***REMOVED*** [maxWindowSize=Number.POSITIVE_INFINITY] Max number of
 * values each window can emit before completion.
 * @param ***REMOVED***SchedulerLike***REMOVED*** [scheduler=async] The scheduler on which to schedule the
 * intervals that determine window boundaries.
 * @return ***REMOVED***Observable<Observable<T>>***REMOVED*** An observable of windows, which in turn
 * are Observables.
 * @method windowTime
 * @owner Observable
 */
export function windowTime<T>(windowTimeSpan: number,
                              scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;
export function windowTime<T>(windowTimeSpan: number,
                              windowCreationInterval: number,
                              scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;
export function windowTime<T>(windowTimeSpan: number,
                              windowCreationInterval: number,
                              maxWindowSize: number,
                              scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;

export function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> ***REMOVED***
  let scheduler: SchedulerLike = async;
  let windowCreationInterval: number = null;
  let maxWindowSize: number = Number.POSITIVE_INFINITY;

  if (isScheduler(arguments[3])) ***REMOVED***
    scheduler = arguments[3];
  ***REMOVED***

  if (isScheduler(arguments[2])) ***REMOVED***
    scheduler = arguments[2];
  ***REMOVED*** else if (isNumeric(arguments[2])) ***REMOVED***
    maxWindowSize = arguments[2];
  ***REMOVED***

  if (isScheduler(arguments[1])) ***REMOVED***
    scheduler = arguments[1];
  ***REMOVED*** else if (isNumeric(arguments[1])) ***REMOVED***
    windowCreationInterval = arguments[1];
  ***REMOVED***

  return function windowTimeOperatorFunction(source: Observable<T>) ***REMOVED***
    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));
  ***REMOVED***;
***REMOVED***

class WindowTimeOperator<T> implements Operator<T, Observable<T>> ***REMOVED***

  constructor(private windowTimeSpan: number,
              private windowCreationInterval: number | null,
              private maxWindowSize: number,
              private scheduler: SchedulerLike) ***REMOVED***
  ***REMOVED***

  call(subscriber: Subscriber<Observable<T>>, source: any): any ***REMOVED***
    return source.subscribe(new WindowTimeSubscriber(
      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler
    ));
  ***REMOVED***
***REMOVED***

interface CreationState<T> ***REMOVED***
  windowTimeSpan: number;
  windowCreationInterval: number;
  subscriber: WindowTimeSubscriber<T>;
  scheduler: SchedulerLike;
***REMOVED***

interface TimeSpanOnlyState<T> ***REMOVED***
    window: CountedSubject<T>;
    windowTimeSpan: number;
    subscriber: WindowTimeSubscriber<T>;
  ***REMOVED***

interface CloseWindowContext<T> ***REMOVED***
  action: SchedulerAction<CreationState<T>>;
  subscription: Subscription;
***REMOVED***

interface CloseState<T> ***REMOVED***
  subscriber: WindowTimeSubscriber<T>;
  window: CountedSubject<T>;
  context: CloseWindowContext<T>;
***REMOVED***

class CountedSubject<T> extends Subject<T> ***REMOVED***
  private _numberOfNextedValues: number = 0;

  next(value?: T): void ***REMOVED***
    this._numberOfNextedValues++;
    super.next(value);
  ***REMOVED***

  get numberOfNextedValues(): number ***REMOVED***
    return this._numberOfNextedValues;
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class WindowTimeSubscriber<T> extends Subscriber<T> ***REMOVED***
  private windows: CountedSubject<T>[] = [];

  constructor(protected destination: Subscriber<Observable<T>>,
              private windowTimeSpan: number,
              private windowCreationInterval: number | null,
              private maxWindowSize: number,
              private scheduler: SchedulerLike) ***REMOVED***
    super(destination);

    const window = this.openWindow();
    if (windowCreationInterval !== null && windowCreationInterval >= 0) ***REMOVED***
      const closeState: CloseState<T> = ***REMOVED*** subscriber: this, window, context: <any>null ***REMOVED***;
      const creationState: CreationState<T> = ***REMOVED*** windowTimeSpan, windowCreationInterval, subscriber: this, scheduler ***REMOVED***;
      this.add(scheduler.schedule<CloseState<T>>(dispatchWindowClose, windowTimeSpan, closeState));
      this.add(scheduler.schedule<CreationState<T>>(dispatchWindowCreation, windowCreationInterval, creationState));
    ***REMOVED*** else ***REMOVED***
      const timeSpanOnlyState: TimeSpanOnlyState<T> = ***REMOVED*** subscriber: this, window, windowTimeSpan ***REMOVED***;
      this.add(scheduler.schedule<TimeSpanOnlyState<T>>(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
    ***REMOVED***
  ***REMOVED***

  protected _next(value: T): void ***REMOVED***
    const windows = this.windows;
    const len = windows.length;
    for (let i = 0; i < len; i++) ***REMOVED***
      const window = windows[i];
      if (!window.closed) ***REMOVED***
        window.next(value);
        if (window.numberOfNextedValues >= this.maxWindowSize) ***REMOVED***
          this.closeWindow(window);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  protected _error(err: any): void ***REMOVED***
    const windows = this.windows;
    while (windows.length > 0) ***REMOVED***
      windows.shift().error(err);
    ***REMOVED***
    this.destination.error(err);
  ***REMOVED***

  protected _complete(): void ***REMOVED***
    const windows = this.windows;
    while (windows.length > 0) ***REMOVED***
      const window = windows.shift();
      if (!window.closed) ***REMOVED***
        window.complete();
      ***REMOVED***
    ***REMOVED***
    this.destination.complete();
  ***REMOVED***

  public openWindow(): CountedSubject<T> ***REMOVED***
    const window = new CountedSubject<T>();
    this.windows.push(window);
    const destination = this.destination;
    destination.next(window);
    return window;
  ***REMOVED***

  public closeWindow(window: CountedSubject<T>): void ***REMOVED***
    window.complete();
    const windows = this.windows;
    windows.splice(windows.indexOf(window), 1);
  ***REMOVED***
***REMOVED***

function dispatchWindowTimeSpanOnly<T>(this: SchedulerAction<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void ***REMOVED***
  const ***REMOVED*** subscriber, windowTimeSpan, window ***REMOVED*** = state;
  if (window) ***REMOVED***
    subscriber.closeWindow(window);
  ***REMOVED***
  state.window = subscriber.openWindow();
  this.schedule(state, windowTimeSpan);
***REMOVED***

function dispatchWindowCreation<T>(this: SchedulerAction<CreationState<T>>, state: CreationState<T>): void ***REMOVED***
  const ***REMOVED*** windowTimeSpan, subscriber, scheduler, windowCreationInterval ***REMOVED*** = state;
  const window = subscriber.openWindow();
  const action = this;
  let context: CloseWindowContext<T> = ***REMOVED*** action, subscription: <any>null ***REMOVED***;
  const timeSpanState: CloseState<T> = ***REMOVED*** subscriber, window, context ***REMOVED***;
  context.subscription = scheduler.schedule<CloseState<T>>(dispatchWindowClose, windowTimeSpan, timeSpanState);
  action.add(context.subscription);
  action.schedule(state, windowCreationInterval);
***REMOVED***

function dispatchWindowClose<T>(state: CloseState<T>): void ***REMOVED***
  const ***REMOVED*** subscriber, window, context ***REMOVED*** = state;
  if (context && context.action && context.subscription) ***REMOVED***
    context.action.remove(context.subscription);
  ***REMOVED***
  subscriber.closeWindow(window);
***REMOVED***
