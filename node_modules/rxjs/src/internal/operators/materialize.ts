import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Notification ***REMOVED*** from '../Notification';
import ***REMOVED*** OperatorFunction ***REMOVED*** from '../types';

/**
 * Represents all of the notifications from the source Observable as `next`
 * emissions marked with their original types within ***REMOVED***@link Notification***REMOVED***
 * objects.
 *
 * <span class="informal">Wraps `next`, `error` and `complete` emissions in
 * ***REMOVED***@link Notification***REMOVED*** objects, emitted as `next` on the output Observable.
 * </span>
 *
 * ![](materialize.png)
 *
 * `materialize` returns an Observable that emits a `next` notification for each
 * `next`, `error`, or `complete` emission of the source Observable. When the
 * source Observable emits `complete`, the output Observable will emit `next` as
 * a Notification of type "complete", and then it will emit `complete` as well.
 * When the source Observable emits `error`, the output will emit `next` as a
 * Notification of type "error", and then `complete`.
 *
 * This operator is useful for producing metadata of the source Observable, to
 * be consumed as `next` emissions. Use it in conjunction with
 * ***REMOVED***@link dematerialize***REMOVED***.
 *
 * ## Example
 * Convert a faulty Observable to an Observable of Notifications
 * ```ts
 * import ***REMOVED*** of ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** materialize, map ***REMOVED*** from 'rxjs/operators';
 *
 * const letters = of('a', 'b', 13, 'd');
 * const upperCase = letters.pipe(map(x => x.toUpperCase()));
 * const materialized = upperCase.pipe(materialize());
 * materialized.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // - Notification ***REMOVED***kind: "N", value: "A", error: undefined, hasValue: true***REMOVED***
 * // - Notification ***REMOVED***kind: "N", value: "B", error: undefined, hasValue: true***REMOVED***
 * // - Notification ***REMOVED***kind: "E", value: undefined, error: TypeError:
 * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x
 * //   [as project] (http://1â€¦, hasValue: false***REMOVED***
 * ```
 *
 * @see ***REMOVED***@link Notification***REMOVED***
 * @see ***REMOVED***@link dematerialize***REMOVED***
 *
 * @return ***REMOVED***Observable<Notification<T>>***REMOVED*** An Observable that emits
 * ***REMOVED***@link Notification***REMOVED*** objects that wrap the original emissions from the source
 * Observable with metadata.
 * @method materialize
 * @owner Observable
 */
export function materialize<T>(): OperatorFunction<T, Notification<T>> ***REMOVED***
  return function materializeOperatorFunction(source: Observable<T>) ***REMOVED***
    return source.lift(new MaterializeOperator());
  ***REMOVED***;
***REMOVED***

class MaterializeOperator<T> implements Operator<T, Notification<T>> ***REMOVED***
  call(subscriber: Subscriber<Notification<T>>, source: any): any ***REMOVED***
    return source.subscribe(new MaterializeSubscriber(subscriber));
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class MaterializeSubscriber<T> extends Subscriber<T> ***REMOVED***
  constructor(destination: Subscriber<Notification<T>>) ***REMOVED***
    super(destination);
  ***REMOVED***

  protected _next(value: T) ***REMOVED***
    this.destination.next(Notification.createNext(value));
  ***REMOVED***

  protected _error(err: any) ***REMOVED***
    const destination = this.destination;
    destination.next(Notification.createError(err));
    destination.complete();
  ***REMOVED***

  protected _complete() ***REMOVED***
    const destination = this.destination;
    destination.next(Notification.createComplete());
    destination.complete();
  ***REMOVED***
***REMOVED***
