import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** OperatorFunction, ObservedValueOf ***REMOVED*** from '../../internal/types';
import ***REMOVED*** mergeMap ***REMOVED*** from './mergeMap';
import ***REMOVED*** ObservableInput ***REMOVED*** from '../types';

/* tslint:disable:max-line-length */
export function mergeMapTo<T, O extends ObservableInput<any>>(innerObservable: O, concurrent?: number): OperatorFunction<any, ObservedValueOf<O>>;
/** @deprecated */
export function mergeMapTo<T, R, O extends ObservableInput<any>>(innerObservable: O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;
/* tslint:enable:max-line-length */

/**
 * Projects each source value to the same Observable which is merged multiple
 * times in the output Observable.
 *
 * <span class="informal">It's like ***REMOVED***@link mergeMap***REMOVED***, but maps each value always
 * to the same inner Observable.</span>
 *
 * ![](mergeMapTo.png)
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then merges those resulting Observables into one
 * single Observable, which is the output Observable.
 *
 * ## Example
 * For each click event, start an interval Observable ticking every 1 second
 * ```ts
 * import ***REMOVED*** fromEvent, interval ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** mergeMapTo ***REMOVED*** from 'rxjs/operators';
 *
 * const clicks = fromEvent(document, 'click');
 * const result = clicks.pipe(mergeMapTo(interval(1000)));
 * result.subscribe(x => console.log(x));
 * ```
 *
 * @see ***REMOVED***@link concatMapTo***REMOVED***
 * @see ***REMOVED***@link merge***REMOVED***
 * @see ***REMOVED***@link mergeAll***REMOVED***
 * @see ***REMOVED***@link mergeMap***REMOVED***
 * @see ***REMOVED***@link mergeScan***REMOVED***
 * @see ***REMOVED***@link switchMapTo***REMOVED***
 *
 * @param ***REMOVED***ObservableInput***REMOVED*** innerObservable An Observable to replace each value from
 * the source Observable.
 * @param ***REMOVED***number***REMOVED*** [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return ***REMOVED***Observable***REMOVED*** An Observable that emits items from the given
 * `innerObservable`
 * @method mergeMapTo
 * @owner Observable
 */
export function mergeMapTo<T, R, O extends ObservableInput<any>>(
  innerObservable: O,
  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,
  concurrent: number = Number.POSITIVE_INFINITY
): OperatorFunction<T, ObservedValueOf<O>|R> ***REMOVED***
  if (typeof resultSelector === 'function') ***REMOVED***
    return mergeMap(() => innerObservable, resultSelector, concurrent);
  ***REMOVED***
  if (typeof resultSelector === 'number') ***REMOVED***
    concurrent = resultSelector;
  ***REMOVED***
  return mergeMap(() => innerObservable, concurrent);
***REMOVED***
