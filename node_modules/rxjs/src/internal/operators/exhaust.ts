import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
import ***REMOVED*** ObservableInput, OperatorFunction, TeardownLogic ***REMOVED*** from '../types';

export function exhaust<T>(): OperatorFunction<ObservableInput<T>, T>;
export function exhaust<R>(): OperatorFunction<any, R>;

/**
 * Converts a higher-order Observable into a first-order Observable by dropping
 * inner Observables while the previous inner Observable has not yet completed.
 *
 * <span class="informal">Flattens an Observable-of-Observables by dropping the
 * next inner Observables while the current inner is still executing.</span>
 *
 * ![](exhaust.png)
 *
 * `exhaust` subscribes to an Observable that emits Observables, also known as a
 * higher-order Observable. Each time it observes one of these emitted inner
 * Observables, the output Observable begins emitting the items emitted by that
 * inner Observable. So far, it behaves like ***REMOVED***@link mergeAll***REMOVED***. However,
 * `exhaust` ignores every new inner Observable if the previous Observable has
 * not yet completed. Once that one completes, it will accept and flatten the
 * next inner Observable and repeat this process.
 *
 * ## Example
 * Run a finite timer for each click, only if there is no currently active timer
 * ```ts
 * import ***REMOVED*** fromEvent, interval ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** exhaust, map, take ***REMOVED*** from 'rxjs/operators';
 *
 * const clicks = fromEvent(document, 'click');
 * const higherOrder = clicks.pipe(
 *   map((ev) => interval(1000).pipe(take(5))),
 * );
 * const result = higherOrder.pipe(exhaust());
 * result.subscribe(x => console.log(x));
 * ```
 *
 * @see ***REMOVED***@link combineAll***REMOVED***
 * @see ***REMOVED***@link concatAll***REMOVED***
 * @see ***REMOVED***@link switchAll***REMOVED***
 * @see ***REMOVED***@link switchMap***REMOVED***
 * @see ***REMOVED***@link mergeAll***REMOVED***
 * @see ***REMOVED***@link exhaustMap***REMOVED***
 * @see ***REMOVED***@link zipAll***REMOVED***
 *
 * @return ***REMOVED***Observable***REMOVED*** An Observable that takes a source of Observables and propagates the first observable
 * exclusively until it completes before subscribing to the next.
 * @method exhaust
 * @owner Observable
 */
export function exhaust<T>(): OperatorFunction<any, T> ***REMOVED***
  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());
***REMOVED***

class SwitchFirstOperator<T> implements Operator<T, T> ***REMOVED***
  call(subscriber: Subscriber<T>, source: any): TeardownLogic ***REMOVED***
    return source.subscribe(new SwitchFirstSubscriber(subscriber));
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> ***REMOVED***
  private hasCompleted: boolean = false;
  private hasSubscription: boolean = false;

  constructor(destination: Subscriber<T>) ***REMOVED***
    super(destination);
  ***REMOVED***

  protected _next(value: T): void ***REMOVED***
    if (!this.hasSubscription) ***REMOVED***
      this.hasSubscription = true;
      this.add(subscribeToResult(this, value));
    ***REMOVED***
  ***REMOVED***

  protected _complete(): void ***REMOVED***
    this.hasCompleted = true;
    if (!this.hasSubscription) ***REMOVED***
      this.destination.complete();
    ***REMOVED***
  ***REMOVED***

  notifyComplete(innerSub: Subscription): void ***REMOVED***
    this.remove(innerSub);
    this.hasSubscription = false;
    if (this.hasCompleted) ***REMOVED***
      this.destination.complete();
    ***REMOVED***
  ***REMOVED***
***REMOVED***
