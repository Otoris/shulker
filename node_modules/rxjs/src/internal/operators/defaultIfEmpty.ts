import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** OperatorFunction, MonoTypeOperatorFunction ***REMOVED*** from '../types';

/* tslint:disable:max-line-length */
export function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;
export function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;
/* tslint:enable:max-line-length */

/**
 * Emits a given value if the source Observable completes without emitting any
 * `next` value, otherwise mirrors the source Observable.
 *
 * <span class="informal">If the source Observable turns out to be empty, then
 * this operator will emit a default value.</span>
 *
 * ![](defaultIfEmpty.png)
 *
 * `defaultIfEmpty` emits the values emitted by the source Observable or a
 * specified default value if the source Observable is empty (completes without
 * having emitted any `next` value).
 *
 * ## Example
 * If no clicks happen in 5 seconds, then emit "no clicks"
 * ```ts
 * import ***REMOVED*** fromEvent ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** defaultIfEmpty, takeUntil ***REMOVED*** from 'rxjs/operators';
 *
 * const clicks = fromEvent(document, 'click');
 * const clicksBeforeFive = clicks.pipe(takeUntil(interval(5000)));
 * const result = clicksBeforeFive.pipe(defaultIfEmpty('no clicks'));
 * result.subscribe(x => console.log(x));
 * ```
 *
 * @see ***REMOVED***@link empty***REMOVED***
 * @see ***REMOVED***@link last***REMOVED***
 *
 * @param ***REMOVED***any***REMOVED*** [defaultValue=null] The default value used if the source
 * Observable is empty.
 * @return ***REMOVED***Observable***REMOVED*** An Observable that emits either the specified
 * `defaultValue` if the source Observable emits no items, or the values emitted
 * by the source Observable.
 * @method defaultIfEmpty
 * @owner Observable
 */
export function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> ***REMOVED***
  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;
***REMOVED***

class DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> ***REMOVED***

  constructor(private defaultValue: R) ***REMOVED***
  ***REMOVED***

  call(subscriber: Subscriber<T | R>, source: any): any ***REMOVED***
    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class DefaultIfEmptySubscriber<T, R> extends Subscriber<T> ***REMOVED***
  private isEmpty: boolean = true;

  constructor(destination: Subscriber<T | R>, private defaultValue: R) ***REMOVED***
    super(destination);
  ***REMOVED***

  protected _next(value: T): void ***REMOVED***
    this.isEmpty = false;
    this.destination.next(value);
  ***REMOVED***

  protected _complete(): void ***REMOVED***
    if (this.isEmpty) ***REMOVED***
      this.destination.next(this.defaultValue);
    ***REMOVED***
    this.destination.complete();
  ***REMOVED***
***REMOVED***
