import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** MonoTypeOperatorFunction, TeardownLogic ***REMOVED*** from '../types';

/**
 * Returns an Observable that mirrors the source Observable, but will call a specified function when
 * the source terminates on complete or error.
 * @param ***REMOVED***function***REMOVED*** callback Function to be called when source terminates.
 * @return ***REMOVED***Observable***REMOVED*** An Observable that mirrors the source, but will call the specified function on termination.
 * @method finally
 * @owner Observable
 */
export function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> ***REMOVED***
  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));
***REMOVED***

class FinallyOperator<T> implements Operator<T, T> ***REMOVED***
  constructor(private callback: () => void) ***REMOVED***
  ***REMOVED***

  call(subscriber: Subscriber<T>, source: any): TeardownLogic ***REMOVED***
    return source.subscribe(new FinallySubscriber(subscriber, this.callback));
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class FinallySubscriber<T> extends Subscriber<T> ***REMOVED***
  constructor(destination: Subscriber<T>, callback: () => void) ***REMOVED***
    super(destination);
    this.add(new Subscription(callback));
  ***REMOVED***
***REMOVED***
