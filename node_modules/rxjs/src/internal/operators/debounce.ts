import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic ***REMOVED*** from '../types';

import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';

/**
 * Emits a value from the source Observable only after a particular time span
 * determined by another Observable has passed without another source emission.
 *
 * <span class="informal">It's like ***REMOVED***@link debounceTime***REMOVED***, but the time span of
 * emission silence is determined by a second Observable.</span>
 *
 * ![](debounce.png)
 *
 * `debounce` delays values emitted by the source Observable, but drops previous
 * pending delayed emissions if a new value arrives on the source Observable.
 * This operator keeps track of the most recent value from the source
 * Observable, and spawns a duration Observable by calling the
 * `durationSelector` function. The value is emitted only when the duration
 * Observable emits a value or completes, and if no other value was emitted on
 * the source Observable since the duration Observable was spawned. If a new
 * value appears before the duration Observable emits, the previous value will
 * be dropped and will not be emitted on the output Observable.
 *
 * Like ***REMOVED***@link debounceTime***REMOVED***, this is a rate-limiting operator, and also a
 * delay-like operator since output emissions do not necessarily occur at the
 * same time as they did on the source Observable.
 *
 * ## Example
 * Emit the most recent click after a burst of clicks
 * ```ts
 * import ***REMOVED*** fromEvent, interval ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** debounce ***REMOVED*** from 'rxjs/operators';
 *
 * const clicks = fromEvent(document, 'click');
 * const result = clicks.pipe(debounce(() => interval(1000)));
 * result.subscribe(x => console.log(x));
 * ```
 *
 * @see ***REMOVED***@link audit***REMOVED***
 * @see ***REMOVED***@link debounceTime***REMOVED***
 * @see ***REMOVED***@link delayWhen***REMOVED***
 * @see ***REMOVED***@link throttle***REMOVED***
 *
 * @param ***REMOVED***function(value: T): SubscribableOrPromise***REMOVED*** durationSelector A function
 * that receives a value from the source Observable, for computing the timeout
 * duration for each source value, returned as an Observable or a Promise.
 * @return ***REMOVED***Observable***REMOVED*** An Observable that delays the emissions of the source
 * Observable by the specified duration Observable returned by
 * `durationSelector`, and may drop some values if they occur too frequently.
 * @method debounce
 * @owner Observable
 */
export function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> ***REMOVED***
  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));
***REMOVED***

class DebounceOperator<T> implements Operator<T, T> ***REMOVED***
  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) ***REMOVED***
  ***REMOVED***

  call(subscriber: Subscriber<T>, source: any): TeardownLogic ***REMOVED***
    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class DebounceSubscriber<T, R> extends OuterSubscriber<T, R> ***REMOVED***
  private value: T;
  private hasValue: boolean = false;
  private durationSubscription: Subscription = null;

  constructor(destination: Subscriber<R>,
              private durationSelector: (value: T) => SubscribableOrPromise<any>) ***REMOVED***
    super(destination);
  ***REMOVED***

  protected _next(value: T): void ***REMOVED***
    try ***REMOVED***
      const result = this.durationSelector.call(this, value);

      if (result) ***REMOVED***
        this._tryNext(value, result);
      ***REMOVED***
    ***REMOVED*** catch (err) ***REMOVED***
      this.destination.error(err);
    ***REMOVED***
  ***REMOVED***

  protected _complete(): void ***REMOVED***
    this.emitValue();
    this.destination.complete();
  ***REMOVED***

  private _tryNext(value: T, duration: SubscribableOrPromise<any>): void ***REMOVED***
    let subscription = this.durationSubscription;
    this.value = value;
    this.hasValue = true;
    if (subscription) ***REMOVED***
      subscription.unsubscribe();
      this.remove(subscription);
    ***REMOVED***

    subscription = subscribeToResult(this, duration);
    if (subscription && !subscription.closed) ***REMOVED***
      this.add(this.durationSubscription = subscription);
    ***REMOVED***
  ***REMOVED***

  notifyNext(outerValue: T, innerValue: R,
             outerIndex: number, innerIndex: number,
             innerSub: InnerSubscriber<T, R>): void ***REMOVED***
    this.emitValue();
  ***REMOVED***

  notifyComplete(): void ***REMOVED***
    this.emitValue();
  ***REMOVED***

  emitValue(): void ***REMOVED***
    if (this.hasValue) ***REMOVED***
      const value = this.value;
      const subscription = this.durationSubscription;
      if (subscription) ***REMOVED***
        this.durationSubscription = null;
        subscription.unsubscribe();
        this.remove(subscription);
      ***REMOVED***
      // This must be done *before* passing the value
      // along to the destination because it's possible for
      // the value to synchronously re-enter this operator
      // recursively if the duration selector Observable
      // emits synchronously
      this.value = null;
      this.hasValue = false;
      super._next(value);
    ***REMOVED***
  ***REMOVED***
***REMOVED***
