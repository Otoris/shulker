import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** MonoTypeOperatorFunction, TeardownLogic ***REMOVED*** from '../types';

/**
 * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds
 * true, but emits all further source items as soon as the condition becomes false.
 *
 * ![](skipWhile.png)
 *
 * @param ***REMOVED***Function***REMOVED*** predicate - A function to test each item emitted from the source Observable.
 * @return ***REMOVED***Observable<T>***REMOVED*** An Observable that begins emitting items emitted by the source Observable when the
 * specified predicate becomes false.
 * @method skipWhile
 * @owner Observable
 */
export function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> ***REMOVED***
  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));
***REMOVED***

class SkipWhileOperator<T> implements Operator<T, T> ***REMOVED***
  constructor(private predicate: (value: T, index: number) => boolean) ***REMOVED***
  ***REMOVED***

  call(subscriber: Subscriber<T>, source: any): TeardownLogic ***REMOVED***
    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class SkipWhileSubscriber<T> extends Subscriber<T> ***REMOVED***
  private skipping: boolean = true;
  private index: number = 0;

  constructor(destination: Subscriber<T>,
              private predicate: (value: T, index: number) => boolean) ***REMOVED***
    super(destination);
  ***REMOVED***

  protected _next(value: T): void ***REMOVED***
    const destination = this.destination;
    if (this.skipping) ***REMOVED***
      this.tryCallPredicate(value);
    ***REMOVED***

    if (!this.skipping) ***REMOVED***
      destination.next(value);
    ***REMOVED***
  ***REMOVED***

  private tryCallPredicate(value: T): void ***REMOVED***
    try ***REMOVED***
      const result = this.predicate(value, this.index++);
      this.skipping = Boolean(result);
    ***REMOVED*** catch (err) ***REMOVED***
      this.destination.error(err);
    ***REMOVED***
  ***REMOVED***
***REMOVED***
