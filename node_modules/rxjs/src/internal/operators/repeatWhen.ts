import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Subject ***REMOVED*** from '../Subject';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';

import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';

import ***REMOVED*** MonoTypeOperatorFunction, TeardownLogic ***REMOVED*** from '../types';

/**
 * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source
 * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable
 * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise
 * this method will resubscribe to the source Observable.
 *
 * ![](repeatWhen.png)
 *
 * ## Example
 * Repeat a message stream on click
 * ```ts
 * import ***REMOVED*** of, fromEvent ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** repeatWhen ***REMOVED*** from 'rxjs/operators';
 *
 * const source = of('Repeat message');
 * const documentClick$ = fromEvent(document, 'click');
 *
 * source.pipe(repeatWhen(() => documentClick$)
 * ).subscribe(data => console.log(data))
 * ```
 * @see ***REMOVED***@link repeat***REMOVED***
 * @see ***REMOVED***@link retry***REMOVED***
 * @see ***REMOVED***@link retryWhen***REMOVED***
 *
 * @param ***REMOVED***function(notifications: Observable): Observable***REMOVED*** notifier - Receives an Observable of notifications with
 * which a user can `complete` or `error`, aborting the repetition.
 * @return ***REMOVED***Observable***REMOVED*** The source Observable modified with repeat logic.
 * @method repeatWhen
 * @owner Observable
 */
export function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> ***REMOVED***
  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));
***REMOVED***

class RepeatWhenOperator<T> implements Operator<T, T> ***REMOVED***
  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) ***REMOVED***
  ***REMOVED***

  call(subscriber: Subscriber<T>, source: any): TeardownLogic ***REMOVED***
    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> ***REMOVED***

  private notifications: Subject<any>;
  private retries: Observable<any>;
  private retriesSubscription: Subscription;
  private sourceIsBeingSubscribedTo: boolean = true;

  constructor(destination: Subscriber<R>,
              private notifier: (notifications: Observable<any>) => Observable<any>,
              private source: Observable<T>) ***REMOVED***
    super(destination);
  ***REMOVED***

  notifyNext(outerValue: T, innerValue: R,
             outerIndex: number, innerIndex: number,
             innerSub: InnerSubscriber<T, R>): void ***REMOVED***
    this.sourceIsBeingSubscribedTo = true;
    this.source.subscribe(this);
  ***REMOVED***

  notifyComplete(innerSub: InnerSubscriber<T, R>): void ***REMOVED***
    if (this.sourceIsBeingSubscribedTo === false) ***REMOVED***
      return super.complete();
    ***REMOVED***
  ***REMOVED***

  complete() ***REMOVED***
    this.sourceIsBeingSubscribedTo = false;

    if (!this.isStopped) ***REMOVED***
      if (!this.retries) ***REMOVED***
        this.subscribeToRetries();
      ***REMOVED***
      if (!this.retriesSubscription || this.retriesSubscription.closed) ***REMOVED***
        return super.complete();
      ***REMOVED***

      this._unsubscribeAndRecycle();
      this.notifications.next();
    ***REMOVED***
  ***REMOVED***

  /** @deprecated This is an internal implementation detail, do not use. */
  _unsubscribe() ***REMOVED***
    const ***REMOVED*** notifications, retriesSubscription ***REMOVED*** = this;
    if (notifications) ***REMOVED***
      notifications.unsubscribe();
      this.notifications = null;
    ***REMOVED***
    if (retriesSubscription) ***REMOVED***
      retriesSubscription.unsubscribe();
      this.retriesSubscription = null;
    ***REMOVED***
    this.retries = null;
  ***REMOVED***

  /** @deprecated This is an internal implementation detail, do not use. */
  _unsubscribeAndRecycle(): Subscriber<T> ***REMOVED***
    const ***REMOVED*** _unsubscribe ***REMOVED*** = this;

    this._unsubscribe = null;
    super._unsubscribeAndRecycle();
    this._unsubscribe = _unsubscribe;

    return this;
  ***REMOVED***

  private subscribeToRetries() ***REMOVED***
    this.notifications = new Subject();
    let retries;
    try ***REMOVED***
      const ***REMOVED*** notifier ***REMOVED*** = this;
      retries = notifier(this.notifications);
    ***REMOVED*** catch (e) ***REMOVED***
      return super.complete();
    ***REMOVED***
    this.retries = retries;
    this.retriesSubscription = subscribeToResult(this, retries);
  ***REMOVED***
***REMOVED***
