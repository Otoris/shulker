import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** ObservableInput, OperatorFunction ***REMOVED*** from '../types';

/**
 * Applies an accumulator function over the source Observable where the
 * accumulator function itself returns an Observable, then each intermediate
 * Observable returned is merged into the output Observable.
 *
 * <span class="informal">It's like ***REMOVED***@link scan***REMOVED***, but the Observables returned
 * by the accumulator are merged into the outer Observable.</span>
 *
 * ## Example
 * Count the number of click events
 * ```ts
 * import ***REMOVED*** fromEvent, of ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** mapTo, mergeScan ***REMOVED*** from 'rxjs/operators';
 *
 * const click$ = fromEvent(document, 'click');
 * const one$ = click$.pipe(mapTo(1));
 * const seed = 0;
 * const count$ = one$.pipe(
 *   mergeScan((acc, one) => of(acc + one), seed),
 * );
 * count$.subscribe(x => console.log(x));
 *
 * // Results:
 * // 1
 * // 2
 * // 3
 * // 4
 * // ...and so on for each click
 * ```
 *
 * @param ***REMOVED***function(acc: R, value: T): Observable<R>***REMOVED*** accumulator
 * The accumulator function called on each source value.
 * @param seed The initial accumulation value.
 * @param ***REMOVED***number***REMOVED*** [concurrent=Number.POSITIVE_INFINITY] Maximum number of
 * input Observables being subscribed to concurrently.
 * @return ***REMOVED***Observable<R>***REMOVED*** An observable of the accumulated values.
 * @method mergeScan
 * @owner Observable
 */
export function mergeScan<T, R>(accumulator: (acc: R, value: T, index: number) => ObservableInput<R>,
                                seed: R,
                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> ***REMOVED***
  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));
***REMOVED***

export class MergeScanOperator<T, R> implements Operator<T, R> ***REMOVED***
  constructor(private accumulator: (acc: R, value: T, index: number) => ObservableInput<R>,
              private seed: R,
              private concurrent: number) ***REMOVED***
  ***REMOVED***

  call(subscriber: Subscriber<R>, source: any): any ***REMOVED***
    return source.subscribe(new MergeScanSubscriber(
      subscriber, this.accumulator, this.seed, this.concurrent
    ));
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
export class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> ***REMOVED***
  private hasValue: boolean = false;
  private hasCompleted: boolean = false;
  private buffer: Observable<any>[] = [];
  private active: number = 0;
  protected index: number = 0;

  constructor(destination: Subscriber<R>,
              private accumulator: (acc: R, value: T, index: number) => ObservableInput<R>,
              private acc: R,
              private concurrent: number) ***REMOVED***
    super(destination);
  ***REMOVED***

  protected _next(value: any): void ***REMOVED***
    if (this.active < this.concurrent) ***REMOVED***
      const index = this.index++;
      const destination = this.destination;
      let ish;
      try ***REMOVED***
        const ***REMOVED*** accumulator ***REMOVED*** = this;
        ish = accumulator(this.acc, value, index);
      ***REMOVED*** catch (e) ***REMOVED***
        return destination.error(e);
      ***REMOVED***
      this.active++;
      this._innerSub(ish, value, index);
    ***REMOVED*** else ***REMOVED***
      this.buffer.push(value);
    ***REMOVED***
  ***REMOVED***

  private _innerSub(ish: any, value: T, index: number): void ***REMOVED***
    const innerSubscriber = new InnerSubscriber(this, value, index);
    const destination = this.destination as Subscription;
    destination.add(innerSubscriber);
    const innerSubscription = subscribeToResult<T, R>(this, ish, undefined, undefined, innerSubscriber);
    // The returned subscription will usually be the subscriber that was
    // passed. However, interop subscribers will be wrapped and for
    // unsubscriptions to chain correctly, the wrapper needs to be added, too.
    if (innerSubscription !== innerSubscriber) ***REMOVED***
      destination.add(innerSubscription);
    ***REMOVED***
  ***REMOVED***

  protected _complete(): void ***REMOVED***
    this.hasCompleted = true;
    if (this.active === 0 && this.buffer.length === 0) ***REMOVED***
      if (this.hasValue === false) ***REMOVED***
        this.destination.next(this.acc);
      ***REMOVED***
      this.destination.complete();
    ***REMOVED***
    this.unsubscribe();
  ***REMOVED***

  notifyNext(outerValue: T, innerValue: R,
             outerIndex: number, innerIndex: number,
             innerSub: InnerSubscriber<T, R>): void ***REMOVED***
    const ***REMOVED*** destination ***REMOVED*** = this;
    this.acc = innerValue;
    this.hasValue = true;
    destination.next(innerValue);
  ***REMOVED***

  notifyComplete(innerSub: Subscription): void ***REMOVED***
    const buffer = this.buffer;
    const destination = this.destination as Subscription;
    destination.remove(innerSub);
    this.active--;
    if (buffer.length > 0) ***REMOVED***
      this._next(buffer.shift());
    ***REMOVED*** else if (this.active === 0 && this.hasCompleted) ***REMOVED***
      if (this.hasValue === false) ***REMOVED***
        this.destination.next(this.acc);
      ***REMOVED***
      this.destination.complete();
    ***REMOVED***
  ***REMOVED***
***REMOVED***
