import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Notification ***REMOVED*** from '../Notification';
import ***REMOVED*** OperatorFunction ***REMOVED*** from '../types';

/**
 * Converts an Observable of ***REMOVED***@link Notification***REMOVED*** objects into the emissions
 * that they represent.
 *
 * <span class="informal">Unwraps ***REMOVED***@link Notification***REMOVED*** objects as actual `next`,
 * `error` and `complete` emissions. The opposite of ***REMOVED***@link materialize***REMOVED***.</span>
 *
 * ![](dematerialize.png)
 *
 * `dematerialize` is assumed to operate an Observable that only emits
 * ***REMOVED***@link Notification***REMOVED*** objects as `next` emissions, and does not emit any
 * `error`. Such Observable is the output of a `materialize` operation. Those
 * notifications are then unwrapped using the metadata they contain, and emitted
 * as `next`, `error`, and `complete` on the output Observable.
 *
 * Use this operator in conjunction with ***REMOVED***@link materialize***REMOVED***.
 *
 * ## Example
 * Convert an Observable of Notifications to an actual Observable
 * ```ts
 * import ***REMOVED*** of, Notification ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** dematerialize ***REMOVED*** from 'rxjs/operators';
 *
 * const notifA = new Notification('N', 'A');
 * const notifB = new Notification('N', 'B');
 * const notifE = new Notification('E', undefined,
 *   new TypeError('x.toUpperCase is not a function')
 * );
 * const materialized = of(notifA, notifB, notifE);
 * const upperCase = materialized.pipe(dematerialize());
 * upperCase.subscribe(x => console.log(x), e => console.error(e));
 *
 * // Results in:
 * // A
 * // B
 * // TypeError: x.toUpperCase is not a function
 * ```
 *
 * @see ***REMOVED***@link Notification***REMOVED***
 * @see ***REMOVED***@link materialize***REMOVED***
 *
 * @return ***REMOVED***Observable***REMOVED*** An Observable that emits items and notifications
 * embedded in Notification objects emitted by the source Observable.
 * @method dematerialize
 * @owner Observable
 */
export function dematerialize<T>(): OperatorFunction<Notification<T>, T> ***REMOVED***
  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) ***REMOVED***
    return source.lift(new DeMaterializeOperator());
  ***REMOVED***;
***REMOVED***

class DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> ***REMOVED***
  call(subscriber: Subscriber<any>, source: any): any ***REMOVED***
    return source.subscribe(new DeMaterializeSubscriber(subscriber));
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> ***REMOVED***
  constructor(destination: Subscriber<any>) ***REMOVED***
    super(destination);
  ***REMOVED***

  protected _next(value: T) ***REMOVED***
    value.observe(this.destination);
  ***REMOVED***
***REMOVED***
