import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Subject ***REMOVED*** from '../Subject';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';

import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';

import ***REMOVED*** MonoTypeOperatorFunction, TeardownLogic ***REMOVED*** from '../types';

/**
 * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable
 * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.
 * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child
 * subscription. Otherwise this method will resubscribe to the source Observable.
 *
 * ![](retryWhen.png)
 *
 * @param ***REMOVED***function(errors: Observable): Observable***REMOVED*** notifier - Receives an Observable of notifications with which a
 * user can `complete` or `error`, aborting the retry.
 * @return ***REMOVED***Observable***REMOVED*** The source Observable modified with retry logic.
 * @method retryWhen
 * @owner Observable
 */
export function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> ***REMOVED***
  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));
***REMOVED***

class RetryWhenOperator<T> implements Operator<T, T> ***REMOVED***
  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,
              protected source: Observable<T>) ***REMOVED***
  ***REMOVED***

  call(subscriber: Subscriber<T>, source: any): TeardownLogic ***REMOVED***
    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> ***REMOVED***

  private errors: Subject<any>;
  private retries: Observable<any>;
  private retriesSubscription: Subscription;

  constructor(destination: Subscriber<R>,
              private notifier: (errors: Observable<any>) => Observable<any>,
              private source: Observable<T>) ***REMOVED***
    super(destination);
  ***REMOVED***

  error(err: any) ***REMOVED***
    if (!this.isStopped) ***REMOVED***

      let errors = this.errors;
      let retries: any = this.retries;
      let retriesSubscription = this.retriesSubscription;

      if (!retries) ***REMOVED***
        errors = new Subject();
        try ***REMOVED***
          const ***REMOVED*** notifier ***REMOVED*** = this;
          retries = notifier(errors);
        ***REMOVED*** catch (e) ***REMOVED***
          return super.error(e);
        ***REMOVED***
        retriesSubscription = subscribeToResult(this, retries);
      ***REMOVED*** else ***REMOVED***
        this.errors = null;
        this.retriesSubscription = null;
      ***REMOVED***

      this._unsubscribeAndRecycle();

      this.errors = errors;
      this.retries = retries;
      this.retriesSubscription = retriesSubscription;

      errors.next(err);
    ***REMOVED***
  ***REMOVED***

  /** @deprecated This is an internal implementation detail, do not use. */
  _unsubscribe() ***REMOVED***
    const ***REMOVED*** errors, retriesSubscription ***REMOVED*** = this;
    if (errors) ***REMOVED***
      errors.unsubscribe();
      this.errors = null;
    ***REMOVED***
    if (retriesSubscription) ***REMOVED***
      retriesSubscription.unsubscribe();
      this.retriesSubscription = null;
    ***REMOVED***
    this.retries = null;
  ***REMOVED***

  notifyNext(outerValue: T, innerValue: R,
             outerIndex: number, innerIndex: number,
             innerSub: InnerSubscriber<T, R>): void ***REMOVED***
    const ***REMOVED*** _unsubscribe ***REMOVED*** = this;

    this._unsubscribe = null;
    this._unsubscribeAndRecycle();
    this._unsubscribe = _unsubscribe;

    this.source.subscribe(this);
  ***REMOVED***
***REMOVED***
