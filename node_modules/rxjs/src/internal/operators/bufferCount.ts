import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** OperatorFunction, TeardownLogic ***REMOVED*** from '../types';

/**
 * Buffers the source Observable values until the size hits the maximum
 * `bufferSize` given.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when its size reaches `bufferSize`.</span>
 *
 * ![](bufferCount.png)
 *
 * Buffers a number of values from the source Observable by `bufferSize` then
 * emits the buffer and clears it, and starts a new buffer each
 * `startBufferEvery` values. If `startBufferEvery` is not provided or is
 * `null`, then new buffers are started immediately at the start of the source
 * and when each buffer closes and is emitted.
 *
 * ## Examples
 *
 * Emit the last two click events as an array
 *
 * ```ts
 * import ***REMOVED*** fromEvent ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** bufferCount ***REMOVED*** from 'rxjs/operators';
 *
 * const clicks = fromEvent(document, 'click');
 * const buffered = clicks.pipe(bufferCount(2));
 * buffered.subscribe(x => console.log(x));
 * ```
 *
 * On every click, emit the last two click events as an array
 *
 * ```ts
 * import ***REMOVED*** fromEvent ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** bufferCount ***REMOVED*** from 'rxjs/operators';
 *
 * const clicks = fromEvent(document, 'click');
 * const buffered = clicks.pipe(bufferCount(2, 1));
 * buffered.subscribe(x => console.log(x));
 * ```
 *
 * @see ***REMOVED***@link buffer***REMOVED***
 * @see ***REMOVED***@link bufferTime***REMOVED***
 * @see ***REMOVED***@link bufferToggle***REMOVED***
 * @see ***REMOVED***@link bufferWhen***REMOVED***
 * @see ***REMOVED***@link pairwise***REMOVED***
 * @see ***REMOVED***@link windowCount***REMOVED***
 *
 * @param ***REMOVED***number***REMOVED*** bufferSize The maximum size of the buffer emitted.
 * @param ***REMOVED***number***REMOVED*** [startBufferEvery] Interval at which to start a new buffer.
 * For example if `startBufferEvery` is `2`, then a new buffer will be started
 * on every other value from the source. A new buffer is started at the
 * beginning of the source by default.
 * @return ***REMOVED***Observable<T[]>***REMOVED*** An Observable of arrays of buffered values.
 * @method bufferCount
 * @owner Observable
 */
export function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> ***REMOVED***
  return function bufferCountOperatorFunction(source: Observable<T>) ***REMOVED***
    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));
  ***REMOVED***;
***REMOVED***

class BufferCountOperator<T> implements Operator<T, T[]> ***REMOVED***
  private subscriberClass: any;

  constructor(private bufferSize: number, private startBufferEvery: number) ***REMOVED***
    if (!startBufferEvery || bufferSize === startBufferEvery) ***REMOVED***
      this.subscriberClass = BufferCountSubscriber;
    ***REMOVED*** else ***REMOVED***
      this.subscriberClass = BufferSkipCountSubscriber;
    ***REMOVED***
  ***REMOVED***

  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic ***REMOVED***
    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class BufferCountSubscriber<T> extends Subscriber<T> ***REMOVED***
  private buffer: T[] = [];

  constructor(destination: Subscriber<T[]>, private bufferSize: number) ***REMOVED***
    super(destination);
  ***REMOVED***

  protected _next(value: T): void ***REMOVED***
    const buffer = this.buffer;

    buffer.push(value);

    if (buffer.length == this.bufferSize) ***REMOVED***
      this.destination.next(buffer);
      this.buffer = [];
    ***REMOVED***
  ***REMOVED***

  protected _complete(): void ***REMOVED***
    const buffer = this.buffer;
    if (buffer.length > 0) ***REMOVED***
      this.destination.next(buffer);
    ***REMOVED***
    super._complete();
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class BufferSkipCountSubscriber<T> extends Subscriber<T> ***REMOVED***
  private buffers: Array<T[]> = [];
  private count: number = 0;

  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) ***REMOVED***
    super(destination);
  ***REMOVED***

  protected _next(value: T): void ***REMOVED***
    const ***REMOVED*** bufferSize, startBufferEvery, buffers, count ***REMOVED*** = this;

    this.count++;
    if (count % startBufferEvery === 0) ***REMOVED***
      buffers.push([]);
    ***REMOVED***

    for (let i = buffers.length; i--; ) ***REMOVED***
      const buffer = buffers[i];
      buffer.push(value);
      if (buffer.length === bufferSize) ***REMOVED***
        buffers.splice(i, 1);
        this.destination.next(buffer);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  protected _complete(): void ***REMOVED***
    const ***REMOVED*** buffers, destination ***REMOVED*** = this;

    while (buffers.length > 0) ***REMOVED***
      let buffer = buffers.shift();
      if (buffer.length > 0) ***REMOVED***
        destination.next(buffer);
      ***REMOVED***
    ***REMOVED***
    super._complete();
  ***REMOVED***

***REMOVED***
