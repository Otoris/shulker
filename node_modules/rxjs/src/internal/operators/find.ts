import ***REMOVED***Observable***REMOVED*** from '../Observable';
import ***REMOVED***Operator***REMOVED*** from '../Operator';
import ***REMOVED***Subscriber***REMOVED*** from '../Subscriber';
import ***REMOVED***OperatorFunction***REMOVED*** from '../types';

export function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,
                                     thisArg?: any): OperatorFunction<T, S | undefined>;
export function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,
                        thisArg?: any): OperatorFunction<T, T | undefined>;
/**
 * Emits only the first value emitted by the source Observable that meets some
 * condition.
 *
 * <span class="informal">Finds the first value that passes some test and emits
 * that.</span>
 *
 * ![](find.png)
 *
 * `find` searches for the first item in the source Observable that matches the
 * specified condition embodied by the `predicate`, and returns the first
 * occurrence in the source. Unlike ***REMOVED***@link first***REMOVED***, the `predicate` is required
 * in `find`, and does not emit an error if a valid value is not found.
 *
 * ## Example
 * Find and emit the first click that happens on a DIV element
 * ```ts
 * import ***REMOVED*** fromEvent ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** find ***REMOVED*** from 'rxjs/operators';
 *
 * const clicks = fromEvent(document, 'click');
 * const result = clicks.pipe(find(ev => ev.target.tagName === 'DIV'));
 * result.subscribe(x => console.log(x));
 * ```
 *
 * @see ***REMOVED***@link filter***REMOVED***
 * @see ***REMOVED***@link first***REMOVED***
 * @see ***REMOVED***@link findIndex***REMOVED***
 * @see ***REMOVED***@link take***REMOVED***
 *
 * @param ***REMOVED***function(value: T, index: number, source: Observable<T>): boolean***REMOVED*** predicate
 * A function called with each item to test for condition matching.
 * @param ***REMOVED***any***REMOVED*** [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return ***REMOVED***Observable<T>***REMOVED*** An Observable of the first item that matches the
 * condition.
 * @method find
 * @owner Observable
 */
export function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,
                        thisArg?: any): OperatorFunction<T, T | undefined> ***REMOVED***
  if (typeof predicate !== 'function') ***REMOVED***
    throw new TypeError('predicate is not a function');
  ***REMOVED***
  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg)) as Observable<T | undefined>;
***REMOVED***

export class FindValueOperator<T> implements Operator<T, T | number | undefined> ***REMOVED***
  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,
              private source: Observable<T>,
              private yieldIndex: boolean,
              private thisArg?: any) ***REMOVED***
  ***REMOVED***

  call(observer: Subscriber<T>, source: any): any ***REMOVED***
    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
export class FindValueSubscriber<T> extends Subscriber<T> ***REMOVED***
  private index: number = 0;

  constructor(destination: Subscriber<T>,
              private predicate: (value: T, index: number, source: Observable<T>) => boolean,
              private source: Observable<T>,
              private yieldIndex: boolean,
              private thisArg?: any) ***REMOVED***
    super(destination);
  ***REMOVED***

  private notifyComplete(value: any): void ***REMOVED***
    const destination = this.destination;

    destination.next(value);
    destination.complete();
    this.unsubscribe();
  ***REMOVED***

  protected _next(value: T): void ***REMOVED***
    const ***REMOVED***predicate, thisArg***REMOVED*** = this;
    const index = this.index++;
    try ***REMOVED***
      const result = predicate.call(thisArg || this, value, index, this.source);
      if (result) ***REMOVED***
        this.notifyComplete(this.yieldIndex ? index : value);
      ***REMOVED***
    ***REMOVED*** catch (err) ***REMOVED***
      this.destination.error(err);
    ***REMOVED***
  ***REMOVED***

  protected _complete(): void ***REMOVED***
    this.notifyComplete(this.yieldIndex ? -1 : undefined);
  ***REMOVED***
***REMOVED***
