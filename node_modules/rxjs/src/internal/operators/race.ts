import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** isArray ***REMOVED*** from '../util/isArray';
import ***REMOVED*** MonoTypeOperatorFunction, OperatorFunction ***REMOVED*** from '../types';
import ***REMOVED*** race as raceStatic ***REMOVED*** from '../observable/race';

/* tslint:disable:max-line-length */
/** @deprecated Deprecated in favor of static race. */
export function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;
/** @deprecated Deprecated in favor of static race. */
export function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;
/** @deprecated Deprecated in favor of static race. */
export function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;
/** @deprecated Deprecated in favor of static race. */
export function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;
/* tslint:enable:max-line-length */

/**
 * Returns an Observable that mirrors the first source Observable to emit a next,
 * error or complete notification from the combination of this Observable and supplied Observables.
 * @param ***REMOVED***...Observables***REMOVED*** ...observables Sources used to race for which Observable emits first.
 * @return ***REMOVED***Observable***REMOVED*** An Observable that mirrors the output of the first Observable to emit an item.
 * @method race
 * @owner Observable
 * @deprecated Deprecated in favor of static ***REMOVED***@link race***REMOVED***.
 */
export function race<T>(...observables: (Observable<T> | Observable<T>[])[]): MonoTypeOperatorFunction<T> ***REMOVED***
  return function raceOperatorFunction(source: Observable<T>) ***REMOVED***
    // if the only argument is an array, it was most likely called with
    // `pair([obs1, obs2, ...])`
    if (observables.length === 1 && isArray(observables[0])) ***REMOVED***
      observables = observables[0] as Observable<T>[];
    ***REMOVED***

    return source.lift.call(raceStatic(source, ...(observables as Observable<T>[])));
  ***REMOVED***;
***REMOVED***
