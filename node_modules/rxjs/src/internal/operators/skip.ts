import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** MonoTypeOperatorFunction, TeardownLogic ***REMOVED*** from '../types';

/**
 * Returns an Observable that skips the first `count` items emitted by the source Observable.
 *
 * ![](skip.png)
 *
 * @param ***REMOVED***Number***REMOVED*** count - The number of times, items emitted by source Observable should be skipped.
 * @return ***REMOVED***Observable***REMOVED*** An Observable that skips values emitted by the source Observable.
 *
 * @method skip
 * @owner Observable
 */
export function skip<T>(count: number): MonoTypeOperatorFunction<T> ***REMOVED***
  return (source: Observable<T>) => source.lift(new SkipOperator(count));
***REMOVED***

class SkipOperator<T> implements Operator<T, T> ***REMOVED***
  constructor(private total: number) ***REMOVED***
  ***REMOVED***

  call(subscriber: Subscriber<T>, source: any): TeardownLogic ***REMOVED***
    return source.subscribe(new SkipSubscriber(subscriber, this.total));
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class SkipSubscriber<T> extends Subscriber<T> ***REMOVED***
  count: number = 0;

  constructor(destination: Subscriber<T>, private total: number) ***REMOVED***
    super(destination);
  ***REMOVED***

  protected _next(x: T) ***REMOVED***
    if (++this.count > this.total) ***REMOVED***
      this.destination.next(x);
    ***REMOVED***
  ***REMOVED***
***REMOVED***
