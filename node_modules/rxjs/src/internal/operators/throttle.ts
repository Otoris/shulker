import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';

import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';

import ***REMOVED*** MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic ***REMOVED*** from '../types';

export interface ThrottleConfig ***REMOVED***
  leading?: boolean;
  trailing?: boolean;
***REMOVED***

export const defaultThrottleConfig: ThrottleConfig = ***REMOVED***
  leading: true,
  trailing: false
***REMOVED***;

/**
 * Emits a value from the source Observable, then ignores subsequent source
 * values for a duration determined by another Observable, then repeats this
 * process.
 *
 * <span class="informal">It's like ***REMOVED***@link throttleTime***REMOVED***, but the silencing
 * duration is determined by a second Observable.</span>
 *
 * ![](throttle.png)
 *
 * `throttle` emits the source Observable values on the output Observable
 * when its internal timer is disabled, and ignores source values when the timer
 * is enabled. Initially, the timer is disabled. As soon as the first source
 * value arrives, it is forwarded to the output Observable, and then the timer
 * is enabled by calling the `durationSelector` function with the source value,
 * which returns the "duration" Observable. When the duration Observable emits a
 * value or completes, the timer is disabled, and this process repeats for the
 * next source value.
 *
 * ## Example
 * Emit clicks at a rate of at most one click per second
 * ```ts
 * import ***REMOVED*** fromEvent ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** throttle ***REMOVED*** from 'rxjs/operators';
 *
 * const clicks = fromEvent(document, 'click');
 * const result = clicks.pipe(throttle(ev => interval(1000)));
 * result.subscribe(x => console.log(x));
 * ```
 *
 * @see ***REMOVED***@link audit***REMOVED***
 * @see ***REMOVED***@link debounce***REMOVED***
 * @see ***REMOVED***@link delayWhen***REMOVED***
 * @see ***REMOVED***@link sample***REMOVED***
 * @see ***REMOVED***@link throttleTime***REMOVED***
 *
 * @param ***REMOVED***function(value: T): SubscribableOrPromise***REMOVED*** durationSelector A function
 * that receives a value from the source Observable, for computing the silencing
 * duration for each source value, returned as an Observable or a Promise.
 * @param ***REMOVED***Object***REMOVED*** config a configuration object to define `leading` and `trailing` behavior. Defaults
 * to `***REMOVED*** leading: true, trailing: false ***REMOVED***`.
 * @return ***REMOVED***Observable<T>***REMOVED*** An Observable that performs the throttle operation to
 * limit the rate of emissions from the source.
 * @method throttle
 * @owner Observable
 */
export function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<any>,
                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> ***REMOVED***
  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));
***REMOVED***

class ThrottleOperator<T> implements Operator<T, T> ***REMOVED***
  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>,
              private leading: boolean,
              private trailing: boolean) ***REMOVED***
  ***REMOVED***

  call(subscriber: Subscriber<T>, source: any): TeardownLogic ***REMOVED***
    return source.subscribe(
      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)
    );
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> ***REMOVED***
  private _throttled: Subscription;
  private _sendValue: T;
  private _hasValue = false;

  constructor(protected destination: Subscriber<T>,
              private durationSelector: (value: T) => SubscribableOrPromise<number>,
              private _leading: boolean,
              private _trailing: boolean) ***REMOVED***
    super(destination);
  ***REMOVED***

  protected _next(value: T): void ***REMOVED***
    this._hasValue = true;
    this._sendValue = value;

    if (!this._throttled) ***REMOVED***
      if (this._leading) ***REMOVED***
        this.send();
      ***REMOVED*** else ***REMOVED***
        this.throttle(value);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  private send() ***REMOVED***
    const ***REMOVED*** _hasValue, _sendValue ***REMOVED*** = this;
    if (_hasValue) ***REMOVED***
      this.destination.next(_sendValue);
      this.throttle(_sendValue);
    ***REMOVED***
    this._hasValue = false;
    this._sendValue = null;
  ***REMOVED***

  private throttle(value: T): void ***REMOVED***
    const duration = this.tryDurationSelector(value);
    if (!!duration) ***REMOVED***
      this.add(this._throttled = subscribeToResult(this, duration));
    ***REMOVED***
  ***REMOVED***

  private tryDurationSelector(value: T): SubscribableOrPromise<any> ***REMOVED***
    try ***REMOVED***
      return this.durationSelector(value);
    ***REMOVED*** catch (err) ***REMOVED***
      this.destination.error(err);
      return null;
    ***REMOVED***
  ***REMOVED***

  private throttlingDone() ***REMOVED***
    const ***REMOVED*** _throttled, _trailing ***REMOVED*** = this;
    if (_throttled) ***REMOVED***
      _throttled.unsubscribe();
    ***REMOVED***
    this._throttled = null;

    if (_trailing) ***REMOVED***
      this.send();
    ***REMOVED***
  ***REMOVED***

  notifyNext(outerValue: T, innerValue: R,
             outerIndex: number, innerIndex: number,
             innerSub: InnerSubscriber<T, R>): void ***REMOVED***
    this.throttlingDone();
  ***REMOVED***

  notifyComplete(): void ***REMOVED***
    this.throttlingDone();
  ***REMOVED***
***REMOVED***
