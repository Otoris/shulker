import ***REMOVED*** Operator ***REMOVED*** from '../Operator';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** OperatorFunction ***REMOVED*** from '../types';

/**
 * Emits the given constant value on the output Observable every time the source
 * Observable emits a value.
 *
 * <span class="informal">Like ***REMOVED***@link map***REMOVED***, but it maps every source value to
 * the same output value every time.</span>
 *
 * ![](mapTo.png)
 *
 * Takes a constant `value` as argument, and emits that whenever the source
 * Observable emits a value. In other words, ignores the actual source value,
 * and simply uses the emission moment to know when to emit the given `value`.
 *
 * ## Example
 * Map every click to the string 'Hi'
 * ```ts
 * import ***REMOVED*** fromEvent ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** mapTo ***REMOVED*** from 'rxjs/operators';
 *
 * const clicks = fromEvent(document, 'click');
 * const greetings = clicks.pipe(mapTo('Hi'));
 * greetings.subscribe(x => console.log(x));
 * ```
 *
 * @see ***REMOVED***@link map***REMOVED***
 *
 * @param ***REMOVED***any***REMOVED*** value The value to map each source value to.
 * @return ***REMOVED***Observable***REMOVED*** An Observable that emits the given `value` every time
 * the source Observable emits something.
 * @method mapTo
 * @owner Observable
 */
export function mapTo<T, R>(value: R): OperatorFunction<T, R> ***REMOVED***
  return (source: Observable<T>) => source.lift(new MapToOperator(value));
***REMOVED***

class MapToOperator<T, R> implements Operator<T, R> ***REMOVED***

  value: R;

  constructor(value: R) ***REMOVED***
    this.value = value;
  ***REMOVED***

  call(subscriber: Subscriber<R>, source: any): any ***REMOVED***
    return source.subscribe(new MapToSubscriber(subscriber, this.value));
  ***REMOVED***
***REMOVED***

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
class MapToSubscriber<T, R> extends Subscriber<T> ***REMOVED***

  value: R;

  constructor(destination: Subscriber<R>, value: R) ***REMOVED***
    super(destination);
    this.value = value;
  ***REMOVED***

  protected _next(x: T) ***REMOVED***
    this.destination.next(this.value);
  ***REMOVED***
***REMOVED***
