import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** multicast ***REMOVED*** from './multicast';
import ***REMOVED*** refCount ***REMOVED*** from './refCount';
import ***REMOVED*** Subject ***REMOVED*** from '../Subject';

import ***REMOVED*** MonoTypeOperatorFunction ***REMOVED*** from '../types';

function shareSubjectFactory() ***REMOVED***
  return new Subject();
***REMOVED***

/**
 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
 * This is an alias for `multicast(() => new Subject()), refCount()`.
 *
 * ![](share.png)
 *
 * @return ***REMOVED***Observable<T>***REMOVED*** An Observable that upon connection causes the source Observable to emit items to its Observers.
 * @method share
 * @owner Observable
 */
export function share<T>(): MonoTypeOperatorFunction<T> ***REMOVED***
  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;
***REMOVED***
