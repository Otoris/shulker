import ***REMOVED*** ObservableInput ***REMOVED*** from '../types';
import ***REMOVED*** subscribeToArray ***REMOVED*** from './subscribeToArray';
import ***REMOVED*** subscribeToPromise ***REMOVED*** from './subscribeToPromise';
import ***REMOVED*** subscribeToIterable ***REMOVED*** from './subscribeToIterable';
import ***REMOVED*** subscribeToObservable ***REMOVED*** from './subscribeToObservable';
import ***REMOVED*** isArrayLike ***REMOVED*** from './isArrayLike';
import ***REMOVED*** isPromise ***REMOVED*** from './isPromise';
import ***REMOVED*** isObject ***REMOVED*** from './isObject';
import ***REMOVED*** iterator as Symbol_iterator ***REMOVED*** from '../symbol/iterator';
import ***REMOVED*** observable as Symbol_observable ***REMOVED*** from '../symbol/observable';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';

export const subscribeTo = <T>(result: ObservableInput<T>): (subscriber: Subscriber<T>) => Subscription | void => ***REMOVED***
  if (!!result && typeof result[Symbol_observable] === 'function') ***REMOVED***
    return subscribeToObservable(result as any);
  ***REMOVED*** else if (isArrayLike(result)) ***REMOVED***
    return subscribeToArray(result);
  ***REMOVED*** else if (isPromise(result)) ***REMOVED***
    return subscribeToPromise(result as Promise<any>);
  ***REMOVED*** else if (!!result && typeof result[Symbol_iterator] === 'function') ***REMOVED***
    return subscribeToIterable(result as any);
  ***REMOVED*** else ***REMOVED***
    const value = isObject(result) ? 'an invalid object' : `'$***REMOVED***result***REMOVED***'`;
    const msg = `You provided $***REMOVED***value***REMOVED*** where a stream was expected.`
      + ' You can provide an Observable, Promise, Array, or Iterable.';
    throw new TypeError(msg);
  ***REMOVED***
***REMOVED***;
