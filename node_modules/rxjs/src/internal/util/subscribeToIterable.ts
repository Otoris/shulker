import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** iterator as Symbol_iterator ***REMOVED*** from '../symbol/iterator';

export const subscribeToIterable = <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => ***REMOVED***
  const iterator = iterable[Symbol_iterator]();
  do ***REMOVED***
    const item = iterator.next();
    if (item.done) ***REMOVED***
      subscriber.complete();
      break;
    ***REMOVED***
    subscriber.next(item.value);
    if (subscriber.closed) ***REMOVED***
      break;
    ***REMOVED***
  ***REMOVED*** while (true);

  // Finalize the iterator if it happens to be a Generator
  if (typeof iterator.return === 'function') ***REMOVED***
    subscriber.add(() => ***REMOVED***
      if (iterator.return) ***REMOVED***
        iterator.return();
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***

  return subscriber;
***REMOVED***;
