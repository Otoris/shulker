import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** subscribeTo ***REMOVED*** from './subscribeTo';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';

export function subscribeToResult<T, R>(
  outerSubscriber: OuterSubscriber<T, R>,
  result: any,
  outerValue: undefined,
  outerIndex: undefined,
  innerSubscriber: InnerSubscriber<T, R>
): Subscription | undefined;

export function subscribeToResult<T, R>(
  outerSubscriber: OuterSubscriber<T, R>,
  result: any,
  outerValue?: T,
  outerIndex?: number
): Subscription | undefined;

export function subscribeToResult<T, R>(
  outerSubscriber: OuterSubscriber<T, R>,
  result: any,
  outerValue?: T,
  outerIndex?: number,
  innerSubscriber: Subscriber<R> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex)
): Subscription | undefined ***REMOVED***
  if (innerSubscriber.closed) ***REMOVED***
    return undefined;
  ***REMOVED***
  if (result instanceof Observable) ***REMOVED***
    return result.subscribe(innerSubscriber);
  ***REMOVED***
  return subscribeTo(result)(innerSubscriber) as Subscription;
***REMOVED***
