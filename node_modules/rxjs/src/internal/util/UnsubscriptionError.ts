export interface UnsubscriptionError extends Error ***REMOVED***
  readonly errors: any[];
***REMOVED***

export interface UnsubscriptionErrorCtor ***REMOVED***
  new(errors: any[]): UnsubscriptionError;
***REMOVED***

const UnsubscriptionErrorImpl = (() => ***REMOVED***
  function UnsubscriptionErrorImpl(this: any, errors: any[]) ***REMOVED***
    Error.call(this);
    this.message = errors ?
      `$***REMOVED***errors.length***REMOVED*** errors occurred during unsubscription:
$***REMOVED***errors.map((err, i) => `$***REMOVED***i + 1***REMOVED***) $***REMOVED***err.toString()***REMOVED***`).join('\n  ')***REMOVED***` : '';
    this.name = 'UnsubscriptionError';
    this.errors = errors;
    return this;
  ***REMOVED***

  UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);

  return UnsubscriptionErrorImpl;
***REMOVED***)();

/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a ***REMOVED***@link Subscription***REMOVED***.
 */
export const UnsubscriptionError: UnsubscriptionErrorCtor = UnsubscriptionErrorImpl as any;