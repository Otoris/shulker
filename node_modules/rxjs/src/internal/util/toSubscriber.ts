import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** rxSubscriber as rxSubscriberSymbol ***REMOVED*** from '../symbol/rxSubscriber';
import ***REMOVED*** empty as emptyObserver ***REMOVED*** from '../Observer';
import ***REMOVED*** PartialObserver ***REMOVED*** from '../types';

export function toSubscriber<T>(
  nextOrObserver?: PartialObserver<T> | ((value: T) => void),
  error?: (error: any) => void,
  complete?: () => void): Subscriber<T> ***REMOVED***

  if (nextOrObserver) ***REMOVED***
    if (nextOrObserver instanceof Subscriber) ***REMOVED***
      return (<Subscriber<T>> nextOrObserver);
    ***REMOVED***

    if (nextOrObserver[rxSubscriberSymbol]) ***REMOVED***
      return nextOrObserver[rxSubscriberSymbol]();
    ***REMOVED***
  ***REMOVED***

  if (!nextOrObserver && !error && !complete) ***REMOVED***
    return new Subscriber(emptyObserver);
  ***REMOVED***

  return new Subscriber(nextOrObserver, error, complete);
***REMOVED***
