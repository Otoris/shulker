/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Action ***REMOVED*** from './Action';
var AsyncAction = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(AsyncAction, _super);
    function AsyncAction(scheduler, work) ***REMOVED***
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    ***REMOVED***
    AsyncAction.prototype.schedule = function (state, delay) ***REMOVED***
        if (delay === void 0) ***REMOVED***
            delay = 0;
        ***REMOVED***
        if (this.closed) ***REMOVED***
            return this;
        ***REMOVED***
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        if (id != null) ***REMOVED***
            this.id = this.recycleAsyncId(scheduler, id, delay);
        ***REMOVED***
        this.pending = true;
        this.delay = delay;
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    ***REMOVED***;
    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) ***REMOVED***
        if (delay === void 0) ***REMOVED***
            delay = 0;
        ***REMOVED***
        return setInterval(scheduler.flush.bind(scheduler, this), delay);
    ***REMOVED***;
    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) ***REMOVED***
        if (delay === void 0) ***REMOVED***
            delay = 0;
        ***REMOVED***
        if (delay !== null && this.delay === delay && this.pending === false) ***REMOVED***
            return id;
        ***REMOVED***
        clearInterval(id);
        return undefined;
    ***REMOVED***;
    AsyncAction.prototype.execute = function (state, delay) ***REMOVED***
        if (this.closed) ***REMOVED***
            return new Error('executing a cancelled action');
        ***REMOVED***
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) ***REMOVED***
            return error;
        ***REMOVED***
        else if (this.pending === false && this.id != null) ***REMOVED***
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        ***REMOVED***
    ***REMOVED***;
    AsyncAction.prototype._execute = function (state, delay) ***REMOVED***
        var errored = false;
        var errorValue = undefined;
        try ***REMOVED***
            this.work(state);
        ***REMOVED***
        catch (e) ***REMOVED***
            errored = true;
            errorValue = !!e && e || new Error(e);
        ***REMOVED***
        if (errored) ***REMOVED***
            this.unsubscribe();
            return errorValue;
        ***REMOVED***
    ***REMOVED***;
    AsyncAction.prototype._unsubscribe = function () ***REMOVED***
        var id = this.id;
        var scheduler = this.scheduler;
        var actions = scheduler.actions;
        var index = actions.indexOf(this);
        this.work = null;
        this.state = null;
        this.pending = false;
        this.scheduler = null;
        if (index !== -1) ***REMOVED***
            actions.splice(index, 1);
        ***REMOVED***
        if (id != null) ***REMOVED***
            this.id = this.recycleAsyncId(scheduler, id, null);
        ***REMOVED***
        this.delay = null;
    ***REMOVED***;
    return AsyncAction;
***REMOVED***(Action));
export ***REMOVED*** AsyncAction ***REMOVED***;
//# sourceMappingURL=AsyncAction.js.map
