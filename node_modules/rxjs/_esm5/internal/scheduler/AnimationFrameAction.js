/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** AsyncAction ***REMOVED*** from './AsyncAction';
var AnimationFrameAction = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(AnimationFrameAction, _super);
    function AnimationFrameAction(scheduler, work) ***REMOVED***
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    ***REMOVED***
    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) ***REMOVED***
        if (delay === void 0) ***REMOVED***
            delay = 0;
        ***REMOVED***
        if (delay !== null && delay > 0) ***REMOVED***
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        ***REMOVED***
        scheduler.actions.push(this);
        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () ***REMOVED*** return scheduler.flush(null); ***REMOVED***));
    ***REMOVED***;
    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) ***REMOVED***
        if (delay === void 0) ***REMOVED***
            delay = 0;
        ***REMOVED***
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) ***REMOVED***
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        ***REMOVED***
        if (scheduler.actions.length === 0) ***REMOVED***
            cancelAnimationFrame(id);
            scheduler.scheduled = undefined;
        ***REMOVED***
        return undefined;
    ***REMOVED***;
    return AnimationFrameAction;
***REMOVED***(AsyncAction));
export ***REMOVED*** AnimationFrameAction ***REMOVED***;
//# sourceMappingURL=AnimationFrameAction.js.map
