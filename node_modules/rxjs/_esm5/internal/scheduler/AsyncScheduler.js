/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Scheduler ***REMOVED*** from '../Scheduler';
var AsyncScheduler = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) ***REMOVED***
        if (now === void 0) ***REMOVED***
            now = Scheduler.now;
        ***REMOVED***
        var _this = _super.call(this, SchedulerAction, function () ***REMOVED***
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) ***REMOVED***
                return AsyncScheduler.delegate.now();
            ***REMOVED***
            else ***REMOVED***
                return now();
            ***REMOVED***
        ***REMOVED***) || this;
        _this.actions = [];
        _this.active = false;
        _this.scheduled = undefined;
        return _this;
    ***REMOVED***
    AsyncScheduler.prototype.schedule = function (work, delay, state) ***REMOVED***
        if (delay === void 0) ***REMOVED***
            delay = 0;
        ***REMOVED***
        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) ***REMOVED***
            return AsyncScheduler.delegate.schedule(work, delay, state);
        ***REMOVED***
        else ***REMOVED***
            return _super.prototype.schedule.call(this, work, delay, state);
        ***REMOVED***
    ***REMOVED***;
    AsyncScheduler.prototype.flush = function (action) ***REMOVED***
        var actions = this.actions;
        if (this.active) ***REMOVED***
            actions.push(action);
            return;
        ***REMOVED***
        var error;
        this.active = true;
        do ***REMOVED***
            if (error = action.execute(action.state, action.delay)) ***REMOVED***
                break;
            ***REMOVED***
        ***REMOVED*** while (action = actions.shift());
        this.active = false;
        if (error) ***REMOVED***
            while (action = actions.shift()) ***REMOVED***
                action.unsubscribe();
            ***REMOVED***
            throw error;
        ***REMOVED***
    ***REMOVED***;
    return AsyncScheduler;
***REMOVED***(Scheduler));
export ***REMOVED*** AsyncScheduler ***REMOVED***;
//# sourceMappingURL=AsyncScheduler.js.map
