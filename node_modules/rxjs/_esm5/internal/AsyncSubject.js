/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subject ***REMOVED*** from './Subject';
import ***REMOVED*** Subscription ***REMOVED*** from './Subscription';
var AsyncSubject = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(AsyncSubject, _super);
    function AsyncSubject() ***REMOVED***
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.value = null;
        _this.hasNext = false;
        _this.hasCompleted = false;
        return _this;
    ***REMOVED***
    AsyncSubject.prototype._subscribe = function (subscriber) ***REMOVED***
        if (this.hasError) ***REMOVED***
            subscriber.error(this.thrownError);
            return Subscription.EMPTY;
        ***REMOVED***
        else if (this.hasCompleted && this.hasNext) ***REMOVED***
            subscriber.next(this.value);
            subscriber.complete();
            return Subscription.EMPTY;
        ***REMOVED***
        return _super.prototype._subscribe.call(this, subscriber);
    ***REMOVED***;
    AsyncSubject.prototype.next = function (value) ***REMOVED***
        if (!this.hasCompleted) ***REMOVED***
            this.value = value;
            this.hasNext = true;
        ***REMOVED***
    ***REMOVED***;
    AsyncSubject.prototype.error = function (error) ***REMOVED***
        if (!this.hasCompleted) ***REMOVED***
            _super.prototype.error.call(this, error);
        ***REMOVED***
    ***REMOVED***;
    AsyncSubject.prototype.complete = function () ***REMOVED***
        this.hasCompleted = true;
        if (this.hasNext) ***REMOVED***
            _super.prototype.next.call(this, this.value);
        ***REMOVED***
        _super.prototype.complete.call(this);
    ***REMOVED***;
    return AsyncSubject;
***REMOVED***(Subject));
export ***REMOVED*** AsyncSubject ***REMOVED***;
//# sourceMappingURL=AsyncSubject.js.map
