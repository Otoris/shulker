/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** ArgumentOutOfRangeError ***REMOVED*** from '../util/ArgumentOutOfRangeError';
import ***REMOVED*** empty ***REMOVED*** from '../observable/empty';
export function take(count) ***REMOVED***
    return function (source) ***REMOVED***
        if (count === 0) ***REMOVED***
            return empty();
        ***REMOVED***
        else ***REMOVED***
            return source.lift(new TakeOperator(count));
        ***REMOVED***
    ***REMOVED***;
***REMOVED***
var TakeOperator = /*@__PURE__*/ (function () ***REMOVED***
    function TakeOperator(total) ***REMOVED***
        this.total = total;
        if (this.total < 0) ***REMOVED***
            throw new ArgumentOutOfRangeError;
        ***REMOVED***
    ***REMOVED***
    TakeOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new TakeSubscriber(subscriber, this.total));
    ***REMOVED***;
    return TakeOperator;
***REMOVED***());
var TakeSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(TakeSubscriber, _super);
    function TakeSubscriber(destination, total) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.count = 0;
        return _this;
    ***REMOVED***
    TakeSubscriber.prototype._next = function (value) ***REMOVED***
        var total = this.total;
        var count = ++this.count;
        if (count <= total) ***REMOVED***
            this.destination.next(value);
            if (count === total) ***REMOVED***
                this.destination.complete();
                this.unsubscribe();
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    return TakeSubscriber;
***REMOVED***(Subscriber));
//# sourceMappingURL=take.js.map
