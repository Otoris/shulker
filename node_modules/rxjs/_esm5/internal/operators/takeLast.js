/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** ArgumentOutOfRangeError ***REMOVED*** from '../util/ArgumentOutOfRangeError';
import ***REMOVED*** empty ***REMOVED*** from '../observable/empty';
export function takeLast(count) ***REMOVED***
    return function takeLastOperatorFunction(source) ***REMOVED***
        if (count === 0) ***REMOVED***
            return empty();
        ***REMOVED***
        else ***REMOVED***
            return source.lift(new TakeLastOperator(count));
        ***REMOVED***
    ***REMOVED***;
***REMOVED***
var TakeLastOperator = /*@__PURE__*/ (function () ***REMOVED***
    function TakeLastOperator(total) ***REMOVED***
        this.total = total;
        if (this.total < 0) ***REMOVED***
            throw new ArgumentOutOfRangeError;
        ***REMOVED***
    ***REMOVED***
    TakeLastOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
    ***REMOVED***;
    return TakeLastOperator;
***REMOVED***());
var TakeLastSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(TakeLastSubscriber, _super);
    function TakeLastSubscriber(destination, total) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.ring = new Array();
        _this.count = 0;
        return _this;
    ***REMOVED***
    TakeLastSubscriber.prototype._next = function (value) ***REMOVED***
        var ring = this.ring;
        var total = this.total;
        var count = this.count++;
        if (ring.length < total) ***REMOVED***
            ring.push(value);
        ***REMOVED***
        else ***REMOVED***
            var index = count % total;
            ring[index] = value;
        ***REMOVED***
    ***REMOVED***;
    TakeLastSubscriber.prototype._complete = function () ***REMOVED***
        var destination = this.destination;
        var count = this.count;
        if (count > 0) ***REMOVED***
            var total = this.count >= this.total ? this.total : this.count;
            var ring = this.ring;
            for (var i = 0; i < total; i++) ***REMOVED***
                var idx = (count++) % total;
                destination.next(ring[idx]);
            ***REMOVED***
        ***REMOVED***
        destination.complete();
    ***REMOVED***;
    return TakeLastSubscriber;
***REMOVED***(Subscriber));
//# sourceMappingURL=takeLast.js.map
