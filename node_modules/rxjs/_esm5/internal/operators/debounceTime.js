/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** async ***REMOVED*** from '../scheduler/async';
export function debounceTime(dueTime, scheduler) ***REMOVED***
    if (scheduler === void 0) ***REMOVED***
        scheduler = async;
    ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new DebounceTimeOperator(dueTime, scheduler)); ***REMOVED***;
***REMOVED***
var DebounceTimeOperator = /*@__PURE__*/ (function () ***REMOVED***
    function DebounceTimeOperator(dueTime, scheduler) ***REMOVED***
        this.dueTime = dueTime;
        this.scheduler = scheduler;
    ***REMOVED***
    DebounceTimeOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
    ***REMOVED***;
    return DebounceTimeOperator;
***REMOVED***());
var DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(DebounceTimeSubscriber, _super);
    function DebounceTimeSubscriber(destination, dueTime, scheduler) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.dueTime = dueTime;
        _this.scheduler = scheduler;
        _this.debouncedSubscription = null;
        _this.lastValue = null;
        _this.hasValue = false;
        return _this;
    ***REMOVED***
    DebounceTimeSubscriber.prototype._next = function (value) ***REMOVED***
        this.clearDebounce();
        this.lastValue = value;
        this.hasValue = true;
        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
    ***REMOVED***;
    DebounceTimeSubscriber.prototype._complete = function () ***REMOVED***
        this.debouncedNext();
        this.destination.complete();
    ***REMOVED***;
    DebounceTimeSubscriber.prototype.debouncedNext = function () ***REMOVED***
        this.clearDebounce();
        if (this.hasValue) ***REMOVED***
            var lastValue = this.lastValue;
            this.lastValue = null;
            this.hasValue = false;
            this.destination.next(lastValue);
        ***REMOVED***
    ***REMOVED***;
    DebounceTimeSubscriber.prototype.clearDebounce = function () ***REMOVED***
        var debouncedSubscription = this.debouncedSubscription;
        if (debouncedSubscription !== null) ***REMOVED***
            this.remove(debouncedSubscription);
            debouncedSubscription.unsubscribe();
            this.debouncedSubscription = null;
        ***REMOVED***
    ***REMOVED***;
    return DebounceTimeSubscriber;
***REMOVED***(Subscriber));
function dispatchNext(subscriber) ***REMOVED***
    subscriber.debouncedNext();
***REMOVED***
//# sourceMappingURL=debounceTime.js.map
