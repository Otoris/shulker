/** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
import ***REMOVED*** map ***REMOVED*** from './map';
import ***REMOVED*** from ***REMOVED*** from '../observable/from';
export function exhaustMap(project, resultSelector) ***REMOVED***
    if (resultSelector) ***REMOVED***
        return function (source) ***REMOVED*** return source.pipe(exhaustMap(function (a, i) ***REMOVED*** return from(project(a, i)).pipe(map(function (b, ii) ***REMOVED*** return resultSelector(a, b, i, ii); ***REMOVED***)); ***REMOVED***)); ***REMOVED***;
    ***REMOVED***
    return function (source) ***REMOVED***
        return source.lift(new ExhaustMapOperator(project));
    ***REMOVED***;
***REMOVED***
var ExhaustMapOperator = /*@__PURE__*/ (function () ***REMOVED***
    function ExhaustMapOperator(project) ***REMOVED***
        this.project = project;
    ***REMOVED***
    ExhaustMapOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));
    ***REMOVED***;
    return ExhaustMapOperator;
***REMOVED***());
var ExhaustMapSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(ExhaustMapSubscriber, _super);
    function ExhaustMapSubscriber(destination, project) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.hasSubscription = false;
        _this.hasCompleted = false;
        _this.index = 0;
        return _this;
    ***REMOVED***
    ExhaustMapSubscriber.prototype._next = function (value) ***REMOVED***
        if (!this.hasSubscription) ***REMOVED***
            this.tryNext(value);
        ***REMOVED***
    ***REMOVED***;
    ExhaustMapSubscriber.prototype.tryNext = function (value) ***REMOVED***
        var result;
        var index = this.index++;
        try ***REMOVED***
            result = this.project(value, index);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
            return;
        ***REMOVED***
        this.hasSubscription = true;
        this._innerSub(result, value, index);
    ***REMOVED***;
    ExhaustMapSubscriber.prototype._innerSub = function (result, value, index) ***REMOVED***
        var innerSubscriber = new InnerSubscriber(this, value, index);
        var destination = this.destination;
        destination.add(innerSubscriber);
        var innerSubscription = subscribeToResult(this, result, undefined, undefined, innerSubscriber);
        if (innerSubscription !== innerSubscriber) ***REMOVED***
            destination.add(innerSubscription);
        ***REMOVED***
    ***REMOVED***;
    ExhaustMapSubscriber.prototype._complete = function () ***REMOVED***
        this.hasCompleted = true;
        if (!this.hasSubscription) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
        this.unsubscribe();
    ***REMOVED***;
    ExhaustMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.destination.next(innerValue);
    ***REMOVED***;
    ExhaustMapSubscriber.prototype.notifyError = function (err) ***REMOVED***
        this.destination.error(err);
    ***REMOVED***;
    ExhaustMapSubscriber.prototype.notifyComplete = function (innerSub) ***REMOVED***
        var destination = this.destination;
        destination.remove(innerSub);
        this.hasSubscription = false;
        if (this.hasCompleted) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***;
    return ExhaustMapSubscriber;
***REMOVED***(OuterSubscriber));
//# sourceMappingURL=exhaustMap.js.map
