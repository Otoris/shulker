/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function debounce(durationSelector) ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new DebounceOperator(durationSelector)); ***REMOVED***;
***REMOVED***
var DebounceOperator = /*@__PURE__*/ (function () ***REMOVED***
    function DebounceOperator(durationSelector) ***REMOVED***
        this.durationSelector = durationSelector;
    ***REMOVED***
    DebounceOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
    ***REMOVED***;
    return DebounceOperator;
***REMOVED***());
var DebounceSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(DebounceSubscriber, _super);
    function DebounceSubscriber(destination, durationSelector) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.durationSelector = durationSelector;
        _this.hasValue = false;
        _this.durationSubscription = null;
        return _this;
    ***REMOVED***
    DebounceSubscriber.prototype._next = function (value) ***REMOVED***
        try ***REMOVED***
            var result = this.durationSelector.call(this, value);
            if (result) ***REMOVED***
                this._tryNext(value, result);
            ***REMOVED***
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
        ***REMOVED***
    ***REMOVED***;
    DebounceSubscriber.prototype._complete = function () ***REMOVED***
        this.emitValue();
        this.destination.complete();
    ***REMOVED***;
    DebounceSubscriber.prototype._tryNext = function (value, duration) ***REMOVED***
        var subscription = this.durationSubscription;
        this.value = value;
        this.hasValue = true;
        if (subscription) ***REMOVED***
            subscription.unsubscribe();
            this.remove(subscription);
        ***REMOVED***
        subscription = subscribeToResult(this, duration);
        if (subscription && !subscription.closed) ***REMOVED***
            this.add(this.durationSubscription = subscription);
        ***REMOVED***
    ***REMOVED***;
    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.emitValue();
    ***REMOVED***;
    DebounceSubscriber.prototype.notifyComplete = function () ***REMOVED***
        this.emitValue();
    ***REMOVED***;
    DebounceSubscriber.prototype.emitValue = function () ***REMOVED***
        if (this.hasValue) ***REMOVED***
            var value = this.value;
            var subscription = this.durationSubscription;
            if (subscription) ***REMOVED***
                this.durationSubscription = null;
                subscription.unsubscribe();
                this.remove(subscription);
            ***REMOVED***
            this.value = null;
            this.hasValue = false;
            _super.prototype._next.call(this, value);
        ***REMOVED***
    ***REMOVED***;
    return DebounceSubscriber;
***REMOVED***(OuterSubscriber));
//# sourceMappingURL=debounce.js.map
