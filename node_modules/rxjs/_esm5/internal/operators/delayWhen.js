/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function delayWhen(delayDurationSelector, subscriptionDelay) ***REMOVED***
    if (subscriptionDelay) ***REMOVED***
        return function (source) ***REMOVED***
            return new SubscriptionDelayObservable(source, subscriptionDelay)
                .lift(new DelayWhenOperator(delayDurationSelector));
        ***REMOVED***;
    ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new DelayWhenOperator(delayDurationSelector)); ***REMOVED***;
***REMOVED***
var DelayWhenOperator = /*@__PURE__*/ (function () ***REMOVED***
    function DelayWhenOperator(delayDurationSelector) ***REMOVED***
        this.delayDurationSelector = delayDurationSelector;
    ***REMOVED***
    DelayWhenOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
    ***REMOVED***;
    return DelayWhenOperator;
***REMOVED***());
var DelayWhenSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(DelayWhenSubscriber, _super);
    function DelayWhenSubscriber(destination, delayDurationSelector) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.delayDurationSelector = delayDurationSelector;
        _this.completed = false;
        _this.delayNotifierSubscriptions = [];
        _this.index = 0;
        return _this;
    ***REMOVED***
    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.destination.next(outerValue);
        this.removeSubscription(innerSub);
        this.tryComplete();
    ***REMOVED***;
    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) ***REMOVED***
        this._error(error);
    ***REMOVED***;
    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) ***REMOVED***
        var value = this.removeSubscription(innerSub);
        if (value) ***REMOVED***
            this.destination.next(value);
        ***REMOVED***
        this.tryComplete();
    ***REMOVED***;
    DelayWhenSubscriber.prototype._next = function (value) ***REMOVED***
        var index = this.index++;
        try ***REMOVED***
            var delayNotifier = this.delayDurationSelector(value, index);
            if (delayNotifier) ***REMOVED***
                this.tryDelay(delayNotifier, value);
            ***REMOVED***
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
        ***REMOVED***
    ***REMOVED***;
    DelayWhenSubscriber.prototype._complete = function () ***REMOVED***
        this.completed = true;
        this.tryComplete();
        this.unsubscribe();
    ***REMOVED***;
    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) ***REMOVED***
        subscription.unsubscribe();
        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
        if (subscriptionIdx !== -1) ***REMOVED***
            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
        ***REMOVED***
        return subscription.outerValue;
    ***REMOVED***;
    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) ***REMOVED***
        var notifierSubscription = subscribeToResult(this, delayNotifier, value);
        if (notifierSubscription && !notifierSubscription.closed) ***REMOVED***
            var destination = this.destination;
            destination.add(notifierSubscription);
            this.delayNotifierSubscriptions.push(notifierSubscription);
        ***REMOVED***
    ***REMOVED***;
    DelayWhenSubscriber.prototype.tryComplete = function () ***REMOVED***
        if (this.completed && this.delayNotifierSubscriptions.length === 0) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***;
    return DelayWhenSubscriber;
***REMOVED***(OuterSubscriber));
var SubscriptionDelayObservable = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(SubscriptionDelayObservable, _super);
    function SubscriptionDelayObservable(source, subscriptionDelay) ***REMOVED***
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subscriptionDelay = subscriptionDelay;
        return _this;
    ***REMOVED***
    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) ***REMOVED***
        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
    ***REMOVED***;
    return SubscriptionDelayObservable;
***REMOVED***(Observable));
var SubscriptionDelaySubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(SubscriptionDelaySubscriber, _super);
    function SubscriptionDelaySubscriber(parent, source) ***REMOVED***
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.source = source;
        _this.sourceSubscribed = false;
        return _this;
    ***REMOVED***
    SubscriptionDelaySubscriber.prototype._next = function (unused) ***REMOVED***
        this.subscribeToSource();
    ***REMOVED***;
    SubscriptionDelaySubscriber.prototype._error = function (err) ***REMOVED***
        this.unsubscribe();
        this.parent.error(err);
    ***REMOVED***;
    SubscriptionDelaySubscriber.prototype._complete = function () ***REMOVED***
        this.unsubscribe();
        this.subscribeToSource();
    ***REMOVED***;
    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () ***REMOVED***
        if (!this.sourceSubscribed) ***REMOVED***
            this.sourceSubscribed = true;
            this.unsubscribe();
            this.source.subscribe(this.parent);
        ***REMOVED***
    ***REMOVED***;
    return SubscriptionDelaySubscriber;
***REMOVED***(Subscriber));
//# sourceMappingURL=delayWhen.js.map
