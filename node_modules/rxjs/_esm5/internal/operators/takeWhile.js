/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function takeWhile(predicate, inclusive) ***REMOVED***
    if (inclusive === void 0) ***REMOVED***
        inclusive = false;
    ***REMOVED***
    return function (source) ***REMOVED***
        return source.lift(new TakeWhileOperator(predicate, inclusive));
    ***REMOVED***;
***REMOVED***
var TakeWhileOperator = /*@__PURE__*/ (function () ***REMOVED***
    function TakeWhileOperator(predicate, inclusive) ***REMOVED***
        this.predicate = predicate;
        this.inclusive = inclusive;
    ***REMOVED***
    TakeWhileOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));
    ***REMOVED***;
    return TakeWhileOperator;
***REMOVED***());
var TakeWhileSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(TakeWhileSubscriber, _super);
    function TakeWhileSubscriber(destination, predicate, inclusive) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.inclusive = inclusive;
        _this.index = 0;
        return _this;
    ***REMOVED***
    TakeWhileSubscriber.prototype._next = function (value) ***REMOVED***
        var destination = this.destination;
        var result;
        try ***REMOVED***
            result = this.predicate(value, this.index++);
        ***REMOVED***
        catch (err) ***REMOVED***
            destination.error(err);
            return;
        ***REMOVED***
        this.nextOrComplete(value, result);
    ***REMOVED***;
    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) ***REMOVED***
        var destination = this.destination;
        if (Boolean(predicateResult)) ***REMOVED***
            destination.next(value);
        ***REMOVED***
        else ***REMOVED***
            if (this.inclusive) ***REMOVED***
                destination.next(value);
            ***REMOVED***
            destination.complete();
        ***REMOVED***
    ***REMOVED***;
    return TakeWhileSubscriber;
***REMOVED***(Subscriber));
//# sourceMappingURL=takeWhile.js.map
