/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Notification ***REMOVED*** from '../Notification';
export function observeOn(scheduler, delay) ***REMOVED***
    if (delay === void 0) ***REMOVED***
        delay = 0;
    ***REMOVED***
    return function observeOnOperatorFunction(source) ***REMOVED***
        return source.lift(new ObserveOnOperator(scheduler, delay));
    ***REMOVED***;
***REMOVED***
var ObserveOnOperator = /*@__PURE__*/ (function () ***REMOVED***
    function ObserveOnOperator(scheduler, delay) ***REMOVED***
        if (delay === void 0) ***REMOVED***
            delay = 0;
        ***REMOVED***
        this.scheduler = scheduler;
        this.delay = delay;
    ***REMOVED***
    ObserveOnOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    ***REMOVED***;
    return ObserveOnOperator;
***REMOVED***());
export ***REMOVED*** ObserveOnOperator ***REMOVED***;
var ObserveOnSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) ***REMOVED***
        if (delay === void 0) ***REMOVED***
            delay = 0;
        ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.scheduler = scheduler;
        _this.delay = delay;
        return _this;
    ***REMOVED***
    ObserveOnSubscriber.dispatch = function (arg) ***REMOVED***
        var notification = arg.notification, destination = arg.destination;
        notification.observe(destination);
        this.unsubscribe();
    ***REMOVED***;
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) ***REMOVED***
        var destination = this.destination;
        destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    ***REMOVED***;
    ObserveOnSubscriber.prototype._next = function (value) ***REMOVED***
        this.scheduleMessage(Notification.createNext(value));
    ***REMOVED***;
    ObserveOnSubscriber.prototype._error = function (err) ***REMOVED***
        this.scheduleMessage(Notification.createError(err));
        this.unsubscribe();
    ***REMOVED***;
    ObserveOnSubscriber.prototype._complete = function () ***REMOVED***
        this.scheduleMessage(Notification.createComplete());
        this.unsubscribe();
    ***REMOVED***;
    return ObserveOnSubscriber;
***REMOVED***(Subscriber));
export ***REMOVED*** ObserveOnSubscriber ***REMOVED***;
var ObserveOnMessage = /*@__PURE__*/ (function () ***REMOVED***
    function ObserveOnMessage(notification, destination) ***REMOVED***
        this.notification = notification;
        this.destination = destination;
    ***REMOVED***
    return ObserveOnMessage;
***REMOVED***());
export ***REMOVED*** ObserveOnMessage ***REMOVED***;
//# sourceMappingURL=observeOn.js.map
