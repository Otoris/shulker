/** PURE_IMPORTS_START tslib,_observable_from,_util_isArray,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** from ***REMOVED*** from '../observable/from';
import ***REMOVED*** isArray ***REMOVED*** from '../util/isArray';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function onErrorResumeNext() ***REMOVED***
    var nextSources = [];
    for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
        nextSources[_i] = arguments[_i];
    ***REMOVED***
    if (nextSources.length === 1 && isArray(nextSources[0])) ***REMOVED***
        nextSources = nextSources[0];
    ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new OnErrorResumeNextOperator(nextSources)); ***REMOVED***;
***REMOVED***
export function onErrorResumeNextStatic() ***REMOVED***
    var nextSources = [];
    for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
        nextSources[_i] = arguments[_i];
    ***REMOVED***
    var source = null;
    if (nextSources.length === 1 && isArray(nextSources[0])) ***REMOVED***
        nextSources = nextSources[0];
    ***REMOVED***
    source = nextSources.shift();
    return from(source, null).lift(new OnErrorResumeNextOperator(nextSources));
***REMOVED***
var OnErrorResumeNextOperator = /*@__PURE__*/ (function () ***REMOVED***
    function OnErrorResumeNextOperator(nextSources) ***REMOVED***
        this.nextSources = nextSources;
    ***REMOVED***
    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
    ***REMOVED***;
    return OnErrorResumeNextOperator;
***REMOVED***());
var OnErrorResumeNextSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(OnErrorResumeNextSubscriber, _super);
    function OnErrorResumeNextSubscriber(destination, nextSources) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.nextSources = nextSources;
        return _this;
    ***REMOVED***
    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) ***REMOVED***
        this.subscribeToNextSource();
    ***REMOVED***;
    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) ***REMOVED***
        this.subscribeToNextSource();
    ***REMOVED***;
    OnErrorResumeNextSubscriber.prototype._error = function (err) ***REMOVED***
        this.subscribeToNextSource();
        this.unsubscribe();
    ***REMOVED***;
    OnErrorResumeNextSubscriber.prototype._complete = function () ***REMOVED***
        this.subscribeToNextSource();
        this.unsubscribe();
    ***REMOVED***;
    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () ***REMOVED***
        var next = this.nextSources.shift();
        if (!!next) ***REMOVED***
            var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
            var destination = this.destination;
            destination.add(innerSubscriber);
            var innerSubscription = subscribeToResult(this, next, undefined, undefined, innerSubscriber);
            if (innerSubscription !== innerSubscriber) ***REMOVED***
                destination.add(innerSubscription);
            ***REMOVED***
        ***REMOVED***
        else ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***;
    return OnErrorResumeNextSubscriber;
***REMOVED***(OuterSubscriber));
//# sourceMappingURL=onErrorResumeNext.js.map
