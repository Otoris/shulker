/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
export function bufferToggle(openings, closingSelector) ***REMOVED***
    return function bufferToggleOperatorFunction(source) ***REMOVED***
        return source.lift(new BufferToggleOperator(openings, closingSelector));
    ***REMOVED***;
***REMOVED***
var BufferToggleOperator = /*@__PURE__*/ (function () ***REMOVED***
    function BufferToggleOperator(openings, closingSelector) ***REMOVED***
        this.openings = openings;
        this.closingSelector = closingSelector;
    ***REMOVED***
    BufferToggleOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
    ***REMOVED***;
    return BufferToggleOperator;
***REMOVED***());
var BufferToggleSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(BufferToggleSubscriber, _super);
    function BufferToggleSubscriber(destination, openings, closingSelector) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.openings = openings;
        _this.closingSelector = closingSelector;
        _this.contexts = [];
        _this.add(subscribeToResult(_this, openings));
        return _this;
    ***REMOVED***
    BufferToggleSubscriber.prototype._next = function (value) ***REMOVED***
        var contexts = this.contexts;
        var len = contexts.length;
        for (var i = 0; i < len; i++) ***REMOVED***
            contexts[i].buffer.push(value);
        ***REMOVED***
    ***REMOVED***;
    BufferToggleSubscriber.prototype._error = function (err) ***REMOVED***
        var contexts = this.contexts;
        while (contexts.length > 0) ***REMOVED***
            var context_1 = contexts.shift();
            context_1.subscription.unsubscribe();
            context_1.buffer = null;
            context_1.subscription = null;
        ***REMOVED***
        this.contexts = null;
        _super.prototype._error.call(this, err);
    ***REMOVED***;
    BufferToggleSubscriber.prototype._complete = function () ***REMOVED***
        var contexts = this.contexts;
        while (contexts.length > 0) ***REMOVED***
            var context_2 = contexts.shift();
            this.destination.next(context_2.buffer);
            context_2.subscription.unsubscribe();
            context_2.buffer = null;
            context_2.subscription = null;
        ***REMOVED***
        this.contexts = null;
        _super.prototype._complete.call(this);
    ***REMOVED***;
    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
    ***REMOVED***;
    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) ***REMOVED***
        this.closeBuffer(innerSub.context);
    ***REMOVED***;
    BufferToggleSubscriber.prototype.openBuffer = function (value) ***REMOVED***
        try ***REMOVED***
            var closingSelector = this.closingSelector;
            var closingNotifier = closingSelector.call(this, value);
            if (closingNotifier) ***REMOVED***
                this.trySubscribe(closingNotifier);
            ***REMOVED***
        ***REMOVED***
        catch (err) ***REMOVED***
            this._error(err);
        ***REMOVED***
    ***REMOVED***;
    BufferToggleSubscriber.prototype.closeBuffer = function (context) ***REMOVED***
        var contexts = this.contexts;
        if (contexts && context) ***REMOVED***
            var buffer = context.buffer, subscription = context.subscription;
            this.destination.next(buffer);
            contexts.splice(contexts.indexOf(context), 1);
            this.remove(subscription);
            subscription.unsubscribe();
        ***REMOVED***
    ***REMOVED***;
    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) ***REMOVED***
        var contexts = this.contexts;
        var buffer = [];
        var subscription = new Subscription();
        var context = ***REMOVED*** buffer: buffer, subscription: subscription ***REMOVED***;
        contexts.push(context);
        var innerSubscription = subscribeToResult(this, closingNotifier, context);
        if (!innerSubscription || innerSubscription.closed) ***REMOVED***
            this.closeBuffer(context);
        ***REMOVED***
        else ***REMOVED***
            innerSubscription.context = context;
            this.add(innerSubscription);
            subscription.add(innerSubscription);
        ***REMOVED***
    ***REMOVED***;
    return BufferToggleSubscriber;
***REMOVED***(OuterSubscriber));
//# sourceMappingURL=bufferToggle.js.map
