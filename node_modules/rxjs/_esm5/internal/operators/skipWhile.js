/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function skipWhile(predicate) ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new SkipWhileOperator(predicate)); ***REMOVED***;
***REMOVED***
var SkipWhileOperator = /*@__PURE__*/ (function () ***REMOVED***
    function SkipWhileOperator(predicate) ***REMOVED***
        this.predicate = predicate;
    ***REMOVED***
    SkipWhileOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
    ***REMOVED***;
    return SkipWhileOperator;
***REMOVED***());
var SkipWhileSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(SkipWhileSubscriber, _super);
    function SkipWhileSubscriber(destination, predicate) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.skipping = true;
        _this.index = 0;
        return _this;
    ***REMOVED***
    SkipWhileSubscriber.prototype._next = function (value) ***REMOVED***
        var destination = this.destination;
        if (this.skipping) ***REMOVED***
            this.tryCallPredicate(value);
        ***REMOVED***
        if (!this.skipping) ***REMOVED***
            destination.next(value);
        ***REMOVED***
    ***REMOVED***;
    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) ***REMOVED***
        try ***REMOVED***
            var result = this.predicate(value, this.index++);
            this.skipping = Boolean(result);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
        ***REMOVED***
    ***REMOVED***;
    return SkipWhileSubscriber;
***REMOVED***(Subscriber));
//# sourceMappingURL=skipWhile.js.map
