/** PURE_IMPORTS_START tslib,_Subscriber,_Subject PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Subject ***REMOVED*** from '../Subject';
export function windowCount(windowSize, startWindowEvery) ***REMOVED***
    if (startWindowEvery === void 0) ***REMOVED***
        startWindowEvery = 0;
    ***REMOVED***
    return function windowCountOperatorFunction(source) ***REMOVED***
        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));
    ***REMOVED***;
***REMOVED***
var WindowCountOperator = /*@__PURE__*/ (function () ***REMOVED***
    function WindowCountOperator(windowSize, startWindowEvery) ***REMOVED***
        this.windowSize = windowSize;
        this.startWindowEvery = startWindowEvery;
    ***REMOVED***
    WindowCountOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
    ***REMOVED***;
    return WindowCountOperator;
***REMOVED***());
var WindowCountSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(WindowCountSubscriber, _super);
    function WindowCountSubscriber(destination, windowSize, startWindowEvery) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.windowSize = windowSize;
        _this.startWindowEvery = startWindowEvery;
        _this.windows = [new Subject()];
        _this.count = 0;
        destination.next(_this.windows[0]);
        return _this;
    ***REMOVED***
    WindowCountSubscriber.prototype._next = function (value) ***REMOVED***
        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
        var destination = this.destination;
        var windowSize = this.windowSize;
        var windows = this.windows;
        var len = windows.length;
        for (var i = 0; i < len && !this.closed; i++) ***REMOVED***
            windows[i].next(value);
        ***REMOVED***
        var c = this.count - windowSize + 1;
        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) ***REMOVED***
            windows.shift().complete();
        ***REMOVED***
        if (++this.count % startWindowEvery === 0 && !this.closed) ***REMOVED***
            var window_1 = new Subject();
            windows.push(window_1);
            destination.next(window_1);
        ***REMOVED***
    ***REMOVED***;
    WindowCountSubscriber.prototype._error = function (err) ***REMOVED***
        var windows = this.windows;
        if (windows) ***REMOVED***
            while (windows.length > 0 && !this.closed) ***REMOVED***
                windows.shift().error(err);
            ***REMOVED***
        ***REMOVED***
        this.destination.error(err);
    ***REMOVED***;
    WindowCountSubscriber.prototype._complete = function () ***REMOVED***
        var windows = this.windows;
        if (windows) ***REMOVED***
            while (windows.length > 0 && !this.closed) ***REMOVED***
                windows.shift().complete();
            ***REMOVED***
        ***REMOVED***
        this.destination.complete();
    ***REMOVED***;
    WindowCountSubscriber.prototype._unsubscribe = function () ***REMOVED***
        this.count = 0;
        this.windows = null;
    ***REMOVED***;
    return WindowCountSubscriber;
***REMOVED***(Subscriber));
//# sourceMappingURL=windowCount.js.map
