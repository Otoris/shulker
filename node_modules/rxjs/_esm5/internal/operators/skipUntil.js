/** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function skipUntil(notifier) ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new SkipUntilOperator(notifier)); ***REMOVED***;
***REMOVED***
var SkipUntilOperator = /*@__PURE__*/ (function () ***REMOVED***
    function SkipUntilOperator(notifier) ***REMOVED***
        this.notifier = notifier;
    ***REMOVED***
    SkipUntilOperator.prototype.call = function (destination, source) ***REMOVED***
        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));
    ***REMOVED***;
    return SkipUntilOperator;
***REMOVED***());
var SkipUntilSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(SkipUntilSubscriber, _super);
    function SkipUntilSubscriber(destination, notifier) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.hasValue = false;
        var innerSubscriber = new InnerSubscriber(_this, undefined, undefined);
        _this.add(innerSubscriber);
        _this.innerSubscription = innerSubscriber;
        var innerSubscription = subscribeToResult(_this, notifier, undefined, undefined, innerSubscriber);
        if (innerSubscription !== innerSubscriber) ***REMOVED***
            _this.add(innerSubscription);
            _this.innerSubscription = innerSubscription;
        ***REMOVED***
        return _this;
    ***REMOVED***
    SkipUntilSubscriber.prototype._next = function (value) ***REMOVED***
        if (this.hasValue) ***REMOVED***
            _super.prototype._next.call(this, value);
        ***REMOVED***
    ***REMOVED***;
    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.hasValue = true;
        if (this.innerSubscription) ***REMOVED***
            this.innerSubscription.unsubscribe();
        ***REMOVED***
    ***REMOVED***;
    SkipUntilSubscriber.prototype.notifyComplete = function () ***REMOVED***
    ***REMOVED***;
    return SkipUntilSubscriber;
***REMOVED***(OuterSubscriber));
//# sourceMappingURL=skipUntil.js.map
