/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function refCount() ***REMOVED***
    return function refCountOperatorFunction(source) ***REMOVED***
        return source.lift(new RefCountOperator(source));
    ***REMOVED***;
***REMOVED***
var RefCountOperator = /*@__PURE__*/ (function () ***REMOVED***
    function RefCountOperator(connectable) ***REMOVED***
        this.connectable = connectable;
    ***REMOVED***
    RefCountOperator.prototype.call = function (subscriber, source) ***REMOVED***
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) ***REMOVED***
            refCounter.connection = connectable.connect();
        ***REMOVED***
        return subscription;
    ***REMOVED***;
    return RefCountOperator;
***REMOVED***());
var RefCountSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    ***REMOVED***
    RefCountSubscriber.prototype._unsubscribe = function () ***REMOVED***
        var connectable = this.connectable;
        if (!connectable) ***REMOVED***
            this.connection = null;
            return;
        ***REMOVED***
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) ***REMOVED***
            this.connection = null;
            return;
        ***REMOVED***
        connectable._refCount = refCount - 1;
        if (refCount > 1) ***REMOVED***
            this.connection = null;
            return;
        ***REMOVED***
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) ***REMOVED***
            sharedConnection.unsubscribe();
        ***REMOVED***
    ***REMOVED***;
    return RefCountSubscriber;
***REMOVED***(Subscriber));
//# sourceMappingURL=refCount.js.map
