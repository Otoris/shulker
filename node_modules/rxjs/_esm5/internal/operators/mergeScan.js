/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
export function mergeScan(accumulator, seed, concurrent) ***REMOVED***
    if (concurrent === void 0) ***REMOVED***
        concurrent = Number.POSITIVE_INFINITY;
    ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); ***REMOVED***;
***REMOVED***
var MergeScanOperator = /*@__PURE__*/ (function () ***REMOVED***
    function MergeScanOperator(accumulator, seed, concurrent) ***REMOVED***
        this.accumulator = accumulator;
        this.seed = seed;
        this.concurrent = concurrent;
    ***REMOVED***
    MergeScanOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
    ***REMOVED***;
    return MergeScanOperator;
***REMOVED***());
export ***REMOVED*** MergeScanOperator ***REMOVED***;
var MergeScanSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(MergeScanSubscriber, _super);
    function MergeScanSubscriber(destination, accumulator, acc, concurrent) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.accumulator = accumulator;
        _this.acc = acc;
        _this.concurrent = concurrent;
        _this.hasValue = false;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    ***REMOVED***
    MergeScanSubscriber.prototype._next = function (value) ***REMOVED***
        if (this.active < this.concurrent) ***REMOVED***
            var index = this.index++;
            var destination = this.destination;
            var ish = void 0;
            try ***REMOVED***
                var accumulator = this.accumulator;
                ish = accumulator(this.acc, value, index);
            ***REMOVED***
            catch (e) ***REMOVED***
                return destination.error(e);
            ***REMOVED***
            this.active++;
            this._innerSub(ish, value, index);
        ***REMOVED***
        else ***REMOVED***
            this.buffer.push(value);
        ***REMOVED***
    ***REMOVED***;
    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) ***REMOVED***
        var innerSubscriber = new InnerSubscriber(this, value, index);
        var destination = this.destination;
        destination.add(innerSubscriber);
        var innerSubscription = subscribeToResult(this, ish, undefined, undefined, innerSubscriber);
        if (innerSubscription !== innerSubscriber) ***REMOVED***
            destination.add(innerSubscription);
        ***REMOVED***
    ***REMOVED***;
    MergeScanSubscriber.prototype._complete = function () ***REMOVED***
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) ***REMOVED***
            if (this.hasValue === false) ***REMOVED***
                this.destination.next(this.acc);
            ***REMOVED***
            this.destination.complete();
        ***REMOVED***
        this.unsubscribe();
    ***REMOVED***;
    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        var destination = this.destination;
        this.acc = innerValue;
        this.hasValue = true;
        destination.next(innerValue);
    ***REMOVED***;
    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) ***REMOVED***
        var buffer = this.buffer;
        var destination = this.destination;
        destination.remove(innerSub);
        this.active--;
        if (buffer.length > 0) ***REMOVED***
            this._next(buffer.shift());
        ***REMOVED***
        else if (this.active === 0 && this.hasCompleted) ***REMOVED***
            if (this.hasValue === false) ***REMOVED***
                this.destination.next(this.acc);
            ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***;
    return MergeScanSubscriber;
***REMOVED***(OuterSubscriber));
export ***REMOVED*** MergeScanSubscriber ***REMOVED***;
//# sourceMappingURL=mergeScan.js.map
