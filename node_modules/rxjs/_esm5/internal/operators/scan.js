/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function scan(accumulator, seed) ***REMOVED***
    var hasSeed = false;
    if (arguments.length >= 2) ***REMOVED***
        hasSeed = true;
    ***REMOVED***
    return function scanOperatorFunction(source) ***REMOVED***
        return source.lift(new ScanOperator(accumulator, seed, hasSeed));
    ***REMOVED***;
***REMOVED***
var ScanOperator = /*@__PURE__*/ (function () ***REMOVED***
    function ScanOperator(accumulator, seed, hasSeed) ***REMOVED***
        if (hasSeed === void 0) ***REMOVED***
            hasSeed = false;
        ***REMOVED***
        this.accumulator = accumulator;
        this.seed = seed;
        this.hasSeed = hasSeed;
    ***REMOVED***
    ScanOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
    ***REMOVED***;
    return ScanOperator;
***REMOVED***());
var ScanSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(ScanSubscriber, _super);
    function ScanSubscriber(destination, accumulator, _seed, hasSeed) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.accumulator = accumulator;
        _this._seed = _seed;
        _this.hasSeed = hasSeed;
        _this.index = 0;
        return _this;
    ***REMOVED***
    Object.defineProperty(ScanSubscriber.prototype, "seed", ***REMOVED***
        get: function () ***REMOVED***
            return this._seed;
        ***REMOVED***,
        set: function (value) ***REMOVED***
            this.hasSeed = true;
            this._seed = value;
        ***REMOVED***,
        enumerable: true,
        configurable: true
    ***REMOVED***);
    ScanSubscriber.prototype._next = function (value) ***REMOVED***
        if (!this.hasSeed) ***REMOVED***
            this.seed = value;
            this.destination.next(value);
        ***REMOVED***
        else ***REMOVED***
            return this._tryNext(value);
        ***REMOVED***
    ***REMOVED***;
    ScanSubscriber.prototype._tryNext = function (value) ***REMOVED***
        var index = this.index++;
        var result;
        try ***REMOVED***
            result = this.accumulator(this.seed, value, index);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
        ***REMOVED***
        this.seed = result;
        this.destination.next(result);
    ***REMOVED***;
    return ScanSubscriber;
***REMOVED***(Subscriber));
//# sourceMappingURL=scan.js.map
