/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** async ***REMOVED*** from '../scheduler/async';
import ***REMOVED*** defaultThrottleConfig ***REMOVED*** from './throttle';
export function throttleTime(duration, scheduler, config) ***REMOVED***
    if (scheduler === void 0) ***REMOVED***
        scheduler = async;
    ***REMOVED***
    if (config === void 0) ***REMOVED***
        config = defaultThrottleConfig;
    ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); ***REMOVED***;
***REMOVED***
var ThrottleTimeOperator = /*@__PURE__*/ (function () ***REMOVED***
    function ThrottleTimeOperator(duration, scheduler, leading, trailing) ***REMOVED***
        this.duration = duration;
        this.scheduler = scheduler;
        this.leading = leading;
        this.trailing = trailing;
    ***REMOVED***
    ThrottleTimeOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
    ***REMOVED***;
    return ThrottleTimeOperator;
***REMOVED***());
var ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(ThrottleTimeSubscriber, _super);
    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.duration = duration;
        _this.scheduler = scheduler;
        _this.leading = leading;
        _this.trailing = trailing;
        _this._hasTrailingValue = false;
        _this._trailingValue = null;
        return _this;
    ***REMOVED***
    ThrottleTimeSubscriber.prototype._next = function (value) ***REMOVED***
        if (this.throttled) ***REMOVED***
            if (this.trailing) ***REMOVED***
                this._trailingValue = value;
                this._hasTrailingValue = true;
            ***REMOVED***
        ***REMOVED***
        else ***REMOVED***
            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, ***REMOVED*** subscriber: this ***REMOVED***));
            if (this.leading) ***REMOVED***
                this.destination.next(value);
            ***REMOVED***
            else if (this.trailing) ***REMOVED***
                this._trailingValue = value;
                this._hasTrailingValue = true;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    ThrottleTimeSubscriber.prototype._complete = function () ***REMOVED***
        if (this._hasTrailingValue) ***REMOVED***
            this.destination.next(this._trailingValue);
            this.destination.complete();
        ***REMOVED***
        else ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***;
    ThrottleTimeSubscriber.prototype.clearThrottle = function () ***REMOVED***
        var throttled = this.throttled;
        if (throttled) ***REMOVED***
            if (this.trailing && this._hasTrailingValue) ***REMOVED***
                this.destination.next(this._trailingValue);
                this._trailingValue = null;
                this._hasTrailingValue = false;
            ***REMOVED***
            throttled.unsubscribe();
            this.remove(throttled);
            this.throttled = null;
        ***REMOVED***
    ***REMOVED***;
    return ThrottleTimeSubscriber;
***REMOVED***(Subscriber));
function dispatchNext(arg) ***REMOVED***
    var subscriber = arg.subscriber;
    subscriber.clearThrottle();
***REMOVED***
//# sourceMappingURL=throttleTime.js.map
