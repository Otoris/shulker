/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function map(project, thisArg) ***REMOVED***
    return function mapOperation(source) ***REMOVED***
        if (typeof project !== 'function') ***REMOVED***
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        ***REMOVED***
        return source.lift(new MapOperator(project, thisArg));
    ***REMOVED***;
***REMOVED***
var MapOperator = /*@__PURE__*/ (function () ***REMOVED***
    function MapOperator(project, thisArg) ***REMOVED***
        this.project = project;
        this.thisArg = thisArg;
    ***REMOVED***
    MapOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    ***REMOVED***;
    return MapOperator;
***REMOVED***());
export ***REMOVED*** MapOperator ***REMOVED***;
var MapSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.count = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    ***REMOVED***
    MapSubscriber.prototype._next = function (value) ***REMOVED***
        var result;
        try ***REMOVED***
            result = this.project.call(this.thisArg, value, this.count++);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
            return;
        ***REMOVED***
        this.destination.next(result);
    ***REMOVED***;
    return MapSubscriber;
***REMOVED***(Subscriber));
//# sourceMappingURL=map.js.map
