/** PURE_IMPORTS_START tslib,_Subscription,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function bufferWhen(closingSelector) ***REMOVED***
    return function (source) ***REMOVED***
        return source.lift(new BufferWhenOperator(closingSelector));
    ***REMOVED***;
***REMOVED***
var BufferWhenOperator = /*@__PURE__*/ (function () ***REMOVED***
    function BufferWhenOperator(closingSelector) ***REMOVED***
        this.closingSelector = closingSelector;
    ***REMOVED***
    BufferWhenOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
    ***REMOVED***;
    return BufferWhenOperator;
***REMOVED***());
var BufferWhenSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(BufferWhenSubscriber, _super);
    function BufferWhenSubscriber(destination, closingSelector) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.closingSelector = closingSelector;
        _this.subscribing = false;
        _this.openBuffer();
        return _this;
    ***REMOVED***
    BufferWhenSubscriber.prototype._next = function (value) ***REMOVED***
        this.buffer.push(value);
    ***REMOVED***;
    BufferWhenSubscriber.prototype._complete = function () ***REMOVED***
        var buffer = this.buffer;
        if (buffer) ***REMOVED***
            this.destination.next(buffer);
        ***REMOVED***
        _super.prototype._complete.call(this);
    ***REMOVED***;
    BufferWhenSubscriber.prototype._unsubscribe = function () ***REMOVED***
        this.buffer = null;
        this.subscribing = false;
    ***REMOVED***;
    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.openBuffer();
    ***REMOVED***;
    BufferWhenSubscriber.prototype.notifyComplete = function () ***REMOVED***
        if (this.subscribing) ***REMOVED***
            this.complete();
        ***REMOVED***
        else ***REMOVED***
            this.openBuffer();
        ***REMOVED***
    ***REMOVED***;
    BufferWhenSubscriber.prototype.openBuffer = function () ***REMOVED***
        var closingSubscription = this.closingSubscription;
        if (closingSubscription) ***REMOVED***
            this.remove(closingSubscription);
            closingSubscription.unsubscribe();
        ***REMOVED***
        var buffer = this.buffer;
        if (this.buffer) ***REMOVED***
            this.destination.next(buffer);
        ***REMOVED***
        this.buffer = [];
        var closingNotifier;
        try ***REMOVED***
            var closingSelector = this.closingSelector;
            closingNotifier = closingSelector();
        ***REMOVED***
        catch (err) ***REMOVED***
            return this.error(err);
        ***REMOVED***
        closingSubscription = new Subscription();
        this.closingSubscription = closingSubscription;
        this.add(closingSubscription);
        this.subscribing = true;
        closingSubscription.add(subscribeToResult(this, closingNotifier));
        this.subscribing = false;
    ***REMOVED***;
    return BufferWhenSubscriber;
***REMOVED***(OuterSubscriber));
//# sourceMappingURL=bufferWhen.js.map
