/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber,_map,_observable_from PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** map ***REMOVED*** from './map';
import ***REMOVED*** from ***REMOVED*** from '../observable/from';
export function mergeMap(project, resultSelector, concurrent) ***REMOVED***
    if (concurrent === void 0) ***REMOVED***
        concurrent = Number.POSITIVE_INFINITY;
    ***REMOVED***
    if (typeof resultSelector === 'function') ***REMOVED***
        return function (source) ***REMOVED*** return source.pipe(mergeMap(function (a, i) ***REMOVED*** return from(project(a, i)).pipe(map(function (b, ii) ***REMOVED*** return resultSelector(a, b, i, ii); ***REMOVED***)); ***REMOVED***, concurrent)); ***REMOVED***;
    ***REMOVED***
    else if (typeof resultSelector === 'number') ***REMOVED***
        concurrent = resultSelector;
    ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new MergeMapOperator(project, concurrent)); ***REMOVED***;
***REMOVED***
var MergeMapOperator = /*@__PURE__*/ (function () ***REMOVED***
    function MergeMapOperator(project, concurrent) ***REMOVED***
        if (concurrent === void 0) ***REMOVED***
            concurrent = Number.POSITIVE_INFINITY;
        ***REMOVED***
        this.project = project;
        this.concurrent = concurrent;
    ***REMOVED***
    MergeMapOperator.prototype.call = function (observer, source) ***REMOVED***
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
    ***REMOVED***;
    return MergeMapOperator;
***REMOVED***());
export ***REMOVED*** MergeMapOperator ***REMOVED***;
var MergeMapSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, concurrent) ***REMOVED***
        if (concurrent === void 0) ***REMOVED***
            concurrent = Number.POSITIVE_INFINITY;
        ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    ***REMOVED***
    MergeMapSubscriber.prototype._next = function (value) ***REMOVED***
        if (this.active < this.concurrent) ***REMOVED***
            this._tryNext(value);
        ***REMOVED***
        else ***REMOVED***
            this.buffer.push(value);
        ***REMOVED***
    ***REMOVED***;
    MergeMapSubscriber.prototype._tryNext = function (value) ***REMOVED***
        var result;
        var index = this.index++;
        try ***REMOVED***
            result = this.project(value, index);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
            return;
        ***REMOVED***
        this.active++;
        this._innerSub(result, value, index);
    ***REMOVED***;
    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) ***REMOVED***
        var innerSubscriber = new InnerSubscriber(this, value, index);
        var destination = this.destination;
        destination.add(innerSubscriber);
        var innerSubscription = subscribeToResult(this, ish, undefined, undefined, innerSubscriber);
        if (innerSubscription !== innerSubscriber) ***REMOVED***
            destination.add(innerSubscription);
        ***REMOVED***
    ***REMOVED***;
    MergeMapSubscriber.prototype._complete = function () ***REMOVED***
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
        this.unsubscribe();
    ***REMOVED***;
    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.destination.next(innerValue);
    ***REMOVED***;
    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) ***REMOVED***
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) ***REMOVED***
            this._next(buffer.shift());
        ***REMOVED***
        else if (this.active === 0 && this.hasCompleted) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***;
    return MergeMapSubscriber;
***REMOVED***(OuterSubscriber));
export ***REMOVED*** MergeMapSubscriber ***REMOVED***;
//# sourceMappingURL=mergeMap.js.map
