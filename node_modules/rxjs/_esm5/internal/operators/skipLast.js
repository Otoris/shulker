/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** ArgumentOutOfRangeError ***REMOVED*** from '../util/ArgumentOutOfRangeError';
export function skipLast(count) ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new SkipLastOperator(count)); ***REMOVED***;
***REMOVED***
var SkipLastOperator = /*@__PURE__*/ (function () ***REMOVED***
    function SkipLastOperator(_skipCount) ***REMOVED***
        this._skipCount = _skipCount;
        if (this._skipCount < 0) ***REMOVED***
            throw new ArgumentOutOfRangeError;
        ***REMOVED***
    ***REMOVED***
    SkipLastOperator.prototype.call = function (subscriber, source) ***REMOVED***
        if (this._skipCount === 0) ***REMOVED***
            return source.subscribe(new Subscriber(subscriber));
        ***REMOVED***
        else ***REMOVED***
            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));
        ***REMOVED***
    ***REMOVED***;
    return SkipLastOperator;
***REMOVED***());
var SkipLastSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(SkipLastSubscriber, _super);
    function SkipLastSubscriber(destination, _skipCount) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this._skipCount = _skipCount;
        _this._count = 0;
        _this._ring = new Array(_skipCount);
        return _this;
    ***REMOVED***
    SkipLastSubscriber.prototype._next = function (value) ***REMOVED***
        var skipCount = this._skipCount;
        var count = this._count++;
        if (count < skipCount) ***REMOVED***
            this._ring[count] = value;
        ***REMOVED***
        else ***REMOVED***
            var currentIndex = count % skipCount;
            var ring = this._ring;
            var oldValue = ring[currentIndex];
            ring[currentIndex] = value;
            this.destination.next(oldValue);
        ***REMOVED***
    ***REMOVED***;
    return SkipLastSubscriber;
***REMOVED***(Subscriber));
//# sourceMappingURL=skipLast.js.map
