/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subject ***REMOVED*** from '../Subject';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function repeatWhen(notifier) ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new RepeatWhenOperator(notifier)); ***REMOVED***;
***REMOVED***
var RepeatWhenOperator = /*@__PURE__*/ (function () ***REMOVED***
    function RepeatWhenOperator(notifier) ***REMOVED***
        this.notifier = notifier;
    ***REMOVED***
    RepeatWhenOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
    ***REMOVED***;
    return RepeatWhenOperator;
***REMOVED***());
var RepeatWhenSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(RepeatWhenSubscriber, _super);
    function RepeatWhenSubscriber(destination, notifier, source) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.notifier = notifier;
        _this.source = source;
        _this.sourceIsBeingSubscribedTo = true;
        return _this;
    ***REMOVED***
    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.sourceIsBeingSubscribedTo = true;
        this.source.subscribe(this);
    ***REMOVED***;
    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) ***REMOVED***
        if (this.sourceIsBeingSubscribedTo === false) ***REMOVED***
            return _super.prototype.complete.call(this);
        ***REMOVED***
    ***REMOVED***;
    RepeatWhenSubscriber.prototype.complete = function () ***REMOVED***
        this.sourceIsBeingSubscribedTo = false;
        if (!this.isStopped) ***REMOVED***
            if (!this.retries) ***REMOVED***
                this.subscribeToRetries();
            ***REMOVED***
            if (!this.retriesSubscription || this.retriesSubscription.closed) ***REMOVED***
                return _super.prototype.complete.call(this);
            ***REMOVED***
            this._unsubscribeAndRecycle();
            this.notifications.next();
        ***REMOVED***
    ***REMOVED***;
    RepeatWhenSubscriber.prototype._unsubscribe = function () ***REMOVED***
        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
        if (notifications) ***REMOVED***
            notifications.unsubscribe();
            this.notifications = null;
        ***REMOVED***
        if (retriesSubscription) ***REMOVED***
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        ***REMOVED***
        this.retries = null;
    ***REMOVED***;
    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () ***REMOVED***
        var _unsubscribe = this._unsubscribe;
        this._unsubscribe = null;
        _super.prototype._unsubscribeAndRecycle.call(this);
        this._unsubscribe = _unsubscribe;
        return this;
    ***REMOVED***;
    RepeatWhenSubscriber.prototype.subscribeToRetries = function () ***REMOVED***
        this.notifications = new Subject();
        var retries;
        try ***REMOVED***
            var notifier = this.notifier;
            retries = notifier(this.notifications);
        ***REMOVED***
        catch (e) ***REMOVED***
            return _super.prototype.complete.call(this);
        ***REMOVED***
        this.retries = retries;
        this.retriesSubscription = subscribeToResult(this, retries);
    ***REMOVED***;
    return RepeatWhenSubscriber;
***REMOVED***(OuterSubscriber));
//# sourceMappingURL=repeatWhen.js.map
