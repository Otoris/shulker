/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function count(predicate) ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new CountOperator(predicate, source)); ***REMOVED***;
***REMOVED***
var CountOperator = /*@__PURE__*/ (function () ***REMOVED***
    function CountOperator(predicate, source) ***REMOVED***
        this.predicate = predicate;
        this.source = source;
    ***REMOVED***
    CountOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
    ***REMOVED***;
    return CountOperator;
***REMOVED***());
var CountSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(CountSubscriber, _super);
    function CountSubscriber(destination, predicate, source) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.source = source;
        _this.count = 0;
        _this.index = 0;
        return _this;
    ***REMOVED***
    CountSubscriber.prototype._next = function (value) ***REMOVED***
        if (this.predicate) ***REMOVED***
            this._tryPredicate(value);
        ***REMOVED***
        else ***REMOVED***
            this.count++;
        ***REMOVED***
    ***REMOVED***;
    CountSubscriber.prototype._tryPredicate = function (value) ***REMOVED***
        var result;
        try ***REMOVED***
            result = this.predicate(value, this.index++, this.source);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
            return;
        ***REMOVED***
        if (result) ***REMOVED***
            this.count++;
        ***REMOVED***
    ***REMOVED***;
    CountSubscriber.prototype._complete = function () ***REMOVED***
        this.destination.next(this.count);
        this.destination.complete();
    ***REMOVED***;
    return CountSubscriber;
***REMOVED***(Subscriber));
//# sourceMappingURL=count.js.map
