/** PURE_IMPORTS_START tslib,_util_EmptyError,_Subscriber PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** EmptyError ***REMOVED*** from '../util/EmptyError';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function throwIfEmpty(errorFactory) ***REMOVED***
    if (errorFactory === void 0) ***REMOVED***
        errorFactory = defaultErrorFactory;
    ***REMOVED***
    return function (source) ***REMOVED***
        return source.lift(new ThrowIfEmptyOperator(errorFactory));
    ***REMOVED***;
***REMOVED***
var ThrowIfEmptyOperator = /*@__PURE__*/ (function () ***REMOVED***
    function ThrowIfEmptyOperator(errorFactory) ***REMOVED***
        this.errorFactory = errorFactory;
    ***REMOVED***
    ThrowIfEmptyOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));
    ***REMOVED***;
    return ThrowIfEmptyOperator;
***REMOVED***());
var ThrowIfEmptySubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(ThrowIfEmptySubscriber, _super);
    function ThrowIfEmptySubscriber(destination, errorFactory) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.errorFactory = errorFactory;
        _this.hasValue = false;
        return _this;
    ***REMOVED***
    ThrowIfEmptySubscriber.prototype._next = function (value) ***REMOVED***
        this.hasValue = true;
        this.destination.next(value);
    ***REMOVED***;
    ThrowIfEmptySubscriber.prototype._complete = function () ***REMOVED***
        if (!this.hasValue) ***REMOVED***
            var err = void 0;
            try ***REMOVED***
                err = this.errorFactory();
            ***REMOVED***
            catch (e) ***REMOVED***
                err = e;
            ***REMOVED***
            this.destination.error(err);
        ***REMOVED***
        else ***REMOVED***
            return this.destination.complete();
        ***REMOVED***
    ***REMOVED***;
    return ThrowIfEmptySubscriber;
***REMOVED***(Subscriber));
function defaultErrorFactory() ***REMOVED***
    return new EmptyError();
***REMOVED***
//# sourceMappingURL=throwIfEmpty.js.map
