/** PURE_IMPORTS_START tslib,_Subject,_Subscription,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subject ***REMOVED*** from '../Subject';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function windowToggle(openings, closingSelector) ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new WindowToggleOperator(openings, closingSelector)); ***REMOVED***;
***REMOVED***
var WindowToggleOperator = /*@__PURE__*/ (function () ***REMOVED***
    function WindowToggleOperator(openings, closingSelector) ***REMOVED***
        this.openings = openings;
        this.closingSelector = closingSelector;
    ***REMOVED***
    WindowToggleOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
    ***REMOVED***;
    return WindowToggleOperator;
***REMOVED***());
var WindowToggleSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(WindowToggleSubscriber, _super);
    function WindowToggleSubscriber(destination, openings, closingSelector) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.openings = openings;
        _this.closingSelector = closingSelector;
        _this.contexts = [];
        _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));
        return _this;
    ***REMOVED***
    WindowToggleSubscriber.prototype._next = function (value) ***REMOVED***
        var contexts = this.contexts;
        if (contexts) ***REMOVED***
            var len = contexts.length;
            for (var i = 0; i < len; i++) ***REMOVED***
                contexts[i].window.next(value);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    WindowToggleSubscriber.prototype._error = function (err) ***REMOVED***
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) ***REMOVED***
            var len = contexts.length;
            var index = -1;
            while (++index < len) ***REMOVED***
                var context_1 = contexts[index];
                context_1.window.error(err);
                context_1.subscription.unsubscribe();
            ***REMOVED***
        ***REMOVED***
        _super.prototype._error.call(this, err);
    ***REMOVED***;
    WindowToggleSubscriber.prototype._complete = function () ***REMOVED***
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) ***REMOVED***
            var len = contexts.length;
            var index = -1;
            while (++index < len) ***REMOVED***
                var context_2 = contexts[index];
                context_2.window.complete();
                context_2.subscription.unsubscribe();
            ***REMOVED***
        ***REMOVED***
        _super.prototype._complete.call(this);
    ***REMOVED***;
    WindowToggleSubscriber.prototype._unsubscribe = function () ***REMOVED***
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) ***REMOVED***
            var len = contexts.length;
            var index = -1;
            while (++index < len) ***REMOVED***
                var context_3 = contexts[index];
                context_3.window.unsubscribe();
                context_3.subscription.unsubscribe();
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        if (outerValue === this.openings) ***REMOVED***
            var closingNotifier = void 0;
            try ***REMOVED***
                var closingSelector = this.closingSelector;
                closingNotifier = closingSelector(innerValue);
            ***REMOVED***
            catch (e) ***REMOVED***
                return this.error(e);
            ***REMOVED***
            var window_1 = new Subject();
            var subscription = new Subscription();
            var context_4 = ***REMOVED*** window: window_1, subscription: subscription ***REMOVED***;
            this.contexts.push(context_4);
            var innerSubscription = subscribeToResult(this, closingNotifier, context_4);
            if (innerSubscription.closed) ***REMOVED***
                this.closeWindow(this.contexts.length - 1);
            ***REMOVED***
            else ***REMOVED***
                innerSubscription.context = context_4;
                subscription.add(innerSubscription);
            ***REMOVED***
            this.destination.next(window_1);
        ***REMOVED***
        else ***REMOVED***
            this.closeWindow(this.contexts.indexOf(outerValue));
        ***REMOVED***
    ***REMOVED***;
    WindowToggleSubscriber.prototype.notifyError = function (err) ***REMOVED***
        this.error(err);
    ***REMOVED***;
    WindowToggleSubscriber.prototype.notifyComplete = function (inner) ***REMOVED***
        if (inner !== this.openSubscription) ***REMOVED***
            this.closeWindow(this.contexts.indexOf(inner.context));
        ***REMOVED***
    ***REMOVED***;
    WindowToggleSubscriber.prototype.closeWindow = function (index) ***REMOVED***
        if (index === -1) ***REMOVED***
            return;
        ***REMOVED***
        var contexts = this.contexts;
        var context = contexts[index];
        var window = context.window, subscription = context.subscription;
        contexts.splice(index, 1);
        window.complete();
        subscription.unsubscribe();
    ***REMOVED***;
    return WindowToggleSubscriber;
***REMOVED***(OuterSubscriber));
//# sourceMappingURL=windowToggle.js.map
