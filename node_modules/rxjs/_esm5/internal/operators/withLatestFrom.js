/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function withLatestFrom() ***REMOVED***
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
        args[_i] = arguments[_i];
    ***REMOVED***
    return function (source) ***REMOVED***
        var project;
        if (typeof args[args.length - 1] === 'function') ***REMOVED***
            project = args.pop();
        ***REMOVED***
        var observables = args;
        return source.lift(new WithLatestFromOperator(observables, project));
    ***REMOVED***;
***REMOVED***
var WithLatestFromOperator = /*@__PURE__*/ (function () ***REMOVED***
    function WithLatestFromOperator(observables, project) ***REMOVED***
        this.observables = observables;
        this.project = project;
    ***REMOVED***
    WithLatestFromOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
    ***REMOVED***;
    return WithLatestFromOperator;
***REMOVED***());
var WithLatestFromSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(WithLatestFromSubscriber, _super);
    function WithLatestFromSubscriber(destination, observables, project) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.observables = observables;
        _this.project = project;
        _this.toRespond = [];
        var len = observables.length;
        _this.values = new Array(len);
        for (var i = 0; i < len; i++) ***REMOVED***
            _this.toRespond.push(i);
        ***REMOVED***
        for (var i = 0; i < len; i++) ***REMOVED***
            var observable = observables[i];
            _this.add(subscribeToResult(_this, observable, observable, i));
        ***REMOVED***
        return _this;
    ***REMOVED***
    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.values[outerIndex] = innerValue;
        var toRespond = this.toRespond;
        if (toRespond.length > 0) ***REMOVED***
            var found = toRespond.indexOf(outerIndex);
            if (found !== -1) ***REMOVED***
                toRespond.splice(found, 1);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    WithLatestFromSubscriber.prototype.notifyComplete = function () ***REMOVED***
    ***REMOVED***;
    WithLatestFromSubscriber.prototype._next = function (value) ***REMOVED***
        if (this.toRespond.length === 0) ***REMOVED***
            var args = [value].concat(this.values);
            if (this.project) ***REMOVED***
                this._tryProject(args);
            ***REMOVED***
            else ***REMOVED***
                this.destination.next(args);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    WithLatestFromSubscriber.prototype._tryProject = function (args) ***REMOVED***
        var result;
        try ***REMOVED***
            result = this.project.apply(this, args);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
            return;
        ***REMOVED***
        this.destination.next(result);
    ***REMOVED***;
    return WithLatestFromSubscriber;
***REMOVED***(OuterSubscriber));
//# sourceMappingURL=withLatestFrom.js.map
