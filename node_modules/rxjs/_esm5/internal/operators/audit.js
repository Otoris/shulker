/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function audit(durationSelector) ***REMOVED***
    return function auditOperatorFunction(source) ***REMOVED***
        return source.lift(new AuditOperator(durationSelector));
    ***REMOVED***;
***REMOVED***
var AuditOperator = /*@__PURE__*/ (function () ***REMOVED***
    function AuditOperator(durationSelector) ***REMOVED***
        this.durationSelector = durationSelector;
    ***REMOVED***
    AuditOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
    ***REMOVED***;
    return AuditOperator;
***REMOVED***());
var AuditSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(AuditSubscriber, _super);
    function AuditSubscriber(destination, durationSelector) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.durationSelector = durationSelector;
        _this.hasValue = false;
        return _this;
    ***REMOVED***
    AuditSubscriber.prototype._next = function (value) ***REMOVED***
        this.value = value;
        this.hasValue = true;
        if (!this.throttled) ***REMOVED***
            var duration = void 0;
            try ***REMOVED***
                var durationSelector = this.durationSelector;
                duration = durationSelector(value);
            ***REMOVED***
            catch (err) ***REMOVED***
                return this.destination.error(err);
            ***REMOVED***
            var innerSubscription = subscribeToResult(this, duration);
            if (!innerSubscription || innerSubscription.closed) ***REMOVED***
                this.clearThrottle();
            ***REMOVED***
            else ***REMOVED***
                this.add(this.throttled = innerSubscription);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    AuditSubscriber.prototype.clearThrottle = function () ***REMOVED***
        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
        if (throttled) ***REMOVED***
            this.remove(throttled);
            this.throttled = null;
            throttled.unsubscribe();
        ***REMOVED***
        if (hasValue) ***REMOVED***
            this.value = null;
            this.hasValue = false;
            this.destination.next(value);
        ***REMOVED***
    ***REMOVED***;
    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) ***REMOVED***
        this.clearThrottle();
    ***REMOVED***;
    AuditSubscriber.prototype.notifyComplete = function () ***REMOVED***
        this.clearThrottle();
    ***REMOVED***;
    return AuditSubscriber;
***REMOVED***(OuterSubscriber));
//# sourceMappingURL=audit.js.map
