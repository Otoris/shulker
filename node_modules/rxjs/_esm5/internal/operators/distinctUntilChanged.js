/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function distinctUntilChanged(compare, keySelector) ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); ***REMOVED***;
***REMOVED***
var DistinctUntilChangedOperator = /*@__PURE__*/ (function () ***REMOVED***
    function DistinctUntilChangedOperator(compare, keySelector) ***REMOVED***
        this.compare = compare;
        this.keySelector = keySelector;
    ***REMOVED***
    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
    ***REMOVED***;
    return DistinctUntilChangedOperator;
***REMOVED***());
var DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(DistinctUntilChangedSubscriber, _super);
    function DistinctUntilChangedSubscriber(destination, compare, keySelector) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.hasKey = false;
        if (typeof compare === 'function') ***REMOVED***
            _this.compare = compare;
        ***REMOVED***
        return _this;
    ***REMOVED***
    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) ***REMOVED***
        return x === y;
    ***REMOVED***;
    DistinctUntilChangedSubscriber.prototype._next = function (value) ***REMOVED***
        var key;
        try ***REMOVED***
            var keySelector = this.keySelector;
            key = keySelector ? keySelector(value) : value;
        ***REMOVED***
        catch (err) ***REMOVED***
            return this.destination.error(err);
        ***REMOVED***
        var result = false;
        if (this.hasKey) ***REMOVED***
            try ***REMOVED***
                var compare = this.compare;
                result = compare(this.key, key);
            ***REMOVED***
            catch (err) ***REMOVED***
                return this.destination.error(err);
            ***REMOVED***
        ***REMOVED***
        else ***REMOVED***
            this.hasKey = true;
        ***REMOVED***
        if (!result) ***REMOVED***
            this.key = key;
            this.destination.next(value);
        ***REMOVED***
    ***REMOVED***;
    return DistinctUntilChangedSubscriber;
***REMOVED***(Subscriber));
//# sourceMappingURL=distinctUntilChanged.js.map
