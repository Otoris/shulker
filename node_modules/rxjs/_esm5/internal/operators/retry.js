/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function retry(count) ***REMOVED***
    if (count === void 0) ***REMOVED***
        count = -1;
    ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new RetryOperator(count, source)); ***REMOVED***;
***REMOVED***
var RetryOperator = /*@__PURE__*/ (function () ***REMOVED***
    function RetryOperator(count, source) ***REMOVED***
        this.count = count;
        this.source = source;
    ***REMOVED***
    RetryOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
    ***REMOVED***;
    return RetryOperator;
***REMOVED***());
var RetrySubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(RetrySubscriber, _super);
    function RetrySubscriber(destination, count, source) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.count = count;
        _this.source = source;
        return _this;
    ***REMOVED***
    RetrySubscriber.prototype.error = function (err) ***REMOVED***
        if (!this.isStopped) ***REMOVED***
            var _a = this, source = _a.source, count = _a.count;
            if (count === 0) ***REMOVED***
                return _super.prototype.error.call(this, err);
            ***REMOVED***
            else if (count > -1) ***REMOVED***
                this.count = count - 1;
            ***REMOVED***
            source.subscribe(this._unsubscribeAndRecycle());
        ***REMOVED***
    ***REMOVED***;
    return RetrySubscriber;
***REMOVED***(Subscriber));
//# sourceMappingURL=retry.js.map
