/** PURE_IMPORTS_START tslib,_Subject,_Subscription,_SubscriptionLoggable,_util_applyMixins PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** Subject ***REMOVED*** from '../Subject';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** SubscriptionLoggable ***REMOVED*** from './SubscriptionLoggable';
import ***REMOVED*** applyMixins ***REMOVED*** from '../util/applyMixins';
var HotObservable = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(HotObservable, _super);
    function HotObservable(messages, scheduler) ***REMOVED***
        var _this = _super.call(this) || this;
        _this.messages = messages;
        _this.subscriptions = [];
        _this.scheduler = scheduler;
        return _this;
    ***REMOVED***
    HotObservable.prototype._subscribe = function (subscriber) ***REMOVED***
        var subject = this;
        var index = subject.logSubscribedFrame();
        var subscription = new Subscription();
        subscription.add(new Subscription(function () ***REMOVED***
            subject.logUnsubscribedFrame(index);
        ***REMOVED***));
        subscription.add(_super.prototype._subscribe.call(this, subscriber));
        return subscription;
    ***REMOVED***;
    HotObservable.prototype.setup = function () ***REMOVED***
        var subject = this;
        var messagesLength = subject.messages.length;
        for (var i = 0; i < messagesLength; i++) ***REMOVED***
            (function () ***REMOVED***
                var message = subject.messages[i];
                subject.scheduler.schedule(function () ***REMOVED*** message.notification.observe(subject); ***REMOVED***, message.frame);
            ***REMOVED***)();
        ***REMOVED***
    ***REMOVED***;
    return HotObservable;
***REMOVED***(Subject));
export ***REMOVED*** HotObservable ***REMOVED***;
/*@__PURE__*/ applyMixins(HotObservable, [SubscriptionLoggable]);
//# sourceMappingURL=HotObservable.js.map
