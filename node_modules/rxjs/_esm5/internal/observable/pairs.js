/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
export function pairs(obj, scheduler) ***REMOVED***
    if (!scheduler) ***REMOVED***
        return new Observable(function (subscriber) ***REMOVED***
            var keys = Object.keys(obj);
            for (var i = 0; i < keys.length && !subscriber.closed; i++) ***REMOVED***
                var key = keys[i];
                if (obj.hasOwnProperty(key)) ***REMOVED***
                    subscriber.next([key, obj[key]]);
                ***REMOVED***
            ***REMOVED***
            subscriber.complete();
        ***REMOVED***);
    ***REMOVED***
    else ***REMOVED***
        return new Observable(function (subscriber) ***REMOVED***
            var keys = Object.keys(obj);
            var subscription = new Subscription();
            subscription.add(scheduler.schedule(dispatch, 0, ***REMOVED*** keys: keys, index: 0, subscriber: subscriber, subscription: subscription, obj: obj ***REMOVED***));
            return subscription;
        ***REMOVED***);
    ***REMOVED***
***REMOVED***
export function dispatch(state) ***REMOVED***
    var keys = state.keys, index = state.index, subscriber = state.subscriber, subscription = state.subscription, obj = state.obj;
    if (!subscriber.closed) ***REMOVED***
        if (index < keys.length) ***REMOVED***
            var key = keys[index];
            subscriber.next([key, obj[key]]);
            subscription.add(this.schedule(***REMOVED*** keys: keys, index: index + 1, subscriber: subscriber, subscription: subscription, obj: obj ***REMOVED***));
        ***REMOVED***
        else ***REMOVED***
            subscriber.complete();
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=pairs.js.map
