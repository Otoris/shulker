/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** isArray ***REMOVED*** from '../util/isArray';
import ***REMOVED*** fromArray ***REMOVED*** from './fromArray';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function race() ***REMOVED***
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
        observables[_i] = arguments[_i];
    ***REMOVED***
    if (observables.length === 1) ***REMOVED***
        if (isArray(observables[0])) ***REMOVED***
            observables = observables[0];
        ***REMOVED***
        else ***REMOVED***
            return observables[0];
        ***REMOVED***
    ***REMOVED***
    return fromArray(observables, undefined).lift(new RaceOperator());
***REMOVED***
var RaceOperator = /*@__PURE__*/ (function () ***REMOVED***
    function RaceOperator() ***REMOVED***
    ***REMOVED***
    RaceOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new RaceSubscriber(subscriber));
    ***REMOVED***;
    return RaceOperator;
***REMOVED***());
export ***REMOVED*** RaceOperator ***REMOVED***;
var RaceSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(RaceSubscriber, _super);
    function RaceSubscriber(destination) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.hasFirst = false;
        _this.observables = [];
        _this.subscriptions = [];
        return _this;
    ***REMOVED***
    RaceSubscriber.prototype._next = function (observable) ***REMOVED***
        this.observables.push(observable);
    ***REMOVED***;
    RaceSubscriber.prototype._complete = function () ***REMOVED***
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
        else ***REMOVED***
            for (var i = 0; i < len && !this.hasFirst; i++) ***REMOVED***
                var observable = observables[i];
                var subscription = subscribeToResult(this, observable, observable, i);
                if (this.subscriptions) ***REMOVED***
                    this.subscriptions.push(subscription);
                ***REMOVED***
                this.add(subscription);
            ***REMOVED***
            this.observables = null;
        ***REMOVED***
    ***REMOVED***;
    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        if (!this.hasFirst) ***REMOVED***
            this.hasFirst = true;
            for (var i = 0; i < this.subscriptions.length; i++) ***REMOVED***
                if (i !== outerIndex) ***REMOVED***
                    var subscription = this.subscriptions[i];
                    subscription.unsubscribe();
                    this.remove(subscription);
                ***REMOVED***
            ***REMOVED***
            this.subscriptions = null;
        ***REMOVED***
        this.destination.next(innerValue);
    ***REMOVED***;
    return RaceSubscriber;
***REMOVED***(OuterSubscriber));
export ***REMOVED*** RaceSubscriber ***REMOVED***;
//# sourceMappingURL=race.js.map
