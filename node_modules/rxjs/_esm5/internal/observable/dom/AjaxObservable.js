/** PURE_IMPORTS_START tslib,_.._util_root,_.._Observable,_.._Subscriber,_.._operators_map PURE_IMPORTS_END */
import * as tslib_1 from "tslib";
import ***REMOVED*** root ***REMOVED*** from '../../util/root';
import ***REMOVED*** Observable ***REMOVED*** from '../../Observable';
import ***REMOVED*** Subscriber ***REMOVED*** from '../../Subscriber';
import ***REMOVED*** map ***REMOVED*** from '../../operators/map';
function getCORSRequest() ***REMOVED***
    if (root.XMLHttpRequest) ***REMOVED***
        return new root.XMLHttpRequest();
    ***REMOVED***
    else if (!!root.XDomainRequest) ***REMOVED***
        return new root.XDomainRequest();
    ***REMOVED***
    else ***REMOVED***
        throw new Error('CORS is not supported by your browser');
    ***REMOVED***
***REMOVED***
function getXMLHttpRequest() ***REMOVED***
    if (root.XMLHttpRequest) ***REMOVED***
        return new root.XMLHttpRequest();
    ***REMOVED***
    else ***REMOVED***
        var progId = void 0;
        try ***REMOVED***
            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];
            for (var i = 0; i < 3; i++) ***REMOVED***
                try ***REMOVED***
                    progId = progIds[i];
                    if (new root.ActiveXObject(progId)) ***REMOVED***
                        break;
                    ***REMOVED***
                ***REMOVED***
                catch (e) ***REMOVED***
                ***REMOVED***
            ***REMOVED***
            return new root.ActiveXObject(progId);
        ***REMOVED***
        catch (e) ***REMOVED***
            throw new Error('XMLHttpRequest is not supported by your browser');
        ***REMOVED***
    ***REMOVED***
***REMOVED***
export function ajaxGet(url, headers) ***REMOVED***
    if (headers === void 0) ***REMOVED***
        headers = null;
    ***REMOVED***
    return new AjaxObservable(***REMOVED*** method: 'GET', url: url, headers: headers ***REMOVED***);
***REMOVED***
export function ajaxPost(url, body, headers) ***REMOVED***
    return new AjaxObservable(***REMOVED*** method: 'POST', url: url, body: body, headers: headers ***REMOVED***);
***REMOVED***
export function ajaxDelete(url, headers) ***REMOVED***
    return new AjaxObservable(***REMOVED*** method: 'DELETE', url: url, headers: headers ***REMOVED***);
***REMOVED***
export function ajaxPut(url, body, headers) ***REMOVED***
    return new AjaxObservable(***REMOVED*** method: 'PUT', url: url, body: body, headers: headers ***REMOVED***);
***REMOVED***
export function ajaxPatch(url, body, headers) ***REMOVED***
    return new AjaxObservable(***REMOVED*** method: 'PATCH', url: url, body: body, headers: headers ***REMOVED***);
***REMOVED***
var mapResponse = /*@__PURE__*/ map(function (x, index) ***REMOVED*** return x.response; ***REMOVED***);
export function ajaxGetJSON(url, headers) ***REMOVED***
    return mapResponse(new AjaxObservable(***REMOVED***
        method: 'GET',
        url: url,
        responseType: 'json',
        headers: headers
    ***REMOVED***));
***REMOVED***
var AjaxObservable = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(AjaxObservable, _super);
    function AjaxObservable(urlOrRequest) ***REMOVED***
        var _this = _super.call(this) || this;
        var request = ***REMOVED***
            async: true,
            createXHR: function () ***REMOVED***
                return this.crossDomain ? getCORSRequest() : getXMLHttpRequest();
            ***REMOVED***,
            crossDomain: true,
            withCredentials: false,
            headers: ***REMOVED******REMOVED***,
            method: 'GET',
            responseType: 'json',
            timeout: 0
        ***REMOVED***;
        if (typeof urlOrRequest === 'string') ***REMOVED***
            request.url = urlOrRequest;
        ***REMOVED***
        else ***REMOVED***
            for (var prop in urlOrRequest) ***REMOVED***
                if (urlOrRequest.hasOwnProperty(prop)) ***REMOVED***
                    request[prop] = urlOrRequest[prop];
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        _this.request = request;
        return _this;
    ***REMOVED***
    AjaxObservable.prototype._subscribe = function (subscriber) ***REMOVED***
        return new AjaxSubscriber(subscriber, this.request);
    ***REMOVED***;
    AjaxObservable.create = (function () ***REMOVED***
        var create = function (urlOrRequest) ***REMOVED***
            return new AjaxObservable(urlOrRequest);
        ***REMOVED***;
        create.get = ajaxGet;
        create.post = ajaxPost;
        create.delete = ajaxDelete;
        create.put = ajaxPut;
        create.patch = ajaxPatch;
        create.getJSON = ajaxGetJSON;
        return create;
    ***REMOVED***)();
    return AjaxObservable;
***REMOVED***(Observable));
export ***REMOVED*** AjaxObservable ***REMOVED***;
var AjaxSubscriber = /*@__PURE__*/ (function (_super) ***REMOVED***
    tslib_1.__extends(AjaxSubscriber, _super);
    function AjaxSubscriber(destination, request) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.request = request;
        _this.done = false;
        var headers = request.headers = request.headers || ***REMOVED******REMOVED***;
        if (!request.crossDomain && !_this.getHeader(headers, 'X-Requested-With')) ***REMOVED***
            headers['X-Requested-With'] = 'XMLHttpRequest';
        ***REMOVED***
        var contentTypeHeader = _this.getHeader(headers, 'Content-Type');
        if (!contentTypeHeader && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') ***REMOVED***
            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
        ***REMOVED***
        request.body = _this.serializeBody(request.body, _this.getHeader(request.headers, 'Content-Type'));
        _this.send();
        return _this;
    ***REMOVED***
    AjaxSubscriber.prototype.next = function (e) ***REMOVED***
        this.done = true;
        var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;
        var result;
        try ***REMOVED***
            result = new AjaxResponse(e, xhr, request);
        ***REMOVED***
        catch (err) ***REMOVED***
            return destination.error(err);
        ***REMOVED***
        destination.next(result);
    ***REMOVED***;
    AjaxSubscriber.prototype.send = function () ***REMOVED***
        var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;
        try ***REMOVED***
            var xhr = this.xhr = request.createXHR();
            this.setupEvents(xhr, request);
            if (user) ***REMOVED***
                xhr.open(method, url, async, user, password);
            ***REMOVED***
            else ***REMOVED***
                xhr.open(method, url, async);
            ***REMOVED***
            if (async) ***REMOVED***
                xhr.timeout = request.timeout;
                xhr.responseType = request.responseType;
            ***REMOVED***
            if ('withCredentials' in xhr) ***REMOVED***
                xhr.withCredentials = !!request.withCredentials;
            ***REMOVED***
            this.setHeaders(xhr, headers);
            if (body) ***REMOVED***
                xhr.send(body);
            ***REMOVED***
            else ***REMOVED***
                xhr.send();
            ***REMOVED***
        ***REMOVED***
        catch (err) ***REMOVED***
            this.error(err);
        ***REMOVED***
    ***REMOVED***;
    AjaxSubscriber.prototype.serializeBody = function (body, contentType) ***REMOVED***
        if (!body || typeof body === 'string') ***REMOVED***
            return body;
        ***REMOVED***
        else if (root.FormData && body instanceof root.FormData) ***REMOVED***
            return body;
        ***REMOVED***
        if (contentType) ***REMOVED***
            var splitIndex = contentType.indexOf(';');
            if (splitIndex !== -1) ***REMOVED***
                contentType = contentType.substring(0, splitIndex);
            ***REMOVED***
        ***REMOVED***
        switch (contentType) ***REMOVED***
            case 'application/x-www-form-urlencoded':
                return Object.keys(body).map(function (key) ***REMOVED*** return encodeURIComponent(key) + "=" + encodeURIComponent(body[key]); ***REMOVED***).join('&');
            case 'application/json':
                return JSON.stringify(body);
            default:
                return body;
        ***REMOVED***
    ***REMOVED***;
    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) ***REMOVED***
        for (var key in headers) ***REMOVED***
            if (headers.hasOwnProperty(key)) ***REMOVED***
                xhr.setRequestHeader(key, headers[key]);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    AjaxSubscriber.prototype.getHeader = function (headers, headerName) ***REMOVED***
        for (var key in headers) ***REMOVED***
            if (key.toLowerCase() === headerName.toLowerCase()) ***REMOVED***
                return headers[key];
            ***REMOVED***
        ***REMOVED***
        return undefined;
    ***REMOVED***;
    AjaxSubscriber.prototype.setupEvents = function (xhr, request) ***REMOVED***
        var progressSubscriber = request.progressSubscriber;
        function xhrTimeout(e) ***REMOVED***
            var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;
            if (progressSubscriber) ***REMOVED***
                progressSubscriber.error(e);
            ***REMOVED***
            var error;
            try ***REMOVED***
                error = new AjaxTimeoutError(this, request);
            ***REMOVED***
            catch (err) ***REMOVED***
                error = err;
            ***REMOVED***
            subscriber.error(error);
        ***REMOVED***
        xhr.ontimeout = xhrTimeout;
        xhrTimeout.request = request;
        xhrTimeout.subscriber = this;
        xhrTimeout.progressSubscriber = progressSubscriber;
        if (xhr.upload && 'withCredentials' in xhr) ***REMOVED***
            if (progressSubscriber) ***REMOVED***
                var xhrProgress_1;
                xhrProgress_1 = function (e) ***REMOVED***
                    var progressSubscriber = xhrProgress_1.progressSubscriber;
                    progressSubscriber.next(e);
                ***REMOVED***;
                if (root.XDomainRequest) ***REMOVED***
                    xhr.onprogress = xhrProgress_1;
                ***REMOVED***
                else ***REMOVED***
                    xhr.upload.onprogress = xhrProgress_1;
                ***REMOVED***
                xhrProgress_1.progressSubscriber = progressSubscriber;
            ***REMOVED***
            var xhrError_1;
            xhrError_1 = function (e) ***REMOVED***
                var _a = xhrError_1, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;
                if (progressSubscriber) ***REMOVED***
                    progressSubscriber.error(e);
                ***REMOVED***
                var error;
                try ***REMOVED***
                    error = new AjaxError('ajax error', this, request);
                ***REMOVED***
                catch (err) ***REMOVED***
                    error = err;
                ***REMOVED***
                subscriber.error(error);
            ***REMOVED***;
            xhr.onerror = xhrError_1;
            xhrError_1.request = request;
            xhrError_1.subscriber = this;
            xhrError_1.progressSubscriber = progressSubscriber;
        ***REMOVED***
        function xhrReadyStateChange(e) ***REMOVED***
            return;
        ***REMOVED***
        xhr.onreadystatechange = xhrReadyStateChange;
        xhrReadyStateChange.subscriber = this;
        xhrReadyStateChange.progressSubscriber = progressSubscriber;
        xhrReadyStateChange.request = request;
        function xhrLoad(e) ***REMOVED***
            var _a = xhrLoad, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;
            if (this.readyState === 4) ***REMOVED***
                var status_1 = this.status === 1223 ? 204 : this.status;
                var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);
                if (status_1 === 0) ***REMOVED***
                    status_1 = response ? 200 : 0;
                ***REMOVED***
                if (status_1 < 400) ***REMOVED***
                    if (progressSubscriber) ***REMOVED***
                        progressSubscriber.complete();
                    ***REMOVED***
                    subscriber.next(e);
                    subscriber.complete();
                ***REMOVED***
                else ***REMOVED***
                    if (progressSubscriber) ***REMOVED***
                        progressSubscriber.error(e);
                    ***REMOVED***
                    var error = void 0;
                    try ***REMOVED***
                        error = new AjaxError('ajax error ' + status_1, this, request);
                    ***REMOVED***
                    catch (err) ***REMOVED***
                        error = err;
                    ***REMOVED***
                    subscriber.error(error);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        xhr.onload = xhrLoad;
        xhrLoad.subscriber = this;
        xhrLoad.progressSubscriber = progressSubscriber;
        xhrLoad.request = request;
    ***REMOVED***;
    AjaxSubscriber.prototype.unsubscribe = function () ***REMOVED***
        var _a = this, done = _a.done, xhr = _a.xhr;
        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') ***REMOVED***
            xhr.abort();
        ***REMOVED***
        _super.prototype.unsubscribe.call(this);
    ***REMOVED***;
    return AjaxSubscriber;
***REMOVED***(Subscriber));
export ***REMOVED*** AjaxSubscriber ***REMOVED***;
var AjaxResponse = /*@__PURE__*/ (function () ***REMOVED***
    function AjaxResponse(originalEvent, xhr, request) ***REMOVED***
        this.originalEvent = originalEvent;
        this.xhr = xhr;
        this.request = request;
        this.status = xhr.status;
        this.responseType = xhr.responseType || request.responseType;
        this.response = parseXhrResponse(this.responseType, xhr);
    ***REMOVED***
    return AjaxResponse;
***REMOVED***());
export ***REMOVED*** AjaxResponse ***REMOVED***;
var AjaxErrorImpl = /*@__PURE__*/ (function () ***REMOVED***
    function AjaxErrorImpl(message, xhr, request) ***REMOVED***
        Error.call(this);
        this.message = message;
        this.name = 'AjaxError';
        this.xhr = xhr;
        this.request = request;
        this.status = xhr.status;
        this.responseType = xhr.responseType || request.responseType;
        this.response = parseXhrResponse(this.responseType, xhr);
        return this;
    ***REMOVED***
    AjaxErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    return AjaxErrorImpl;
***REMOVED***)();
export var AjaxError = AjaxErrorImpl;
function parseJson(xhr) ***REMOVED***
    if ('response' in xhr) ***REMOVED***
        return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');
    ***REMOVED***
    else ***REMOVED***
        return JSON.parse(xhr.responseText || 'null');
    ***REMOVED***
***REMOVED***
function parseXhrResponse(responseType, xhr) ***REMOVED***
    switch (responseType) ***REMOVED***
        case 'json':
            return parseJson(xhr);
        case 'xml':
            return xhr.responseXML;
        case 'text':
        default:
            return ('response' in xhr) ? xhr.response : xhr.responseText;
    ***REMOVED***
***REMOVED***
function AjaxTimeoutErrorImpl(xhr, request) ***REMOVED***
    AjaxError.call(this, 'ajax timeout', xhr, request);
    this.name = 'AjaxTimeoutError';
    return this;
***REMOVED***
export var AjaxTimeoutError = AjaxTimeoutErrorImpl;
//# sourceMappingURL=AjaxObservable.js.map
