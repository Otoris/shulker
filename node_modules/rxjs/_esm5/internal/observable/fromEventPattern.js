/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** isArray ***REMOVED*** from '../util/isArray';
import ***REMOVED*** isFunction ***REMOVED*** from '../util/isFunction';
import ***REMOVED*** map ***REMOVED*** from '../operators/map';
export function fromEventPattern(addHandler, removeHandler, resultSelector) ***REMOVED***
    if (resultSelector) ***REMOVED***
        return fromEventPattern(addHandler, removeHandler).pipe(map(function (args) ***REMOVED*** return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); ***REMOVED***));
    ***REMOVED***
    return new Observable(function (subscriber) ***REMOVED***
        var handler = function () ***REMOVED***
            var e = [];
            for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
                e[_i] = arguments[_i];
            ***REMOVED***
            return subscriber.next(e.length === 1 ? e[0] : e);
        ***REMOVED***;
        var retValue;
        try ***REMOVED***
            retValue = addHandler(handler);
        ***REMOVED***
        catch (err) ***REMOVED***
            subscriber.error(err);
            return undefined;
        ***REMOVED***
        if (!isFunction(removeHandler)) ***REMOVED***
            return undefined;
        ***REMOVED***
        return function () ***REMOVED*** return removeHandler(handler, retValue); ***REMOVED***;
    ***REMOVED***);
***REMOVED***
//# sourceMappingURL=fromEventPattern.js.map
