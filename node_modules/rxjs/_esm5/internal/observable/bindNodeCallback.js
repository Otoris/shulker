/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isScheduler,_util_isArray PURE_IMPORTS_END */
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** AsyncSubject ***REMOVED*** from '../AsyncSubject';
import ***REMOVED*** map ***REMOVED*** from '../operators/map';
import ***REMOVED*** canReportError ***REMOVED*** from '../util/canReportError';
import ***REMOVED*** isScheduler ***REMOVED*** from '../util/isScheduler';
import ***REMOVED*** isArray ***REMOVED*** from '../util/isArray';
export function bindNodeCallback(callbackFunc, resultSelector, scheduler) ***REMOVED***
    if (resultSelector) ***REMOVED***
        if (isScheduler(resultSelector)) ***REMOVED***
            scheduler = resultSelector;
        ***REMOVED***
        else ***REMOVED***
            return function () ***REMOVED***
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
                    args[_i] = arguments[_i];
                ***REMOVED***
                return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) ***REMOVED*** return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); ***REMOVED***));
            ***REMOVED***;
        ***REMOVED***
    ***REMOVED***
    return function () ***REMOVED***
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
            args[_i] = arguments[_i];
        ***REMOVED***
        var params = ***REMOVED***
            subject: undefined,
            args: args,
            callbackFunc: callbackFunc,
            scheduler: scheduler,
            context: this,
        ***REMOVED***;
        return new Observable(function (subscriber) ***REMOVED***
            var context = params.context;
            var subject = params.subject;
            if (!scheduler) ***REMOVED***
                if (!subject) ***REMOVED***
                    subject = params.subject = new AsyncSubject();
                    var handler = function () ***REMOVED***
                        var innerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
                            innerArgs[_i] = arguments[_i];
                        ***REMOVED***
                        var err = innerArgs.shift();
                        if (err) ***REMOVED***
                            subject.error(err);
                            return;
                        ***REMOVED***
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    ***REMOVED***;
                    try ***REMOVED***
                        callbackFunc.apply(context, args.concat([handler]));
                    ***REMOVED***
                    catch (err) ***REMOVED***
                        if (canReportError(subject)) ***REMOVED***
                            subject.error(err);
                        ***REMOVED***
                        else ***REMOVED***
                            console.warn(err);
                        ***REMOVED***
                    ***REMOVED***
                ***REMOVED***
                return subject.subscribe(subscriber);
            ***REMOVED***
            else ***REMOVED***
                return scheduler.schedule(dispatch, 0, ***REMOVED*** params: params, subscriber: subscriber, context: context ***REMOVED***);
            ***REMOVED***
        ***REMOVED***);
    ***REMOVED***;
***REMOVED***
function dispatch(state) ***REMOVED***
    var _this = this;
    var params = state.params, subscriber = state.subscriber, context = state.context;
    var callbackFunc = params.callbackFunc, args = params.args, scheduler = params.scheduler;
    var subject = params.subject;
    if (!subject) ***REMOVED***
        subject = params.subject = new AsyncSubject();
        var handler = function () ***REMOVED***
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
                innerArgs[_i] = arguments[_i];
            ***REMOVED***
            var err = innerArgs.shift();
            if (err) ***REMOVED***
                _this.add(scheduler.schedule(dispatchError, 0, ***REMOVED*** err: err, subject: subject ***REMOVED***));
            ***REMOVED***
            else ***REMOVED***
                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
                _this.add(scheduler.schedule(dispatchNext, 0, ***REMOVED*** value: value, subject: subject ***REMOVED***));
            ***REMOVED***
        ***REMOVED***;
        try ***REMOVED***
            callbackFunc.apply(context, args.concat([handler]));
        ***REMOVED***
        catch (err) ***REMOVED***
            this.add(scheduler.schedule(dispatchError, 0, ***REMOVED*** err: err, subject: subject ***REMOVED***));
        ***REMOVED***
    ***REMOVED***
    this.add(subject.subscribe(subscriber));
***REMOVED***
function dispatchNext(arg) ***REMOVED***
    var value = arg.value, subject = arg.subject;
    subject.next(value);
    subject.complete();
***REMOVED***
function dispatchError(arg) ***REMOVED***
    var err = arg.err, subject = arg.subject;
    subject.error(err);
***REMOVED***
//# sourceMappingURL=bindNodeCallback.js.map
