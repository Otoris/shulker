/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */
import ***REMOVED*** canReportError ***REMOVED*** from './util/canReportError';
import ***REMOVED*** toSubscriber ***REMOVED*** from './util/toSubscriber';
import ***REMOVED*** observable as Symbol_observable ***REMOVED*** from './symbol/observable';
import ***REMOVED*** pipeFromArray ***REMOVED*** from './util/pipe';
import ***REMOVED*** config ***REMOVED*** from './config';
var Observable = /*@__PURE__*/ (function () ***REMOVED***
    function Observable(subscribe) ***REMOVED***
        this._isScalar = false;
        if (subscribe) ***REMOVED***
            this._subscribe = subscribe;
        ***REMOVED***
    ***REMOVED***
    Observable.prototype.lift = function (operator) ***REMOVED***
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    ***REMOVED***;
    Observable.prototype.subscribe = function (observerOrNext, error, complete) ***REMOVED***
        var operator = this.operator;
        var sink = toSubscriber(observerOrNext, error, complete);
        if (operator) ***REMOVED***
            sink.add(operator.call(sink, this.source));
        ***REMOVED***
        else ***REMOVED***
            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
                this._subscribe(sink) :
                this._trySubscribe(sink));
        ***REMOVED***
        if (config.useDeprecatedSynchronousErrorHandling) ***REMOVED***
            if (sink.syncErrorThrowable) ***REMOVED***
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) ***REMOVED***
                    throw sink.syncErrorValue;
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        return sink;
    ***REMOVED***;
    Observable.prototype._trySubscribe = function (sink) ***REMOVED***
        try ***REMOVED***
            return this._subscribe(sink);
        ***REMOVED***
        catch (err) ***REMOVED***
            if (config.useDeprecatedSynchronousErrorHandling) ***REMOVED***
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
            ***REMOVED***
            if (canReportError(sink)) ***REMOVED***
                sink.error(err);
            ***REMOVED***
            else ***REMOVED***
                console.warn(err);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    Observable.prototype.forEach = function (next, promiseCtor) ***REMOVED***
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) ***REMOVED***
            var subscription;
            subscription = _this.subscribe(function (value) ***REMOVED***
                try ***REMOVED***
                    next(value);
                ***REMOVED***
                catch (err) ***REMOVED***
                    reject(err);
                    if (subscription) ***REMOVED***
                        subscription.unsubscribe();
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***, reject, resolve);
        ***REMOVED***);
    ***REMOVED***;
    Observable.prototype._subscribe = function (subscriber) ***REMOVED***
        var source = this.source;
        return source && source.subscribe(subscriber);
    ***REMOVED***;
    Observable.prototype[Symbol_observable] = function () ***REMOVED***
        return this;
    ***REMOVED***;
    Observable.prototype.pipe = function () ***REMOVED***
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
            operations[_i] = arguments[_i];
        ***REMOVED***
        if (operations.length === 0) ***REMOVED***
            return this;
        ***REMOVED***
        return pipeFromArray(operations)(this);
    ***REMOVED***;
    Observable.prototype.toPromise = function (promiseCtor) ***REMOVED***
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) ***REMOVED***
            var value;
            _this.subscribe(function (x) ***REMOVED*** return value = x; ***REMOVED***, function (err) ***REMOVED*** return reject(err); ***REMOVED***, function () ***REMOVED*** return resolve(value); ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    Observable.create = function (subscribe) ***REMOVED***
        return new Observable(subscribe);
    ***REMOVED***;
    return Observable;
***REMOVED***());
export ***REMOVED*** Observable ***REMOVED***;
function getPromiseCtor(promiseCtor) ***REMOVED***
    if (!promiseCtor) ***REMOVED***
        promiseCtor = config.Promise || Promise;
    ***REMOVED***
    if (!promiseCtor) ***REMOVED***
        throw new Error('no Promise impl found');
    ***REMOVED***
    return promiseCtor;
***REMOVED***
//# sourceMappingURL=Observable.js.map
