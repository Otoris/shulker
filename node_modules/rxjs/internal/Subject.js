"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Observable_1 = require("./Observable");
var Subscriber_1 = require("./Subscriber");
var Subscription_1 = require("./Subscription");
var ObjectUnsubscribedError_1 = require("./util/ObjectUnsubscribedError");
var SubjectSubscription_1 = require("./SubjectSubscription");
var rxSubscriber_1 = require("../internal/symbol/rxSubscriber");
var SubjectSubscriber = (function (_super) ***REMOVED***
    __extends(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        return _this;
    ***REMOVED***
    return SubjectSubscriber;
***REMOVED***(Subscriber_1.Subscriber));
exports.SubjectSubscriber = SubjectSubscriber;
var Subject = (function (_super) ***REMOVED***
    __extends(Subject, _super);
    function Subject() ***REMOVED***
        var _this = _super.call(this) || this;
        _this.observers = [];
        _this.closed = false;
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    ***REMOVED***
    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () ***REMOVED***
        return new SubjectSubscriber(this);
    ***REMOVED***;
    Subject.prototype.lift = function (operator) ***REMOVED***
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    ***REMOVED***;
    Subject.prototype.next = function (value) ***REMOVED***
        if (this.closed) ***REMOVED***
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        ***REMOVED***
        if (!this.isStopped) ***REMOVED***
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) ***REMOVED***
                copy[i].next(value);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    Subject.prototype.error = function (err) ***REMOVED***
        if (this.closed) ***REMOVED***
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        ***REMOVED***
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) ***REMOVED***
            copy[i].error(err);
        ***REMOVED***
        this.observers.length = 0;
    ***REMOVED***;
    Subject.prototype.complete = function () ***REMOVED***
        if (this.closed) ***REMOVED***
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        ***REMOVED***
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) ***REMOVED***
            copy[i].complete();
        ***REMOVED***
        this.observers.length = 0;
    ***REMOVED***;
    Subject.prototype.unsubscribe = function () ***REMOVED***
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    ***REMOVED***;
    Subject.prototype._trySubscribe = function (subscriber) ***REMOVED***
        if (this.closed) ***REMOVED***
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        ***REMOVED***
        else ***REMOVED***
            return _super.prototype._trySubscribe.call(this, subscriber);
        ***REMOVED***
    ***REMOVED***;
    Subject.prototype._subscribe = function (subscriber) ***REMOVED***
        if (this.closed) ***REMOVED***
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        ***REMOVED***
        else if (this.hasError) ***REMOVED***
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        ***REMOVED***
        else if (this.isStopped) ***REMOVED***
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        ***REMOVED***
        else ***REMOVED***
            this.observers.push(subscriber);
            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        ***REMOVED***
    ***REMOVED***;
    Subject.prototype.asObservable = function () ***REMOVED***
        var observable = new Observable_1.Observable();
        observable.source = this;
        return observable;
    ***REMOVED***;
    Subject.create = function (destination, source) ***REMOVED***
        return new AnonymousSubject(destination, source);
    ***REMOVED***;
    return Subject;
***REMOVED***(Observable_1.Observable));
exports.Subject = Subject;
var AnonymousSubject = (function (_super) ***REMOVED***
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) ***REMOVED***
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    ***REMOVED***
    AnonymousSubject.prototype.next = function (value) ***REMOVED***
        var destination = this.destination;
        if (destination && destination.next) ***REMOVED***
            destination.next(value);
        ***REMOVED***
    ***REMOVED***;
    AnonymousSubject.prototype.error = function (err) ***REMOVED***
        var destination = this.destination;
        if (destination && destination.error) ***REMOVED***
            this.destination.error(err);
        ***REMOVED***
    ***REMOVED***;
    AnonymousSubject.prototype.complete = function () ***REMOVED***
        var destination = this.destination;
        if (destination && destination.complete) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***;
    AnonymousSubject.prototype._subscribe = function (subscriber) ***REMOVED***
        var source = this.source;
        if (source) ***REMOVED***
            return this.source.subscribe(subscriber);
        ***REMOVED***
        else ***REMOVED***
            return Subscription_1.Subscription.EMPTY;
        ***REMOVED***
    ***REMOVED***;
    return AnonymousSubject;
***REMOVED***(Subject));
exports.AnonymousSubject = AnonymousSubject;
//# sourceMappingURL=Subject.js.map