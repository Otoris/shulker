import ***REMOVED*** PartialObserver ***REMOVED*** from './types';
import ***REMOVED*** Observable ***REMOVED*** from './Observable';
/**
 * @deprecated NotificationKind is deprecated as const enums are not compatible with isolated modules. Use a string literal instead.
 */
export declare enum NotificationKind ***REMOVED***
    NEXT = "N",
    ERROR = "E",
    COMPLETE = "C"
***REMOVED***
/**
 * Represents a push-based event or value that an ***REMOVED***@link Observable***REMOVED*** can emit.
 * This class is particularly useful for operators that manage notifications,
 * like ***REMOVED***@link materialize***REMOVED***, ***REMOVED***@link dematerialize***REMOVED***, ***REMOVED***@link observeOn***REMOVED***, and
 * others. Besides wrapping the actual delivered value, it also annotates it
 * with metadata of, for instance, what type of push message it is (`next`,
 * `error`, or `complete`).
 *
 * @see ***REMOVED***@link materialize***REMOVED***
 * @see ***REMOVED***@link dematerialize***REMOVED***
 * @see ***REMOVED***@link observeOn***REMOVED***
 *
 * @class Notification<T>
 */
export declare class Notification<T> ***REMOVED***
    kind: 'N' | 'E' | 'C';
    value?: T;
    error?: any;
    hasValue: boolean;
    constructor(kind: 'N' | 'E' | 'C', value?: T, error?: any);
    /**
     * Delivers to the given `observer` the value wrapped by this Notification.
     * @param ***REMOVED***Observer***REMOVED*** observer
     * @return
     */
    observe(observer: PartialObserver<T>): any;
    /**
     * Given some ***REMOVED***@link Observer***REMOVED*** callbacks, deliver the value represented by the
     * current Notification to the correctly corresponding callback.
     * @param ***REMOVED***function(value: T): void***REMOVED*** next An Observer `next` callback.
     * @param ***REMOVED***function(err: any): void***REMOVED*** [error] An Observer `error` callback.
     * @param ***REMOVED***function(): void***REMOVED*** [complete] An Observer `complete` callback.
     * @return ***REMOVED***any***REMOVED***
     */
    do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any;
    /**
     * Takes an Observer or its individual callback functions, and calls `observe`
     * or `do` methods accordingly.
     * @param ***REMOVED***Observer|function(value: T): void***REMOVED*** nextOrObserver An Observer or
     * the `next` callback.
     * @param ***REMOVED***function(err: any): void***REMOVED*** [error] An Observer `error` callback.
     * @param ***REMOVED***function(): void***REMOVED*** [complete] An Observer `complete` callback.
     * @return ***REMOVED***any***REMOVED***
     */
    accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void): any;
    /**
     * Returns a simple Observable that just delivers the notification represented
     * by this Notification instance.
     * @return ***REMOVED***any***REMOVED***
     */
    toObservable(): Observable<T>;
    private static completeNotification;
    private static undefinedValueNotification;
    /**
     * A shortcut to create a Notification instance of the type `next` from a
     * given value.
     * @param ***REMOVED***T***REMOVED*** value The `next` value.
     * @return ***REMOVED***Notification<T>***REMOVED*** The "next" Notification representing the
     * argument.
     * @nocollapse
     */
    static createNext<T>(value: T): Notification<T>;
    /**
     * A shortcut to create a Notification instance of the type `error` from a
     * given error.
     * @param ***REMOVED***any***REMOVED*** [err] The `error` error.
     * @return ***REMOVED***Notification<T>***REMOVED*** The "error" Notification representing the
     * argument.
     * @nocollapse
     */
    static createError<T>(err?: any): Notification<T>;
    /**
     * A shortcut to create a Notification instance of the type `complete`.
     * @return ***REMOVED***Notification<any>***REMOVED*** The valueless "complete" Notification.
     * @nocollapse
     */
    static createComplete(): Notification<any>;
***REMOVED***
