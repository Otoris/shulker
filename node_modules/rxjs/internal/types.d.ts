import ***REMOVED*** Observable ***REMOVED*** from './Observable';
import ***REMOVED*** Subscription ***REMOVED*** from './Subscription';
/** OPERATOR INTERFACES */
export interface UnaryFunction<T, R> ***REMOVED***
    (source: T): R;
***REMOVED***
export interface OperatorFunction<T, R> extends UnaryFunction<Observable<T>, Observable<R>> ***REMOVED***
***REMOVED***
export declare type FactoryOrValue<T> = T | (() => T);
export interface MonoTypeOperatorFunction<T> extends OperatorFunction<T, T> ***REMOVED***
***REMOVED***
export interface Timestamp<T> ***REMOVED***
    value: T;
    timestamp: number;
***REMOVED***
export interface TimeInterval<T> ***REMOVED***
    value: T;
    interval: number;
***REMOVED***
/** SUBSCRIPTION INTERFACES */
export interface Unsubscribable ***REMOVED***
    unsubscribe(): void;
***REMOVED***
export declare type TeardownLogic = Unsubscribable | Function | void;
export interface SubscriptionLike extends Unsubscribable ***REMOVED***
    unsubscribe(): void;
    readonly closed: boolean;
***REMOVED***
export declare type SubscribableOrPromise<T> = Subscribable<T> | Subscribable<never> | PromiseLike<T> | InteropObservable<T>;
/** OBSERVABLE INTERFACES */
export interface Subscribable<T> ***REMOVED***
    subscribe(observer?: PartialObserver<T>): Unsubscribable;
    /** @deprecated Use an observer instead of a complete callback */
    subscribe(next: null | undefined, error: null | undefined, complete: () => void): Unsubscribable;
    /** @deprecated Use an observer instead of an error callback */
    subscribe(next: null | undefined, error: (error: any) => void, complete?: () => void): Unsubscribable;
    /** @deprecated Use an observer instead of a complete callback */
    subscribe(next: (value: T) => void, error: null | undefined, complete: () => void): Unsubscribable;
    subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Unsubscribable;
***REMOVED***
export declare type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T> | Iterable<T>;
/** @deprecated use ***REMOVED***@link InteropObservable ***REMOVED*** */
export declare type ObservableLike<T> = InteropObservable<T>;
export declare type InteropObservable<T> = ***REMOVED***
    [Symbol.observable]: () => Subscribable<T>;
***REMOVED***;
/** OBSERVER INTERFACES */
export interface NextObserver<T> ***REMOVED***
    closed?: boolean;
    next: (value: T) => void;
    error?: (err: any) => void;
    complete?: () => void;
***REMOVED***
export interface ErrorObserver<T> ***REMOVED***
    closed?: boolean;
    next?: (value: T) => void;
    error: (err: any) => void;
    complete?: () => void;
***REMOVED***
export interface CompletionObserver<T> ***REMOVED***
    closed?: boolean;
    next?: (value: T) => void;
    error?: (err: any) => void;
    complete: () => void;
***REMOVED***
export declare type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;
export interface Observer<T> ***REMOVED***
    closed?: boolean;
    next: (value: T) => void;
    error: (err: any) => void;
    complete: () => void;
***REMOVED***
/** SCHEDULER INTERFACES */
export interface SchedulerLike ***REMOVED***
    now(): number;
    schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay?: number, state?: T): Subscription;
***REMOVED***
export interface SchedulerAction<T> extends Subscription ***REMOVED***
    schedule(state?: T, delay?: number): Subscription;
***REMOVED***
export declare type ObservedValueOf<O> = O extends ObservableInput<infer T> ? T : never;
export declare type ObservedValuesFromArray<X> = X extends Array<ObservableInput<infer T>> ? T : never;
