"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Observable_1 = require("../Observable");
var Subscription_1 = require("../Subscription");
var SubscriptionLoggable_1 = require("./SubscriptionLoggable");
var applyMixins_1 = require("../util/applyMixins");
var ColdObservable = (function (_super) ***REMOVED***
    __extends(ColdObservable, _super);
    function ColdObservable(messages, scheduler) ***REMOVED***
        var _this = _super.call(this, function (subscriber) ***REMOVED***
            var observable = this;
            var index = observable.logSubscribedFrame();
            var subscription = new Subscription_1.Subscription();
            subscription.add(new Subscription_1.Subscription(function () ***REMOVED***
                observable.logUnsubscribedFrame(index);
            ***REMOVED***));
            observable.scheduleMessages(subscriber);
            return subscription;
        ***REMOVED***) || this;
        _this.messages = messages;
        _this.subscriptions = [];
        _this.scheduler = scheduler;
        return _this;
    ***REMOVED***
    ColdObservable.prototype.scheduleMessages = function (subscriber) ***REMOVED***
        var messagesLength = this.messages.length;
        for (var i = 0; i < messagesLength; i++) ***REMOVED***
            var message = this.messages[i];
            subscriber.add(this.scheduler.schedule(function (_a) ***REMOVED***
                var message = _a.message, subscriber = _a.subscriber;
                message.notification.observe(subscriber);
            ***REMOVED***, message.frame, ***REMOVED*** message: message, subscriber: subscriber ***REMOVED***));
        ***REMOVED***
    ***REMOVED***;
    return ColdObservable;
***REMOVED***(Observable_1.Observable));
exports.ColdObservable = ColdObservable;
applyMixins_1.applyMixins(ColdObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);
//# sourceMappingURL=ColdObservable.js.map