"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Observable_1 = require("../Observable");
var asap_1 = require("../scheduler/asap");
var isNumeric_1 = require("../util/isNumeric");
var SubscribeOnObservable = (function (_super) ***REMOVED***
    __extends(SubscribeOnObservable, _super);
    function SubscribeOnObservable(source, delayTime, scheduler) ***REMOVED***
        if (delayTime === void 0) ***REMOVED*** delayTime = 0; ***REMOVED***
        if (scheduler === void 0) ***REMOVED*** scheduler = asap_1.asap; ***REMOVED***
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.delayTime = delayTime;
        _this.scheduler = scheduler;
        if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) ***REMOVED***
            _this.delayTime = 0;
        ***REMOVED***
        if (!scheduler || typeof scheduler.schedule !== 'function') ***REMOVED***
            _this.scheduler = asap_1.asap;
        ***REMOVED***
        return _this;
    ***REMOVED***
    SubscribeOnObservable.create = function (source, delay, scheduler) ***REMOVED***
        if (delay === void 0) ***REMOVED*** delay = 0; ***REMOVED***
        if (scheduler === void 0) ***REMOVED*** scheduler = asap_1.asap; ***REMOVED***
        return new SubscribeOnObservable(source, delay, scheduler);
    ***REMOVED***;
    SubscribeOnObservable.dispatch = function (arg) ***REMOVED***
        var source = arg.source, subscriber = arg.subscriber;
        return this.add(source.subscribe(subscriber));
    ***REMOVED***;
    SubscribeOnObservable.prototype._subscribe = function (subscriber) ***REMOVED***
        var delay = this.delayTime;
        var source = this.source;
        var scheduler = this.scheduler;
        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, ***REMOVED***
            source: source, subscriber: subscriber
        ***REMOVED***);
    ***REMOVED***;
    return SubscribeOnObservable;
***REMOVED***(Observable_1.Observable));
exports.SubscribeOnObservable = SubscribeOnObservable;
//# sourceMappingURL=SubscribeOnObservable.js.map