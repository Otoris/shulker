"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var fromArray_1 = require("./fromArray");
var isArray_1 = require("../util/isArray");
var Subscriber_1 = require("../Subscriber");
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
var iterator_1 = require("../../internal/symbol/iterator");
function zip() ***REMOVED***
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
        observables[_i] = arguments[_i];
    ***REMOVED***
    var resultSelector = observables[observables.length - 1];
    if (typeof resultSelector === 'function') ***REMOVED***
        observables.pop();
    ***REMOVED***
    return fromArray_1.fromArray(observables, undefined).lift(new ZipOperator(resultSelector));
***REMOVED***
exports.zip = zip;
var ZipOperator = (function () ***REMOVED***
    function ZipOperator(resultSelector) ***REMOVED***
        this.resultSelector = resultSelector;
    ***REMOVED***
    ZipOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
    ***REMOVED***;
    return ZipOperator;
***REMOVED***());
exports.ZipOperator = ZipOperator;
var ZipSubscriber = (function (_super) ***REMOVED***
    __extends(ZipSubscriber, _super);
    function ZipSubscriber(destination, resultSelector, values) ***REMOVED***
        if (values === void 0) ***REMOVED*** values = Object.create(null); ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.iterators = [];
        _this.active = 0;
        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;
        _this.values = values;
        return _this;
    ***REMOVED***
    ZipSubscriber.prototype._next = function (value) ***REMOVED***
        var iterators = this.iterators;
        if (isArray_1.isArray(value)) ***REMOVED***
            iterators.push(new StaticArrayIterator(value));
        ***REMOVED***
        else if (typeof value[iterator_1.iterator] === 'function') ***REMOVED***
            iterators.push(new StaticIterator(value[iterator_1.iterator]()));
        ***REMOVED***
        else ***REMOVED***
            iterators.push(new ZipBufferIterator(this.destination, this, value));
        ***REMOVED***
    ***REMOVED***;
    ZipSubscriber.prototype._complete = function () ***REMOVED***
        var iterators = this.iterators;
        var len = iterators.length;
        this.unsubscribe();
        if (len === 0) ***REMOVED***
            this.destination.complete();
            return;
        ***REMOVED***
        this.active = len;
        for (var i = 0; i < len; i++) ***REMOVED***
            var iterator = iterators[i];
            if (iterator.stillUnsubscribed) ***REMOVED***
                var destination = this.destination;
                destination.add(iterator.subscribe(iterator, i));
            ***REMOVED***
            else ***REMOVED***
                this.active--;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    ZipSubscriber.prototype.notifyInactive = function () ***REMOVED***
        this.active--;
        if (this.active === 0) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***;
    ZipSubscriber.prototype.checkIterators = function () ***REMOVED***
        var iterators = this.iterators;
        var len = iterators.length;
        var destination = this.destination;
        for (var i = 0; i < len; i++) ***REMOVED***
            var iterator = iterators[i];
            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) ***REMOVED***
                return;
            ***REMOVED***
        ***REMOVED***
        var shouldComplete = false;
        var args = [];
        for (var i = 0; i < len; i++) ***REMOVED***
            var iterator = iterators[i];
            var result = iterator.next();
            if (iterator.hasCompleted()) ***REMOVED***
                shouldComplete = true;
            ***REMOVED***
            if (result.done) ***REMOVED***
                destination.complete();
                return;
            ***REMOVED***
            args.push(result.value);
        ***REMOVED***
        if (this.resultSelector) ***REMOVED***
            this._tryresultSelector(args);
        ***REMOVED***
        else ***REMOVED***
            destination.next(args);
        ***REMOVED***
        if (shouldComplete) ***REMOVED***
            destination.complete();
        ***REMOVED***
    ***REMOVED***;
    ZipSubscriber.prototype._tryresultSelector = function (args) ***REMOVED***
        var result;
        try ***REMOVED***
            result = this.resultSelector.apply(this, args);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
            return;
        ***REMOVED***
        this.destination.next(result);
    ***REMOVED***;
    return ZipSubscriber;
***REMOVED***(Subscriber_1.Subscriber));
exports.ZipSubscriber = ZipSubscriber;
var StaticIterator = (function () ***REMOVED***
    function StaticIterator(iterator) ***REMOVED***
        this.iterator = iterator;
        this.nextResult = iterator.next();
    ***REMOVED***
    StaticIterator.prototype.hasValue = function () ***REMOVED***
        return true;
    ***REMOVED***;
    StaticIterator.prototype.next = function () ***REMOVED***
        var result = this.nextResult;
        this.nextResult = this.iterator.next();
        return result;
    ***REMOVED***;
    StaticIterator.prototype.hasCompleted = function () ***REMOVED***
        var nextResult = this.nextResult;
        return nextResult && nextResult.done;
    ***REMOVED***;
    return StaticIterator;
***REMOVED***());
var StaticArrayIterator = (function () ***REMOVED***
    function StaticArrayIterator(array) ***REMOVED***
        this.array = array;
        this.index = 0;
        this.length = 0;
        this.length = array.length;
    ***REMOVED***
    StaticArrayIterator.prototype[iterator_1.iterator] = function () ***REMOVED***
        return this;
    ***REMOVED***;
    StaticArrayIterator.prototype.next = function (value) ***REMOVED***
        var i = this.index++;
        var array = this.array;
        return i < this.length ? ***REMOVED*** value: array[i], done: false ***REMOVED*** : ***REMOVED*** value: null, done: true ***REMOVED***;
    ***REMOVED***;
    StaticArrayIterator.prototype.hasValue = function () ***REMOVED***
        return this.array.length > this.index;
    ***REMOVED***;
    StaticArrayIterator.prototype.hasCompleted = function () ***REMOVED***
        return this.array.length === this.index;
    ***REMOVED***;
    return StaticArrayIterator;
***REMOVED***());
var ZipBufferIterator = (function (_super) ***REMOVED***
    __extends(ZipBufferIterator, _super);
    function ZipBufferIterator(destination, parent, observable) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.parent = parent;
        _this.observable = observable;
        _this.stillUnsubscribed = true;
        _this.buffer = [];
        _this.isComplete = false;
        return _this;
    ***REMOVED***
    ZipBufferIterator.prototype[iterator_1.iterator] = function () ***REMOVED***
        return this;
    ***REMOVED***;
    ZipBufferIterator.prototype.next = function () ***REMOVED***
        var buffer = this.buffer;
        if (buffer.length === 0 && this.isComplete) ***REMOVED***
            return ***REMOVED*** value: null, done: true ***REMOVED***;
        ***REMOVED***
        else ***REMOVED***
            return ***REMOVED*** value: buffer.shift(), done: false ***REMOVED***;
        ***REMOVED***
    ***REMOVED***;
    ZipBufferIterator.prototype.hasValue = function () ***REMOVED***
        return this.buffer.length > 0;
    ***REMOVED***;
    ZipBufferIterator.prototype.hasCompleted = function () ***REMOVED***
        return this.buffer.length === 0 && this.isComplete;
    ***REMOVED***;
    ZipBufferIterator.prototype.notifyComplete = function () ***REMOVED***
        if (this.buffer.length > 0) ***REMOVED***
            this.isComplete = true;
            this.parent.notifyInactive();
        ***REMOVED***
        else ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***;
    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.buffer.push(innerValue);
        this.parent.checkIterators();
    ***REMOVED***;
    ZipBufferIterator.prototype.subscribe = function (value, index) ***REMOVED***
        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);
    ***REMOVED***;
    return ZipBufferIterator;
***REMOVED***(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=zip.js.map