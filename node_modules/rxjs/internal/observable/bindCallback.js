"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Observable_1 = require("../Observable");
var AsyncSubject_1 = require("../AsyncSubject");
var map_1 = require("../operators/map");
var canReportError_1 = require("../util/canReportError");
var isArray_1 = require("../util/isArray");
var isScheduler_1 = require("../util/isScheduler");
function bindCallback(callbackFunc, resultSelector, scheduler) ***REMOVED***
    if (resultSelector) ***REMOVED***
        if (isScheduler_1.isScheduler(resultSelector)) ***REMOVED***
            scheduler = resultSelector;
        ***REMOVED***
        else ***REMOVED***
            return function () ***REMOVED***
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
                    args[_i] = arguments[_i];
                ***REMOVED***
                return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map_1.map(function (args) ***REMOVED*** return isArray_1.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); ***REMOVED***));
            ***REMOVED***;
        ***REMOVED***
    ***REMOVED***
    return function () ***REMOVED***
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
            args[_i] = arguments[_i];
        ***REMOVED***
        var context = this;
        var subject;
        var params = ***REMOVED***
            context: context,
            subject: subject,
            callbackFunc: callbackFunc,
            scheduler: scheduler,
        ***REMOVED***;
        return new Observable_1.Observable(function (subscriber) ***REMOVED***
            if (!scheduler) ***REMOVED***
                if (!subject) ***REMOVED***
                    subject = new AsyncSubject_1.AsyncSubject();
                    var handler = function () ***REMOVED***
                        var innerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
                            innerArgs[_i] = arguments[_i];
                        ***REMOVED***
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    ***REMOVED***;
                    try ***REMOVED***
                        callbackFunc.apply(context, args.concat([handler]));
                    ***REMOVED***
                    catch (err) ***REMOVED***
                        if (canReportError_1.canReportError(subject)) ***REMOVED***
                            subject.error(err);
                        ***REMOVED***
                        else ***REMOVED***
                            console.warn(err);
                        ***REMOVED***
                    ***REMOVED***
                ***REMOVED***
                return subject.subscribe(subscriber);
            ***REMOVED***
            else ***REMOVED***
                var state = ***REMOVED***
                    args: args, subscriber: subscriber, params: params,
                ***REMOVED***;
                return scheduler.schedule(dispatch, 0, state);
            ***REMOVED***
        ***REMOVED***);
    ***REMOVED***;
***REMOVED***
exports.bindCallback = bindCallback;
function dispatch(state) ***REMOVED***
    var _this = this;
    var self = this;
    var args = state.args, subscriber = state.subscriber, params = state.params;
    var callbackFunc = params.callbackFunc, context = params.context, scheduler = params.scheduler;
    var subject = params.subject;
    if (!subject) ***REMOVED***
        subject = params.subject = new AsyncSubject_1.AsyncSubject();
        var handler = function () ***REMOVED***
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
                innerArgs[_i] = arguments[_i];
            ***REMOVED***
            var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
            _this.add(scheduler.schedule(dispatchNext, 0, ***REMOVED*** value: value, subject: subject ***REMOVED***));
        ***REMOVED***;
        try ***REMOVED***
            callbackFunc.apply(context, args.concat([handler]));
        ***REMOVED***
        catch (err) ***REMOVED***
            subject.error(err);
        ***REMOVED***
    ***REMOVED***
    this.add(subject.subscribe(subscriber));
***REMOVED***
function dispatchNext(state) ***REMOVED***
    var value = state.value, subject = state.subject;
    subject.next(value);
    subject.complete();
***REMOVED***
function dispatchError(state) ***REMOVED***
    var err = state.err, subject = state.subject;
    subject.error(err);
***REMOVED***
//# sourceMappingURL=bindCallback.js.map