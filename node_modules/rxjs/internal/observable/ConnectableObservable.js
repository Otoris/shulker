"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Subject_1 = require("../Subject");
var Observable_1 = require("../Observable");
var Subscriber_1 = require("../Subscriber");
var Subscription_1 = require("../Subscription");
var refCount_1 = require("../operators/refCount");
var ConnectableObservable = (function (_super) ***REMOVED***
    __extends(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) ***REMOVED***
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._refCount = 0;
        _this._isComplete = false;
        return _this;
    ***REMOVED***
    ConnectableObservable.prototype._subscribe = function (subscriber) ***REMOVED***
        return this.getSubject().subscribe(subscriber);
    ***REMOVED***;
    ConnectableObservable.prototype.getSubject = function () ***REMOVED***
        var subject = this._subject;
        if (!subject || subject.isStopped) ***REMOVED***
            this._subject = this.subjectFactory();
        ***REMOVED***
        return this._subject;
    ***REMOVED***;
    ConnectableObservable.prototype.connect = function () ***REMOVED***
        var connection = this._connection;
        if (!connection) ***REMOVED***
            this._isComplete = false;
            connection = this._connection = new Subscription_1.Subscription();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) ***REMOVED***
                this._connection = null;
                connection = Subscription_1.Subscription.EMPTY;
            ***REMOVED***
        ***REMOVED***
        return connection;
    ***REMOVED***;
    ConnectableObservable.prototype.refCount = function () ***REMOVED***
        return refCount_1.refCount()(this);
    ***REMOVED***;
    return ConnectableObservable;
***REMOVED***(Observable_1.Observable));
exports.ConnectableObservable = ConnectableObservable;
exports.connectableObservableDescriptor = (function () ***REMOVED***
    var connectableProto = ConnectableObservable.prototype;
    return ***REMOVED***
        operator: ***REMOVED*** value: null ***REMOVED***,
        _refCount: ***REMOVED*** value: 0, writable: true ***REMOVED***,
        _subject: ***REMOVED*** value: null, writable: true ***REMOVED***,
        _connection: ***REMOVED*** value: null, writable: true ***REMOVED***,
        _subscribe: ***REMOVED*** value: connectableProto._subscribe ***REMOVED***,
        _isComplete: ***REMOVED*** value: connectableProto._isComplete, writable: true ***REMOVED***,
        getSubject: ***REMOVED*** value: connectableProto.getSubject ***REMOVED***,
        connect: ***REMOVED*** value: connectableProto.connect ***REMOVED***,
        refCount: ***REMOVED*** value: connectableProto.refCount ***REMOVED***
    ***REMOVED***;
***REMOVED***)();
var ConnectableSubscriber = (function (_super) ***REMOVED***
    __extends(ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    ***REMOVED***
    ConnectableSubscriber.prototype._error = function (err) ***REMOVED***
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    ***REMOVED***;
    ConnectableSubscriber.prototype._complete = function () ***REMOVED***
        this.connectable._isComplete = true;
        this._unsubscribe();
        _super.prototype._complete.call(this);
    ***REMOVED***;
    ConnectableSubscriber.prototype._unsubscribe = function () ***REMOVED***
        var connectable = this.connectable;
        if (connectable) ***REMOVED***
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) ***REMOVED***
                connection.unsubscribe();
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    return ConnectableSubscriber;
***REMOVED***(Subject_1.SubjectSubscriber));
var RefCountOperator = (function () ***REMOVED***
    function RefCountOperator(connectable) ***REMOVED***
        this.connectable = connectable;
    ***REMOVED***
    RefCountOperator.prototype.call = function (subscriber, source) ***REMOVED***
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) ***REMOVED***
            refCounter.connection = connectable.connect();
        ***REMOVED***
        return subscription;
    ***REMOVED***;
    return RefCountOperator;
***REMOVED***());
var RefCountSubscriber = (function (_super) ***REMOVED***
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    ***REMOVED***
    RefCountSubscriber.prototype._unsubscribe = function () ***REMOVED***
        var connectable = this.connectable;
        if (!connectable) ***REMOVED***
            this.connection = null;
            return;
        ***REMOVED***
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) ***REMOVED***
            this.connection = null;
            return;
        ***REMOVED***
        connectable._refCount = refCount - 1;
        if (refCount > 1) ***REMOVED***
            this.connection = null;
            return;
        ***REMOVED***
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) ***REMOVED***
            sharedConnection.unsubscribe();
        ***REMOVED***
    ***REMOVED***;
    return RefCountSubscriber;
***REMOVED***(Subscriber_1.Subscriber));
//# sourceMappingURL=ConnectableObservable.js.map