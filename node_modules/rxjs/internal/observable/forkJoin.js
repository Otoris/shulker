"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Observable_1 = require("../Observable");
var isArray_1 = require("../util/isArray");
var map_1 = require("../operators/map");
var isObject_1 = require("../util/isObject");
var from_1 = require("./from");
function forkJoin() ***REMOVED***
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
        sources[_i] = arguments[_i];
    ***REMOVED***
    if (sources.length === 1) ***REMOVED***
        var first_1 = sources[0];
        if (isArray_1.isArray(first_1)) ***REMOVED***
            return forkJoinInternal(first_1, null);
        ***REMOVED***
        if (isObject_1.isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) ***REMOVED***
            var keys = Object.keys(first_1);
            return forkJoinInternal(keys.map(function (key) ***REMOVED*** return first_1[key]; ***REMOVED***), keys);
        ***REMOVED***
    ***REMOVED***
    if (typeof sources[sources.length - 1] === 'function') ***REMOVED***
        var resultSelector_1 = sources.pop();
        sources = (sources.length === 1 && isArray_1.isArray(sources[0])) ? sources[0] : sources;
        return forkJoinInternal(sources, null).pipe(map_1.map(function (args) ***REMOVED*** return resultSelector_1.apply(void 0, args); ***REMOVED***));
    ***REMOVED***
    return forkJoinInternal(sources, null);
***REMOVED***
exports.forkJoin = forkJoin;
function forkJoinInternal(sources, keys) ***REMOVED***
    return new Observable_1.Observable(function (subscriber) ***REMOVED***
        var len = sources.length;
        if (len === 0) ***REMOVED***
            subscriber.complete();
            return;
        ***REMOVED***
        var values = new Array(len);
        var completed = 0;
        var emitted = 0;
        var _loop_1 = function (i) ***REMOVED***
            var source = from_1.from(sources[i]);
            var hasValue = false;
            subscriber.add(source.subscribe(***REMOVED***
                next: function (value) ***REMOVED***
                    if (!hasValue) ***REMOVED***
                        hasValue = true;
                        emitted++;
                    ***REMOVED***
                    values[i] = value;
                ***REMOVED***,
                error: function (err) ***REMOVED*** return subscriber.error(err); ***REMOVED***,
                complete: function () ***REMOVED***
                    completed++;
                    if (completed === len || !hasValue) ***REMOVED***
                        if (emitted === len) ***REMOVED***
                            subscriber.next(keys ?
                                keys.reduce(function (result, key, i) ***REMOVED*** return (result[key] = values[i], result); ***REMOVED***, ***REMOVED******REMOVED***) :
                                values);
                        ***REMOVED***
                        subscriber.complete();
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***));
        ***REMOVED***;
        for (var i = 0; i < len; i++) ***REMOVED***
            _loop_1(i);
        ***REMOVED***
    ***REMOVED***);
***REMOVED***
//# sourceMappingURL=forkJoin.js.map