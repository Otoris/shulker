import ***REMOVED*** SchedulerAction, SchedulerLike ***REMOVED*** from '../types';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
/**
 * Creates an Observable that emits a sequence of numbers within a specified
 * range.
 *
 * <span class="informal">Emits a sequence of numbers in a range.</span>
 *
 * ![](range.png)
 *
 * `range` operator emits a range of sequential integers, in order, where you
 * select the `start` of the range and its `length`. By default, uses no
 * ***REMOVED***@link SchedulerLike***REMOVED*** and just delivers the notifications synchronously, but may use
 * an optional ***REMOVED***@link SchedulerLike***REMOVED*** to regulate those deliveries.
 *
 * ## Example
 * Emits the numbers 1 to 10</caption>
 * ```ts
 * import ***REMOVED*** range ***REMOVED*** from 'rxjs';
 *
 * const numbers = range(1, 10);
 * numbers.subscribe(x => console.log(x));
 * ```
 * @see ***REMOVED***@link timer***REMOVED***
 * @see ***REMOVED***@link index/interval***REMOVED***
 *
 * @param ***REMOVED***number***REMOVED*** [start=0] The value of the first integer in the sequence.
 * @param ***REMOVED***number***REMOVED*** count The number of sequential integers to generate.
 * @param ***REMOVED***SchedulerLike***REMOVED*** [scheduler] A ***REMOVED***@link SchedulerLike***REMOVED*** to use for scheduling
 * the emissions of the notifications.
 * @return ***REMOVED***Observable***REMOVED*** An Observable of numbers that emits a finite range of
 * sequential integers.
 * @static true
 * @name range
 * @owner Observable
 */
export declare function range(start?: number, count?: number, scheduler?: SchedulerLike): Observable<number>;
/** @internal */
export declare function dispatch(this: SchedulerAction<any>, state: any): void;
