"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
var __assign = (this && this.__assign) || function () ***REMOVED***
    __assign = Object.assign || function(t) ***REMOVED***
        for (var s, i = 1, n = arguments.length; i < n; i++) ***REMOVED***
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        ***REMOVED***
        return t;
    ***REMOVED***;
    return __assign.apply(this, arguments);
***REMOVED***;
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Subject_1 = require("../../Subject");
var Subscriber_1 = require("../../Subscriber");
var Observable_1 = require("../../Observable");
var Subscription_1 = require("../../Subscription");
var ReplaySubject_1 = require("../../ReplaySubject");
var DEFAULT_WEBSOCKET_CONFIG = ***REMOVED***
    url: '',
    deserializer: function (e) ***REMOVED*** return JSON.parse(e.data); ***REMOVED***,
    serializer: function (value) ***REMOVED*** return JSON.stringify(value); ***REMOVED***,
***REMOVED***;
var WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: ***REMOVED*** code: number, reason: string ***REMOVED***';
var WebSocketSubject = (function (_super) ***REMOVED***
    __extends(WebSocketSubject, _super);
    function WebSocketSubject(urlConfigOrSource, destination) ***REMOVED***
        var _this = _super.call(this) || this;
        if (urlConfigOrSource instanceof Observable_1.Observable) ***REMOVED***
            _this.destination = destination;
            _this.source = urlConfigOrSource;
        ***REMOVED***
        else ***REMOVED***
            var config = _this._config = __assign(***REMOVED******REMOVED***, DEFAULT_WEBSOCKET_CONFIG);
            _this._output = new Subject_1.Subject();
            if (typeof urlConfigOrSource === 'string') ***REMOVED***
                config.url = urlConfigOrSource;
            ***REMOVED***
            else ***REMOVED***
                for (var key in urlConfigOrSource) ***REMOVED***
                    if (urlConfigOrSource.hasOwnProperty(key)) ***REMOVED***
                        config[key] = urlConfigOrSource[key];
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
            if (!config.WebSocketCtor && WebSocket) ***REMOVED***
                config.WebSocketCtor = WebSocket;
            ***REMOVED***
            else if (!config.WebSocketCtor) ***REMOVED***
                throw new Error('no WebSocket constructor can be found');
            ***REMOVED***
            _this.destination = new ReplaySubject_1.ReplaySubject();
        ***REMOVED***
        return _this;
    ***REMOVED***
    WebSocketSubject.prototype.lift = function (operator) ***REMOVED***
        var sock = new WebSocketSubject(this._config, this.destination);
        sock.operator = operator;
        sock.source = this;
        return sock;
    ***REMOVED***;
    WebSocketSubject.prototype._resetState = function () ***REMOVED***
        this._socket = null;
        if (!this.source) ***REMOVED***
            this.destination = new ReplaySubject_1.ReplaySubject();
        ***REMOVED***
        this._output = new Subject_1.Subject();
    ***REMOVED***;
    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) ***REMOVED***
        var self = this;
        return new Observable_1.Observable(function (observer) ***REMOVED***
            try ***REMOVED***
                self.next(subMsg());
            ***REMOVED***
            catch (err) ***REMOVED***
                observer.error(err);
            ***REMOVED***
            var subscription = self.subscribe(function (x) ***REMOVED***
                try ***REMOVED***
                    if (messageFilter(x)) ***REMOVED***
                        observer.next(x);
                    ***REMOVED***
                ***REMOVED***
                catch (err) ***REMOVED***
                    observer.error(err);
                ***REMOVED***
            ***REMOVED***, function (err) ***REMOVED*** return observer.error(err); ***REMOVED***, function () ***REMOVED*** return observer.complete(); ***REMOVED***);
            return function () ***REMOVED***
                try ***REMOVED***
                    self.next(unsubMsg());
                ***REMOVED***
                catch (err) ***REMOVED***
                    observer.error(err);
                ***REMOVED***
                subscription.unsubscribe();
            ***REMOVED***;
        ***REMOVED***);
    ***REMOVED***;
    WebSocketSubject.prototype._connectSocket = function () ***REMOVED***
        var _this = this;
        var _a = this._config, WebSocketCtor = _a.WebSocketCtor, protocol = _a.protocol, url = _a.url, binaryType = _a.binaryType;
        var observer = this._output;
        var socket = null;
        try ***REMOVED***
            socket = protocol ?
                new WebSocketCtor(url, protocol) :
                new WebSocketCtor(url);
            this._socket = socket;
            if (binaryType) ***REMOVED***
                this._socket.binaryType = binaryType;
            ***REMOVED***
        ***REMOVED***
        catch (e) ***REMOVED***
            observer.error(e);
            return;
        ***REMOVED***
        var subscription = new Subscription_1.Subscription(function () ***REMOVED***
            _this._socket = null;
            if (socket && socket.readyState === 1) ***REMOVED***
                socket.close();
            ***REMOVED***
        ***REMOVED***);
        socket.onopen = function (e) ***REMOVED***
            var _socket = _this._socket;
            if (!_socket) ***REMOVED***
                socket.close();
                _this._resetState();
                return;
            ***REMOVED***
            var openObserver = _this._config.openObserver;
            if (openObserver) ***REMOVED***
                openObserver.next(e);
            ***REMOVED***
            var queue = _this.destination;
            _this.destination = Subscriber_1.Subscriber.create(function (x) ***REMOVED***
                if (socket.readyState === 1) ***REMOVED***
                    try ***REMOVED***
                        var serializer = _this._config.serializer;
                        socket.send(serializer(x));
                    ***REMOVED***
                    catch (e) ***REMOVED***
                        _this.destination.error(e);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***, function (e) ***REMOVED***
                var closingObserver = _this._config.closingObserver;
                if (closingObserver) ***REMOVED***
                    closingObserver.next(undefined);
                ***REMOVED***
                if (e && e.code) ***REMOVED***
                    socket.close(e.code, e.reason);
                ***REMOVED***
                else ***REMOVED***
                    observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));
                ***REMOVED***
                _this._resetState();
            ***REMOVED***, function () ***REMOVED***
                var closingObserver = _this._config.closingObserver;
                if (closingObserver) ***REMOVED***
                    closingObserver.next(undefined);
                ***REMOVED***
                socket.close();
                _this._resetState();
            ***REMOVED***);
            if (queue && queue instanceof ReplaySubject_1.ReplaySubject) ***REMOVED***
                subscription.add(queue.subscribe(_this.destination));
            ***REMOVED***
        ***REMOVED***;
        socket.onerror = function (e) ***REMOVED***
            _this._resetState();
            observer.error(e);
        ***REMOVED***;
        socket.onclose = function (e) ***REMOVED***
            _this._resetState();
            var closeObserver = _this._config.closeObserver;
            if (closeObserver) ***REMOVED***
                closeObserver.next(e);
            ***REMOVED***
            if (e.wasClean) ***REMOVED***
                observer.complete();
            ***REMOVED***
            else ***REMOVED***
                observer.error(e);
            ***REMOVED***
        ***REMOVED***;
        socket.onmessage = function (e) ***REMOVED***
            try ***REMOVED***
                var deserializer = _this._config.deserializer;
                observer.next(deserializer(e));
            ***REMOVED***
            catch (err) ***REMOVED***
                observer.error(err);
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***;
    WebSocketSubject.prototype._subscribe = function (subscriber) ***REMOVED***
        var _this = this;
        var source = this.source;
        if (source) ***REMOVED***
            return source.subscribe(subscriber);
        ***REMOVED***
        if (!this._socket) ***REMOVED***
            this._connectSocket();
        ***REMOVED***
        this._output.subscribe(subscriber);
        subscriber.add(function () ***REMOVED***
            var _socket = _this._socket;
            if (_this._output.observers.length === 0) ***REMOVED***
                if (_socket && _socket.readyState === 1) ***REMOVED***
                    _socket.close();
                ***REMOVED***
                _this._resetState();
            ***REMOVED***
        ***REMOVED***);
        return subscriber;
    ***REMOVED***;
    WebSocketSubject.prototype.unsubscribe = function () ***REMOVED***
        var _socket = this._socket;
        if (_socket && _socket.readyState === 1) ***REMOVED***
            _socket.close();
        ***REMOVED***
        this._resetState();
        _super.prototype.unsubscribe.call(this);
    ***REMOVED***;
    return WebSocketSubject;
***REMOVED***(Subject_1.AnonymousSubject));
exports.WebSocketSubject = WebSocketSubject;
//# sourceMappingURL=WebSocketSubject.js.map