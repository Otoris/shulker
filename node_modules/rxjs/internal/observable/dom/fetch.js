"use strict";
var __assign = (this && this.__assign) || function () ***REMOVED***
    __assign = Object.assign || function(t) ***REMOVED***
        for (var s, i = 1, n = arguments.length; i < n; i++) ***REMOVED***
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        ***REMOVED***
        return t;
    ***REMOVED***;
    return __assign.apply(this, arguments);
***REMOVED***;
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Observable_1 = require("../../Observable");
function fromFetch(input, init) ***REMOVED***
    return new Observable_1.Observable(function (subscriber) ***REMOVED***
        var controller = new AbortController();
        var signal = controller.signal;
        var outerSignalHandler;
        var abortable = true;
        var unsubscribed = false;
        if (init) ***REMOVED***
            if (init.signal) ***REMOVED***
                if (init.signal.aborted) ***REMOVED***
                    controller.abort();
                ***REMOVED***
                else ***REMOVED***
                    outerSignalHandler = function () ***REMOVED***
                        if (!signal.aborted) ***REMOVED***
                            controller.abort();
                        ***REMOVED***
                    ***REMOVED***;
                    init.signal.addEventListener('abort', outerSignalHandler);
                ***REMOVED***
            ***REMOVED***
            init = __assign(***REMOVED******REMOVED***, init, ***REMOVED*** signal: signal ***REMOVED***);
        ***REMOVED***
        else ***REMOVED***
            init = ***REMOVED*** signal: signal ***REMOVED***;
        ***REMOVED***
        fetch(input, init).then(function (response) ***REMOVED***
            abortable = false;
            subscriber.next(response);
            subscriber.complete();
        ***REMOVED***).catch(function (err) ***REMOVED***
            abortable = false;
            if (!unsubscribed) ***REMOVED***
                subscriber.error(err);
            ***REMOVED***
        ***REMOVED***);
        return function () ***REMOVED***
            unsubscribed = true;
            if (abortable) ***REMOVED***
                controller.abort();
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***);
***REMOVED***
exports.fromFetch = fromFetch;
//# sourceMappingURL=fetch.js.map