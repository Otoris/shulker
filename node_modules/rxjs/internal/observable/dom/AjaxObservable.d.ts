import ***REMOVED*** Observable ***REMOVED*** from '../../Observable';
import ***REMOVED*** Subscriber ***REMOVED*** from '../../Subscriber';
import ***REMOVED*** TeardownLogic ***REMOVED*** from '../../types';
export interface AjaxRequest ***REMOVED***
    url?: string;
    body?: any;
    user?: string;
    async?: boolean;
    method?: string;
    headers?: Object;
    timeout?: number;
    password?: string;
    hasContent?: boolean;
    crossDomain?: boolean;
    withCredentials?: boolean;
    createXHR?: () => XMLHttpRequest;
    progressSubscriber?: Subscriber<any>;
    responseType?: string;
***REMOVED***
export interface AjaxCreationMethod ***REMOVED***
    (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;
    get(url: string, headers?: Object): Observable<AjaxResponse>;
    post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;
    put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;
    patch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;
    delete(url: string, headers?: Object): Observable<AjaxResponse>;
    getJSON<T>(url: string, headers?: Object): Observable<T>;
***REMOVED***
export declare function ajaxGet(url: string, headers?: Object): AjaxObservable<AjaxResponse>;
export declare function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;
export declare function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse>;
export declare function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;
export declare function ajaxPatch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;
export declare function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T>;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends ***REMOVED***Ignored***REMOVED***
 * @hide true
 */
export declare class AjaxObservable<T> extends Observable<T> ***REMOVED***
    /**
     * Creates an observable for an Ajax request with either a request object with
     * url, headers, etc or a string for a URL.
     *
     * ## Example
     * ```ts
     * import ***REMOVED*** ajax ***REMOVED*** from 'rxjs/ajax';
   *
     * const source1 = ajax('/products');
     * const source2 = ajax(***REMOVED*** url: 'products', method: 'GET' ***REMOVED***);
     * ```
     *
     * @param ***REMOVED***string|Object***REMOVED*** request Can be one of the following:
     *   A string of the URL to make the Ajax call.
     *   An object with the following properties
     *   - url: URL of the request
     *   - body: The body of the request
     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE
     *   - async: Whether the request is async
     *   - headers: Optional headers
     *   - crossDomain: true if a cross domain request, else false
     *   - createXHR: a function to override if you need to use an alternate
     *   XMLHttpRequest implementation.
     *   - resultSelector: a function to use to alter the output value type of
     *   the Observable. Gets ***REMOVED***@link AjaxResponse***REMOVED*** as an argument.
     * @return ***REMOVED***Observable***REMOVED*** An observable sequence containing the XMLHttpRequest.
     * @static true
     * @name ajax
     * @owner Observable
     * @nocollapse
    */
    static create: AjaxCreationMethod;
    private request;
    constructor(urlOrRequest: string | AjaxRequest);
    /** @deprecated This is an internal implementation detail, do not use. */
    _subscribe(subscriber: Subscriber<T>): TeardownLogic;
***REMOVED***
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
export declare class AjaxSubscriber<T> extends Subscriber<Event> ***REMOVED***
    request: AjaxRequest;
    private xhr;
    private done;
    constructor(destination: Subscriber<T>, request: AjaxRequest);
    next(e: Event): void;
    private send;
    private serializeBody;
    private setHeaders;
    private getHeader;
    private setupEvents;
    unsubscribe(): void;
***REMOVED***
/**
 * A normalized AJAX response.
 *
 * @see ***REMOVED***@link ajax***REMOVED***
 *
 * @class AjaxResponse
 */
export declare class AjaxResponse ***REMOVED***
    originalEvent: Event;
    xhr: XMLHttpRequest;
    request: AjaxRequest;
    /** @type ***REMOVED***number***REMOVED*** The HTTP status code */
    status: number;
    /** @type ***REMOVED***string|ArrayBuffer|Document|object|any***REMOVED*** The response data */
    response: any;
    /** @type ***REMOVED***string***REMOVED*** The raw responseText */
    responseText: string;
    /** @type ***REMOVED***string***REMOVED*** The responseType (e.g. 'json', 'arraybuffer', or 'xml') */
    responseType: string;
    constructor(originalEvent: Event, xhr: XMLHttpRequest, request: AjaxRequest);
***REMOVED***
export declare type AjaxErrorNames = 'AjaxError' | 'AjaxTimeoutError';
/**
 * A normalized AJAX error.
 *
 * @see ***REMOVED***@link ajax***REMOVED***
 *
 * @class AjaxError
 */
export interface AjaxError extends Error ***REMOVED***
    /** @type ***REMOVED***XMLHttpRequest***REMOVED*** The XHR instance associated with the error */
    xhr: XMLHttpRequest;
    /** @type ***REMOVED***AjaxRequest***REMOVED*** The AjaxRequest associated with the error */
    request: AjaxRequest;
    /** @type ***REMOVED***number***REMOVED*** The HTTP status code */
    status: number;
    /** @type ***REMOVED***string***REMOVED*** The responseType (e.g. 'json', 'arraybuffer', or 'xml') */
    responseType: string;
    /** @type ***REMOVED***string|ArrayBuffer|Document|object|any***REMOVED*** The response data */
    response: any;
***REMOVED***
export interface AjaxErrorCtor ***REMOVED***
    new (message: string, xhr: XMLHttpRequest, request: AjaxRequest): AjaxError;
***REMOVED***
export declare const AjaxError: AjaxErrorCtor;
export interface AjaxTimeoutError extends AjaxError ***REMOVED***
***REMOVED***
export interface AjaxTimeoutErrorCtor ***REMOVED***
    new (xhr: XMLHttpRequest, request: AjaxRequest): AjaxTimeoutError;
***REMOVED***
/**
 * @see ***REMOVED***@link ajax***REMOVED***
 *
 * @class AjaxTimeoutError
 */
export declare const AjaxTimeoutError: AjaxTimeoutErrorCtor;
