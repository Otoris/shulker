"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Scheduler_1 = require("../Scheduler");
var AsyncScheduler = (function (_super) ***REMOVED***
    __extends(AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) ***REMOVED***
        if (now === void 0) ***REMOVED*** now = Scheduler_1.Scheduler.now; ***REMOVED***
        var _this = _super.call(this, SchedulerAction, function () ***REMOVED***
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) ***REMOVED***
                return AsyncScheduler.delegate.now();
            ***REMOVED***
            else ***REMOVED***
                return now();
            ***REMOVED***
        ***REMOVED***) || this;
        _this.actions = [];
        _this.active = false;
        _this.scheduled = undefined;
        return _this;
    ***REMOVED***
    AsyncScheduler.prototype.schedule = function (work, delay, state) ***REMOVED***
        if (delay === void 0) ***REMOVED*** delay = 0; ***REMOVED***
        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) ***REMOVED***
            return AsyncScheduler.delegate.schedule(work, delay, state);
        ***REMOVED***
        else ***REMOVED***
            return _super.prototype.schedule.call(this, work, delay, state);
        ***REMOVED***
    ***REMOVED***;
    AsyncScheduler.prototype.flush = function (action) ***REMOVED***
        var actions = this.actions;
        if (this.active) ***REMOVED***
            actions.push(action);
            return;
        ***REMOVED***
        var error;
        this.active = true;
        do ***REMOVED***
            if (error = action.execute(action.state, action.delay)) ***REMOVED***
                break;
            ***REMOVED***
        ***REMOVED*** while (action = actions.shift());
        this.active = false;
        if (error) ***REMOVED***
            while (action = actions.shift()) ***REMOVED***
                action.unsubscribe();
            ***REMOVED***
            throw error;
        ***REMOVED***
    ***REMOVED***;
    return AsyncScheduler;
***REMOVED***(Scheduler_1.Scheduler));
exports.AsyncScheduler = AsyncScheduler;
//# sourceMappingURL=AsyncScheduler.js.map