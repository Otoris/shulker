import ***REMOVED*** Scheduler ***REMOVED*** from '../Scheduler';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** SchedulerAction ***REMOVED*** from '../types';
/**
 * A unit of work to be executed in a `scheduler`. An action is typically
 * created from within a ***REMOVED***@link SchedulerLike***REMOVED*** and an RxJS user does not need to concern
 * themselves about creating and manipulating an Action.
 *
 * ```ts
 * class Action<T> extends Subscription ***REMOVED***
 *   new (scheduler: Scheduler, work: (state?: T) => void);
 *   schedule(state?: T, delay: number = 0): Subscription;
 * ***REMOVED***
 * ```
 *
 * @class Action<T>
 */
export declare class Action<T> extends Subscription ***REMOVED***
    constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void);
    /**
     * Schedules this action on its parent ***REMOVED***@link SchedulerLike***REMOVED*** for execution. May be passed
     * some context object, `state`. May happen at some point in the future,
     * according to the `delay` parameter, if specified.
     * @param ***REMOVED***T***REMOVED*** [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @param ***REMOVED***number***REMOVED*** [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler.
     * @return ***REMOVED***void***REMOVED***
     */
    schedule(state?: T, delay?: number): Subscription;
***REMOVED***
