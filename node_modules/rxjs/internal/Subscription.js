"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var isArray_1 = require("./util/isArray");
var isObject_1 = require("./util/isObject");
var isFunction_1 = require("./util/isFunction");
var UnsubscriptionError_1 = require("./util/UnsubscriptionError");
var Subscription = (function () ***REMOVED***
    function Subscription(unsubscribe) ***REMOVED***
        this.closed = false;
        this._parentOrParents = null;
        this._subscriptions = null;
        if (unsubscribe) ***REMOVED***
            this._unsubscribe = unsubscribe;
        ***REMOVED***
    ***REMOVED***
    Subscription.prototype.unsubscribe = function () ***REMOVED***
        var errors;
        if (this.closed) ***REMOVED***
            return;
        ***REMOVED***
        var _a = this, _parentOrParents = _a._parentOrParents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parentOrParents = null;
        this._subscriptions = null;
        if (_parentOrParents instanceof Subscription) ***REMOVED***
            _parentOrParents.remove(this);
        ***REMOVED***
        else if (_parentOrParents !== null) ***REMOVED***
            for (var index = 0; index < _parentOrParents.length; ++index) ***REMOVED***
                var parent_1 = _parentOrParents[index];
                parent_1.remove(this);
            ***REMOVED***
        ***REMOVED***
        if (isFunction_1.isFunction(_unsubscribe)) ***REMOVED***
            try ***REMOVED***
                _unsubscribe.call(this);
            ***REMOVED***
            catch (e) ***REMOVED***
                errors = e instanceof UnsubscriptionError_1.UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
            ***REMOVED***
        ***REMOVED***
        if (isArray_1.isArray(_subscriptions)) ***REMOVED***
            var index = -1;
            var len = _subscriptions.length;
            while (++index < len) ***REMOVED***
                var sub = _subscriptions[index];
                if (isObject_1.isObject(sub)) ***REMOVED***
                    try ***REMOVED***
                        sub.unsubscribe();
                    ***REMOVED***
                    catch (e) ***REMOVED***
                        errors = errors || [];
                        if (e instanceof UnsubscriptionError_1.UnsubscriptionError) ***REMOVED***
                            errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
                        ***REMOVED***
                        else ***REMOVED***
                            errors.push(e);
                        ***REMOVED***
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        if (errors) ***REMOVED***
            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
        ***REMOVED***
    ***REMOVED***;
    Subscription.prototype.add = function (teardown) ***REMOVED***
        var subscription = teardown;
        if (!teardown) ***REMOVED***
            return Subscription.EMPTY;
        ***REMOVED***
        switch (typeof teardown) ***REMOVED***
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') ***REMOVED***
                    return subscription;
                ***REMOVED***
                else if (this.closed) ***REMOVED***
                    subscription.unsubscribe();
                    return subscription;
                ***REMOVED***
                else if (!(subscription instanceof Subscription)) ***REMOVED***
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                ***REMOVED***
                break;
            default: ***REMOVED***
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
            ***REMOVED***
        ***REMOVED***
        var _parentOrParents = subscription._parentOrParents;
        if (_parentOrParents === null) ***REMOVED***
            subscription._parentOrParents = this;
        ***REMOVED***
        else if (_parentOrParents instanceof Subscription) ***REMOVED***
            if (_parentOrParents === this) ***REMOVED***
                return subscription;
            ***REMOVED***
            subscription._parentOrParents = [_parentOrParents, this];
        ***REMOVED***
        else if (_parentOrParents.indexOf(this) === -1) ***REMOVED***
            _parentOrParents.push(this);
        ***REMOVED***
        else ***REMOVED***
            return subscription;
        ***REMOVED***
        var subscriptions = this._subscriptions;
        if (subscriptions === null) ***REMOVED***
            this._subscriptions = [subscription];
        ***REMOVED***
        else ***REMOVED***
            subscriptions.push(subscription);
        ***REMOVED***
        return subscription;
    ***REMOVED***;
    Subscription.prototype.remove = function (subscription) ***REMOVED***
        var subscriptions = this._subscriptions;
        if (subscriptions) ***REMOVED***
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) ***REMOVED***
                subscriptions.splice(subscriptionIndex, 1);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    Subscription.EMPTY = (function (empty) ***REMOVED***
        empty.closed = true;
        return empty;
    ***REMOVED***(new Subscription()));
    return Subscription;
***REMOVED***());
exports.Subscription = Subscription;
function flattenUnsubscriptionErrors(errors) ***REMOVED***
    return errors.reduce(function (errs, err) ***REMOVED*** return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); ***REMOVED***, []);
***REMOVED***
//# sourceMappingURL=Subscription.js.map