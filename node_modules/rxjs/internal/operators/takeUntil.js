"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
function takeUntil(notifier) ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new TakeUntilOperator(notifier)); ***REMOVED***;
***REMOVED***
exports.takeUntil = takeUntil;
var TakeUntilOperator = (function () ***REMOVED***
    function TakeUntilOperator(notifier) ***REMOVED***
        this.notifier = notifier;
    ***REMOVED***
    TakeUntilOperator.prototype.call = function (subscriber, source) ***REMOVED***
        var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
        var notifierSubscription = subscribeToResult_1.subscribeToResult(takeUntilSubscriber, this.notifier);
        if (notifierSubscription && !takeUntilSubscriber.seenValue) ***REMOVED***
            takeUntilSubscriber.add(notifierSubscription);
            return source.subscribe(takeUntilSubscriber);
        ***REMOVED***
        return takeUntilSubscriber;
    ***REMOVED***;
    return TakeUntilOperator;
***REMOVED***());
var TakeUntilSubscriber = (function (_super) ***REMOVED***
    __extends(TakeUntilSubscriber, _super);
    function TakeUntilSubscriber(destination) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.seenValue = false;
        return _this;
    ***REMOVED***
    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.seenValue = true;
        this.complete();
    ***REMOVED***;
    TakeUntilSubscriber.prototype.notifyComplete = function () ***REMOVED***
    ***REMOVED***;
    return TakeUntilSubscriber;
***REMOVED***(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=takeUntil.js.map