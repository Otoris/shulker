import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** MonoTypeOperatorFunction ***REMOVED*** from '../types';
/**
 * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source
 * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable
 * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise
 * this method will resubscribe to the source Observable.
 *
 * ![](repeatWhen.png)
 *
 * ## Example
 * Repeat a message stream on click
 * ```ts
 * import ***REMOVED*** of, fromEvent ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** repeatWhen ***REMOVED*** from 'rxjs/operators';
 *
 * const source = of('Repeat message');
 * const documentClick$ = fromEvent(document, 'click');
 *
 * source.pipe(repeatWhen(() => documentClick$)
 * ).subscribe(data => console.log(data))
 * ```
 * @see ***REMOVED***@link repeat***REMOVED***
 * @see ***REMOVED***@link retry***REMOVED***
 * @see ***REMOVED***@link retryWhen***REMOVED***
 *
 * @param ***REMOVED***function(notifications: Observable): Observable***REMOVED*** notifier - Receives an Observable of notifications with
 * which a user can `complete` or `error`, aborting the repetition.
 * @return ***REMOVED***Observable***REMOVED*** The source Observable modified with repeat logic.
 * @method repeatWhen
 * @owner Observable
 */
export declare function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T>;
