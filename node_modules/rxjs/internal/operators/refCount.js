"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Subscriber_1 = require("../Subscriber");
function refCount() ***REMOVED***
    return function refCountOperatorFunction(source) ***REMOVED***
        return source.lift(new RefCountOperator(source));
    ***REMOVED***;
***REMOVED***
exports.refCount = refCount;
var RefCountOperator = (function () ***REMOVED***
    function RefCountOperator(connectable) ***REMOVED***
        this.connectable = connectable;
    ***REMOVED***
    RefCountOperator.prototype.call = function (subscriber, source) ***REMOVED***
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) ***REMOVED***
            refCounter.connection = connectable.connect();
        ***REMOVED***
        return subscription;
    ***REMOVED***;
    return RefCountOperator;
***REMOVED***());
var RefCountSubscriber = (function (_super) ***REMOVED***
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    ***REMOVED***
    RefCountSubscriber.prototype._unsubscribe = function () ***REMOVED***
        var connectable = this.connectable;
        if (!connectable) ***REMOVED***
            this.connection = null;
            return;
        ***REMOVED***
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) ***REMOVED***
            this.connection = null;
            return;
        ***REMOVED***
        connectable._refCount = refCount - 1;
        if (refCount > 1) ***REMOVED***
            this.connection = null;
            return;
        ***REMOVED***
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) ***REMOVED***
            sharedConnection.unsubscribe();
        ***REMOVED***
    ***REMOVED***;
    return RefCountSubscriber;
***REMOVED***(Subscriber_1.Subscriber));
//# sourceMappingURL=refCount.js.map