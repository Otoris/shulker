"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Subscriber_1 = require("../Subscriber");
var Subscription_1 = require("../Subscription");
var Observable_1 = require("../Observable");
var Subject_1 = require("../Subject");
function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) ***REMOVED***
    return function (source) ***REMOVED***
        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
    ***REMOVED***;
***REMOVED***
exports.groupBy = groupBy;
var GroupByOperator = (function () ***REMOVED***
    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) ***REMOVED***
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
    ***REMOVED***
    GroupByOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
    ***REMOVED***;
    return GroupByOperator;
***REMOVED***());
var GroupBySubscriber = (function (_super) ***REMOVED***
    __extends(GroupBySubscriber, _super);
    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.elementSelector = elementSelector;
        _this.durationSelector = durationSelector;
        _this.subjectSelector = subjectSelector;
        _this.groups = null;
        _this.attemptedToUnsubscribe = false;
        _this.count = 0;
        return _this;
    ***REMOVED***
    GroupBySubscriber.prototype._next = function (value) ***REMOVED***
        var key;
        try ***REMOVED***
            key = this.keySelector(value);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.error(err);
            return;
        ***REMOVED***
        this._group(value, key);
    ***REMOVED***;
    GroupBySubscriber.prototype._group = function (value, key) ***REMOVED***
        var groups = this.groups;
        if (!groups) ***REMOVED***
            groups = this.groups = new Map();
        ***REMOVED***
        var group = groups.get(key);
        var element;
        if (this.elementSelector) ***REMOVED***
            try ***REMOVED***
                element = this.elementSelector(value);
            ***REMOVED***
            catch (err) ***REMOVED***
                this.error(err);
            ***REMOVED***
        ***REMOVED***
        else ***REMOVED***
            element = value;
        ***REMOVED***
        if (!group) ***REMOVED***
            group = (this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject());
            groups.set(key, group);
            var groupedObservable = new GroupedObservable(key, group, this);
            this.destination.next(groupedObservable);
            if (this.durationSelector) ***REMOVED***
                var duration = void 0;
                try ***REMOVED***
                    duration = this.durationSelector(new GroupedObservable(key, group));
                ***REMOVED***
                catch (err) ***REMOVED***
                    this.error(err);
                    return;
                ***REMOVED***
                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
            ***REMOVED***
        ***REMOVED***
        if (!group.closed) ***REMOVED***
            group.next(element);
        ***REMOVED***
    ***REMOVED***;
    GroupBySubscriber.prototype._error = function (err) ***REMOVED***
        var groups = this.groups;
        if (groups) ***REMOVED***
            groups.forEach(function (group, key) ***REMOVED***
                group.error(err);
            ***REMOVED***);
            groups.clear();
        ***REMOVED***
        this.destination.error(err);
    ***REMOVED***;
    GroupBySubscriber.prototype._complete = function () ***REMOVED***
        var groups = this.groups;
        if (groups) ***REMOVED***
            groups.forEach(function (group, key) ***REMOVED***
                group.complete();
            ***REMOVED***);
            groups.clear();
        ***REMOVED***
        this.destination.complete();
    ***REMOVED***;
    GroupBySubscriber.prototype.removeGroup = function (key) ***REMOVED***
        this.groups.delete(key);
    ***REMOVED***;
    GroupBySubscriber.prototype.unsubscribe = function () ***REMOVED***
        if (!this.closed) ***REMOVED***
            this.attemptedToUnsubscribe = true;
            if (this.count === 0) ***REMOVED***
                _super.prototype.unsubscribe.call(this);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    return GroupBySubscriber;
***REMOVED***(Subscriber_1.Subscriber));
var GroupDurationSubscriber = (function (_super) ***REMOVED***
    __extends(GroupDurationSubscriber, _super);
    function GroupDurationSubscriber(key, group, parent) ***REMOVED***
        var _this = _super.call(this, group) || this;
        _this.key = key;
        _this.group = group;
        _this.parent = parent;
        return _this;
    ***REMOVED***
    GroupDurationSubscriber.prototype._next = function (value) ***REMOVED***
        this.complete();
    ***REMOVED***;
    GroupDurationSubscriber.prototype._unsubscribe = function () ***REMOVED***
        var _a = this, parent = _a.parent, key = _a.key;
        this.key = this.parent = null;
        if (parent) ***REMOVED***
            parent.removeGroup(key);
        ***REMOVED***
    ***REMOVED***;
    return GroupDurationSubscriber;
***REMOVED***(Subscriber_1.Subscriber));
var GroupedObservable = (function (_super) ***REMOVED***
    __extends(GroupedObservable, _super);
    function GroupedObservable(key, groupSubject, refCountSubscription) ***REMOVED***
        var _this = _super.call(this) || this;
        _this.key = key;
        _this.groupSubject = groupSubject;
        _this.refCountSubscription = refCountSubscription;
        return _this;
    ***REMOVED***
    GroupedObservable.prototype._subscribe = function (subscriber) ***REMOVED***
        var subscription = new Subscription_1.Subscription();
        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
        if (refCountSubscription && !refCountSubscription.closed) ***REMOVED***
            subscription.add(new InnerRefCountSubscription(refCountSubscription));
        ***REMOVED***
        subscription.add(groupSubject.subscribe(subscriber));
        return subscription;
    ***REMOVED***;
    return GroupedObservable;
***REMOVED***(Observable_1.Observable));
exports.GroupedObservable = GroupedObservable;
var InnerRefCountSubscription = (function (_super) ***REMOVED***
    __extends(InnerRefCountSubscription, _super);
    function InnerRefCountSubscription(parent) ***REMOVED***
        var _this = _super.call(this) || this;
        _this.parent = parent;
        parent.count++;
        return _this;
    ***REMOVED***
    InnerRefCountSubscription.prototype.unsubscribe = function () ***REMOVED***
        var parent = this.parent;
        if (!parent.closed && !this.closed) ***REMOVED***
            _super.prototype.unsubscribe.call(this);
            parent.count -= 1;
            if (parent.count === 0 && parent.attemptedToUnsubscribe) ***REMOVED***
                parent.unsubscribe();
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    return InnerRefCountSubscription;
***REMOVED***(Subscription_1.Subscription));
//# sourceMappingURL=groupBy.js.map