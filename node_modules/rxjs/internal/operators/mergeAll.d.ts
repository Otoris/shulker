import ***REMOVED*** OperatorFunction, ObservableInput ***REMOVED*** from '../types';
/**
 * Converts a higher-order Observable into a first-order Observable which
 * concurrently delivers all values that are emitted on the inner Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables.</span>
 *
 * ![](mergeAll.png)
 *
 * `mergeAll` subscribes to an Observable that emits Observables, also known as
 * a higher-order Observable. Each time it observes one of these emitted inner
 * Observables, it subscribes to that and delivers all the values from the
 * inner Observable on the output Observable. The output Observable only
 * completes once all inner Observables have completed. Any error delivered by
 * a inner Observable will be immediately emitted on the output Observable.
 *
 * ## Examples
 * Spawn a new interval Observable for each click event, and blend their outputs as one Observable
 * ```ts
 * import ***REMOVED*** fromEvent, interval ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** map, mergeAll ***REMOVED*** from 'rxjs/operators';
 *
 * const clicks = fromEvent(document, 'click');
 * const higherOrder = clicks.pipe(map((ev) => interval(1000)));
 * const firstOrder = higherOrder.pipe(mergeAll());
 * firstOrder.subscribe(x => console.log(x));
 * ```
 *
 * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers
 * ```ts
 * import ***REMOVED*** fromEvent, interval ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** take, map, mergeAll ***REMOVED*** from 'rxjs/operators';
 *
 * const clicks = fromEvent(document, 'click');
 * const higherOrder = clicks.pipe(
 *   map((ev) => interval(1000).pipe(take(10))),
 * );
 * const firstOrder = higherOrder.pipe(mergeAll(2));
 * firstOrder.subscribe(x => console.log(x));
 * ```
 *
 * @see ***REMOVED***@link combineAll***REMOVED***
 * @see ***REMOVED***@link concatAll***REMOVED***
 * @see ***REMOVED***@link exhaust***REMOVED***
 * @see ***REMOVED***@link merge***REMOVED***
 * @see ***REMOVED***@link mergeMap***REMOVED***
 * @see ***REMOVED***@link mergeMapTo***REMOVED***
 * @see ***REMOVED***@link mergeScan***REMOVED***
 * @see ***REMOVED***@link switchAll***REMOVED***
 * @see ***REMOVED***@link switchMap***REMOVED***
 * @see ***REMOVED***@link zipAll***REMOVED***
 *
 * @param ***REMOVED***number***REMOVED*** [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
 * Observables being subscribed to concurrently.
 * @return ***REMOVED***Observable***REMOVED*** An Observable that emits values coming from all the
 * inner Observables emitted by the source Observable.
 * @method mergeAll
 * @owner Observable
 */
export declare function mergeAll<T>(concurrent?: number): OperatorFunction<ObservableInput<T>, T>;
