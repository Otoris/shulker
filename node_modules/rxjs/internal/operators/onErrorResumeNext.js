"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var from_1 = require("../observable/from");
var isArray_1 = require("../util/isArray");
var OuterSubscriber_1 = require("../OuterSubscriber");
var InnerSubscriber_1 = require("../InnerSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
function onErrorResumeNext() ***REMOVED***
    var nextSources = [];
    for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
        nextSources[_i] = arguments[_i];
    ***REMOVED***
    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) ***REMOVED***
        nextSources = nextSources[0];
    ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new OnErrorResumeNextOperator(nextSources)); ***REMOVED***;
***REMOVED***
exports.onErrorResumeNext = onErrorResumeNext;
function onErrorResumeNextStatic() ***REMOVED***
    var nextSources = [];
    for (var _i = 0; _i < arguments.length; _i++) ***REMOVED***
        nextSources[_i] = arguments[_i];
    ***REMOVED***
    var source = null;
    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) ***REMOVED***
        nextSources = nextSources[0];
    ***REMOVED***
    source = nextSources.shift();
    return from_1.from(source, null).lift(new OnErrorResumeNextOperator(nextSources));
***REMOVED***
exports.onErrorResumeNextStatic = onErrorResumeNextStatic;
var OnErrorResumeNextOperator = (function () ***REMOVED***
    function OnErrorResumeNextOperator(nextSources) ***REMOVED***
        this.nextSources = nextSources;
    ***REMOVED***
    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
    ***REMOVED***;
    return OnErrorResumeNextOperator;
***REMOVED***());
var OnErrorResumeNextSubscriber = (function (_super) ***REMOVED***
    __extends(OnErrorResumeNextSubscriber, _super);
    function OnErrorResumeNextSubscriber(destination, nextSources) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.nextSources = nextSources;
        return _this;
    ***REMOVED***
    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) ***REMOVED***
        this.subscribeToNextSource();
    ***REMOVED***;
    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) ***REMOVED***
        this.subscribeToNextSource();
    ***REMOVED***;
    OnErrorResumeNextSubscriber.prototype._error = function (err) ***REMOVED***
        this.subscribeToNextSource();
        this.unsubscribe();
    ***REMOVED***;
    OnErrorResumeNextSubscriber.prototype._complete = function () ***REMOVED***
        this.subscribeToNextSource();
        this.unsubscribe();
    ***REMOVED***;
    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () ***REMOVED***
        var next = this.nextSources.shift();
        if (!!next) ***REMOVED***
            var innerSubscriber = new InnerSubscriber_1.InnerSubscriber(this, undefined, undefined);
            var destination = this.destination;
            destination.add(innerSubscriber);
            var innerSubscription = subscribeToResult_1.subscribeToResult(this, next, undefined, undefined, innerSubscriber);
            if (innerSubscription !== innerSubscriber) ***REMOVED***
                destination.add(innerSubscription);
            ***REMOVED***
        ***REMOVED***
        else ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***;
    return OnErrorResumeNextSubscriber;
***REMOVED***(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=onErrorResumeNext.js.map