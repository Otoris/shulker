"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var ReplaySubject_1 = require("../ReplaySubject");
function shareReplay(configOrBufferSize, windowTime, scheduler) ***REMOVED***
    var config;
    if (configOrBufferSize && typeof configOrBufferSize === 'object') ***REMOVED***
        config = configOrBufferSize;
    ***REMOVED***
    else ***REMOVED***
        config = ***REMOVED***
            bufferSize: configOrBufferSize,
            windowTime: windowTime,
            refCount: false,
            scheduler: scheduler
        ***REMOVED***;
    ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(shareReplayOperator(config)); ***REMOVED***;
***REMOVED***
exports.shareReplay = shareReplay;
function shareReplayOperator(_a) ***REMOVED***
    var _b = _a.bufferSize, bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b, _c = _a.windowTime, windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c, useRefCount = _a.refCount, scheduler = _a.scheduler;
    var subject;
    var refCount = 0;
    var subscription;
    var hasError = false;
    var isComplete = false;
    return function shareReplayOperation(source) ***REMOVED***
        refCount++;
        if (!subject || hasError) ***REMOVED***
            hasError = false;
            subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);
            subscription = source.subscribe(***REMOVED***
                next: function (value) ***REMOVED*** subject.next(value); ***REMOVED***,
                error: function (err) ***REMOVED***
                    hasError = true;
                    subject.error(err);
                ***REMOVED***,
                complete: function () ***REMOVED***
                    isComplete = true;
                    subscription = undefined;
                    subject.complete();
                ***REMOVED***,
            ***REMOVED***);
        ***REMOVED***
        var innerSub = subject.subscribe(this);
        this.add(function () ***REMOVED***
            refCount--;
            innerSub.unsubscribe();
            if (subscription && !isComplete && useRefCount && refCount === 0) ***REMOVED***
                subscription.unsubscribe();
                subscription = undefined;
                subject = undefined;
            ***REMOVED***
        ***REMOVED***);
    ***REMOVED***;
***REMOVED***
//# sourceMappingURL=shareReplay.js.map