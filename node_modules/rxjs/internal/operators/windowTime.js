"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Subject_1 = require("../Subject");
var async_1 = require("../scheduler/async");
var Subscriber_1 = require("../Subscriber");
var isNumeric_1 = require("../util/isNumeric");
var isScheduler_1 = require("../util/isScheduler");
function windowTime(windowTimeSpan) ***REMOVED***
    var scheduler = async_1.async;
    var windowCreationInterval = null;
    var maxWindowSize = Number.POSITIVE_INFINITY;
    if (isScheduler_1.isScheduler(arguments[3])) ***REMOVED***
        scheduler = arguments[3];
    ***REMOVED***
    if (isScheduler_1.isScheduler(arguments[2])) ***REMOVED***
        scheduler = arguments[2];
    ***REMOVED***
    else if (isNumeric_1.isNumeric(arguments[2])) ***REMOVED***
        maxWindowSize = arguments[2];
    ***REMOVED***
    if (isScheduler_1.isScheduler(arguments[1])) ***REMOVED***
        scheduler = arguments[1];
    ***REMOVED***
    else if (isNumeric_1.isNumeric(arguments[1])) ***REMOVED***
        windowCreationInterval = arguments[1];
    ***REMOVED***
    return function windowTimeOperatorFunction(source) ***REMOVED***
        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));
    ***REMOVED***;
***REMOVED***
exports.windowTime = windowTime;
var WindowTimeOperator = (function () ***REMOVED***
    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) ***REMOVED***
        this.windowTimeSpan = windowTimeSpan;
        this.windowCreationInterval = windowCreationInterval;
        this.maxWindowSize = maxWindowSize;
        this.scheduler = scheduler;
    ***REMOVED***
    WindowTimeOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
    ***REMOVED***;
    return WindowTimeOperator;
***REMOVED***());
var CountedSubject = (function (_super) ***REMOVED***
    __extends(CountedSubject, _super);
    function CountedSubject() ***REMOVED***
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._numberOfNextedValues = 0;
        return _this;
    ***REMOVED***
    CountedSubject.prototype.next = function (value) ***REMOVED***
        this._numberOfNextedValues++;
        _super.prototype.next.call(this, value);
    ***REMOVED***;
    Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", ***REMOVED***
        get: function () ***REMOVED***
            return this._numberOfNextedValues;
        ***REMOVED***,
        enumerable: true,
        configurable: true
    ***REMOVED***);
    return CountedSubject;
***REMOVED***(Subject_1.Subject));
var WindowTimeSubscriber = (function (_super) ***REMOVED***
    __extends(WindowTimeSubscriber, _super);
    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.windowTimeSpan = windowTimeSpan;
        _this.windowCreationInterval = windowCreationInterval;
        _this.maxWindowSize = maxWindowSize;
        _this.scheduler = scheduler;
        _this.windows = [];
        var window = _this.openWindow();
        if (windowCreationInterval !== null && windowCreationInterval >= 0) ***REMOVED***
            var closeState = ***REMOVED*** subscriber: _this, window: window, context: null ***REMOVED***;
            var creationState = ***REMOVED*** windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler ***REMOVED***;
            _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
            _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
        ***REMOVED***
        else ***REMOVED***
            var timeSpanOnlyState = ***REMOVED*** subscriber: _this, window: window, windowTimeSpan: windowTimeSpan ***REMOVED***;
            _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
        ***REMOVED***
        return _this;
    ***REMOVED***
    WindowTimeSubscriber.prototype._next = function (value) ***REMOVED***
        var windows = this.windows;
        var len = windows.length;
        for (var i = 0; i < len; i++) ***REMOVED***
            var window_1 = windows[i];
            if (!window_1.closed) ***REMOVED***
                window_1.next(value);
                if (window_1.numberOfNextedValues >= this.maxWindowSize) ***REMOVED***
                    this.closeWindow(window_1);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    WindowTimeSubscriber.prototype._error = function (err) ***REMOVED***
        var windows = this.windows;
        while (windows.length > 0) ***REMOVED***
            windows.shift().error(err);
        ***REMOVED***
        this.destination.error(err);
    ***REMOVED***;
    WindowTimeSubscriber.prototype._complete = function () ***REMOVED***
        var windows = this.windows;
        while (windows.length > 0) ***REMOVED***
            var window_2 = windows.shift();
            if (!window_2.closed) ***REMOVED***
                window_2.complete();
            ***REMOVED***
        ***REMOVED***
        this.destination.complete();
    ***REMOVED***;
    WindowTimeSubscriber.prototype.openWindow = function () ***REMOVED***
        var window = new CountedSubject();
        this.windows.push(window);
        var destination = this.destination;
        destination.next(window);
        return window;
    ***REMOVED***;
    WindowTimeSubscriber.prototype.closeWindow = function (window) ***REMOVED***
        window.complete();
        var windows = this.windows;
        windows.splice(windows.indexOf(window), 1);
    ***REMOVED***;
    return WindowTimeSubscriber;
***REMOVED***(Subscriber_1.Subscriber));
function dispatchWindowTimeSpanOnly(state) ***REMOVED***
    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
    if (window) ***REMOVED***
        subscriber.closeWindow(window);
    ***REMOVED***
    state.window = subscriber.openWindow();
    this.schedule(state, windowTimeSpan);
***REMOVED***
function dispatchWindowCreation(state) ***REMOVED***
    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
    var window = subscriber.openWindow();
    var action = this;
    var context = ***REMOVED*** action: action, subscription: null ***REMOVED***;
    var timeSpanState = ***REMOVED*** subscriber: subscriber, window: window, context: context ***REMOVED***;
    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
    action.add(context.subscription);
    action.schedule(state, windowCreationInterval);
***REMOVED***
function dispatchWindowClose(state) ***REMOVED***
    var subscriber = state.subscriber, window = state.window, context = state.context;
    if (context && context.action && context.subscription) ***REMOVED***
        context.action.remove(context.subscription);
    ***REMOVED***
    subscriber.closeWindow(window);
***REMOVED***
//# sourceMappingURL=windowTime.js.map