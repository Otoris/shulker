"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var subscribeToResult_1 = require("../util/subscribeToResult");
var OuterSubscriber_1 = require("../OuterSubscriber");
var InnerSubscriber_1 = require("../InnerSubscriber");
var map_1 = require("./map");
var from_1 = require("../observable/from");
function mergeMap(project, resultSelector, concurrent) ***REMOVED***
    if (concurrent === void 0) ***REMOVED*** concurrent = Number.POSITIVE_INFINITY; ***REMOVED***
    if (typeof resultSelector === 'function') ***REMOVED***
        return function (source) ***REMOVED*** return source.pipe(mergeMap(function (a, i) ***REMOVED*** return from_1.from(project(a, i)).pipe(map_1.map(function (b, ii) ***REMOVED*** return resultSelector(a, b, i, ii); ***REMOVED***)); ***REMOVED***, concurrent)); ***REMOVED***;
    ***REMOVED***
    else if (typeof resultSelector === 'number') ***REMOVED***
        concurrent = resultSelector;
    ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new MergeMapOperator(project, concurrent)); ***REMOVED***;
***REMOVED***
exports.mergeMap = mergeMap;
var MergeMapOperator = (function () ***REMOVED***
    function MergeMapOperator(project, concurrent) ***REMOVED***
        if (concurrent === void 0) ***REMOVED*** concurrent = Number.POSITIVE_INFINITY; ***REMOVED***
        this.project = project;
        this.concurrent = concurrent;
    ***REMOVED***
    MergeMapOperator.prototype.call = function (observer, source) ***REMOVED***
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
    ***REMOVED***;
    return MergeMapOperator;
***REMOVED***());
exports.MergeMapOperator = MergeMapOperator;
var MergeMapSubscriber = (function (_super) ***REMOVED***
    __extends(MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, concurrent) ***REMOVED***
        if (concurrent === void 0) ***REMOVED*** concurrent = Number.POSITIVE_INFINITY; ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    ***REMOVED***
    MergeMapSubscriber.prototype._next = function (value) ***REMOVED***
        if (this.active < this.concurrent) ***REMOVED***
            this._tryNext(value);
        ***REMOVED***
        else ***REMOVED***
            this.buffer.push(value);
        ***REMOVED***
    ***REMOVED***;
    MergeMapSubscriber.prototype._tryNext = function (value) ***REMOVED***
        var result;
        var index = this.index++;
        try ***REMOVED***
            result = this.project(value, index);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
            return;
        ***REMOVED***
        this.active++;
        this._innerSub(result, value, index);
    ***REMOVED***;
    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) ***REMOVED***
        var innerSubscriber = new InnerSubscriber_1.InnerSubscriber(this, value, index);
        var destination = this.destination;
        destination.add(innerSubscriber);
        var innerSubscription = subscribeToResult_1.subscribeToResult(this, ish, undefined, undefined, innerSubscriber);
        if (innerSubscription !== innerSubscriber) ***REMOVED***
            destination.add(innerSubscription);
        ***REMOVED***
    ***REMOVED***;
    MergeMapSubscriber.prototype._complete = function () ***REMOVED***
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
        this.unsubscribe();
    ***REMOVED***;
    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.destination.next(innerValue);
    ***REMOVED***;
    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) ***REMOVED***
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) ***REMOVED***
            this._next(buffer.shift());
        ***REMOVED***
        else if (this.active === 0 && this.hasCompleted) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***;
    return MergeMapSubscriber;
***REMOVED***(OuterSubscriber_1.OuterSubscriber));
exports.MergeMapSubscriber = MergeMapSubscriber;
//# sourceMappingURL=mergeMap.js.map