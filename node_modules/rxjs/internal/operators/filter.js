"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Subscriber_1 = require("../Subscriber");
function filter(predicate, thisArg) ***REMOVED***
    return function filterOperatorFunction(source) ***REMOVED***
        return source.lift(new FilterOperator(predicate, thisArg));
    ***REMOVED***;
***REMOVED***
exports.filter = filter;
var FilterOperator = (function () ***REMOVED***
    function FilterOperator(predicate, thisArg) ***REMOVED***
        this.predicate = predicate;
        this.thisArg = thisArg;
    ***REMOVED***
    FilterOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    ***REMOVED***;
    return FilterOperator;
***REMOVED***());
var FilterSubscriber = (function (_super) ***REMOVED***
    __extends(FilterSubscriber, _super);
    function FilterSubscriber(destination, predicate, thisArg) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.thisArg = thisArg;
        _this.count = 0;
        return _this;
    ***REMOVED***
    FilterSubscriber.prototype._next = function (value) ***REMOVED***
        var result;
        try ***REMOVED***
            result = this.predicate.call(this.thisArg, value, this.count++);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
            return;
        ***REMOVED***
        if (result) ***REMOVED***
            this.destination.next(value);
        ***REMOVED***
    ***REMOVED***;
    return FilterSubscriber;
***REMOVED***(Subscriber_1.Subscriber));
//# sourceMappingURL=filter.js.map