"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
function exhaust() ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new SwitchFirstOperator()); ***REMOVED***;
***REMOVED***
exports.exhaust = exhaust;
var SwitchFirstOperator = (function () ***REMOVED***
    function SwitchFirstOperator() ***REMOVED***
    ***REMOVED***
    SwitchFirstOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new SwitchFirstSubscriber(subscriber));
    ***REMOVED***;
    return SwitchFirstOperator;
***REMOVED***());
var SwitchFirstSubscriber = (function (_super) ***REMOVED***
    __extends(SwitchFirstSubscriber, _super);
    function SwitchFirstSubscriber(destination) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.hasCompleted = false;
        _this.hasSubscription = false;
        return _this;
    ***REMOVED***
    SwitchFirstSubscriber.prototype._next = function (value) ***REMOVED***
        if (!this.hasSubscription) ***REMOVED***
            this.hasSubscription = true;
            this.add(subscribeToResult_1.subscribeToResult(this, value));
        ***REMOVED***
    ***REMOVED***;
    SwitchFirstSubscriber.prototype._complete = function () ***REMOVED***
        this.hasCompleted = true;
        if (!this.hasSubscription) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***;
    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) ***REMOVED***
        this.remove(innerSub);
        this.hasSubscription = false;
        if (this.hasCompleted) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***;
    return SwitchFirstSubscriber;
***REMOVED***(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=exhaust.js.map