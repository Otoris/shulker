"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Subject_1 = require("../Subject");
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
function retryWhen(notifier) ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new RetryWhenOperator(notifier, source)); ***REMOVED***;
***REMOVED***
exports.retryWhen = retryWhen;
var RetryWhenOperator = (function () ***REMOVED***
    function RetryWhenOperator(notifier, source) ***REMOVED***
        this.notifier = notifier;
        this.source = source;
    ***REMOVED***
    RetryWhenOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
    ***REMOVED***;
    return RetryWhenOperator;
***REMOVED***());
var RetryWhenSubscriber = (function (_super) ***REMOVED***
    __extends(RetryWhenSubscriber, _super);
    function RetryWhenSubscriber(destination, notifier, source) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.notifier = notifier;
        _this.source = source;
        return _this;
    ***REMOVED***
    RetryWhenSubscriber.prototype.error = function (err) ***REMOVED***
        if (!this.isStopped) ***REMOVED***
            var errors = this.errors;
            var retries = this.retries;
            var retriesSubscription = this.retriesSubscription;
            if (!retries) ***REMOVED***
                errors = new Subject_1.Subject();
                try ***REMOVED***
                    var notifier = this.notifier;
                    retries = notifier(errors);
                ***REMOVED***
                catch (e) ***REMOVED***
                    return _super.prototype.error.call(this, e);
                ***REMOVED***
                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
            ***REMOVED***
            else ***REMOVED***
                this.errors = null;
                this.retriesSubscription = null;
            ***REMOVED***
            this._unsubscribeAndRecycle();
            this.errors = errors;
            this.retries = retries;
            this.retriesSubscription = retriesSubscription;
            errors.next(err);
        ***REMOVED***
    ***REMOVED***;
    RetryWhenSubscriber.prototype._unsubscribe = function () ***REMOVED***
        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
        if (errors) ***REMOVED***
            errors.unsubscribe();
            this.errors = null;
        ***REMOVED***
        if (retriesSubscription) ***REMOVED***
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        ***REMOVED***
        this.retries = null;
    ***REMOVED***;
    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        var _unsubscribe = this._unsubscribe;
        this._unsubscribe = null;
        this._unsubscribeAndRecycle();
        this._unsubscribe = _unsubscribe;
        this.source.subscribe(this);
    ***REMOVED***;
    return RetryWhenSubscriber;
***REMOVED***(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=retryWhen.js.map