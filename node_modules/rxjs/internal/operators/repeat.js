"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Subscriber_1 = require("../Subscriber");
var empty_1 = require("../observable/empty");
function repeat(count) ***REMOVED***
    if (count === void 0) ***REMOVED*** count = -1; ***REMOVED***
    return function (source) ***REMOVED***
        if (count === 0) ***REMOVED***
            return empty_1.empty();
        ***REMOVED***
        else if (count < 0) ***REMOVED***
            return source.lift(new RepeatOperator(-1, source));
        ***REMOVED***
        else ***REMOVED***
            return source.lift(new RepeatOperator(count - 1, source));
        ***REMOVED***
    ***REMOVED***;
***REMOVED***
exports.repeat = repeat;
var RepeatOperator = (function () ***REMOVED***
    function RepeatOperator(count, source) ***REMOVED***
        this.count = count;
        this.source = source;
    ***REMOVED***
    RepeatOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
    ***REMOVED***;
    return RepeatOperator;
***REMOVED***());
var RepeatSubscriber = (function (_super) ***REMOVED***
    __extends(RepeatSubscriber, _super);
    function RepeatSubscriber(destination, count, source) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.count = count;
        _this.source = source;
        return _this;
    ***REMOVED***
    RepeatSubscriber.prototype.complete = function () ***REMOVED***
        if (!this.isStopped) ***REMOVED***
            var _a = this, source = _a.source, count = _a.count;
            if (count === 0) ***REMOVED***
                return _super.prototype.complete.call(this);
            ***REMOVED***
            else if (count > -1) ***REMOVED***
                this.count = count - 1;
            ***REMOVED***
            source.subscribe(this._unsubscribeAndRecycle());
        ***REMOVED***
    ***REMOVED***;
    return RepeatSubscriber;
***REMOVED***(Subscriber_1.Subscriber));
//# sourceMappingURL=repeat.js.map