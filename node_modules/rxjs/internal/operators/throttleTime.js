"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Subscriber_1 = require("../Subscriber");
var async_1 = require("../scheduler/async");
var throttle_1 = require("./throttle");
function throttleTime(duration, scheduler, config) ***REMOVED***
    if (scheduler === void 0) ***REMOVED*** scheduler = async_1.async; ***REMOVED***
    if (config === void 0) ***REMOVED*** config = throttle_1.defaultThrottleConfig; ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); ***REMOVED***;
***REMOVED***
exports.throttleTime = throttleTime;
var ThrottleTimeOperator = (function () ***REMOVED***
    function ThrottleTimeOperator(duration, scheduler, leading, trailing) ***REMOVED***
        this.duration = duration;
        this.scheduler = scheduler;
        this.leading = leading;
        this.trailing = trailing;
    ***REMOVED***
    ThrottleTimeOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
    ***REMOVED***;
    return ThrottleTimeOperator;
***REMOVED***());
var ThrottleTimeSubscriber = (function (_super) ***REMOVED***
    __extends(ThrottleTimeSubscriber, _super);
    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.duration = duration;
        _this.scheduler = scheduler;
        _this.leading = leading;
        _this.trailing = trailing;
        _this._hasTrailingValue = false;
        _this._trailingValue = null;
        return _this;
    ***REMOVED***
    ThrottleTimeSubscriber.prototype._next = function (value) ***REMOVED***
        if (this.throttled) ***REMOVED***
            if (this.trailing) ***REMOVED***
                this._trailingValue = value;
                this._hasTrailingValue = true;
            ***REMOVED***
        ***REMOVED***
        else ***REMOVED***
            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, ***REMOVED*** subscriber: this ***REMOVED***));
            if (this.leading) ***REMOVED***
                this.destination.next(value);
            ***REMOVED***
            else if (this.trailing) ***REMOVED***
                this._trailingValue = value;
                this._hasTrailingValue = true;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;
    ThrottleTimeSubscriber.prototype._complete = function () ***REMOVED***
        if (this._hasTrailingValue) ***REMOVED***
            this.destination.next(this._trailingValue);
            this.destination.complete();
        ***REMOVED***
        else ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***;
    ThrottleTimeSubscriber.prototype.clearThrottle = function () ***REMOVED***
        var throttled = this.throttled;
        if (throttled) ***REMOVED***
            if (this.trailing && this._hasTrailingValue) ***REMOVED***
                this.destination.next(this._trailingValue);
                this._trailingValue = null;
                this._hasTrailingValue = false;
            ***REMOVED***
            throttled.unsubscribe();
            this.remove(throttled);
            this.throttled = null;
        ***REMOVED***
    ***REMOVED***;
    return ThrottleTimeSubscriber;
***REMOVED***(Subscriber_1.Subscriber));
function dispatchNext(arg) ***REMOVED***
    var subscriber = arg.subscriber;
    subscriber.clearThrottle();
***REMOVED***
//# sourceMappingURL=throttleTime.js.map