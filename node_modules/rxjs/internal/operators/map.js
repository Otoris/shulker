"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Subscriber_1 = require("../Subscriber");
function map(project, thisArg) ***REMOVED***
    return function mapOperation(source) ***REMOVED***
        if (typeof project !== 'function') ***REMOVED***
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        ***REMOVED***
        return source.lift(new MapOperator(project, thisArg));
    ***REMOVED***;
***REMOVED***
exports.map = map;
var MapOperator = (function () ***REMOVED***
    function MapOperator(project, thisArg) ***REMOVED***
        this.project = project;
        this.thisArg = thisArg;
    ***REMOVED***
    MapOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    ***REMOVED***;
    return MapOperator;
***REMOVED***());
exports.MapOperator = MapOperator;
var MapSubscriber = (function (_super) ***REMOVED***
    __extends(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.count = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    ***REMOVED***
    MapSubscriber.prototype._next = function (value) ***REMOVED***
        var result;
        try ***REMOVED***
            result = this.project.call(this.thisArg, value, this.count++);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
            return;
        ***REMOVED***
        this.destination.next(result);
    ***REMOVED***;
    return MapSubscriber;
***REMOVED***(Subscriber_1.Subscriber));
//# sourceMappingURL=map.js.map