"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Subscriber_1 = require("../Subscriber");
var async_1 = require("../scheduler/async");
function sampleTime(period, scheduler) ***REMOVED***
    if (scheduler === void 0) ***REMOVED*** scheduler = async_1.async; ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new SampleTimeOperator(period, scheduler)); ***REMOVED***;
***REMOVED***
exports.sampleTime = sampleTime;
var SampleTimeOperator = (function () ***REMOVED***
    function SampleTimeOperator(period, scheduler) ***REMOVED***
        this.period = period;
        this.scheduler = scheduler;
    ***REMOVED***
    SampleTimeOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
    ***REMOVED***;
    return SampleTimeOperator;
***REMOVED***());
var SampleTimeSubscriber = (function (_super) ***REMOVED***
    __extends(SampleTimeSubscriber, _super);
    function SampleTimeSubscriber(destination, period, scheduler) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.period = period;
        _this.scheduler = scheduler;
        _this.hasValue = false;
        _this.add(scheduler.schedule(dispatchNotification, period, ***REMOVED*** subscriber: _this, period: period ***REMOVED***));
        return _this;
    ***REMOVED***
    SampleTimeSubscriber.prototype._next = function (value) ***REMOVED***
        this.lastValue = value;
        this.hasValue = true;
    ***REMOVED***;
    SampleTimeSubscriber.prototype.notifyNext = function () ***REMOVED***
        if (this.hasValue) ***REMOVED***
            this.hasValue = false;
            this.destination.next(this.lastValue);
        ***REMOVED***
    ***REMOVED***;
    return SampleTimeSubscriber;
***REMOVED***(Subscriber_1.Subscriber));
function dispatchNotification(state) ***REMOVED***
    var subscriber = state.subscriber, period = state.period;
    subscriber.notifyNext();
    this.schedule(state, period);
***REMOVED***
//# sourceMappingURL=sampleTime.js.map