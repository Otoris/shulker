"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var Subject_1 = require("../Subject");
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
function repeatWhen(notifier) ***REMOVED***
    return function (source) ***REMOVED*** return source.lift(new RepeatWhenOperator(notifier)); ***REMOVED***;
***REMOVED***
exports.repeatWhen = repeatWhen;
var RepeatWhenOperator = (function () ***REMOVED***
    function RepeatWhenOperator(notifier) ***REMOVED***
        this.notifier = notifier;
    ***REMOVED***
    RepeatWhenOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
    ***REMOVED***;
    return RepeatWhenOperator;
***REMOVED***());
var RepeatWhenSubscriber = (function (_super) ***REMOVED***
    __extends(RepeatWhenSubscriber, _super);
    function RepeatWhenSubscriber(destination, notifier, source) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.notifier = notifier;
        _this.source = source;
        _this.sourceIsBeingSubscribedTo = true;
        return _this;
    ***REMOVED***
    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.sourceIsBeingSubscribedTo = true;
        this.source.subscribe(this);
    ***REMOVED***;
    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) ***REMOVED***
        if (this.sourceIsBeingSubscribedTo === false) ***REMOVED***
            return _super.prototype.complete.call(this);
        ***REMOVED***
    ***REMOVED***;
    RepeatWhenSubscriber.prototype.complete = function () ***REMOVED***
        this.sourceIsBeingSubscribedTo = false;
        if (!this.isStopped) ***REMOVED***
            if (!this.retries) ***REMOVED***
                this.subscribeToRetries();
            ***REMOVED***
            if (!this.retriesSubscription || this.retriesSubscription.closed) ***REMOVED***
                return _super.prototype.complete.call(this);
            ***REMOVED***
            this._unsubscribeAndRecycle();
            this.notifications.next();
        ***REMOVED***
    ***REMOVED***;
    RepeatWhenSubscriber.prototype._unsubscribe = function () ***REMOVED***
        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
        if (notifications) ***REMOVED***
            notifications.unsubscribe();
            this.notifications = null;
        ***REMOVED***
        if (retriesSubscription) ***REMOVED***
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        ***REMOVED***
        this.retries = null;
    ***REMOVED***;
    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () ***REMOVED***
        var _unsubscribe = this._unsubscribe;
        this._unsubscribe = null;
        _super.prototype._unsubscribeAndRecycle.call(this);
        this._unsubscribe = _unsubscribe;
        return this;
    ***REMOVED***;
    RepeatWhenSubscriber.prototype.subscribeToRetries = function () ***REMOVED***
        this.notifications = new Subject_1.Subject();
        var retries;
        try ***REMOVED***
            var notifier = this.notifier;
            retries = notifier(this.notifications);
        ***REMOVED***
        catch (e) ***REMOVED***
            return _super.prototype.complete.call(this);
        ***REMOVED***
        this.retries = retries;
        this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);
    ***REMOVED***;
    return RepeatWhenSubscriber;
***REMOVED***(OuterSubscriber_1.OuterSubscriber));
//# sourceMappingURL=repeatWhen.js.map