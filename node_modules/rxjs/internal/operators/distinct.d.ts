import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** MonoTypeOperatorFunction ***REMOVED*** from '../types';
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.
 *
 * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will
 * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the
 * source observable directly with an equality check against previous values.
 *
 * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.
 *
 * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the
 * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`
 * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so
 * that the internal `Set` can be "flushed", basically clearing it of values.
 *
 * ## Examples
 * A simple example with numbers
 * ```ts
 * import ***REMOVED*** of ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** distinct ***REMOVED*** from 'rxjs/operators';
 *
 * of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1).pipe(
 *     distinct(),
 *   )
 *   .subscribe(x => console.log(x)); // 1, 2, 3, 4
 * ```
 *
 * An example using a keySelector function
 * ```typescript
 * import ***REMOVED*** of ***REMOVED*** from 'rxjs';
 * import ***REMOVED*** distinct ***REMOVED*** from 'rxjs/operators';
 *
 * interface Person ***REMOVED***
 *    age: number,
 *    name: string
 * ***REMOVED***
 *
 * of<Person>(
 *     ***REMOVED*** age: 4, name: 'Foo'***REMOVED***,
 *     ***REMOVED*** age: 7, name: 'Bar'***REMOVED***,
 *     ***REMOVED*** age: 5, name: 'Foo'***REMOVED***,
 *   ).pipe(
 *     distinct((p: Person) => p.name),
 *   )
 *   .subscribe(x => console.log(x));
 *
 * // displays:
 * // ***REMOVED*** age: 4, name: 'Foo' ***REMOVED***
 * // ***REMOVED*** age: 7, name: 'Bar' ***REMOVED***
 * ```
 * @see ***REMOVED***@link distinctUntilChanged***REMOVED***
 * @see ***REMOVED***@link distinctUntilKeyChanged***REMOVED***
 *
 * @param ***REMOVED***function***REMOVED*** [keySelector] Optional function to select which value you want to check as distinct.
 * @param ***REMOVED***Observable***REMOVED*** [flushes] Optional Observable for flushing the internal HashSet of the operator.
 * @return ***REMOVED***Observable***REMOVED*** An Observable that emits items from the source Observable with distinct values.
 * @method distinct
 * @owner Observable
 */
export declare function distinct<T, K>(keySelector?: (value: T) => K, flushes?: Observable<any>): MonoTypeOperatorFunction<T>;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends ***REMOVED***Ignored***REMOVED***
 */
export declare class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> ***REMOVED***
    private keySelector;
    private values;
    constructor(destination: Subscriber<T>, keySelector: (value: T) => K, flushes: Observable<any>);
    notifyNext(outerValue: T, innerValue: T, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, T>): void;
    notifyError(error: any, innerSub: InnerSubscriber<T, T>): void;
    protected _next(value: T): void;
    private _useKeySelector;
    private _finalizeNext;
***REMOVED***
