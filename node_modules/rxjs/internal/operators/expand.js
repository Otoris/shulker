"use strict";
var __extends = (this && this.__extends) || (function () ***REMOVED***
    var extendStatics = function (d, b) ***REMOVED***
        extendStatics = Object.setPrototypeOf ||
            (***REMOVED*** __proto__: [] ***REMOVED*** instanceof Array && function (d, b) ***REMOVED*** d.__proto__ = b; ***REMOVED***) ||
            function (d, b) ***REMOVED*** for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; ***REMOVED***;
        return extendStatics(d, b);
    ***REMOVED***
    return function (d, b) ***REMOVED***
        extendStatics(d, b);
        function __() ***REMOVED*** this.constructor = d; ***REMOVED***
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    ***REMOVED***;
***REMOVED***)();
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var OuterSubscriber_1 = require("../OuterSubscriber");
var subscribeToResult_1 = require("../util/subscribeToResult");
function expand(project, concurrent, scheduler) ***REMOVED***
    if (concurrent === void 0) ***REMOVED*** concurrent = Number.POSITIVE_INFINITY; ***REMOVED***
    if (scheduler === void 0) ***REMOVED*** scheduler = undefined; ***REMOVED***
    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
    return function (source) ***REMOVED*** return source.lift(new ExpandOperator(project, concurrent, scheduler)); ***REMOVED***;
***REMOVED***
exports.expand = expand;
var ExpandOperator = (function () ***REMOVED***
    function ExpandOperator(project, concurrent, scheduler) ***REMOVED***
        this.project = project;
        this.concurrent = concurrent;
        this.scheduler = scheduler;
    ***REMOVED***
    ExpandOperator.prototype.call = function (subscriber, source) ***REMOVED***
        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
    ***REMOVED***;
    return ExpandOperator;
***REMOVED***());
exports.ExpandOperator = ExpandOperator;
var ExpandSubscriber = (function (_super) ***REMOVED***
    __extends(ExpandSubscriber, _super);
    function ExpandSubscriber(destination, project, concurrent, scheduler) ***REMOVED***
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.scheduler = scheduler;
        _this.index = 0;
        _this.active = 0;
        _this.hasCompleted = false;
        if (concurrent < Number.POSITIVE_INFINITY) ***REMOVED***
            _this.buffer = [];
        ***REMOVED***
        return _this;
    ***REMOVED***
    ExpandSubscriber.dispatch = function (arg) ***REMOVED***
        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
        subscriber.subscribeToProjection(result, value, index);
    ***REMOVED***;
    ExpandSubscriber.prototype._next = function (value) ***REMOVED***
        var destination = this.destination;
        if (destination.closed) ***REMOVED***
            this._complete();
            return;
        ***REMOVED***
        var index = this.index++;
        if (this.active < this.concurrent) ***REMOVED***
            destination.next(value);
            try ***REMOVED***
                var project = this.project;
                var result = project(value, index);
                if (!this.scheduler) ***REMOVED***
                    this.subscribeToProjection(result, value, index);
                ***REMOVED***
                else ***REMOVED***
                    var state = ***REMOVED*** subscriber: this, result: result, value: value, index: index ***REMOVED***;
                    var destination_1 = this.destination;
                    destination_1.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
                ***REMOVED***
            ***REMOVED***
            catch (e) ***REMOVED***
                destination.error(e);
            ***REMOVED***
        ***REMOVED***
        else ***REMOVED***
            this.buffer.push(value);
        ***REMOVED***
    ***REMOVED***;
    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) ***REMOVED***
        this.active++;
        var destination = this.destination;
        destination.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
    ***REMOVED***;
    ExpandSubscriber.prototype._complete = function () ***REMOVED***
        this.hasCompleted = true;
        if (this.hasCompleted && this.active === 0) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
        this.unsubscribe();
    ***REMOVED***;
    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this._next(innerValue);
    ***REMOVED***;
    ExpandSubscriber.prototype.notifyComplete = function (innerSub) ***REMOVED***
        var buffer = this.buffer;
        var destination = this.destination;
        destination.remove(innerSub);
        this.active--;
        if (buffer && buffer.length > 0) ***REMOVED***
            this._next(buffer.shift());
        ***REMOVED***
        if (this.hasCompleted && this.active === 0) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***;
    return ExpandSubscriber;
***REMOVED***(OuterSubscriber_1.OuterSubscriber));
exports.ExpandSubscriber = ExpandSubscriber;
//# sourceMappingURL=expand.js.map