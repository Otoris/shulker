import ***REMOVED*** SubjectSubscriber ***REMOVED*** from '../Subject';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** refCount as higherOrderRefCount ***REMOVED*** from '../operators/refCount';
export class ConnectableObservable extends Observable ***REMOVED***
    constructor(source, subjectFactory) ***REMOVED***
        super();
        this.source = source;
        this.subjectFactory = subjectFactory;
        this._refCount = 0;
        this._isComplete = false;
    ***REMOVED***
    _subscribe(subscriber) ***REMOVED***
        return this.getSubject().subscribe(subscriber);
    ***REMOVED***
    getSubject() ***REMOVED***
        const subject = this._subject;
        if (!subject || subject.isStopped) ***REMOVED***
            this._subject = this.subjectFactory();
        ***REMOVED***
        return this._subject;
    ***REMOVED***
    connect() ***REMOVED***
        let connection = this._connection;
        if (!connection) ***REMOVED***
            this._isComplete = false;
            connection = this._connection = new Subscription();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) ***REMOVED***
                this._connection = null;
                connection = Subscription.EMPTY;
            ***REMOVED***
        ***REMOVED***
        return connection;
    ***REMOVED***
    refCount() ***REMOVED***
        return higherOrderRefCount()(this);
    ***REMOVED***
***REMOVED***
export const connectableObservableDescriptor = (() => ***REMOVED***
    const connectableProto = ConnectableObservable.prototype;
    return ***REMOVED***
        operator: ***REMOVED*** value: null ***REMOVED***,
        _refCount: ***REMOVED*** value: 0, writable: true ***REMOVED***,
        _subject: ***REMOVED*** value: null, writable: true ***REMOVED***,
        _connection: ***REMOVED*** value: null, writable: true ***REMOVED***,
        _subscribe: ***REMOVED*** value: connectableProto._subscribe ***REMOVED***,
        _isComplete: ***REMOVED*** value: connectableProto._isComplete, writable: true ***REMOVED***,
        getSubject: ***REMOVED*** value: connectableProto.getSubject ***REMOVED***,
        connect: ***REMOVED*** value: connectableProto.connect ***REMOVED***,
        refCount: ***REMOVED*** value: connectableProto.refCount ***REMOVED***
    ***REMOVED***;
***REMOVED***)();
class ConnectableSubscriber extends SubjectSubscriber ***REMOVED***
    constructor(destination, connectable) ***REMOVED***
        super(destination);
        this.connectable = connectable;
    ***REMOVED***
    _error(err) ***REMOVED***
        this._unsubscribe();
        super._error(err);
    ***REMOVED***
    _complete() ***REMOVED***
        this.connectable._isComplete = true;
        this._unsubscribe();
        super._complete();
    ***REMOVED***
    _unsubscribe() ***REMOVED***
        const connectable = this.connectable;
        if (connectable) ***REMOVED***
            this.connectable = null;
            const connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) ***REMOVED***
                connection.unsubscribe();
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
***REMOVED***
class RefCountOperator ***REMOVED***
    constructor(connectable) ***REMOVED***
        this.connectable = connectable;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        const ***REMOVED*** connectable ***REMOVED*** = this;
        connectable._refCount++;
        const refCounter = new RefCountSubscriber(subscriber, connectable);
        const subscription = source.subscribe(refCounter);
        if (!refCounter.closed) ***REMOVED***
            refCounter.connection = connectable.connect();
        ***REMOVED***
        return subscription;
    ***REMOVED***
***REMOVED***
class RefCountSubscriber extends Subscriber ***REMOVED***
    constructor(destination, connectable) ***REMOVED***
        super(destination);
        this.connectable = connectable;
    ***REMOVED***
    _unsubscribe() ***REMOVED***
        const ***REMOVED*** connectable ***REMOVED*** = this;
        if (!connectable) ***REMOVED***
            this.connection = null;
            return;
        ***REMOVED***
        this.connectable = null;
        const refCount = connectable._refCount;
        if (refCount <= 0) ***REMOVED***
            this.connection = null;
            return;
        ***REMOVED***
        connectable._refCount = refCount - 1;
        if (refCount > 1) ***REMOVED***
            this.connection = null;
            return;
        ***REMOVED***
        const ***REMOVED*** connection ***REMOVED*** = this;
        const sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) ***REMOVED***
            sharedConnection.unsubscribe();
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=ConnectableObservable.js.map