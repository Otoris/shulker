import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
export function pairs(obj, scheduler) ***REMOVED***
    if (!scheduler) ***REMOVED***
        return new Observable(subscriber => ***REMOVED***
            const keys = Object.keys(obj);
            for (let i = 0; i < keys.length && !subscriber.closed; i++) ***REMOVED***
                const key = keys[i];
                if (obj.hasOwnProperty(key)) ***REMOVED***
                    subscriber.next([key, obj[key]]);
                ***REMOVED***
            ***REMOVED***
            subscriber.complete();
        ***REMOVED***);
    ***REMOVED***
    else ***REMOVED***
        return new Observable(subscriber => ***REMOVED***
            const keys = Object.keys(obj);
            const subscription = new Subscription();
            subscription.add(scheduler.schedule(dispatch, 0, ***REMOVED*** keys, index: 0, subscriber, subscription, obj ***REMOVED***));
            return subscription;
        ***REMOVED***);
    ***REMOVED***
***REMOVED***
export function dispatch(state) ***REMOVED***
    const ***REMOVED*** keys, index, subscriber, subscription, obj ***REMOVED*** = state;
    if (!subscriber.closed) ***REMOVED***
        if (index < keys.length) ***REMOVED***
            const key = keys[index];
            subscriber.next([key, obj[key]]);
            subscription.add(this.schedule(***REMOVED*** keys, index: index + 1, subscriber, subscription, obj ***REMOVED***));
        ***REMOVED***
        else ***REMOVED***
            subscriber.complete();
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=pairs.js.map