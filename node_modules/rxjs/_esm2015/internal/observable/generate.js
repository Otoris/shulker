import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** identity ***REMOVED*** from '../util/identity';
import ***REMOVED*** isScheduler ***REMOVED*** from '../util/isScheduler';
export function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) ***REMOVED***
    let resultSelector;
    let initialState;
    if (arguments.length == 1) ***REMOVED***
        const options = initialStateOrOptions;
        initialState = options.initialState;
        condition = options.condition;
        iterate = options.iterate;
        resultSelector = options.resultSelector || identity;
        scheduler = options.scheduler;
    ***REMOVED***
    else if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) ***REMOVED***
        initialState = initialStateOrOptions;
        resultSelector = identity;
        scheduler = resultSelectorOrObservable;
    ***REMOVED***
    else ***REMOVED***
        initialState = initialStateOrOptions;
        resultSelector = resultSelectorOrObservable;
    ***REMOVED***
    return new Observable(subscriber => ***REMOVED***
        let state = initialState;
        if (scheduler) ***REMOVED***
            return scheduler.schedule(dispatch, 0, ***REMOVED***
                subscriber,
                iterate,
                condition,
                resultSelector,
                state
            ***REMOVED***);
        ***REMOVED***
        do ***REMOVED***
            if (condition) ***REMOVED***
                let conditionResult;
                try ***REMOVED***
                    conditionResult = condition(state);
                ***REMOVED***
                catch (err) ***REMOVED***
                    subscriber.error(err);
                    return undefined;
                ***REMOVED***
                if (!conditionResult) ***REMOVED***
                    subscriber.complete();
                    break;
                ***REMOVED***
            ***REMOVED***
            let value;
            try ***REMOVED***
                value = resultSelector(state);
            ***REMOVED***
            catch (err) ***REMOVED***
                subscriber.error(err);
                return undefined;
            ***REMOVED***
            subscriber.next(value);
            if (subscriber.closed) ***REMOVED***
                break;
            ***REMOVED***
            try ***REMOVED***
                state = iterate(state);
            ***REMOVED***
            catch (err) ***REMOVED***
                subscriber.error(err);
                return undefined;
            ***REMOVED***
        ***REMOVED*** while (true);
        return undefined;
    ***REMOVED***);
***REMOVED***
function dispatch(state) ***REMOVED***
    const ***REMOVED*** subscriber, condition ***REMOVED*** = state;
    if (subscriber.closed) ***REMOVED***
        return undefined;
    ***REMOVED***
    if (state.needIterate) ***REMOVED***
        try ***REMOVED***
            state.state = state.iterate(state.state);
        ***REMOVED***
        catch (err) ***REMOVED***
            subscriber.error(err);
            return undefined;
        ***REMOVED***
    ***REMOVED***
    else ***REMOVED***
        state.needIterate = true;
    ***REMOVED***
    if (condition) ***REMOVED***
        let conditionResult;
        try ***REMOVED***
            conditionResult = condition(state.state);
        ***REMOVED***
        catch (err) ***REMOVED***
            subscriber.error(err);
            return undefined;
        ***REMOVED***
        if (!conditionResult) ***REMOVED***
            subscriber.complete();
            return undefined;
        ***REMOVED***
        if (subscriber.closed) ***REMOVED***
            return undefined;
        ***REMOVED***
    ***REMOVED***
    let value;
    try ***REMOVED***
        value = state.resultSelector(state.state);
    ***REMOVED***
    catch (err) ***REMOVED***
        subscriber.error(err);
        return undefined;
    ***REMOVED***
    if (subscriber.closed) ***REMOVED***
        return undefined;
    ***REMOVED***
    subscriber.next(value);
    if (subscriber.closed) ***REMOVED***
        return undefined;
    ***REMOVED***
    return this.schedule(state);
***REMOVED***
//# sourceMappingURL=generate.js.map