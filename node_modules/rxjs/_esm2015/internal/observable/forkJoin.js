import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** isArray ***REMOVED*** from '../util/isArray';
import ***REMOVED*** map ***REMOVED*** from '../operators/map';
import ***REMOVED*** isObject ***REMOVED*** from '../util/isObject';
import ***REMOVED*** from ***REMOVED*** from './from';
export function forkJoin(...sources) ***REMOVED***
    if (sources.length === 1) ***REMOVED***
        const first = sources[0];
        if (isArray(first)) ***REMOVED***
            return forkJoinInternal(first, null);
        ***REMOVED***
        if (isObject(first) && Object.getPrototypeOf(first) === Object.prototype) ***REMOVED***
            const keys = Object.keys(first);
            return forkJoinInternal(keys.map(key => first[key]), keys);
        ***REMOVED***
    ***REMOVED***
    if (typeof sources[sources.length - 1] === 'function') ***REMOVED***
        const resultSelector = sources.pop();
        sources = (sources.length === 1 && isArray(sources[0])) ? sources[0] : sources;
        return forkJoinInternal(sources, null).pipe(map((args) => resultSelector(...args)));
    ***REMOVED***
    return forkJoinInternal(sources, null);
***REMOVED***
function forkJoinInternal(sources, keys) ***REMOVED***
    return new Observable(subscriber => ***REMOVED***
        const len = sources.length;
        if (len === 0) ***REMOVED***
            subscriber.complete();
            return;
        ***REMOVED***
        const values = new Array(len);
        let completed = 0;
        let emitted = 0;
        for (let i = 0; i < len; i++) ***REMOVED***
            const source = from(sources[i]);
            let hasValue = false;
            subscriber.add(source.subscribe(***REMOVED***
                next: value => ***REMOVED***
                    if (!hasValue) ***REMOVED***
                        hasValue = true;
                        emitted++;
                    ***REMOVED***
                    values[i] = value;
                ***REMOVED***,
                error: err => subscriber.error(err),
                complete: () => ***REMOVED***
                    completed++;
                    if (completed === len || !hasValue) ***REMOVED***
                        if (emitted === len) ***REMOVED***
                            subscriber.next(keys ?
                                keys.reduce((result, key, i) => (result[key] = values[i], result), ***REMOVED******REMOVED***) :
                                values);
                        ***REMOVED***
                        subscriber.complete();
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***));
        ***REMOVED***
    ***REMOVED***);
***REMOVED***
//# sourceMappingURL=forkJoin.js.map