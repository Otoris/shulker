import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
export function range(start = 0, count, scheduler) ***REMOVED***
    return new Observable(subscriber => ***REMOVED***
        if (count === undefined) ***REMOVED***
            count = start;
            start = 0;
        ***REMOVED***
        let index = 0;
        let current = start;
        if (scheduler) ***REMOVED***
            return scheduler.schedule(dispatch, 0, ***REMOVED***
                index, count, start, subscriber
            ***REMOVED***);
        ***REMOVED***
        else ***REMOVED***
            do ***REMOVED***
                if (index++ >= count) ***REMOVED***
                    subscriber.complete();
                    break;
                ***REMOVED***
                subscriber.next(current++);
                if (subscriber.closed) ***REMOVED***
                    break;
                ***REMOVED***
            ***REMOVED*** while (true);
        ***REMOVED***
        return undefined;
    ***REMOVED***);
***REMOVED***
export function dispatch(state) ***REMOVED***
    const ***REMOVED*** start, index, count, subscriber ***REMOVED*** = state;
    if (index >= count) ***REMOVED***
        subscriber.complete();
        return;
    ***REMOVED***
    subscriber.next(start);
    if (subscriber.closed) ***REMOVED***
        return;
    ***REMOVED***
    state.index = index + 1;
    state.start = start + 1;
    this.schedule(state);
***REMOVED***
//# sourceMappingURL=range.js.map