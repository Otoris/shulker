import ***REMOVED*** isArray ***REMOVED*** from '../util/isArray';
import ***REMOVED*** fromArray ***REMOVED*** from './fromArray';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function race(...observables) ***REMOVED***
    if (observables.length === 1) ***REMOVED***
        if (isArray(observables[0])) ***REMOVED***
            observables = observables[0];
        ***REMOVED***
        else ***REMOVED***
            return observables[0];
        ***REMOVED***
    ***REMOVED***
    return fromArray(observables, undefined).lift(new RaceOperator());
***REMOVED***
export class RaceOperator ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new RaceSubscriber(subscriber));
    ***REMOVED***
***REMOVED***
export class RaceSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination) ***REMOVED***
        super(destination);
        this.hasFirst = false;
        this.observables = [];
        this.subscriptions = [];
    ***REMOVED***
    _next(observable) ***REMOVED***
        this.observables.push(observable);
    ***REMOVED***
    _complete() ***REMOVED***
        const observables = this.observables;
        const len = observables.length;
        if (len === 0) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
        else ***REMOVED***
            for (let i = 0; i < len && !this.hasFirst; i++) ***REMOVED***
                let observable = observables[i];
                let subscription = subscribeToResult(this, observable, observable, i);
                if (this.subscriptions) ***REMOVED***
                    this.subscriptions.push(subscription);
                ***REMOVED***
                this.add(subscription);
            ***REMOVED***
            this.observables = null;
        ***REMOVED***
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        if (!this.hasFirst) ***REMOVED***
            this.hasFirst = true;
            for (let i = 0; i < this.subscriptions.length; i++) ***REMOVED***
                if (i !== outerIndex) ***REMOVED***
                    let subscription = this.subscriptions[i];
                    subscription.unsubscribe();
                    this.remove(subscription);
                ***REMOVED***
            ***REMOVED***
            this.subscriptions = null;
        ***REMOVED***
        this.destination.next(innerValue);
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=race.js.map