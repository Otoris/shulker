import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** isArray ***REMOVED*** from '../util/isArray';
import ***REMOVED*** isFunction ***REMOVED*** from '../util/isFunction';
import ***REMOVED*** map ***REMOVED*** from '../operators/map';
const toString = (() => Object.prototype.toString)();
export function fromEvent(target, eventName, options, resultSelector) ***REMOVED***
    if (isFunction(options)) ***REMOVED***
        resultSelector = options;
        options = undefined;
    ***REMOVED***
    if (resultSelector) ***REMOVED***
        return fromEvent(target, eventName, options).pipe(map(args => isArray(args) ? resultSelector(...args) : resultSelector(args)));
    ***REMOVED***
    return new Observable(subscriber => ***REMOVED***
        function handler(e) ***REMOVED***
            if (arguments.length > 1) ***REMOVED***
                subscriber.next(Array.prototype.slice.call(arguments));
            ***REMOVED***
            else ***REMOVED***
                subscriber.next(e);
            ***REMOVED***
        ***REMOVED***
        setupSubscription(target, eventName, handler, subscriber, options);
    ***REMOVED***);
***REMOVED***
function setupSubscription(sourceObj, eventName, handler, subscriber, options) ***REMOVED***
    let unsubscribe;
    if (isEventTarget(sourceObj)) ***REMOVED***
        const source = sourceObj;
        sourceObj.addEventListener(eventName, handler, options);
        unsubscribe = () => source.removeEventListener(eventName, handler, options);
    ***REMOVED***
    else if (isJQueryStyleEventEmitter(sourceObj)) ***REMOVED***
        const source = sourceObj;
        sourceObj.on(eventName, handler);
        unsubscribe = () => source.off(eventName, handler);
    ***REMOVED***
    else if (isNodeStyleEventEmitter(sourceObj)) ***REMOVED***
        const source = sourceObj;
        sourceObj.addListener(eventName, handler);
        unsubscribe = () => source.removeListener(eventName, handler);
    ***REMOVED***
    else if (sourceObj && sourceObj.length) ***REMOVED***
        for (let i = 0, len = sourceObj.length; i < len; i++) ***REMOVED***
            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
        ***REMOVED***
    ***REMOVED***
    else ***REMOVED***
        throw new TypeError('Invalid event target');
    ***REMOVED***
    subscriber.add(unsubscribe);
***REMOVED***
function isNodeStyleEventEmitter(sourceObj) ***REMOVED***
    return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
***REMOVED***
function isJQueryStyleEventEmitter(sourceObj) ***REMOVED***
    return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
***REMOVED***
function isEventTarget(sourceObj) ***REMOVED***
    return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
***REMOVED***
//# sourceMappingURL=fromEvent.js.map