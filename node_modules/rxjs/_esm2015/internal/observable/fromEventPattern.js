import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** isArray ***REMOVED*** from '../util/isArray';
import ***REMOVED*** isFunction ***REMOVED*** from '../util/isFunction';
import ***REMOVED*** map ***REMOVED*** from '../operators/map';
export function fromEventPattern(addHandler, removeHandler, resultSelector) ***REMOVED***
    if (resultSelector) ***REMOVED***
        return fromEventPattern(addHandler, removeHandler).pipe(map(args => isArray(args) ? resultSelector(...args) : resultSelector(args)));
    ***REMOVED***
    return new Observable(subscriber => ***REMOVED***
        const handler = (...e) => subscriber.next(e.length === 1 ? e[0] : e);
        let retValue;
        try ***REMOVED***
            retValue = addHandler(handler);
        ***REMOVED***
        catch (err) ***REMOVED***
            subscriber.error(err);
            return undefined;
        ***REMOVED***
        if (!isFunction(removeHandler)) ***REMOVED***
            return undefined;
        ***REMOVED***
        return () => removeHandler(handler, retValue);
    ***REMOVED***);
***REMOVED***
//# sourceMappingURL=fromEventPattern.js.map