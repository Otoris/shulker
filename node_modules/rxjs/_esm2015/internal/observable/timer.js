import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** async ***REMOVED*** from '../scheduler/async';
import ***REMOVED*** isNumeric ***REMOVED*** from '../util/isNumeric';
import ***REMOVED*** isScheduler ***REMOVED*** from '../util/isScheduler';
export function timer(dueTime = 0, periodOrScheduler, scheduler) ***REMOVED***
    let period = -1;
    if (isNumeric(periodOrScheduler)) ***REMOVED***
        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
    ***REMOVED***
    else if (isScheduler(periodOrScheduler)) ***REMOVED***
        scheduler = periodOrScheduler;
    ***REMOVED***
    if (!isScheduler(scheduler)) ***REMOVED***
        scheduler = async;
    ***REMOVED***
    return new Observable(subscriber => ***REMOVED***
        const due = isNumeric(dueTime)
            ? dueTime
            : (+dueTime - scheduler.now());
        return scheduler.schedule(dispatch, due, ***REMOVED***
            index: 0, period, subscriber
        ***REMOVED***);
    ***REMOVED***);
***REMOVED***
function dispatch(state) ***REMOVED***
    const ***REMOVED*** index, period, subscriber ***REMOVED*** = state;
    subscriber.next(index);
    if (subscriber.closed) ***REMOVED***
        return;
    ***REMOVED***
    else if (period === -1) ***REMOVED***
        return subscriber.complete();
    ***REMOVED***
    state.index = index + 1;
    this.schedule(state, period);
***REMOVED***
//# sourceMappingURL=timer.js.map