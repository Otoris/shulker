import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** isScheduler ***REMOVED*** from '../util/isScheduler';
import ***REMOVED*** mergeAll ***REMOVED*** from '../operators/mergeAll';
import ***REMOVED*** fromArray ***REMOVED*** from './fromArray';
export function merge(...observables) ***REMOVED***
    let concurrent = Number.POSITIVE_INFINITY;
    let scheduler = null;
    let last = observables[observables.length - 1];
    if (isScheduler(last)) ***REMOVED***
        scheduler = observables.pop();
        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') ***REMOVED***
            concurrent = observables.pop();
        ***REMOVED***
    ***REMOVED***
    else if (typeof last === 'number') ***REMOVED***
        concurrent = observables.pop();
    ***REMOVED***
    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) ***REMOVED***
        return observables[0];
    ***REMOVED***
    return mergeAll(concurrent)(fromArray(observables, scheduler));
***REMOVED***
//# sourceMappingURL=merge.js.map