import ***REMOVED*** fromArray ***REMOVED*** from './fromArray';
import ***REMOVED*** isArray ***REMOVED*** from '../util/isArray';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
import ***REMOVED*** iterator as Symbol_iterator ***REMOVED*** from '../../internal/symbol/iterator';
export function zip(...observables) ***REMOVED***
    const resultSelector = observables[observables.length - 1];
    if (typeof resultSelector === 'function') ***REMOVED***
        observables.pop();
    ***REMOVED***
    return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));
***REMOVED***
export class ZipOperator ***REMOVED***
    constructor(resultSelector) ***REMOVED***
        this.resultSelector = resultSelector;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
    ***REMOVED***
***REMOVED***
export class ZipSubscriber extends Subscriber ***REMOVED***
    constructor(destination, resultSelector, values = Object.create(null)) ***REMOVED***
        super(destination);
        this.iterators = [];
        this.active = 0;
        this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;
        this.values = values;
    ***REMOVED***
    _next(value) ***REMOVED***
        const iterators = this.iterators;
        if (isArray(value)) ***REMOVED***
            iterators.push(new StaticArrayIterator(value));
        ***REMOVED***
        else if (typeof value[Symbol_iterator] === 'function') ***REMOVED***
            iterators.push(new StaticIterator(value[Symbol_iterator]()));
        ***REMOVED***
        else ***REMOVED***
            iterators.push(new ZipBufferIterator(this.destination, this, value));
        ***REMOVED***
    ***REMOVED***
    _complete() ***REMOVED***
        const iterators = this.iterators;
        const len = iterators.length;
        this.unsubscribe();
        if (len === 0) ***REMOVED***
            this.destination.complete();
            return;
        ***REMOVED***
        this.active = len;
        for (let i = 0; i < len; i++) ***REMOVED***
            let iterator = iterators[i];
            if (iterator.stillUnsubscribed) ***REMOVED***
                const destination = this.destination;
                destination.add(iterator.subscribe(iterator, i));
            ***REMOVED***
            else ***REMOVED***
                this.active--;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    notifyInactive() ***REMOVED***
        this.active--;
        if (this.active === 0) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***
    checkIterators() ***REMOVED***
        const iterators = this.iterators;
        const len = iterators.length;
        const destination = this.destination;
        for (let i = 0; i < len; i++) ***REMOVED***
            let iterator = iterators[i];
            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) ***REMOVED***
                return;
            ***REMOVED***
        ***REMOVED***
        let shouldComplete = false;
        const args = [];
        for (let i = 0; i < len; i++) ***REMOVED***
            let iterator = iterators[i];
            let result = iterator.next();
            if (iterator.hasCompleted()) ***REMOVED***
                shouldComplete = true;
            ***REMOVED***
            if (result.done) ***REMOVED***
                destination.complete();
                return;
            ***REMOVED***
            args.push(result.value);
        ***REMOVED***
        if (this.resultSelector) ***REMOVED***
            this._tryresultSelector(args);
        ***REMOVED***
        else ***REMOVED***
            destination.next(args);
        ***REMOVED***
        if (shouldComplete) ***REMOVED***
            destination.complete();
        ***REMOVED***
    ***REMOVED***
    _tryresultSelector(args) ***REMOVED***
        let result;
        try ***REMOVED***
            result = this.resultSelector.apply(this, args);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
            return;
        ***REMOVED***
        this.destination.next(result);
    ***REMOVED***
***REMOVED***
class StaticIterator ***REMOVED***
    constructor(iterator) ***REMOVED***
        this.iterator = iterator;
        this.nextResult = iterator.next();
    ***REMOVED***
    hasValue() ***REMOVED***
        return true;
    ***REMOVED***
    next() ***REMOVED***
        const result = this.nextResult;
        this.nextResult = this.iterator.next();
        return result;
    ***REMOVED***
    hasCompleted() ***REMOVED***
        const nextResult = this.nextResult;
        return nextResult && nextResult.done;
    ***REMOVED***
***REMOVED***
class StaticArrayIterator ***REMOVED***
    constructor(array) ***REMOVED***
        this.array = array;
        this.index = 0;
        this.length = 0;
        this.length = array.length;
    ***REMOVED***
    [Symbol_iterator]() ***REMOVED***
        return this;
    ***REMOVED***
    next(value) ***REMOVED***
        const i = this.index++;
        const array = this.array;
        return i < this.length ? ***REMOVED*** value: array[i], done: false ***REMOVED*** : ***REMOVED*** value: null, done: true ***REMOVED***;
    ***REMOVED***
    hasValue() ***REMOVED***
        return this.array.length > this.index;
    ***REMOVED***
    hasCompleted() ***REMOVED***
        return this.array.length === this.index;
    ***REMOVED***
***REMOVED***
class ZipBufferIterator extends OuterSubscriber ***REMOVED***
    constructor(destination, parent, observable) ***REMOVED***
        super(destination);
        this.parent = parent;
        this.observable = observable;
        this.stillUnsubscribed = true;
        this.buffer = [];
        this.isComplete = false;
    ***REMOVED***
    [Symbol_iterator]() ***REMOVED***
        return this;
    ***REMOVED***
    next() ***REMOVED***
        const buffer = this.buffer;
        if (buffer.length === 0 && this.isComplete) ***REMOVED***
            return ***REMOVED*** value: null, done: true ***REMOVED***;
        ***REMOVED***
        else ***REMOVED***
            return ***REMOVED*** value: buffer.shift(), done: false ***REMOVED***;
        ***REMOVED***
    ***REMOVED***
    hasValue() ***REMOVED***
        return this.buffer.length > 0;
    ***REMOVED***
    hasCompleted() ***REMOVED***
        return this.buffer.length === 0 && this.isComplete;
    ***REMOVED***
    notifyComplete() ***REMOVED***
        if (this.buffer.length > 0) ***REMOVED***
            this.isComplete = true;
            this.parent.notifyInactive();
        ***REMOVED***
        else ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.buffer.push(innerValue);
        this.parent.checkIterators();
    ***REMOVED***
    subscribe(value, index) ***REMOVED***
        return subscribeToResult(this, this.observable, this, index);
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=zip.js.map