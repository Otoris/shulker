import ***REMOVED*** Subject, AnonymousSubject ***REMOVED*** from '../../Subject';
import ***REMOVED*** Subscriber ***REMOVED*** from '../../Subscriber';
import ***REMOVED*** Observable ***REMOVED*** from '../../Observable';
import ***REMOVED*** Subscription ***REMOVED*** from '../../Subscription';
import ***REMOVED*** ReplaySubject ***REMOVED*** from '../../ReplaySubject';
const DEFAULT_WEBSOCKET_CONFIG = ***REMOVED***
    url: '',
    deserializer: (e) => JSON.parse(e.data),
    serializer: (value) => JSON.stringify(value),
***REMOVED***;
const WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: ***REMOVED*** code: number, reason: string ***REMOVED***';
export class WebSocketSubject extends AnonymousSubject ***REMOVED***
    constructor(urlConfigOrSource, destination) ***REMOVED***
        super();
        if (urlConfigOrSource instanceof Observable) ***REMOVED***
            this.destination = destination;
            this.source = urlConfigOrSource;
        ***REMOVED***
        else ***REMOVED***
            const config = this._config = Object.assign(***REMOVED******REMOVED***, DEFAULT_WEBSOCKET_CONFIG);
            this._output = new Subject();
            if (typeof urlConfigOrSource === 'string') ***REMOVED***
                config.url = urlConfigOrSource;
            ***REMOVED***
            else ***REMOVED***
                for (let key in urlConfigOrSource) ***REMOVED***
                    if (urlConfigOrSource.hasOwnProperty(key)) ***REMOVED***
                        config[key] = urlConfigOrSource[key];
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
            if (!config.WebSocketCtor && WebSocket) ***REMOVED***
                config.WebSocketCtor = WebSocket;
            ***REMOVED***
            else if (!config.WebSocketCtor) ***REMOVED***
                throw new Error('no WebSocket constructor can be found');
            ***REMOVED***
            this.destination = new ReplaySubject();
        ***REMOVED***
    ***REMOVED***
    lift(operator) ***REMOVED***
        const sock = new WebSocketSubject(this._config, this.destination);
        sock.operator = operator;
        sock.source = this;
        return sock;
    ***REMOVED***
    _resetState() ***REMOVED***
        this._socket = null;
        if (!this.source) ***REMOVED***
            this.destination = new ReplaySubject();
        ***REMOVED***
        this._output = new Subject();
    ***REMOVED***
    multiplex(subMsg, unsubMsg, messageFilter) ***REMOVED***
        const self = this;
        return new Observable((observer) => ***REMOVED***
            try ***REMOVED***
                self.next(subMsg());
            ***REMOVED***
            catch (err) ***REMOVED***
                observer.error(err);
            ***REMOVED***
            const subscription = self.subscribe(x => ***REMOVED***
                try ***REMOVED***
                    if (messageFilter(x)) ***REMOVED***
                        observer.next(x);
                    ***REMOVED***
                ***REMOVED***
                catch (err) ***REMOVED***
                    observer.error(err);
                ***REMOVED***
            ***REMOVED***, err => observer.error(err), () => observer.complete());
            return () => ***REMOVED***
                try ***REMOVED***
                    self.next(unsubMsg());
                ***REMOVED***
                catch (err) ***REMOVED***
                    observer.error(err);
                ***REMOVED***
                subscription.unsubscribe();
            ***REMOVED***;
        ***REMOVED***);
    ***REMOVED***
    _connectSocket() ***REMOVED***
        const ***REMOVED*** WebSocketCtor, protocol, url, binaryType ***REMOVED*** = this._config;
        const observer = this._output;
        let socket = null;
        try ***REMOVED***
            socket = protocol ?
                new WebSocketCtor(url, protocol) :
                new WebSocketCtor(url);
            this._socket = socket;
            if (binaryType) ***REMOVED***
                this._socket.binaryType = binaryType;
            ***REMOVED***
        ***REMOVED***
        catch (e) ***REMOVED***
            observer.error(e);
            return;
        ***REMOVED***
        const subscription = new Subscription(() => ***REMOVED***
            this._socket = null;
            if (socket && socket.readyState === 1) ***REMOVED***
                socket.close();
            ***REMOVED***
        ***REMOVED***);
        socket.onopen = (e) => ***REMOVED***
            const ***REMOVED*** _socket ***REMOVED*** = this;
            if (!_socket) ***REMOVED***
                socket.close();
                this._resetState();
                return;
            ***REMOVED***
            const ***REMOVED*** openObserver ***REMOVED*** = this._config;
            if (openObserver) ***REMOVED***
                openObserver.next(e);
            ***REMOVED***
            const queue = this.destination;
            this.destination = Subscriber.create((x) => ***REMOVED***
                if (socket.readyState === 1) ***REMOVED***
                    try ***REMOVED***
                        const ***REMOVED*** serializer ***REMOVED*** = this._config;
                        socket.send(serializer(x));
                    ***REMOVED***
                    catch (e) ***REMOVED***
                        this.destination.error(e);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***, (e) => ***REMOVED***
                const ***REMOVED*** closingObserver ***REMOVED*** = this._config;
                if (closingObserver) ***REMOVED***
                    closingObserver.next(undefined);
                ***REMOVED***
                if (e && e.code) ***REMOVED***
                    socket.close(e.code, e.reason);
                ***REMOVED***
                else ***REMOVED***
                    observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));
                ***REMOVED***
                this._resetState();
            ***REMOVED***, () => ***REMOVED***
                const ***REMOVED*** closingObserver ***REMOVED*** = this._config;
                if (closingObserver) ***REMOVED***
                    closingObserver.next(undefined);
                ***REMOVED***
                socket.close();
                this._resetState();
            ***REMOVED***);
            if (queue && queue instanceof ReplaySubject) ***REMOVED***
                subscription.add(queue.subscribe(this.destination));
            ***REMOVED***
        ***REMOVED***;
        socket.onerror = (e) => ***REMOVED***
            this._resetState();
            observer.error(e);
        ***REMOVED***;
        socket.onclose = (e) => ***REMOVED***
            this._resetState();
            const ***REMOVED*** closeObserver ***REMOVED*** = this._config;
            if (closeObserver) ***REMOVED***
                closeObserver.next(e);
            ***REMOVED***
            if (e.wasClean) ***REMOVED***
                observer.complete();
            ***REMOVED***
            else ***REMOVED***
                observer.error(e);
            ***REMOVED***
        ***REMOVED***;
        socket.onmessage = (e) => ***REMOVED***
            try ***REMOVED***
                const ***REMOVED*** deserializer ***REMOVED*** = this._config;
                observer.next(deserializer(e));
            ***REMOVED***
            catch (err) ***REMOVED***
                observer.error(err);
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
    _subscribe(subscriber) ***REMOVED***
        const ***REMOVED*** source ***REMOVED*** = this;
        if (source) ***REMOVED***
            return source.subscribe(subscriber);
        ***REMOVED***
        if (!this._socket) ***REMOVED***
            this._connectSocket();
        ***REMOVED***
        this._output.subscribe(subscriber);
        subscriber.add(() => ***REMOVED***
            const ***REMOVED*** _socket ***REMOVED*** = this;
            if (this._output.observers.length === 0) ***REMOVED***
                if (_socket && _socket.readyState === 1) ***REMOVED***
                    _socket.close();
                ***REMOVED***
                this._resetState();
            ***REMOVED***
        ***REMOVED***);
        return subscriber;
    ***REMOVED***
    unsubscribe() ***REMOVED***
        const ***REMOVED*** _socket ***REMOVED*** = this;
        if (_socket && _socket.readyState === 1) ***REMOVED***
            _socket.close();
        ***REMOVED***
        this._resetState();
        super.unsubscribe();
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=WebSocketSubject.js.map