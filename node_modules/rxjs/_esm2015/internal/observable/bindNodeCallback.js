import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** AsyncSubject ***REMOVED*** from '../AsyncSubject';
import ***REMOVED*** map ***REMOVED*** from '../operators/map';
import ***REMOVED*** canReportError ***REMOVED*** from '../util/canReportError';
import ***REMOVED*** isScheduler ***REMOVED*** from '../util/isScheduler';
import ***REMOVED*** isArray ***REMOVED*** from '../util/isArray';
export function bindNodeCallback(callbackFunc, resultSelector, scheduler) ***REMOVED***
    if (resultSelector) ***REMOVED***
        if (isScheduler(resultSelector)) ***REMOVED***
            scheduler = resultSelector;
        ***REMOVED***
        else ***REMOVED***
            return (...args) => bindNodeCallback(callbackFunc, scheduler)(...args).pipe(map(args => isArray(args) ? resultSelector(...args) : resultSelector(args)));
        ***REMOVED***
    ***REMOVED***
    return function (...args) ***REMOVED***
        const params = ***REMOVED***
            subject: undefined,
            args,
            callbackFunc,
            scheduler,
            context: this,
        ***REMOVED***;
        return new Observable(subscriber => ***REMOVED***
            const ***REMOVED*** context ***REMOVED*** = params;
            let ***REMOVED*** subject ***REMOVED*** = params;
            if (!scheduler) ***REMOVED***
                if (!subject) ***REMOVED***
                    subject = params.subject = new AsyncSubject();
                    const handler = (...innerArgs) => ***REMOVED***
                        const err = innerArgs.shift();
                        if (err) ***REMOVED***
                            subject.error(err);
                            return;
                        ***REMOVED***
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    ***REMOVED***;
                    try ***REMOVED***
                        callbackFunc.apply(context, [...args, handler]);
                    ***REMOVED***
                    catch (err) ***REMOVED***
                        if (canReportError(subject)) ***REMOVED***
                            subject.error(err);
                        ***REMOVED***
                        else ***REMOVED***
                            console.warn(err);
                        ***REMOVED***
                    ***REMOVED***
                ***REMOVED***
                return subject.subscribe(subscriber);
            ***REMOVED***
            else ***REMOVED***
                return scheduler.schedule(dispatch, 0, ***REMOVED*** params, subscriber, context ***REMOVED***);
            ***REMOVED***
        ***REMOVED***);
    ***REMOVED***;
***REMOVED***
function dispatch(state) ***REMOVED***
    const ***REMOVED*** params, subscriber, context ***REMOVED*** = state;
    const ***REMOVED*** callbackFunc, args, scheduler ***REMOVED*** = params;
    let subject = params.subject;
    if (!subject) ***REMOVED***
        subject = params.subject = new AsyncSubject();
        const handler = (...innerArgs) => ***REMOVED***
            const err = innerArgs.shift();
            if (err) ***REMOVED***
                this.add(scheduler.schedule(dispatchError, 0, ***REMOVED*** err, subject ***REMOVED***));
            ***REMOVED***
            else ***REMOVED***
                const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
                this.add(scheduler.schedule(dispatchNext, 0, ***REMOVED*** value, subject ***REMOVED***));
            ***REMOVED***
        ***REMOVED***;
        try ***REMOVED***
            callbackFunc.apply(context, [...args, handler]);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.add(scheduler.schedule(dispatchError, 0, ***REMOVED*** err, subject ***REMOVED***));
        ***REMOVED***
    ***REMOVED***
    this.add(subject.subscribe(subscriber));
***REMOVED***
function dispatchNext(arg) ***REMOVED***
    const ***REMOVED*** value, subject ***REMOVED*** = arg;
    subject.next(value);
    subject.complete();
***REMOVED***
function dispatchError(arg) ***REMOVED***
    const ***REMOVED*** err, subject ***REMOVED*** = arg;
    subject.error(err);
***REMOVED***
//# sourceMappingURL=bindNodeCallback.js.map