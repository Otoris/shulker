import ***REMOVED*** from ***REMOVED*** from '../observable/from';
import ***REMOVED*** isArray ***REMOVED*** from '../util/isArray';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function onErrorResumeNext(...nextSources) ***REMOVED***
    if (nextSources.length === 1 && isArray(nextSources[0])) ***REMOVED***
        nextSources = nextSources[0];
    ***REMOVED***
    return (source) => source.lift(new OnErrorResumeNextOperator(nextSources));
***REMOVED***
export function onErrorResumeNextStatic(...nextSources) ***REMOVED***
    let source = null;
    if (nextSources.length === 1 && isArray(nextSources[0])) ***REMOVED***
        nextSources = nextSources[0];
    ***REMOVED***
    source = nextSources.shift();
    return from(source, null).lift(new OnErrorResumeNextOperator(nextSources));
***REMOVED***
class OnErrorResumeNextOperator ***REMOVED***
    constructor(nextSources) ***REMOVED***
        this.nextSources = nextSources;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
    ***REMOVED***
***REMOVED***
class OnErrorResumeNextSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, nextSources) ***REMOVED***
        super(destination);
        this.destination = destination;
        this.nextSources = nextSources;
    ***REMOVED***
    notifyError(error, innerSub) ***REMOVED***
        this.subscribeToNextSource();
    ***REMOVED***
    notifyComplete(innerSub) ***REMOVED***
        this.subscribeToNextSource();
    ***REMOVED***
    _error(err) ***REMOVED***
        this.subscribeToNextSource();
        this.unsubscribe();
    ***REMOVED***
    _complete() ***REMOVED***
        this.subscribeToNextSource();
        this.unsubscribe();
    ***REMOVED***
    subscribeToNextSource() ***REMOVED***
        const next = this.nextSources.shift();
        if (!!next) ***REMOVED***
            const innerSubscriber = new InnerSubscriber(this, undefined, undefined);
            const destination = this.destination;
            destination.add(innerSubscriber);
            const innerSubscription = subscribeToResult(this, next, undefined, undefined, innerSubscriber);
            if (innerSubscription !== innerSubscriber) ***REMOVED***
                destination.add(innerSubscription);
            ***REMOVED***
        ***REMOVED***
        else ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=onErrorResumeNext.js.map