import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** Subject ***REMOVED*** from '../Subject';
export function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) ***REMOVED***
    return (source) => source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
***REMOVED***
class GroupByOperator ***REMOVED***
    constructor(keySelector, elementSelector, durationSelector, subjectSelector) ***REMOVED***
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
    ***REMOVED***
***REMOVED***
class GroupBySubscriber extends Subscriber ***REMOVED***
    constructor(destination, keySelector, elementSelector, durationSelector, subjectSelector) ***REMOVED***
        super(destination);
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
        this.groups = null;
        this.attemptedToUnsubscribe = false;
        this.count = 0;
    ***REMOVED***
    _next(value) ***REMOVED***
        let key;
        try ***REMOVED***
            key = this.keySelector(value);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.error(err);
            return;
        ***REMOVED***
        this._group(value, key);
    ***REMOVED***
    _group(value, key) ***REMOVED***
        let groups = this.groups;
        if (!groups) ***REMOVED***
            groups = this.groups = new Map();
        ***REMOVED***
        let group = groups.get(key);
        let element;
        if (this.elementSelector) ***REMOVED***
            try ***REMOVED***
                element = this.elementSelector(value);
            ***REMOVED***
            catch (err) ***REMOVED***
                this.error(err);
            ***REMOVED***
        ***REMOVED***
        else ***REMOVED***
            element = value;
        ***REMOVED***
        if (!group) ***REMOVED***
            group = (this.subjectSelector ? this.subjectSelector() : new Subject());
            groups.set(key, group);
            const groupedObservable = new GroupedObservable(key, group, this);
            this.destination.next(groupedObservable);
            if (this.durationSelector) ***REMOVED***
                let duration;
                try ***REMOVED***
                    duration = this.durationSelector(new GroupedObservable(key, group));
                ***REMOVED***
                catch (err) ***REMOVED***
                    this.error(err);
                    return;
                ***REMOVED***
                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
            ***REMOVED***
        ***REMOVED***
        if (!group.closed) ***REMOVED***
            group.next(element);
        ***REMOVED***
    ***REMOVED***
    _error(err) ***REMOVED***
        const groups = this.groups;
        if (groups) ***REMOVED***
            groups.forEach((group, key) => ***REMOVED***
                group.error(err);
            ***REMOVED***);
            groups.clear();
        ***REMOVED***
        this.destination.error(err);
    ***REMOVED***
    _complete() ***REMOVED***
        const groups = this.groups;
        if (groups) ***REMOVED***
            groups.forEach((group, key) => ***REMOVED***
                group.complete();
            ***REMOVED***);
            groups.clear();
        ***REMOVED***
        this.destination.complete();
    ***REMOVED***
    removeGroup(key) ***REMOVED***
        this.groups.delete(key);
    ***REMOVED***
    unsubscribe() ***REMOVED***
        if (!this.closed) ***REMOVED***
            this.attemptedToUnsubscribe = true;
            if (this.count === 0) ***REMOVED***
                super.unsubscribe();
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
***REMOVED***
class GroupDurationSubscriber extends Subscriber ***REMOVED***
    constructor(key, group, parent) ***REMOVED***
        super(group);
        this.key = key;
        this.group = group;
        this.parent = parent;
    ***REMOVED***
    _next(value) ***REMOVED***
        this.complete();
    ***REMOVED***
    _unsubscribe() ***REMOVED***
        const ***REMOVED*** parent, key ***REMOVED*** = this;
        this.key = this.parent = null;
        if (parent) ***REMOVED***
            parent.removeGroup(key);
        ***REMOVED***
    ***REMOVED***
***REMOVED***
export class GroupedObservable extends Observable ***REMOVED***
    constructor(key, groupSubject, refCountSubscription) ***REMOVED***
        super();
        this.key = key;
        this.groupSubject = groupSubject;
        this.refCountSubscription = refCountSubscription;
    ***REMOVED***
    _subscribe(subscriber) ***REMOVED***
        const subscription = new Subscription();
        const ***REMOVED*** refCountSubscription, groupSubject ***REMOVED*** = this;
        if (refCountSubscription && !refCountSubscription.closed) ***REMOVED***
            subscription.add(new InnerRefCountSubscription(refCountSubscription));
        ***REMOVED***
        subscription.add(groupSubject.subscribe(subscriber));
        return subscription;
    ***REMOVED***
***REMOVED***
class InnerRefCountSubscription extends Subscription ***REMOVED***
    constructor(parent) ***REMOVED***
        super();
        this.parent = parent;
        parent.count++;
    ***REMOVED***
    unsubscribe() ***REMOVED***
        const parent = this.parent;
        if (!parent.closed && !this.closed) ***REMOVED***
            super.unsubscribe();
            parent.count -= 1;
            if (parent.count === 0 && parent.attemptedToUnsubscribe) ***REMOVED***
                parent.unsubscribe();
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=groupBy.js.map