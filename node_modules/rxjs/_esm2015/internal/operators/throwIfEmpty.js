import ***REMOVED*** EmptyError ***REMOVED*** from '../util/EmptyError';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function throwIfEmpty(errorFactory = defaultErrorFactory) ***REMOVED***
    return (source) => ***REMOVED***
        return source.lift(new ThrowIfEmptyOperator(errorFactory));
    ***REMOVED***;
***REMOVED***
class ThrowIfEmptyOperator ***REMOVED***
    constructor(errorFactory) ***REMOVED***
        this.errorFactory = errorFactory;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));
    ***REMOVED***
***REMOVED***
class ThrowIfEmptySubscriber extends Subscriber ***REMOVED***
    constructor(destination, errorFactory) ***REMOVED***
        super(destination);
        this.errorFactory = errorFactory;
        this.hasValue = false;
    ***REMOVED***
    _next(value) ***REMOVED***
        this.hasValue = true;
        this.destination.next(value);
    ***REMOVED***
    _complete() ***REMOVED***
        if (!this.hasValue) ***REMOVED***
            let err;
            try ***REMOVED***
                err = this.errorFactory();
            ***REMOVED***
            catch (e) ***REMOVED***
                err = e;
            ***REMOVED***
            this.destination.error(err);
        ***REMOVED***
        else ***REMOVED***
            return this.destination.complete();
        ***REMOVED***
    ***REMOVED***
***REMOVED***
function defaultErrorFactory() ***REMOVED***
    return new EmptyError();
***REMOVED***
//# sourceMappingURL=throwIfEmpty.js.map