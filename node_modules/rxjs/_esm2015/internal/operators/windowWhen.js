import ***REMOVED*** Subject ***REMOVED*** from '../Subject';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function windowWhen(closingSelector) ***REMOVED***
    return function windowWhenOperatorFunction(source) ***REMOVED***
        return source.lift(new WindowOperator(closingSelector));
    ***REMOVED***;
***REMOVED***
class WindowOperator ***REMOVED***
    constructor(closingSelector) ***REMOVED***
        this.closingSelector = closingSelector;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));
    ***REMOVED***
***REMOVED***
class WindowSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, closingSelector) ***REMOVED***
        super(destination);
        this.destination = destination;
        this.closingSelector = closingSelector;
        this.openWindow();
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.openWindow(innerSub);
    ***REMOVED***
    notifyError(error, innerSub) ***REMOVED***
        this._error(error);
    ***REMOVED***
    notifyComplete(innerSub) ***REMOVED***
        this.openWindow(innerSub);
    ***REMOVED***
    _next(value) ***REMOVED***
        this.window.next(value);
    ***REMOVED***
    _error(err) ***REMOVED***
        this.window.error(err);
        this.destination.error(err);
        this.unsubscribeClosingNotification();
    ***REMOVED***
    _complete() ***REMOVED***
        this.window.complete();
        this.destination.complete();
        this.unsubscribeClosingNotification();
    ***REMOVED***
    unsubscribeClosingNotification() ***REMOVED***
        if (this.closingNotification) ***REMOVED***
            this.closingNotification.unsubscribe();
        ***REMOVED***
    ***REMOVED***
    openWindow(innerSub = null) ***REMOVED***
        if (innerSub) ***REMOVED***
            this.remove(innerSub);
            innerSub.unsubscribe();
        ***REMOVED***
        const prevWindow = this.window;
        if (prevWindow) ***REMOVED***
            prevWindow.complete();
        ***REMOVED***
        const window = this.window = new Subject();
        this.destination.next(window);
        let closingNotifier;
        try ***REMOVED***
            const ***REMOVED*** closingSelector ***REMOVED*** = this;
            closingNotifier = closingSelector();
        ***REMOVED***
        catch (e) ***REMOVED***
            this.destination.error(e);
            this.window.error(e);
            return;
        ***REMOVED***
        this.add(this.closingNotification = subscribeToResult(this, closingNotifier));
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=windowWhen.js.map