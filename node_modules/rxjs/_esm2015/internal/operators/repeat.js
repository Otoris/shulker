import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** empty ***REMOVED*** from '../observable/empty';
export function repeat(count = -1) ***REMOVED***
    return (source) => ***REMOVED***
        if (count === 0) ***REMOVED***
            return empty();
        ***REMOVED***
        else if (count < 0) ***REMOVED***
            return source.lift(new RepeatOperator(-1, source));
        ***REMOVED***
        else ***REMOVED***
            return source.lift(new RepeatOperator(count - 1, source));
        ***REMOVED***
    ***REMOVED***;
***REMOVED***
class RepeatOperator ***REMOVED***
    constructor(count, source) ***REMOVED***
        this.count = count;
        this.source = source;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
    ***REMOVED***
***REMOVED***
class RepeatSubscriber extends Subscriber ***REMOVED***
    constructor(destination, count, source) ***REMOVED***
        super(destination);
        this.count = count;
        this.source = source;
    ***REMOVED***
    complete() ***REMOVED***
        if (!this.isStopped) ***REMOVED***
            const ***REMOVED*** source, count ***REMOVED*** = this;
            if (count === 0) ***REMOVED***
                return super.complete();
            ***REMOVED***
            else if (count > -1) ***REMOVED***
                this.count = count - 1;
            ***REMOVED***
            source.subscribe(this._unsubscribeAndRecycle());
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=repeat.js.map