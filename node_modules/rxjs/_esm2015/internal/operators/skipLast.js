import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** ArgumentOutOfRangeError ***REMOVED*** from '../util/ArgumentOutOfRangeError';
export function skipLast(count) ***REMOVED***
    return (source) => source.lift(new SkipLastOperator(count));
***REMOVED***
class SkipLastOperator ***REMOVED***
    constructor(_skipCount) ***REMOVED***
        this._skipCount = _skipCount;
        if (this._skipCount < 0) ***REMOVED***
            throw new ArgumentOutOfRangeError;
        ***REMOVED***
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        if (this._skipCount === 0) ***REMOVED***
            return source.subscribe(new Subscriber(subscriber));
        ***REMOVED***
        else ***REMOVED***
            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));
        ***REMOVED***
    ***REMOVED***
***REMOVED***
class SkipLastSubscriber extends Subscriber ***REMOVED***
    constructor(destination, _skipCount) ***REMOVED***
        super(destination);
        this._skipCount = _skipCount;
        this._count = 0;
        this._ring = new Array(_skipCount);
    ***REMOVED***
    _next(value) ***REMOVED***
        const skipCount = this._skipCount;
        const count = this._count++;
        if (count < skipCount) ***REMOVED***
            this._ring[count] = value;
        ***REMOVED***
        else ***REMOVED***
            const currentIndex = count % skipCount;
            const ring = this._ring;
            const oldValue = ring[currentIndex];
            ring[currentIndex] = value;
            this.destination.next(oldValue);
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=skipLast.js.map