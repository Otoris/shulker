import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function sample(notifier) ***REMOVED***
    return (source) => source.lift(new SampleOperator(notifier));
***REMOVED***
class SampleOperator ***REMOVED***
    constructor(notifier) ***REMOVED***
        this.notifier = notifier;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        const sampleSubscriber = new SampleSubscriber(subscriber);
        const subscription = source.subscribe(sampleSubscriber);
        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));
        return subscription;
    ***REMOVED***
***REMOVED***
class SampleSubscriber extends OuterSubscriber ***REMOVED***
    constructor() ***REMOVED***
        super(...arguments);
        this.hasValue = false;
    ***REMOVED***
    _next(value) ***REMOVED***
        this.value = value;
        this.hasValue = true;
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.emitValue();
    ***REMOVED***
    notifyComplete() ***REMOVED***
        this.emitValue();
    ***REMOVED***
    emitValue() ***REMOVED***
        if (this.hasValue) ***REMOVED***
            this.hasValue = false;
            this.destination.next(this.value);
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=sample.js.map