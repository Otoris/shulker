import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Observable ***REMOVED*** from '../Observable';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function delayWhen(delayDurationSelector, subscriptionDelay) ***REMOVED***
    if (subscriptionDelay) ***REMOVED***
        return (source) => new SubscriptionDelayObservable(source, subscriptionDelay)
            .lift(new DelayWhenOperator(delayDurationSelector));
    ***REMOVED***
    return (source) => source.lift(new DelayWhenOperator(delayDurationSelector));
***REMOVED***
class DelayWhenOperator ***REMOVED***
    constructor(delayDurationSelector) ***REMOVED***
        this.delayDurationSelector = delayDurationSelector;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
    ***REMOVED***
***REMOVED***
class DelayWhenSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, delayDurationSelector) ***REMOVED***
        super(destination);
        this.delayDurationSelector = delayDurationSelector;
        this.completed = false;
        this.delayNotifierSubscriptions = [];
        this.index = 0;
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.destination.next(outerValue);
        this.removeSubscription(innerSub);
        this.tryComplete();
    ***REMOVED***
    notifyError(error, innerSub) ***REMOVED***
        this._error(error);
    ***REMOVED***
    notifyComplete(innerSub) ***REMOVED***
        const value = this.removeSubscription(innerSub);
        if (value) ***REMOVED***
            this.destination.next(value);
        ***REMOVED***
        this.tryComplete();
    ***REMOVED***
    _next(value) ***REMOVED***
        const index = this.index++;
        try ***REMOVED***
            const delayNotifier = this.delayDurationSelector(value, index);
            if (delayNotifier) ***REMOVED***
                this.tryDelay(delayNotifier, value);
            ***REMOVED***
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
        ***REMOVED***
    ***REMOVED***
    _complete() ***REMOVED***
        this.completed = true;
        this.tryComplete();
        this.unsubscribe();
    ***REMOVED***
    removeSubscription(subscription) ***REMOVED***
        subscription.unsubscribe();
        const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
        if (subscriptionIdx !== -1) ***REMOVED***
            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
        ***REMOVED***
        return subscription.outerValue;
    ***REMOVED***
    tryDelay(delayNotifier, value) ***REMOVED***
        const notifierSubscription = subscribeToResult(this, delayNotifier, value);
        if (notifierSubscription && !notifierSubscription.closed) ***REMOVED***
            const destination = this.destination;
            destination.add(notifierSubscription);
            this.delayNotifierSubscriptions.push(notifierSubscription);
        ***REMOVED***
    ***REMOVED***
    tryComplete() ***REMOVED***
        if (this.completed && this.delayNotifierSubscriptions.length === 0) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***
***REMOVED***
class SubscriptionDelayObservable extends Observable ***REMOVED***
    constructor(source, subscriptionDelay) ***REMOVED***
        super();
        this.source = source;
        this.subscriptionDelay = subscriptionDelay;
    ***REMOVED***
    _subscribe(subscriber) ***REMOVED***
        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
    ***REMOVED***
***REMOVED***
class SubscriptionDelaySubscriber extends Subscriber ***REMOVED***
    constructor(parent, source) ***REMOVED***
        super();
        this.parent = parent;
        this.source = source;
        this.sourceSubscribed = false;
    ***REMOVED***
    _next(unused) ***REMOVED***
        this.subscribeToSource();
    ***REMOVED***
    _error(err) ***REMOVED***
        this.unsubscribe();
        this.parent.error(err);
    ***REMOVED***
    _complete() ***REMOVED***
        this.unsubscribe();
        this.subscribeToSource();
    ***REMOVED***
    subscribeToSource() ***REMOVED***
        if (!this.sourceSubscribed) ***REMOVED***
            this.sourceSubscribed = true;
            this.unsubscribe();
            this.source.subscribe(this.parent);
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=delayWhen.js.map