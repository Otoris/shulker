import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function withLatestFrom(...args) ***REMOVED***
    return (source) => ***REMOVED***
        let project;
        if (typeof args[args.length - 1] === 'function') ***REMOVED***
            project = args.pop();
        ***REMOVED***
        const observables = args;
        return source.lift(new WithLatestFromOperator(observables, project));
    ***REMOVED***;
***REMOVED***
class WithLatestFromOperator ***REMOVED***
    constructor(observables, project) ***REMOVED***
        this.observables = observables;
        this.project = project;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
    ***REMOVED***
***REMOVED***
class WithLatestFromSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, observables, project) ***REMOVED***
        super(destination);
        this.observables = observables;
        this.project = project;
        this.toRespond = [];
        const len = observables.length;
        this.values = new Array(len);
        for (let i = 0; i < len; i++) ***REMOVED***
            this.toRespond.push(i);
        ***REMOVED***
        for (let i = 0; i < len; i++) ***REMOVED***
            let observable = observables[i];
            this.add(subscribeToResult(this, observable, observable, i));
        ***REMOVED***
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.values[outerIndex] = innerValue;
        const toRespond = this.toRespond;
        if (toRespond.length > 0) ***REMOVED***
            const found = toRespond.indexOf(outerIndex);
            if (found !== -1) ***REMOVED***
                toRespond.splice(found, 1);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    notifyComplete() ***REMOVED***
    ***REMOVED***
    _next(value) ***REMOVED***
        if (this.toRespond.length === 0) ***REMOVED***
            const args = [value, ...this.values];
            if (this.project) ***REMOVED***
                this._tryProject(args);
            ***REMOVED***
            else ***REMOVED***
                this.destination.next(args);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    _tryProject(args) ***REMOVED***
        let result;
        try ***REMOVED***
            result = this.project.apply(this, args);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
            return;
        ***REMOVED***
        this.destination.next(result);
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=withLatestFrom.js.map