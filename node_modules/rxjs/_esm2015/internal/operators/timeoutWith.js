import ***REMOVED*** async ***REMOVED*** from '../scheduler/async';
import ***REMOVED*** isDate ***REMOVED*** from '../util/isDate';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function timeoutWith(due, withObservable, scheduler = async) ***REMOVED***
    return (source) => ***REMOVED***
        let absoluteTimeout = isDate(due);
        let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);
        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
    ***REMOVED***;
***REMOVED***
class TimeoutWithOperator ***REMOVED***
    constructor(waitFor, absoluteTimeout, withObservable, scheduler) ***REMOVED***
        this.waitFor = waitFor;
        this.absoluteTimeout = absoluteTimeout;
        this.withObservable = withObservable;
        this.scheduler = scheduler;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
    ***REMOVED***
***REMOVED***
class TimeoutWithSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, absoluteTimeout, waitFor, withObservable, scheduler) ***REMOVED***
        super(destination);
        this.absoluteTimeout = absoluteTimeout;
        this.waitFor = waitFor;
        this.withObservable = withObservable;
        this.scheduler = scheduler;
        this.action = null;
        this.scheduleTimeout();
    ***REMOVED***
    static dispatchTimeout(subscriber) ***REMOVED***
        const ***REMOVED*** withObservable ***REMOVED*** = subscriber;
        subscriber._unsubscribeAndRecycle();
        subscriber.add(subscribeToResult(subscriber, withObservable));
    ***REMOVED***
    scheduleTimeout() ***REMOVED***
        const ***REMOVED*** action ***REMOVED*** = this;
        if (action) ***REMOVED***
            this.action = action.schedule(this, this.waitFor);
        ***REMOVED***
        else ***REMOVED***
            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
        ***REMOVED***
    ***REMOVED***
    _next(value) ***REMOVED***
        if (!this.absoluteTimeout) ***REMOVED***
            this.scheduleTimeout();
        ***REMOVED***
        super._next(value);
    ***REMOVED***
    _unsubscribe() ***REMOVED***
        this.action = null;
        this.scheduler = null;
        this.withObservable = null;
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=timeoutWith.js.map