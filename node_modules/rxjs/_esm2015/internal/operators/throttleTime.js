import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** async ***REMOVED*** from '../scheduler/async';
import ***REMOVED*** defaultThrottleConfig ***REMOVED*** from './throttle';
export function throttleTime(duration, scheduler = async, config = defaultThrottleConfig) ***REMOVED***
    return (source) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));
***REMOVED***
class ThrottleTimeOperator ***REMOVED***
    constructor(duration, scheduler, leading, trailing) ***REMOVED***
        this.duration = duration;
        this.scheduler = scheduler;
        this.leading = leading;
        this.trailing = trailing;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
    ***REMOVED***
***REMOVED***
class ThrottleTimeSubscriber extends Subscriber ***REMOVED***
    constructor(destination, duration, scheduler, leading, trailing) ***REMOVED***
        super(destination);
        this.duration = duration;
        this.scheduler = scheduler;
        this.leading = leading;
        this.trailing = trailing;
        this._hasTrailingValue = false;
        this._trailingValue = null;
    ***REMOVED***
    _next(value) ***REMOVED***
        if (this.throttled) ***REMOVED***
            if (this.trailing) ***REMOVED***
                this._trailingValue = value;
                this._hasTrailingValue = true;
            ***REMOVED***
        ***REMOVED***
        else ***REMOVED***
            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, ***REMOVED*** subscriber: this ***REMOVED***));
            if (this.leading) ***REMOVED***
                this.destination.next(value);
            ***REMOVED***
            else if (this.trailing) ***REMOVED***
                this._trailingValue = value;
                this._hasTrailingValue = true;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    _complete() ***REMOVED***
        if (this._hasTrailingValue) ***REMOVED***
            this.destination.next(this._trailingValue);
            this.destination.complete();
        ***REMOVED***
        else ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***
    clearThrottle() ***REMOVED***
        const throttled = this.throttled;
        if (throttled) ***REMOVED***
            if (this.trailing && this._hasTrailingValue) ***REMOVED***
                this.destination.next(this._trailingValue);
                this._trailingValue = null;
                this._hasTrailingValue = false;
            ***REMOVED***
            throttled.unsubscribe();
            this.remove(throttled);
            this.throttled = null;
        ***REMOVED***
    ***REMOVED***
***REMOVED***
function dispatchNext(arg) ***REMOVED***
    const ***REMOVED*** subscriber ***REMOVED*** = arg;
    subscriber.clearThrottle();
***REMOVED***
//# sourceMappingURL=throttleTime.js.map