import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Subject ***REMOVED*** from '../Subject';
export function windowCount(windowSize, startWindowEvery = 0) ***REMOVED***
    return function windowCountOperatorFunction(source) ***REMOVED***
        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));
    ***REMOVED***;
***REMOVED***
class WindowCountOperator ***REMOVED***
    constructor(windowSize, startWindowEvery) ***REMOVED***
        this.windowSize = windowSize;
        this.startWindowEvery = startWindowEvery;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
    ***REMOVED***
***REMOVED***
class WindowCountSubscriber extends Subscriber ***REMOVED***
    constructor(destination, windowSize, startWindowEvery) ***REMOVED***
        super(destination);
        this.destination = destination;
        this.windowSize = windowSize;
        this.startWindowEvery = startWindowEvery;
        this.windows = [new Subject()];
        this.count = 0;
        destination.next(this.windows[0]);
    ***REMOVED***
    _next(value) ***REMOVED***
        const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
        const destination = this.destination;
        const windowSize = this.windowSize;
        const windows = this.windows;
        const len = windows.length;
        for (let i = 0; i < len && !this.closed; i++) ***REMOVED***
            windows[i].next(value);
        ***REMOVED***
        const c = this.count - windowSize + 1;
        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) ***REMOVED***
            windows.shift().complete();
        ***REMOVED***
        if (++this.count % startWindowEvery === 0 && !this.closed) ***REMOVED***
            const window = new Subject();
            windows.push(window);
            destination.next(window);
        ***REMOVED***
    ***REMOVED***
    _error(err) ***REMOVED***
        const windows = this.windows;
        if (windows) ***REMOVED***
            while (windows.length > 0 && !this.closed) ***REMOVED***
                windows.shift().error(err);
            ***REMOVED***
        ***REMOVED***
        this.destination.error(err);
    ***REMOVED***
    _complete() ***REMOVED***
        const windows = this.windows;
        if (windows) ***REMOVED***
            while (windows.length > 0 && !this.closed) ***REMOVED***
                windows.shift().complete();
            ***REMOVED***
        ***REMOVED***
        this.destination.complete();
    ***REMOVED***
    _unsubscribe() ***REMOVED***
        this.count = 0;
        this.windows = null;
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=windowCount.js.map