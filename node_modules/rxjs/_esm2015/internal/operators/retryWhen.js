import ***REMOVED*** Subject ***REMOVED*** from '../Subject';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function retryWhen(notifier) ***REMOVED***
    return (source) => source.lift(new RetryWhenOperator(notifier, source));
***REMOVED***
class RetryWhenOperator ***REMOVED***
    constructor(notifier, source) ***REMOVED***
        this.notifier = notifier;
        this.source = source;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
    ***REMOVED***
***REMOVED***
class RetryWhenSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, notifier, source) ***REMOVED***
        super(destination);
        this.notifier = notifier;
        this.source = source;
    ***REMOVED***
    error(err) ***REMOVED***
        if (!this.isStopped) ***REMOVED***
            let errors = this.errors;
            let retries = this.retries;
            let retriesSubscription = this.retriesSubscription;
            if (!retries) ***REMOVED***
                errors = new Subject();
                try ***REMOVED***
                    const ***REMOVED*** notifier ***REMOVED*** = this;
                    retries = notifier(errors);
                ***REMOVED***
                catch (e) ***REMOVED***
                    return super.error(e);
                ***REMOVED***
                retriesSubscription = subscribeToResult(this, retries);
            ***REMOVED***
            else ***REMOVED***
                this.errors = null;
                this.retriesSubscription = null;
            ***REMOVED***
            this._unsubscribeAndRecycle();
            this.errors = errors;
            this.retries = retries;
            this.retriesSubscription = retriesSubscription;
            errors.next(err);
        ***REMOVED***
    ***REMOVED***
    _unsubscribe() ***REMOVED***
        const ***REMOVED*** errors, retriesSubscription ***REMOVED*** = this;
        if (errors) ***REMOVED***
            errors.unsubscribe();
            this.errors = null;
        ***REMOVED***
        if (retriesSubscription) ***REMOVED***
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        ***REMOVED***
        this.retries = null;
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        const ***REMOVED*** _unsubscribe ***REMOVED*** = this;
        this._unsubscribe = null;
        this._unsubscribeAndRecycle();
        this._unsubscribe = _unsubscribe;
        this.source.subscribe(this);
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=retryWhen.js.map