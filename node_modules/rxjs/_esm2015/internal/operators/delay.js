import ***REMOVED*** async ***REMOVED*** from '../scheduler/async';
import ***REMOVED*** isDate ***REMOVED*** from '../util/isDate';
import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** Notification ***REMOVED*** from '../Notification';
export function delay(delay, scheduler = async) ***REMOVED***
    const absoluteDelay = isDate(delay);
    const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);
    return (source) => source.lift(new DelayOperator(delayFor, scheduler));
***REMOVED***
class DelayOperator ***REMOVED***
    constructor(delay, scheduler) ***REMOVED***
        this.delay = delay;
        this.scheduler = scheduler;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
    ***REMOVED***
***REMOVED***
class DelaySubscriber extends Subscriber ***REMOVED***
    constructor(destination, delay, scheduler) ***REMOVED***
        super(destination);
        this.delay = delay;
        this.scheduler = scheduler;
        this.queue = [];
        this.active = false;
        this.errored = false;
    ***REMOVED***
    static dispatch(state) ***REMOVED***
        const source = state.source;
        const queue = source.queue;
        const scheduler = state.scheduler;
        const destination = state.destination;
        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) ***REMOVED***
            queue.shift().notification.observe(destination);
        ***REMOVED***
        if (queue.length > 0) ***REMOVED***
            const delay = Math.max(0, queue[0].time - scheduler.now());
            this.schedule(state, delay);
        ***REMOVED***
        else ***REMOVED***
            this.unsubscribe();
            source.active = false;
        ***REMOVED***
    ***REMOVED***
    _schedule(scheduler) ***REMOVED***
        this.active = true;
        const destination = this.destination;
        destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, ***REMOVED***
            source: this, destination: this.destination, scheduler: scheduler
        ***REMOVED***));
    ***REMOVED***
    scheduleNotification(notification) ***REMOVED***
        if (this.errored === true) ***REMOVED***
            return;
        ***REMOVED***
        const scheduler = this.scheduler;
        const message = new DelayMessage(scheduler.now() + this.delay, notification);
        this.queue.push(message);
        if (this.active === false) ***REMOVED***
            this._schedule(scheduler);
        ***REMOVED***
    ***REMOVED***
    _next(value) ***REMOVED***
        this.scheduleNotification(Notification.createNext(value));
    ***REMOVED***
    _error(err) ***REMOVED***
        this.errored = true;
        this.queue = [];
        this.destination.error(err);
        this.unsubscribe();
    ***REMOVED***
    _complete() ***REMOVED***
        this.scheduleNotification(Notification.createComplete());
        this.unsubscribe();
    ***REMOVED***
***REMOVED***
class DelayMessage ***REMOVED***
    constructor(time, notification) ***REMOVED***
        this.time = time;
        this.notification = notification;
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=delay.js.map