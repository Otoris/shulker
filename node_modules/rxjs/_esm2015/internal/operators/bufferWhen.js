import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function bufferWhen(closingSelector) ***REMOVED***
    return function (source) ***REMOVED***
        return source.lift(new BufferWhenOperator(closingSelector));
    ***REMOVED***;
***REMOVED***
class BufferWhenOperator ***REMOVED***
    constructor(closingSelector) ***REMOVED***
        this.closingSelector = closingSelector;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
    ***REMOVED***
***REMOVED***
class BufferWhenSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, closingSelector) ***REMOVED***
        super(destination);
        this.closingSelector = closingSelector;
        this.subscribing = false;
        this.openBuffer();
    ***REMOVED***
    _next(value) ***REMOVED***
        this.buffer.push(value);
    ***REMOVED***
    _complete() ***REMOVED***
        const buffer = this.buffer;
        if (buffer) ***REMOVED***
            this.destination.next(buffer);
        ***REMOVED***
        super._complete();
    ***REMOVED***
    _unsubscribe() ***REMOVED***
        this.buffer = null;
        this.subscribing = false;
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.openBuffer();
    ***REMOVED***
    notifyComplete() ***REMOVED***
        if (this.subscribing) ***REMOVED***
            this.complete();
        ***REMOVED***
        else ***REMOVED***
            this.openBuffer();
        ***REMOVED***
    ***REMOVED***
    openBuffer() ***REMOVED***
        let ***REMOVED*** closingSubscription ***REMOVED*** = this;
        if (closingSubscription) ***REMOVED***
            this.remove(closingSubscription);
            closingSubscription.unsubscribe();
        ***REMOVED***
        const buffer = this.buffer;
        if (this.buffer) ***REMOVED***
            this.destination.next(buffer);
        ***REMOVED***
        this.buffer = [];
        let closingNotifier;
        try ***REMOVED***
            const ***REMOVED*** closingSelector ***REMOVED*** = this;
            closingNotifier = closingSelector();
        ***REMOVED***
        catch (err) ***REMOVED***
            return this.error(err);
        ***REMOVED***
        closingSubscription = new Subscription();
        this.closingSubscription = closingSubscription;
        this.add(closingSubscription);
        this.subscribing = true;
        closingSubscription.add(subscribeToResult(this, closingNotifier));
        this.subscribing = false;
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=bufferWhen.js.map