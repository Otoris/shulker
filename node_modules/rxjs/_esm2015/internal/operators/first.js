import ***REMOVED*** EmptyError ***REMOVED*** from '../util/EmptyError';
import ***REMOVED*** filter ***REMOVED*** from './filter';
import ***REMOVED*** take ***REMOVED*** from './take';
import ***REMOVED*** defaultIfEmpty ***REMOVED*** from './defaultIfEmpty';
import ***REMOVED*** throwIfEmpty ***REMOVED*** from './throwIfEmpty';
import ***REMOVED*** identity ***REMOVED*** from '../util/identity';
export function first(predicate, defaultValue) ***REMOVED***
    const hasDefaultValue = arguments.length >= 2;
    return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));
***REMOVED***
//# sourceMappingURL=first.js.map