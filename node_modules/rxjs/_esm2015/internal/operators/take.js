import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** ArgumentOutOfRangeError ***REMOVED*** from '../util/ArgumentOutOfRangeError';
import ***REMOVED*** empty ***REMOVED*** from '../observable/empty';
export function take(count) ***REMOVED***
    return (source) => ***REMOVED***
        if (count === 0) ***REMOVED***
            return empty();
        ***REMOVED***
        else ***REMOVED***
            return source.lift(new TakeOperator(count));
        ***REMOVED***
    ***REMOVED***;
***REMOVED***
class TakeOperator ***REMOVED***
    constructor(total) ***REMOVED***
        this.total = total;
        if (this.total < 0) ***REMOVED***
            throw new ArgumentOutOfRangeError;
        ***REMOVED***
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new TakeSubscriber(subscriber, this.total));
    ***REMOVED***
***REMOVED***
class TakeSubscriber extends Subscriber ***REMOVED***
    constructor(destination, total) ***REMOVED***
        super(destination);
        this.total = total;
        this.count = 0;
    ***REMOVED***
    _next(value) ***REMOVED***
        const total = this.total;
        const count = ++this.count;
        if (count <= total) ***REMOVED***
            this.destination.next(value);
            if (count === total) ***REMOVED***
                this.destination.complete();
                this.unsubscribe();
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=take.js.map