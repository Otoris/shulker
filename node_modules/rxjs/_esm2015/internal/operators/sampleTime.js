import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** async ***REMOVED*** from '../scheduler/async';
export function sampleTime(period, scheduler = async) ***REMOVED***
    return (source) => source.lift(new SampleTimeOperator(period, scheduler));
***REMOVED***
class SampleTimeOperator ***REMOVED***
    constructor(period, scheduler) ***REMOVED***
        this.period = period;
        this.scheduler = scheduler;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
    ***REMOVED***
***REMOVED***
class SampleTimeSubscriber extends Subscriber ***REMOVED***
    constructor(destination, period, scheduler) ***REMOVED***
        super(destination);
        this.period = period;
        this.scheduler = scheduler;
        this.hasValue = false;
        this.add(scheduler.schedule(dispatchNotification, period, ***REMOVED*** subscriber: this, period ***REMOVED***));
    ***REMOVED***
    _next(value) ***REMOVED***
        this.lastValue = value;
        this.hasValue = true;
    ***REMOVED***
    notifyNext() ***REMOVED***
        if (this.hasValue) ***REMOVED***
            this.hasValue = false;
            this.destination.next(this.lastValue);
        ***REMOVED***
    ***REMOVED***
***REMOVED***
function dispatchNotification(state) ***REMOVED***
    let ***REMOVED*** subscriber, period ***REMOVED*** = state;
    subscriber.notifyNext();
    this.schedule(state, period);
***REMOVED***
//# sourceMappingURL=sampleTime.js.map