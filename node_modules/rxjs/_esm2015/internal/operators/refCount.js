import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function refCount() ***REMOVED***
    return function refCountOperatorFunction(source) ***REMOVED***
        return source.lift(new RefCountOperator(source));
    ***REMOVED***;
***REMOVED***
class RefCountOperator ***REMOVED***
    constructor(connectable) ***REMOVED***
        this.connectable = connectable;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        const ***REMOVED*** connectable ***REMOVED*** = this;
        connectable._refCount++;
        const refCounter = new RefCountSubscriber(subscriber, connectable);
        const subscription = source.subscribe(refCounter);
        if (!refCounter.closed) ***REMOVED***
            refCounter.connection = connectable.connect();
        ***REMOVED***
        return subscription;
    ***REMOVED***
***REMOVED***
class RefCountSubscriber extends Subscriber ***REMOVED***
    constructor(destination, connectable) ***REMOVED***
        super(destination);
        this.connectable = connectable;
    ***REMOVED***
    _unsubscribe() ***REMOVED***
        const ***REMOVED*** connectable ***REMOVED*** = this;
        if (!connectable) ***REMOVED***
            this.connection = null;
            return;
        ***REMOVED***
        this.connectable = null;
        const refCount = connectable._refCount;
        if (refCount <= 0) ***REMOVED***
            this.connection = null;
            return;
        ***REMOVED***
        connectable._refCount = refCount - 1;
        if (refCount > 1) ***REMOVED***
            this.connection = null;
            return;
        ***REMOVED***
        const ***REMOVED*** connection ***REMOVED*** = this;
        const sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) ***REMOVED***
            sharedConnection.unsubscribe();
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=refCount.js.map