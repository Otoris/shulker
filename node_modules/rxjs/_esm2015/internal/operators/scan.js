import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function scan(accumulator, seed) ***REMOVED***
    let hasSeed = false;
    if (arguments.length >= 2) ***REMOVED***
        hasSeed = true;
    ***REMOVED***
    return function scanOperatorFunction(source) ***REMOVED***
        return source.lift(new ScanOperator(accumulator, seed, hasSeed));
    ***REMOVED***;
***REMOVED***
class ScanOperator ***REMOVED***
    constructor(accumulator, seed, hasSeed = false) ***REMOVED***
        this.accumulator = accumulator;
        this.seed = seed;
        this.hasSeed = hasSeed;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
    ***REMOVED***
***REMOVED***
class ScanSubscriber extends Subscriber ***REMOVED***
    constructor(destination, accumulator, _seed, hasSeed) ***REMOVED***
        super(destination);
        this.accumulator = accumulator;
        this._seed = _seed;
        this.hasSeed = hasSeed;
        this.index = 0;
    ***REMOVED***
    get seed() ***REMOVED***
        return this._seed;
    ***REMOVED***
    set seed(value) ***REMOVED***
        this.hasSeed = true;
        this._seed = value;
    ***REMOVED***
    _next(value) ***REMOVED***
        if (!this.hasSeed) ***REMOVED***
            this.seed = value;
            this.destination.next(value);
        ***REMOVED***
        else ***REMOVED***
            return this._tryNext(value);
        ***REMOVED***
    ***REMOVED***
    _tryNext(value) ***REMOVED***
        const index = this.index++;
        let result;
        try ***REMOVED***
            result = this.accumulator(this.seed, value, index);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
        ***REMOVED***
        this.seed = result;
        this.destination.next(result);
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=scan.js.map