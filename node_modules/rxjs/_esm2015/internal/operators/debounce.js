import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function debounce(durationSelector) ***REMOVED***
    return (source) => source.lift(new DebounceOperator(durationSelector));
***REMOVED***
class DebounceOperator ***REMOVED***
    constructor(durationSelector) ***REMOVED***
        this.durationSelector = durationSelector;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
    ***REMOVED***
***REMOVED***
class DebounceSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, durationSelector) ***REMOVED***
        super(destination);
        this.durationSelector = durationSelector;
        this.hasValue = false;
        this.durationSubscription = null;
    ***REMOVED***
    _next(value) ***REMOVED***
        try ***REMOVED***
            const result = this.durationSelector.call(this, value);
            if (result) ***REMOVED***
                this._tryNext(value, result);
            ***REMOVED***
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
        ***REMOVED***
    ***REMOVED***
    _complete() ***REMOVED***
        this.emitValue();
        this.destination.complete();
    ***REMOVED***
    _tryNext(value, duration) ***REMOVED***
        let subscription = this.durationSubscription;
        this.value = value;
        this.hasValue = true;
        if (subscription) ***REMOVED***
            subscription.unsubscribe();
            this.remove(subscription);
        ***REMOVED***
        subscription = subscribeToResult(this, duration);
        if (subscription && !subscription.closed) ***REMOVED***
            this.add(this.durationSubscription = subscription);
        ***REMOVED***
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.emitValue();
    ***REMOVED***
    notifyComplete() ***REMOVED***
        this.emitValue();
    ***REMOVED***
    emitValue() ***REMOVED***
        if (this.hasValue) ***REMOVED***
            const value = this.value;
            const subscription = this.durationSubscription;
            if (subscription) ***REMOVED***
                this.durationSubscription = null;
                subscription.unsubscribe();
                this.remove(subscription);
            ***REMOVED***
            this.value = null;
            this.hasValue = false;
            super._next(value);
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=debounce.js.map