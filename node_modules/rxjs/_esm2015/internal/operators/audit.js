import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function audit(durationSelector) ***REMOVED***
    return function auditOperatorFunction(source) ***REMOVED***
        return source.lift(new AuditOperator(durationSelector));
    ***REMOVED***;
***REMOVED***
class AuditOperator ***REMOVED***
    constructor(durationSelector) ***REMOVED***
        this.durationSelector = durationSelector;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
    ***REMOVED***
***REMOVED***
class AuditSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, durationSelector) ***REMOVED***
        super(destination);
        this.durationSelector = durationSelector;
        this.hasValue = false;
    ***REMOVED***
    _next(value) ***REMOVED***
        this.value = value;
        this.hasValue = true;
        if (!this.throttled) ***REMOVED***
            let duration;
            try ***REMOVED***
                const ***REMOVED*** durationSelector ***REMOVED*** = this;
                duration = durationSelector(value);
            ***REMOVED***
            catch (err) ***REMOVED***
                return this.destination.error(err);
            ***REMOVED***
            const innerSubscription = subscribeToResult(this, duration);
            if (!innerSubscription || innerSubscription.closed) ***REMOVED***
                this.clearThrottle();
            ***REMOVED***
            else ***REMOVED***
                this.add(this.throttled = innerSubscription);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    clearThrottle() ***REMOVED***
        const ***REMOVED*** value, hasValue, throttled ***REMOVED*** = this;
        if (throttled) ***REMOVED***
            this.remove(throttled);
            this.throttled = null;
            throttled.unsubscribe();
        ***REMOVED***
        if (hasValue) ***REMOVED***
            this.value = null;
            this.hasValue = false;
            this.destination.next(value);
        ***REMOVED***
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex) ***REMOVED***
        this.clearThrottle();
    ***REMOVED***
    notifyComplete() ***REMOVED***
        this.clearThrottle();
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=audit.js.map