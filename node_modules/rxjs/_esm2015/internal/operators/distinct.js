import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function distinct(keySelector, flushes) ***REMOVED***
    return (source) => source.lift(new DistinctOperator(keySelector, flushes));
***REMOVED***
class DistinctOperator ***REMOVED***
    constructor(keySelector, flushes) ***REMOVED***
        this.keySelector = keySelector;
        this.flushes = flushes;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
    ***REMOVED***
***REMOVED***
export class DistinctSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, keySelector, flushes) ***REMOVED***
        super(destination);
        this.keySelector = keySelector;
        this.values = new Set();
        if (flushes) ***REMOVED***
            this.add(subscribeToResult(this, flushes));
        ***REMOVED***
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.values.clear();
    ***REMOVED***
    notifyError(error, innerSub) ***REMOVED***
        this._error(error);
    ***REMOVED***
    _next(value) ***REMOVED***
        if (this.keySelector) ***REMOVED***
            this._useKeySelector(value);
        ***REMOVED***
        else ***REMOVED***
            this._finalizeNext(value, value);
        ***REMOVED***
    ***REMOVED***
    _useKeySelector(value) ***REMOVED***
        let key;
        const ***REMOVED*** destination ***REMOVED*** = this;
        try ***REMOVED***
            key = this.keySelector(value);
        ***REMOVED***
        catch (err) ***REMOVED***
            destination.error(err);
            return;
        ***REMOVED***
        this._finalizeNext(key, value);
    ***REMOVED***
    _finalizeNext(key, value) ***REMOVED***
        const ***REMOVED*** values ***REMOVED*** = this;
        if (!values.has(key)) ***REMOVED***
            values.add(key);
            this.destination.next(value);
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=distinct.js.map