import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function retry(count = -1) ***REMOVED***
    return (source) => source.lift(new RetryOperator(count, source));
***REMOVED***
class RetryOperator ***REMOVED***
    constructor(count, source) ***REMOVED***
        this.count = count;
        this.source = source;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
    ***REMOVED***
***REMOVED***
class RetrySubscriber extends Subscriber ***REMOVED***
    constructor(destination, count, source) ***REMOVED***
        super(destination);
        this.count = count;
        this.source = source;
    ***REMOVED***
    error(err) ***REMOVED***
        if (!this.isStopped) ***REMOVED***
            const ***REMOVED*** source, count ***REMOVED*** = this;
            if (count === 0) ***REMOVED***
                return super.error(err);
            ***REMOVED***
            else if (count > -1) ***REMOVED***
                this.count = count - 1;
            ***REMOVED***
            source.subscribe(this._unsubscribeAndRecycle());
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=retry.js.map