import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export const defaultThrottleConfig = ***REMOVED***
    leading: true,
    trailing: false
***REMOVED***;
export function throttle(durationSelector, config = defaultThrottleConfig) ***REMOVED***
    return (source) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));
***REMOVED***
class ThrottleOperator ***REMOVED***
    constructor(durationSelector, leading, trailing) ***REMOVED***
        this.durationSelector = durationSelector;
        this.leading = leading;
        this.trailing = trailing;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
    ***REMOVED***
***REMOVED***
class ThrottleSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, durationSelector, _leading, _trailing) ***REMOVED***
        super(destination);
        this.destination = destination;
        this.durationSelector = durationSelector;
        this._leading = _leading;
        this._trailing = _trailing;
        this._hasValue = false;
    ***REMOVED***
    _next(value) ***REMOVED***
        this._hasValue = true;
        this._sendValue = value;
        if (!this._throttled) ***REMOVED***
            if (this._leading) ***REMOVED***
                this.send();
            ***REMOVED***
            else ***REMOVED***
                this.throttle(value);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    send() ***REMOVED***
        const ***REMOVED*** _hasValue, _sendValue ***REMOVED*** = this;
        if (_hasValue) ***REMOVED***
            this.destination.next(_sendValue);
            this.throttle(_sendValue);
        ***REMOVED***
        this._hasValue = false;
        this._sendValue = null;
    ***REMOVED***
    throttle(value) ***REMOVED***
        const duration = this.tryDurationSelector(value);
        if (!!duration) ***REMOVED***
            this.add(this._throttled = subscribeToResult(this, duration));
        ***REMOVED***
    ***REMOVED***
    tryDurationSelector(value) ***REMOVED***
        try ***REMOVED***
            return this.durationSelector(value);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
            return null;
        ***REMOVED***
    ***REMOVED***
    throttlingDone() ***REMOVED***
        const ***REMOVED*** _throttled, _trailing ***REMOVED*** = this;
        if (_throttled) ***REMOVED***
            _throttled.unsubscribe();
        ***REMOVED***
        this._throttled = null;
        if (_trailing) ***REMOVED***
            this.send();
        ***REMOVED***
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.throttlingDone();
    ***REMOVED***
    notifyComplete() ***REMOVED***
        this.throttlingDone();
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=throttle.js.map