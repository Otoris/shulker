import ***REMOVED*** connectableObservableDescriptor ***REMOVED*** from '../observable/ConnectableObservable';
export function multicast(subjectOrSubjectFactory, selector) ***REMOVED***
    return function multicastOperatorFunction(source) ***REMOVED***
        let subjectFactory;
        if (typeof subjectOrSubjectFactory === 'function') ***REMOVED***
            subjectFactory = subjectOrSubjectFactory;
        ***REMOVED***
        else ***REMOVED***
            subjectFactory = function subjectFactory() ***REMOVED***
                return subjectOrSubjectFactory;
            ***REMOVED***;
        ***REMOVED***
        if (typeof selector === 'function') ***REMOVED***
            return source.lift(new MulticastOperator(subjectFactory, selector));
        ***REMOVED***
        const connectable = Object.create(source, connectableObservableDescriptor);
        connectable.source = source;
        connectable.subjectFactory = subjectFactory;
        return connectable;
    ***REMOVED***;
***REMOVED***
export class MulticastOperator ***REMOVED***
    constructor(subjectFactory, selector) ***REMOVED***
        this.subjectFactory = subjectFactory;
        this.selector = selector;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        const ***REMOVED*** selector ***REMOVED*** = this;
        const subject = this.subjectFactory();
        const subscription = selector(subject).subscribe(subscriber);
        subscription.add(source.subscribe(subject));
        return subscription;
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=multicast.js.map