import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function takeUntil(notifier) ***REMOVED***
    return (source) => source.lift(new TakeUntilOperator(notifier));
***REMOVED***
class TakeUntilOperator ***REMOVED***
    constructor(notifier) ***REMOVED***
        this.notifier = notifier;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
        const notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);
        if (notifierSubscription && !takeUntilSubscriber.seenValue) ***REMOVED***
            takeUntilSubscriber.add(notifierSubscription);
            return source.subscribe(takeUntilSubscriber);
        ***REMOVED***
        return takeUntilSubscriber;
    ***REMOVED***
***REMOVED***
class TakeUntilSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination) ***REMOVED***
        super(destination);
        this.seenValue = false;
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.seenValue = true;
        this.complete();
    ***REMOVED***
    notifyComplete() ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=takeUntil.js.map