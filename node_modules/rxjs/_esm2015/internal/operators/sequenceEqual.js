import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function sequenceEqual(compareTo, comparator) ***REMOVED***
    return (source) => source.lift(new SequenceEqualOperator(compareTo, comparator));
***REMOVED***
export class SequenceEqualOperator ***REMOVED***
    constructor(compareTo, comparator) ***REMOVED***
        this.compareTo = compareTo;
        this.comparator = comparator;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));
    ***REMOVED***
***REMOVED***
export class SequenceEqualSubscriber extends Subscriber ***REMOVED***
    constructor(destination, compareTo, comparator) ***REMOVED***
        super(destination);
        this.compareTo = compareTo;
        this.comparator = comparator;
        this._a = [];
        this._b = [];
        this._oneComplete = false;
        this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));
    ***REMOVED***
    _next(value) ***REMOVED***
        if (this._oneComplete && this._b.length === 0) ***REMOVED***
            this.emit(false);
        ***REMOVED***
        else ***REMOVED***
            this._a.push(value);
            this.checkValues();
        ***REMOVED***
    ***REMOVED***
    _complete() ***REMOVED***
        if (this._oneComplete) ***REMOVED***
            this.emit(this._a.length === 0 && this._b.length === 0);
        ***REMOVED***
        else ***REMOVED***
            this._oneComplete = true;
        ***REMOVED***
        this.unsubscribe();
    ***REMOVED***
    checkValues() ***REMOVED***
        const ***REMOVED*** _a, _b, comparator ***REMOVED*** = this;
        while (_a.length > 0 && _b.length > 0) ***REMOVED***
            let a = _a.shift();
            let b = _b.shift();
            let areEqual = false;
            try ***REMOVED***
                areEqual = comparator ? comparator(a, b) : a === b;
            ***REMOVED***
            catch (e) ***REMOVED***
                this.destination.error(e);
            ***REMOVED***
            if (!areEqual) ***REMOVED***
                this.emit(false);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    emit(value) ***REMOVED***
        const ***REMOVED*** destination ***REMOVED*** = this;
        destination.next(value);
        destination.complete();
    ***REMOVED***
    nextB(value) ***REMOVED***
        if (this._oneComplete && this._a.length === 0) ***REMOVED***
            this.emit(false);
        ***REMOVED***
        else ***REMOVED***
            this._b.push(value);
            this.checkValues();
        ***REMOVED***
    ***REMOVED***
    completeB() ***REMOVED***
        if (this._oneComplete) ***REMOVED***
            this.emit(this._a.length === 0 && this._b.length === 0);
        ***REMOVED***
        else ***REMOVED***
            this._oneComplete = true;
        ***REMOVED***
    ***REMOVED***
***REMOVED***
class SequenceEqualCompareToSubscriber extends Subscriber ***REMOVED***
    constructor(destination, parent) ***REMOVED***
        super(destination);
        this.parent = parent;
    ***REMOVED***
    _next(value) ***REMOVED***
        this.parent.nextB(value);
    ***REMOVED***
    _error(err) ***REMOVED***
        this.parent.error(err);
        this.unsubscribe();
    ***REMOVED***
    _complete() ***REMOVED***
        this.parent.completeB();
        this.unsubscribe();
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=sequenceEqual.js.map