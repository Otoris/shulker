import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
import ***REMOVED*** map ***REMOVED*** from './map';
import ***REMOVED*** from ***REMOVED*** from '../observable/from';
export function switchMap(project, resultSelector) ***REMOVED***
    if (typeof resultSelector === 'function') ***REMOVED***
        return (source) => source.pipe(switchMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii)))));
    ***REMOVED***
    return (source) => source.lift(new SwitchMapOperator(project));
***REMOVED***
class SwitchMapOperator ***REMOVED***
    constructor(project) ***REMOVED***
        this.project = project;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
    ***REMOVED***
***REMOVED***
class SwitchMapSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, project) ***REMOVED***
        super(destination);
        this.project = project;
        this.index = 0;
    ***REMOVED***
    _next(value) ***REMOVED***
        let result;
        const index = this.index++;
        try ***REMOVED***
            result = this.project(value, index);
        ***REMOVED***
        catch (error) ***REMOVED***
            this.destination.error(error);
            return;
        ***REMOVED***
        this._innerSub(result, value, index);
    ***REMOVED***
    _innerSub(result, value, index) ***REMOVED***
        const innerSubscription = this.innerSubscription;
        if (innerSubscription) ***REMOVED***
            innerSubscription.unsubscribe();
        ***REMOVED***
        const innerSubscriber = new InnerSubscriber(this, value, index);
        const destination = this.destination;
        destination.add(innerSubscriber);
        this.innerSubscription = subscribeToResult(this, result, undefined, undefined, innerSubscriber);
        if (this.innerSubscription !== innerSubscriber) ***REMOVED***
            destination.add(this.innerSubscription);
        ***REMOVED***
    ***REMOVED***
    _complete() ***REMOVED***
        const ***REMOVED*** innerSubscription ***REMOVED*** = this;
        if (!innerSubscription || innerSubscription.closed) ***REMOVED***
            super._complete();
        ***REMOVED***
        this.unsubscribe();
    ***REMOVED***
    _unsubscribe() ***REMOVED***
        this.innerSubscription = null;
    ***REMOVED***
    notifyComplete(innerSub) ***REMOVED***
        const destination = this.destination;
        destination.remove(innerSub);
        this.innerSubscription = null;
        if (this.isStopped) ***REMOVED***
            super._complete();
        ***REMOVED***
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.destination.next(innerValue);
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=switchMap.js.map