import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function filter(predicate, thisArg) ***REMOVED***
    return function filterOperatorFunction(source) ***REMOVED***
        return source.lift(new FilterOperator(predicate, thisArg));
    ***REMOVED***;
***REMOVED***
class FilterOperator ***REMOVED***
    constructor(predicate, thisArg) ***REMOVED***
        this.predicate = predicate;
        this.thisArg = thisArg;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    ***REMOVED***
***REMOVED***
class FilterSubscriber extends Subscriber ***REMOVED***
    constructor(destination, predicate, thisArg) ***REMOVED***
        super(destination);
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.count = 0;
    ***REMOVED***
    _next(value) ***REMOVED***
        let result;
        try ***REMOVED***
            result = this.predicate.call(this.thisArg, value, this.count++);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
            return;
        ***REMOVED***
        if (result) ***REMOVED***
            this.destination.next(value);
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=filter.js.map