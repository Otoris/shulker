import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function skipUntil(notifier) ***REMOVED***
    return (source) => source.lift(new SkipUntilOperator(notifier));
***REMOVED***
class SkipUntilOperator ***REMOVED***
    constructor(notifier) ***REMOVED***
        this.notifier = notifier;
    ***REMOVED***
    call(destination, source) ***REMOVED***
        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));
    ***REMOVED***
***REMOVED***
class SkipUntilSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, notifier) ***REMOVED***
        super(destination);
        this.hasValue = false;
        const innerSubscriber = new InnerSubscriber(this, undefined, undefined);
        this.add(innerSubscriber);
        this.innerSubscription = innerSubscriber;
        const innerSubscription = subscribeToResult(this, notifier, undefined, undefined, innerSubscriber);
        if (innerSubscription !== innerSubscriber) ***REMOVED***
            this.add(innerSubscription);
            this.innerSubscription = innerSubscription;
        ***REMOVED***
    ***REMOVED***
    _next(value) ***REMOVED***
        if (this.hasValue) ***REMOVED***
            super._next(value);
        ***REMOVED***
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.hasValue = true;
        if (this.innerSubscription) ***REMOVED***
            this.innerSubscription.unsubscribe();
        ***REMOVED***
    ***REMOVED***
    notifyComplete() ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=skipUntil.js.map