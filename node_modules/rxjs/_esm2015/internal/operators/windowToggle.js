import ***REMOVED*** Subject ***REMOVED*** from '../Subject';
import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function windowToggle(openings, closingSelector) ***REMOVED***
    return (source) => source.lift(new WindowToggleOperator(openings, closingSelector));
***REMOVED***
class WindowToggleOperator ***REMOVED***
    constructor(openings, closingSelector) ***REMOVED***
        this.openings = openings;
        this.closingSelector = closingSelector;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
    ***REMOVED***
***REMOVED***
class WindowToggleSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, openings, closingSelector) ***REMOVED***
        super(destination);
        this.openings = openings;
        this.closingSelector = closingSelector;
        this.contexts = [];
        this.add(this.openSubscription = subscribeToResult(this, openings, openings));
    ***REMOVED***
    _next(value) ***REMOVED***
        const ***REMOVED*** contexts ***REMOVED*** = this;
        if (contexts) ***REMOVED***
            const len = contexts.length;
            for (let i = 0; i < len; i++) ***REMOVED***
                contexts[i].window.next(value);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    _error(err) ***REMOVED***
        const ***REMOVED*** contexts ***REMOVED*** = this;
        this.contexts = null;
        if (contexts) ***REMOVED***
            const len = contexts.length;
            let index = -1;
            while (++index < len) ***REMOVED***
                const context = contexts[index];
                context.window.error(err);
                context.subscription.unsubscribe();
            ***REMOVED***
        ***REMOVED***
        super._error(err);
    ***REMOVED***
    _complete() ***REMOVED***
        const ***REMOVED*** contexts ***REMOVED*** = this;
        this.contexts = null;
        if (contexts) ***REMOVED***
            const len = contexts.length;
            let index = -1;
            while (++index < len) ***REMOVED***
                const context = contexts[index];
                context.window.complete();
                context.subscription.unsubscribe();
            ***REMOVED***
        ***REMOVED***
        super._complete();
    ***REMOVED***
    _unsubscribe() ***REMOVED***
        const ***REMOVED*** contexts ***REMOVED*** = this;
        this.contexts = null;
        if (contexts) ***REMOVED***
            const len = contexts.length;
            let index = -1;
            while (++index < len) ***REMOVED***
                const context = contexts[index];
                context.window.unsubscribe();
                context.subscription.unsubscribe();
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        if (outerValue === this.openings) ***REMOVED***
            let closingNotifier;
            try ***REMOVED***
                const ***REMOVED*** closingSelector ***REMOVED*** = this;
                closingNotifier = closingSelector(innerValue);
            ***REMOVED***
            catch (e) ***REMOVED***
                return this.error(e);
            ***REMOVED***
            const window = new Subject();
            const subscription = new Subscription();
            const context = ***REMOVED*** window, subscription ***REMOVED***;
            this.contexts.push(context);
            const innerSubscription = subscribeToResult(this, closingNotifier, context);
            if (innerSubscription.closed) ***REMOVED***
                this.closeWindow(this.contexts.length - 1);
            ***REMOVED***
            else ***REMOVED***
                innerSubscription.context = context;
                subscription.add(innerSubscription);
            ***REMOVED***
            this.destination.next(window);
        ***REMOVED***
        else ***REMOVED***
            this.closeWindow(this.contexts.indexOf(outerValue));
        ***REMOVED***
    ***REMOVED***
    notifyError(err) ***REMOVED***
        this.error(err);
    ***REMOVED***
    notifyComplete(inner) ***REMOVED***
        if (inner !== this.openSubscription) ***REMOVED***
            this.closeWindow(this.contexts.indexOf(inner.context));
        ***REMOVED***
    ***REMOVED***
    closeWindow(index) ***REMOVED***
        if (index === -1) ***REMOVED***
            return;
        ***REMOVED***
        const ***REMOVED*** contexts ***REMOVED*** = this;
        const context = contexts[index];
        const ***REMOVED*** window, subscription ***REMOVED*** = context;
        contexts.splice(index, 1);
        window.complete();
        subscription.unsubscribe();
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=windowToggle.js.map