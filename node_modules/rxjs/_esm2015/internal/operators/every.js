import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function every(predicate, thisArg) ***REMOVED***
    return (source) => source.lift(new EveryOperator(predicate, thisArg, source));
***REMOVED***
class EveryOperator ***REMOVED***
    constructor(predicate, thisArg, source) ***REMOVED***
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
    ***REMOVED***
    call(observer, source) ***REMOVED***
        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
    ***REMOVED***
***REMOVED***
class EverySubscriber extends Subscriber ***REMOVED***
    constructor(destination, predicate, thisArg, source) ***REMOVED***
        super(destination);
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
        this.index = 0;
        this.thisArg = thisArg || this;
    ***REMOVED***
    notifyComplete(everyValueMatch) ***REMOVED***
        this.destination.next(everyValueMatch);
        this.destination.complete();
    ***REMOVED***
    _next(value) ***REMOVED***
        let result = false;
        try ***REMOVED***
            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
            return;
        ***REMOVED***
        if (!result) ***REMOVED***
            this.notifyComplete(false);
        ***REMOVED***
    ***REMOVED***
    _complete() ***REMOVED***
        this.notifyComplete(true);
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=every.js.map