import ***REMOVED*** async ***REMOVED*** from '../scheduler/async';
import ***REMOVED*** scan ***REMOVED*** from './scan';
import ***REMOVED*** defer ***REMOVED*** from '../observable/defer';
import ***REMOVED*** map ***REMOVED*** from './map';
export function timeInterval(scheduler = async) ***REMOVED***
    return (source) => defer(() => ***REMOVED***
        return source.pipe(scan((***REMOVED*** current ***REMOVED***, value) => (***REMOVED*** value, current: scheduler.now(), last: current ***REMOVED***), ***REMOVED*** current: scheduler.now(), value: undefined, last: undefined ***REMOVED***), map((***REMOVED*** current, last, value ***REMOVED***) => new TimeInterval(value, current - last)));
    ***REMOVED***);
***REMOVED***
export class TimeInterval ***REMOVED***
    constructor(value, interval) ***REMOVED***
        this.value = value;
        this.interval = interval;
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=timeInterval.js.map