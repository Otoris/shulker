import ***REMOVED*** Subject ***REMOVED*** from '../Subject';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function repeatWhen(notifier) ***REMOVED***
    return (source) => source.lift(new RepeatWhenOperator(notifier));
***REMOVED***
class RepeatWhenOperator ***REMOVED***
    constructor(notifier) ***REMOVED***
        this.notifier = notifier;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
    ***REMOVED***
***REMOVED***
class RepeatWhenSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, notifier, source) ***REMOVED***
        super(destination);
        this.notifier = notifier;
        this.source = source;
        this.sourceIsBeingSubscribedTo = true;
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.sourceIsBeingSubscribedTo = true;
        this.source.subscribe(this);
    ***REMOVED***
    notifyComplete(innerSub) ***REMOVED***
        if (this.sourceIsBeingSubscribedTo === false) ***REMOVED***
            return super.complete();
        ***REMOVED***
    ***REMOVED***
    complete() ***REMOVED***
        this.sourceIsBeingSubscribedTo = false;
        if (!this.isStopped) ***REMOVED***
            if (!this.retries) ***REMOVED***
                this.subscribeToRetries();
            ***REMOVED***
            if (!this.retriesSubscription || this.retriesSubscription.closed) ***REMOVED***
                return super.complete();
            ***REMOVED***
            this._unsubscribeAndRecycle();
            this.notifications.next();
        ***REMOVED***
    ***REMOVED***
    _unsubscribe() ***REMOVED***
        const ***REMOVED*** notifications, retriesSubscription ***REMOVED*** = this;
        if (notifications) ***REMOVED***
            notifications.unsubscribe();
            this.notifications = null;
        ***REMOVED***
        if (retriesSubscription) ***REMOVED***
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        ***REMOVED***
        this.retries = null;
    ***REMOVED***
    _unsubscribeAndRecycle() ***REMOVED***
        const ***REMOVED*** _unsubscribe ***REMOVED*** = this;
        this._unsubscribe = null;
        super._unsubscribeAndRecycle();
        this._unsubscribe = _unsubscribe;
        return this;
    ***REMOVED***
    subscribeToRetries() ***REMOVED***
        this.notifications = new Subject();
        let retries;
        try ***REMOVED***
            const ***REMOVED*** notifier ***REMOVED*** = this;
            retries = notifier(this.notifications);
        ***REMOVED***
        catch (e) ***REMOVED***
            return super.complete();
        ***REMOVED***
        this.retries = retries;
        this.retriesSubscription = subscribeToResult(this, retries);
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=repeatWhen.js.map