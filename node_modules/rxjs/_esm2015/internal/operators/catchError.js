import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function catchError(selector) ***REMOVED***
    return function catchErrorOperatorFunction(source) ***REMOVED***
        const operator = new CatchOperator(selector);
        const caught = source.lift(operator);
        return (operator.caught = caught);
    ***REMOVED***;
***REMOVED***
class CatchOperator ***REMOVED***
    constructor(selector) ***REMOVED***
        this.selector = selector;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
    ***REMOVED***
***REMOVED***
class CatchSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, selector, caught) ***REMOVED***
        super(destination);
        this.selector = selector;
        this.caught = caught;
    ***REMOVED***
    error(err) ***REMOVED***
        if (!this.isStopped) ***REMOVED***
            let result;
            try ***REMOVED***
                result = this.selector(err, this.caught);
            ***REMOVED***
            catch (err2) ***REMOVED***
                super.error(err2);
                return;
            ***REMOVED***
            this._unsubscribeAndRecycle();
            const innerSubscriber = new InnerSubscriber(this, undefined, undefined);
            this.add(innerSubscriber);
            const innerSubscription = subscribeToResult(this, result, undefined, undefined, innerSubscriber);
            if (innerSubscription !== innerSubscriber) ***REMOVED***
                this.add(innerSubscription);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=catchError.js.map