import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** EmptyError ***REMOVED*** from '../util/EmptyError';
export function single(predicate) ***REMOVED***
    return (source) => source.lift(new SingleOperator(predicate, source));
***REMOVED***
class SingleOperator ***REMOVED***
    constructor(predicate, source) ***REMOVED***
        this.predicate = predicate;
        this.source = source;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
    ***REMOVED***
***REMOVED***
class SingleSubscriber extends Subscriber ***REMOVED***
    constructor(destination, predicate, source) ***REMOVED***
        super(destination);
        this.predicate = predicate;
        this.source = source;
        this.seenValue = false;
        this.index = 0;
    ***REMOVED***
    applySingleValue(value) ***REMOVED***
        if (this.seenValue) ***REMOVED***
            this.destination.error('Sequence contains more than one element');
        ***REMOVED***
        else ***REMOVED***
            this.seenValue = true;
            this.singleValue = value;
        ***REMOVED***
    ***REMOVED***
    _next(value) ***REMOVED***
        const index = this.index++;
        if (this.predicate) ***REMOVED***
            this.tryNext(value, index);
        ***REMOVED***
        else ***REMOVED***
            this.applySingleValue(value);
        ***REMOVED***
    ***REMOVED***
    tryNext(value, index) ***REMOVED***
        try ***REMOVED***
            if (this.predicate(value, index, this.source)) ***REMOVED***
                this.applySingleValue(value);
            ***REMOVED***
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
        ***REMOVED***
    ***REMOVED***
    _complete() ***REMOVED***
        const destination = this.destination;
        if (this.index > 0) ***REMOVED***
            destination.next(this.seenValue ? this.singleValue : undefined);
            destination.complete();
        ***REMOVED***
        else ***REMOVED***
            destination.error(new EmptyError);
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=single.js.map