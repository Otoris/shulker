import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** InnerSubscriber ***REMOVED*** from '../InnerSubscriber';
import ***REMOVED*** map ***REMOVED*** from './map';
import ***REMOVED*** from ***REMOVED*** from '../observable/from';
export function mergeMap(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) ***REMOVED***
    if (typeof resultSelector === 'function') ***REMOVED***
        return (source) => source.pipe(mergeMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii))), concurrent));
    ***REMOVED***
    else if (typeof resultSelector === 'number') ***REMOVED***
        concurrent = resultSelector;
    ***REMOVED***
    return (source) => source.lift(new MergeMapOperator(project, concurrent));
***REMOVED***
export class MergeMapOperator ***REMOVED***
    constructor(project, concurrent = Number.POSITIVE_INFINITY) ***REMOVED***
        this.project = project;
        this.concurrent = concurrent;
    ***REMOVED***
    call(observer, source) ***REMOVED***
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
    ***REMOVED***
***REMOVED***
export class MergeMapSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, project, concurrent = Number.POSITIVE_INFINITY) ***REMOVED***
        super(destination);
        this.project = project;
        this.concurrent = concurrent;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
        this.index = 0;
    ***REMOVED***
    _next(value) ***REMOVED***
        if (this.active < this.concurrent) ***REMOVED***
            this._tryNext(value);
        ***REMOVED***
        else ***REMOVED***
            this.buffer.push(value);
        ***REMOVED***
    ***REMOVED***
    _tryNext(value) ***REMOVED***
        let result;
        const index = this.index++;
        try ***REMOVED***
            result = this.project(value, index);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
            return;
        ***REMOVED***
        this.active++;
        this._innerSub(result, value, index);
    ***REMOVED***
    _innerSub(ish, value, index) ***REMOVED***
        const innerSubscriber = new InnerSubscriber(this, value, index);
        const destination = this.destination;
        destination.add(innerSubscriber);
        const innerSubscription = subscribeToResult(this, ish, undefined, undefined, innerSubscriber);
        if (innerSubscription !== innerSubscriber) ***REMOVED***
            destination.add(innerSubscription);
        ***REMOVED***
    ***REMOVED***
    _complete() ***REMOVED***
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
        this.unsubscribe();
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this.destination.next(innerValue);
    ***REMOVED***
    notifyComplete(innerSub) ***REMOVED***
        const buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) ***REMOVED***
            this._next(buffer.shift());
        ***REMOVED***
        else if (this.active === 0 && this.hasCompleted) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=mergeMap.js.map