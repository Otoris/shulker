import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
export function expand(project, concurrent = Number.POSITIVE_INFINITY, scheduler = undefined) ***REMOVED***
    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
    return (source) => source.lift(new ExpandOperator(project, concurrent, scheduler));
***REMOVED***
export class ExpandOperator ***REMOVED***
    constructor(project, concurrent, scheduler) ***REMOVED***
        this.project = project;
        this.concurrent = concurrent;
        this.scheduler = scheduler;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
    ***REMOVED***
***REMOVED***
export class ExpandSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, project, concurrent, scheduler) ***REMOVED***
        super(destination);
        this.project = project;
        this.concurrent = concurrent;
        this.scheduler = scheduler;
        this.index = 0;
        this.active = 0;
        this.hasCompleted = false;
        if (concurrent < Number.POSITIVE_INFINITY) ***REMOVED***
            this.buffer = [];
        ***REMOVED***
    ***REMOVED***
    static dispatch(arg) ***REMOVED***
        const ***REMOVED*** subscriber, result, value, index ***REMOVED*** = arg;
        subscriber.subscribeToProjection(result, value, index);
    ***REMOVED***
    _next(value) ***REMOVED***
        const destination = this.destination;
        if (destination.closed) ***REMOVED***
            this._complete();
            return;
        ***REMOVED***
        const index = this.index++;
        if (this.active < this.concurrent) ***REMOVED***
            destination.next(value);
            try ***REMOVED***
                const ***REMOVED*** project ***REMOVED*** = this;
                const result = project(value, index);
                if (!this.scheduler) ***REMOVED***
                    this.subscribeToProjection(result, value, index);
                ***REMOVED***
                else ***REMOVED***
                    const state = ***REMOVED*** subscriber: this, result, value, index ***REMOVED***;
                    const destination = this.destination;
                    destination.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
                ***REMOVED***
            ***REMOVED***
            catch (e) ***REMOVED***
                destination.error(e);
            ***REMOVED***
        ***REMOVED***
        else ***REMOVED***
            this.buffer.push(value);
        ***REMOVED***
    ***REMOVED***
    subscribeToProjection(result, value, index) ***REMOVED***
        this.active++;
        const destination = this.destination;
        destination.add(subscribeToResult(this, result, value, index));
    ***REMOVED***
    _complete() ***REMOVED***
        this.hasCompleted = true;
        if (this.hasCompleted && this.active === 0) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
        this.unsubscribe();
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        this._next(innerValue);
    ***REMOVED***
    notifyComplete(innerSub) ***REMOVED***
        const buffer = this.buffer;
        const destination = this.destination;
        destination.remove(innerSub);
        this.active--;
        if (buffer && buffer.length > 0) ***REMOVED***
            this._next(buffer.shift());
        ***REMOVED***
        if (this.hasCompleted && this.active === 0) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=expand.js.map