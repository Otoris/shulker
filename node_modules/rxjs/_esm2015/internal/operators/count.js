import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function count(predicate) ***REMOVED***
    return (source) => source.lift(new CountOperator(predicate, source));
***REMOVED***
class CountOperator ***REMOVED***
    constructor(predicate, source) ***REMOVED***
        this.predicate = predicate;
        this.source = source;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
    ***REMOVED***
***REMOVED***
class CountSubscriber extends Subscriber ***REMOVED***
    constructor(destination, predicate, source) ***REMOVED***
        super(destination);
        this.predicate = predicate;
        this.source = source;
        this.count = 0;
        this.index = 0;
    ***REMOVED***
    _next(value) ***REMOVED***
        if (this.predicate) ***REMOVED***
            this._tryPredicate(value);
        ***REMOVED***
        else ***REMOVED***
            this.count++;
        ***REMOVED***
    ***REMOVED***
    _tryPredicate(value) ***REMOVED***
        let result;
        try ***REMOVED***
            result = this.predicate(value, this.index++, this.source);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
            return;
        ***REMOVED***
        if (result) ***REMOVED***
            this.count++;
        ***REMOVED***
    ***REMOVED***
    _complete() ***REMOVED***
        this.destination.next(this.count);
        this.destination.complete();
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=count.js.map