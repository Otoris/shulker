import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function skipWhile(predicate) ***REMOVED***
    return (source) => source.lift(new SkipWhileOperator(predicate));
***REMOVED***
class SkipWhileOperator ***REMOVED***
    constructor(predicate) ***REMOVED***
        this.predicate = predicate;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
    ***REMOVED***
***REMOVED***
class SkipWhileSubscriber extends Subscriber ***REMOVED***
    constructor(destination, predicate) ***REMOVED***
        super(destination);
        this.predicate = predicate;
        this.skipping = true;
        this.index = 0;
    ***REMOVED***
    _next(value) ***REMOVED***
        const destination = this.destination;
        if (this.skipping) ***REMOVED***
            this.tryCallPredicate(value);
        ***REMOVED***
        if (!this.skipping) ***REMOVED***
            destination.next(value);
        ***REMOVED***
    ***REMOVED***
    tryCallPredicate(value) ***REMOVED***
        try ***REMOVED***
            const result = this.predicate(value, this.index++);
            this.skipping = Boolean(result);
        ***REMOVED***
        catch (err) ***REMOVED***
            this.destination.error(err);
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=skipWhile.js.map