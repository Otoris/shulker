import ***REMOVED*** Subscription ***REMOVED*** from '../Subscription';
import ***REMOVED*** subscribeToResult ***REMOVED*** from '../util/subscribeToResult';
import ***REMOVED*** OuterSubscriber ***REMOVED*** from '../OuterSubscriber';
export function bufferToggle(openings, closingSelector) ***REMOVED***
    return function bufferToggleOperatorFunction(source) ***REMOVED***
        return source.lift(new BufferToggleOperator(openings, closingSelector));
    ***REMOVED***;
***REMOVED***
class BufferToggleOperator ***REMOVED***
    constructor(openings, closingSelector) ***REMOVED***
        this.openings = openings;
        this.closingSelector = closingSelector;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
    ***REMOVED***
***REMOVED***
class BufferToggleSubscriber extends OuterSubscriber ***REMOVED***
    constructor(destination, openings, closingSelector) ***REMOVED***
        super(destination);
        this.openings = openings;
        this.closingSelector = closingSelector;
        this.contexts = [];
        this.add(subscribeToResult(this, openings));
    ***REMOVED***
    _next(value) ***REMOVED***
        const contexts = this.contexts;
        const len = contexts.length;
        for (let i = 0; i < len; i++) ***REMOVED***
            contexts[i].buffer.push(value);
        ***REMOVED***
    ***REMOVED***
    _error(err) ***REMOVED***
        const contexts = this.contexts;
        while (contexts.length > 0) ***REMOVED***
            const context = contexts.shift();
            context.subscription.unsubscribe();
            context.buffer = null;
            context.subscription = null;
        ***REMOVED***
        this.contexts = null;
        super._error(err);
    ***REMOVED***
    _complete() ***REMOVED***
        const contexts = this.contexts;
        while (contexts.length > 0) ***REMOVED***
            const context = contexts.shift();
            this.destination.next(context.buffer);
            context.subscription.unsubscribe();
            context.buffer = null;
            context.subscription = null;
        ***REMOVED***
        this.contexts = null;
        super._complete();
    ***REMOVED***
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) ***REMOVED***
        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
    ***REMOVED***
    notifyComplete(innerSub) ***REMOVED***
        this.closeBuffer(innerSub.context);
    ***REMOVED***
    openBuffer(value) ***REMOVED***
        try ***REMOVED***
            const closingSelector = this.closingSelector;
            const closingNotifier = closingSelector.call(this, value);
            if (closingNotifier) ***REMOVED***
                this.trySubscribe(closingNotifier);
            ***REMOVED***
        ***REMOVED***
        catch (err) ***REMOVED***
            this._error(err);
        ***REMOVED***
    ***REMOVED***
    closeBuffer(context) ***REMOVED***
        const contexts = this.contexts;
        if (contexts && context) ***REMOVED***
            const ***REMOVED*** buffer, subscription ***REMOVED*** = context;
            this.destination.next(buffer);
            contexts.splice(contexts.indexOf(context), 1);
            this.remove(subscription);
            subscription.unsubscribe();
        ***REMOVED***
    ***REMOVED***
    trySubscribe(closingNotifier) ***REMOVED***
        const contexts = this.contexts;
        const buffer = [];
        const subscription = new Subscription();
        const context = ***REMOVED*** buffer, subscription ***REMOVED***;
        contexts.push(context);
        const innerSubscription = subscribeToResult(this, closingNotifier, context);
        if (!innerSubscription || innerSubscription.closed) ***REMOVED***
            this.closeBuffer(context);
        ***REMOVED***
        else ***REMOVED***
            innerSubscription.context = context;
            this.add(innerSubscription);
            subscription.add(innerSubscription);
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=bufferToggle.js.map