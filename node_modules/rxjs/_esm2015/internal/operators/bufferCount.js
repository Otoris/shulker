import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function bufferCount(bufferSize, startBufferEvery = null) ***REMOVED***
    return function bufferCountOperatorFunction(source) ***REMOVED***
        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));
    ***REMOVED***;
***REMOVED***
class BufferCountOperator ***REMOVED***
    constructor(bufferSize, startBufferEvery) ***REMOVED***
        this.bufferSize = bufferSize;
        this.startBufferEvery = startBufferEvery;
        if (!startBufferEvery || bufferSize === startBufferEvery) ***REMOVED***
            this.subscriberClass = BufferCountSubscriber;
        ***REMOVED***
        else ***REMOVED***
            this.subscriberClass = BufferSkipCountSubscriber;
        ***REMOVED***
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
    ***REMOVED***
***REMOVED***
class BufferCountSubscriber extends Subscriber ***REMOVED***
    constructor(destination, bufferSize) ***REMOVED***
        super(destination);
        this.bufferSize = bufferSize;
        this.buffer = [];
    ***REMOVED***
    _next(value) ***REMOVED***
        const buffer = this.buffer;
        buffer.push(value);
        if (buffer.length == this.bufferSize) ***REMOVED***
            this.destination.next(buffer);
            this.buffer = [];
        ***REMOVED***
    ***REMOVED***
    _complete() ***REMOVED***
        const buffer = this.buffer;
        if (buffer.length > 0) ***REMOVED***
            this.destination.next(buffer);
        ***REMOVED***
        super._complete();
    ***REMOVED***
***REMOVED***
class BufferSkipCountSubscriber extends Subscriber ***REMOVED***
    constructor(destination, bufferSize, startBufferEvery) ***REMOVED***
        super(destination);
        this.bufferSize = bufferSize;
        this.startBufferEvery = startBufferEvery;
        this.buffers = [];
        this.count = 0;
    ***REMOVED***
    _next(value) ***REMOVED***
        const ***REMOVED*** bufferSize, startBufferEvery, buffers, count ***REMOVED*** = this;
        this.count++;
        if (count % startBufferEvery === 0) ***REMOVED***
            buffers.push([]);
        ***REMOVED***
        for (let i = buffers.length; i--;) ***REMOVED***
            const buffer = buffers[i];
            buffer.push(value);
            if (buffer.length === bufferSize) ***REMOVED***
                buffers.splice(i, 1);
                this.destination.next(buffer);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    _complete() ***REMOVED***
        const ***REMOVED*** buffers, destination ***REMOVED*** = this;
        while (buffers.length > 0) ***REMOVED***
            let buffer = buffers.shift();
            if (buffer.length > 0) ***REMOVED***
                destination.next(buffer);
            ***REMOVED***
        ***REMOVED***
        super._complete();
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=bufferCount.js.map