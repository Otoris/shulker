import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
export function takeWhile(predicate, inclusive = false) ***REMOVED***
    return (source) => source.lift(new TakeWhileOperator(predicate, inclusive));
***REMOVED***
class TakeWhileOperator ***REMOVED***
    constructor(predicate, inclusive) ***REMOVED***
        this.predicate = predicate;
        this.inclusive = inclusive;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));
    ***REMOVED***
***REMOVED***
class TakeWhileSubscriber extends Subscriber ***REMOVED***
    constructor(destination, predicate, inclusive) ***REMOVED***
        super(destination);
        this.predicate = predicate;
        this.inclusive = inclusive;
        this.index = 0;
    ***REMOVED***
    _next(value) ***REMOVED***
        const destination = this.destination;
        let result;
        try ***REMOVED***
            result = this.predicate(value, this.index++);
        ***REMOVED***
        catch (err) ***REMOVED***
            destination.error(err);
            return;
        ***REMOVED***
        this.nextOrComplete(value, result);
    ***REMOVED***
    nextOrComplete(value, predicateResult) ***REMOVED***
        const destination = this.destination;
        if (Boolean(predicateResult)) ***REMOVED***
            destination.next(value);
        ***REMOVED***
        else ***REMOVED***
            if (this.inclusive) ***REMOVED***
                destination.next(value);
            ***REMOVED***
            destination.complete();
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=takeWhile.js.map