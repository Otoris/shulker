import ***REMOVED*** Subscriber ***REMOVED*** from '../Subscriber';
import ***REMOVED*** async ***REMOVED*** from '../scheduler/async';
export function debounceTime(dueTime, scheduler = async) ***REMOVED***
    return (source) => source.lift(new DebounceTimeOperator(dueTime, scheduler));
***REMOVED***
class DebounceTimeOperator ***REMOVED***
    constructor(dueTime, scheduler) ***REMOVED***
        this.dueTime = dueTime;
        this.scheduler = scheduler;
    ***REMOVED***
    call(subscriber, source) ***REMOVED***
        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
    ***REMOVED***
***REMOVED***
class DebounceTimeSubscriber extends Subscriber ***REMOVED***
    constructor(destination, dueTime, scheduler) ***REMOVED***
        super(destination);
        this.dueTime = dueTime;
        this.scheduler = scheduler;
        this.debouncedSubscription = null;
        this.lastValue = null;
        this.hasValue = false;
    ***REMOVED***
    _next(value) ***REMOVED***
        this.clearDebounce();
        this.lastValue = value;
        this.hasValue = true;
        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
    ***REMOVED***
    _complete() ***REMOVED***
        this.debouncedNext();
        this.destination.complete();
    ***REMOVED***
    debouncedNext() ***REMOVED***
        this.clearDebounce();
        if (this.hasValue) ***REMOVED***
            const ***REMOVED*** lastValue ***REMOVED*** = this;
            this.lastValue = null;
            this.hasValue = false;
            this.destination.next(lastValue);
        ***REMOVED***
    ***REMOVED***
    clearDebounce() ***REMOVED***
        const debouncedSubscription = this.debouncedSubscription;
        if (debouncedSubscription !== null) ***REMOVED***
            this.remove(debouncedSubscription);
            debouncedSubscription.unsubscribe();
            this.debouncedSubscription = null;
        ***REMOVED***
    ***REMOVED***
***REMOVED***
function dispatchNext(subscriber) ***REMOVED***
    subscriber.debouncedNext();
***REMOVED***
//# sourceMappingURL=debounceTime.js.map