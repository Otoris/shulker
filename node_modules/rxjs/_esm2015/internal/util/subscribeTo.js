import ***REMOVED*** subscribeToArray ***REMOVED*** from './subscribeToArray';
import ***REMOVED*** subscribeToPromise ***REMOVED*** from './subscribeToPromise';
import ***REMOVED*** subscribeToIterable ***REMOVED*** from './subscribeToIterable';
import ***REMOVED*** subscribeToObservable ***REMOVED*** from './subscribeToObservable';
import ***REMOVED*** isArrayLike ***REMOVED*** from './isArrayLike';
import ***REMOVED*** isPromise ***REMOVED*** from './isPromise';
import ***REMOVED*** isObject ***REMOVED*** from './isObject';
import ***REMOVED*** iterator as Symbol_iterator ***REMOVED*** from '../symbol/iterator';
import ***REMOVED*** observable as Symbol_observable ***REMOVED*** from '../symbol/observable';
export const subscribeTo = (result) => ***REMOVED***
    if (!!result && typeof result[Symbol_observable] === 'function') ***REMOVED***
        return subscribeToObservable(result);
    ***REMOVED***
    else if (isArrayLike(result)) ***REMOVED***
        return subscribeToArray(result);
    ***REMOVED***
    else if (isPromise(result)) ***REMOVED***
        return subscribeToPromise(result);
    ***REMOVED***
    else if (!!result && typeof result[Symbol_iterator] === 'function') ***REMOVED***
        return subscribeToIterable(result);
    ***REMOVED***
    else ***REMOVED***
        const value = isObject(result) ? 'an invalid object' : `'$***REMOVED***result***REMOVED***'`;
        const msg = `You provided $***REMOVED***value***REMOVED*** where a stream was expected.`
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        throw new TypeError(msg);
    ***REMOVED***
***REMOVED***;
//# sourceMappingURL=subscribeTo.js.map