import ***REMOVED*** iterator as Symbol_iterator ***REMOVED*** from '../symbol/iterator';
export const subscribeToIterable = (iterable) => (subscriber) => ***REMOVED***
    const iterator = iterable[Symbol_iterator]();
    do ***REMOVED***
        const item = iterator.next();
        if (item.done) ***REMOVED***
            subscriber.complete();
            break;
        ***REMOVED***
        subscriber.next(item.value);
        if (subscriber.closed) ***REMOVED***
            break;
        ***REMOVED***
    ***REMOVED*** while (true);
    if (typeof iterator.return === 'function') ***REMOVED***
        subscriber.add(() => ***REMOVED***
            if (iterator.return) ***REMOVED***
                iterator.return();
            ***REMOVED***
        ***REMOVED***);
    ***REMOVED***
    return subscriber;
***REMOVED***;
//# sourceMappingURL=subscribeToIterable.js.map