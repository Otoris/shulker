import ***REMOVED*** Scheduler ***REMOVED*** from '../Scheduler';
export class AsyncScheduler extends Scheduler ***REMOVED***
    constructor(SchedulerAction, now = Scheduler.now) ***REMOVED***
        super(SchedulerAction, () => ***REMOVED***
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) ***REMOVED***
                return AsyncScheduler.delegate.now();
            ***REMOVED***
            else ***REMOVED***
                return now();
            ***REMOVED***
        ***REMOVED***);
        this.actions = [];
        this.active = false;
        this.scheduled = undefined;
    ***REMOVED***
    schedule(work, delay = 0, state) ***REMOVED***
        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) ***REMOVED***
            return AsyncScheduler.delegate.schedule(work, delay, state);
        ***REMOVED***
        else ***REMOVED***
            return super.schedule(work, delay, state);
        ***REMOVED***
    ***REMOVED***
    flush(action) ***REMOVED***
        const ***REMOVED*** actions ***REMOVED*** = this;
        if (this.active) ***REMOVED***
            actions.push(action);
            return;
        ***REMOVED***
        let error;
        this.active = true;
        do ***REMOVED***
            if (error = action.execute(action.state, action.delay)) ***REMOVED***
                break;
            ***REMOVED***
        ***REMOVED*** while (action = actions.shift());
        this.active = false;
        if (error) ***REMOVED***
            while (action = actions.shift()) ***REMOVED***
                action.unsubscribe();
            ***REMOVED***
            throw error;
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=AsyncScheduler.js.map