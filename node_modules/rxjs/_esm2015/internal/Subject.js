import ***REMOVED*** Observable ***REMOVED*** from './Observable';
import ***REMOVED*** Subscriber ***REMOVED*** from './Subscriber';
import ***REMOVED*** Subscription ***REMOVED*** from './Subscription';
import ***REMOVED*** ObjectUnsubscribedError ***REMOVED*** from './util/ObjectUnsubscribedError';
import ***REMOVED*** SubjectSubscription ***REMOVED*** from './SubjectSubscription';
import ***REMOVED*** rxSubscriber as rxSubscriberSymbol ***REMOVED*** from '../internal/symbol/rxSubscriber';
export class SubjectSubscriber extends Subscriber ***REMOVED***
    constructor(destination) ***REMOVED***
        super(destination);
        this.destination = destination;
    ***REMOVED***
***REMOVED***
export class Subject extends Observable ***REMOVED***
    constructor() ***REMOVED***
        super();
        this.observers = [];
        this.closed = false;
        this.isStopped = false;
        this.hasError = false;
        this.thrownError = null;
    ***REMOVED***
    [rxSubscriberSymbol]() ***REMOVED***
        return new SubjectSubscriber(this);
    ***REMOVED***
    lift(operator) ***REMOVED***
        const subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    ***REMOVED***
    next(value) ***REMOVED***
        if (this.closed) ***REMOVED***
            throw new ObjectUnsubscribedError();
        ***REMOVED***
        if (!this.isStopped) ***REMOVED***
            const ***REMOVED*** observers ***REMOVED*** = this;
            const len = observers.length;
            const copy = observers.slice();
            for (let i = 0; i < len; i++) ***REMOVED***
                copy[i].next(value);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    error(err) ***REMOVED***
        if (this.closed) ***REMOVED***
            throw new ObjectUnsubscribedError();
        ***REMOVED***
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        const ***REMOVED*** observers ***REMOVED*** = this;
        const len = observers.length;
        const copy = observers.slice();
        for (let i = 0; i < len; i++) ***REMOVED***
            copy[i].error(err);
        ***REMOVED***
        this.observers.length = 0;
    ***REMOVED***
    complete() ***REMOVED***
        if (this.closed) ***REMOVED***
            throw new ObjectUnsubscribedError();
        ***REMOVED***
        this.isStopped = true;
        const ***REMOVED*** observers ***REMOVED*** = this;
        const len = observers.length;
        const copy = observers.slice();
        for (let i = 0; i < len; i++) ***REMOVED***
            copy[i].complete();
        ***REMOVED***
        this.observers.length = 0;
    ***REMOVED***
    unsubscribe() ***REMOVED***
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    ***REMOVED***
    _trySubscribe(subscriber) ***REMOVED***
        if (this.closed) ***REMOVED***
            throw new ObjectUnsubscribedError();
        ***REMOVED***
        else ***REMOVED***
            return super._trySubscribe(subscriber);
        ***REMOVED***
    ***REMOVED***
    _subscribe(subscriber) ***REMOVED***
        if (this.closed) ***REMOVED***
            throw new ObjectUnsubscribedError();
        ***REMOVED***
        else if (this.hasError) ***REMOVED***
            subscriber.error(this.thrownError);
            return Subscription.EMPTY;
        ***REMOVED***
        else if (this.isStopped) ***REMOVED***
            subscriber.complete();
            return Subscription.EMPTY;
        ***REMOVED***
        else ***REMOVED***
            this.observers.push(subscriber);
            return new SubjectSubscription(this, subscriber);
        ***REMOVED***
    ***REMOVED***
    asObservable() ***REMOVED***
        const observable = new Observable();
        observable.source = this;
        return observable;
    ***REMOVED***
***REMOVED***
Subject.create = (destination, source) => ***REMOVED***
    return new AnonymousSubject(destination, source);
***REMOVED***;
export class AnonymousSubject extends Subject ***REMOVED***
    constructor(destination, source) ***REMOVED***
        super();
        this.destination = destination;
        this.source = source;
    ***REMOVED***
    next(value) ***REMOVED***
        const ***REMOVED*** destination ***REMOVED*** = this;
        if (destination && destination.next) ***REMOVED***
            destination.next(value);
        ***REMOVED***
    ***REMOVED***
    error(err) ***REMOVED***
        const ***REMOVED*** destination ***REMOVED*** = this;
        if (destination && destination.error) ***REMOVED***
            this.destination.error(err);
        ***REMOVED***
    ***REMOVED***
    complete() ***REMOVED***
        const ***REMOVED*** destination ***REMOVED*** = this;
        if (destination && destination.complete) ***REMOVED***
            this.destination.complete();
        ***REMOVED***
    ***REMOVED***
    _subscribe(subscriber) ***REMOVED***
        const ***REMOVED*** source ***REMOVED*** = this;
        if (source) ***REMOVED***
            return this.source.subscribe(subscriber);
        ***REMOVED***
        else ***REMOVED***
            return Subscription.EMPTY;
        ***REMOVED***
    ***REMOVED***
***REMOVED***
//# sourceMappingURL=Subject.js.map