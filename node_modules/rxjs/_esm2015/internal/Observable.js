import ***REMOVED*** canReportError ***REMOVED*** from './util/canReportError';
import ***REMOVED*** toSubscriber ***REMOVED*** from './util/toSubscriber';
import ***REMOVED*** observable as Symbol_observable ***REMOVED*** from './symbol/observable';
import ***REMOVED*** pipeFromArray ***REMOVED*** from './util/pipe';
import ***REMOVED*** config ***REMOVED*** from './config';
export class Observable ***REMOVED***
    constructor(subscribe) ***REMOVED***
        this._isScalar = false;
        if (subscribe) ***REMOVED***
            this._subscribe = subscribe;
        ***REMOVED***
    ***REMOVED***
    lift(operator) ***REMOVED***
        const observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    ***REMOVED***
    subscribe(observerOrNext, error, complete) ***REMOVED***
        const ***REMOVED*** operator ***REMOVED*** = this;
        const sink = toSubscriber(observerOrNext, error, complete);
        if (operator) ***REMOVED***
            sink.add(operator.call(sink, this.source));
        ***REMOVED***
        else ***REMOVED***
            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
                this._subscribe(sink) :
                this._trySubscribe(sink));
        ***REMOVED***
        if (config.useDeprecatedSynchronousErrorHandling) ***REMOVED***
            if (sink.syncErrorThrowable) ***REMOVED***
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) ***REMOVED***
                    throw sink.syncErrorValue;
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        return sink;
    ***REMOVED***
    _trySubscribe(sink) ***REMOVED***
        try ***REMOVED***
            return this._subscribe(sink);
        ***REMOVED***
        catch (err) ***REMOVED***
            if (config.useDeprecatedSynchronousErrorHandling) ***REMOVED***
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
            ***REMOVED***
            if (canReportError(sink)) ***REMOVED***
                sink.error(err);
            ***REMOVED***
            else ***REMOVED***
                console.warn(err);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    forEach(next, promiseCtor) ***REMOVED***
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor((resolve, reject) => ***REMOVED***
            let subscription;
            subscription = this.subscribe((value) => ***REMOVED***
                try ***REMOVED***
                    next(value);
                ***REMOVED***
                catch (err) ***REMOVED***
                    reject(err);
                    if (subscription) ***REMOVED***
                        subscription.unsubscribe();
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***, reject, resolve);
        ***REMOVED***);
    ***REMOVED***
    _subscribe(subscriber) ***REMOVED***
        const ***REMOVED*** source ***REMOVED*** = this;
        return source && source.subscribe(subscriber);
    ***REMOVED***
    [Symbol_observable]() ***REMOVED***
        return this;
    ***REMOVED***
    pipe(...operations) ***REMOVED***
        if (operations.length === 0) ***REMOVED***
            return this;
        ***REMOVED***
        return pipeFromArray(operations)(this);
    ***REMOVED***
    toPromise(promiseCtor) ***REMOVED***
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor((resolve, reject) => ***REMOVED***
            let value;
            this.subscribe((x) => value = x, (err) => reject(err), () => resolve(value));
        ***REMOVED***);
    ***REMOVED***
***REMOVED***
Observable.create = (subscribe) => ***REMOVED***
    return new Observable(subscribe);
***REMOVED***;
function getPromiseCtor(promiseCtor) ***REMOVED***
    if (!promiseCtor) ***REMOVED***
        promiseCtor = config.Promise || Promise;
    ***REMOVED***
    if (!promiseCtor) ***REMOVED***
        throw new Error('no Promise impl found');
    ***REMOVED***
    return promiseCtor;
***REMOVED***
//# sourceMappingURL=Observable.js.map