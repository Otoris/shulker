// Generated by LiveScript 1.4.0
var each, map, compact, filter, reject, partition, find, head, first, tail, last, initial, empty, reverse, unique, uniqueBy, fold, foldl, fold1, foldl1, foldr, foldr1, unfoldr, concat, concatMap, flatten, difference, intersection, union, countBy, groupBy, andList, orList, any, all, sort, sortWith, sortBy, sum, product, mean, average, maximum, minimum, maximumBy, minimumBy, scan, scanl, scan1, scanl1, scanr, scanr1, slice, take, drop, splitAt, takeWhile, dropWhile, span, breakList, zip, zipWith, zipAll, zipAllWith, at, elemIndex, elemIndices, findIndex, findIndices, toString$ = ***REMOVED******REMOVED***.toString, slice$ = [].slice;
each = curry$(function(f, xs)***REMOVED***
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    f(x);
  ***REMOVED***
  return xs;
***REMOVED***);
map = curry$(function(f, xs)***REMOVED***
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    results$.push(f(x));
  ***REMOVED***
  return results$;
***REMOVED***);
compact = function(xs)***REMOVED***
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    if (x) ***REMOVED***
      results$.push(x);
    ***REMOVED***
  ***REMOVED***
  return results$;
***REMOVED***;
filter = curry$(function(f, xs)***REMOVED***
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    if (f(x)) ***REMOVED***
      results$.push(x);
    ***REMOVED***
  ***REMOVED***
  return results$;
***REMOVED***);
reject = curry$(function(f, xs)***REMOVED***
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    if (!f(x)) ***REMOVED***
      results$.push(x);
    ***REMOVED***
  ***REMOVED***
  return results$;
***REMOVED***);
partition = curry$(function(f, xs)***REMOVED***
  var passed, failed, i$, len$, x;
  passed = [];
  failed = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    (f(x) ? passed : failed).push(x);
  ***REMOVED***
  return [passed, failed];
***REMOVED***);
find = curry$(function(f, xs)***REMOVED***
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    if (f(x)) ***REMOVED***
      return x;
    ***REMOVED***
  ***REMOVED***
***REMOVED***);
head = first = function(xs)***REMOVED***
  return xs[0];
***REMOVED***;
tail = function(xs)***REMOVED***
  if (!xs.length) ***REMOVED***
    return;
  ***REMOVED***
  return xs.slice(1);
***REMOVED***;
last = function(xs)***REMOVED***
  return xs[xs.length - 1];
***REMOVED***;
initial = function(xs)***REMOVED***
  if (!xs.length) ***REMOVED***
    return;
  ***REMOVED***
  return xs.slice(0, -1);
***REMOVED***;
empty = function(xs)***REMOVED***
  return !xs.length;
***REMOVED***;
reverse = function(xs)***REMOVED***
  return xs.concat().reverse();
***REMOVED***;
unique = function(xs)***REMOVED***
  var result, i$, len$, x;
  result = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    if (!in$(x, result)) ***REMOVED***
      result.push(x);
    ***REMOVED***
  ***REMOVED***
  return result;
***REMOVED***;
uniqueBy = curry$(function(f, xs)***REMOVED***
  var seen, i$, len$, x, val, results$ = [];
  seen = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    val = f(x);
    if (in$(val, seen)) ***REMOVED***
      continue;
    ***REMOVED***
    seen.push(val);
    results$.push(x);
  ***REMOVED***
  return results$;
***REMOVED***);
fold = foldl = curry$(function(f, memo, xs)***REMOVED***
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    memo = f(memo, x);
  ***REMOVED***
  return memo;
***REMOVED***);
fold1 = foldl1 = curry$(function(f, xs)***REMOVED***
  return fold(f, xs[0], xs.slice(1));
***REMOVED***);
foldr = curry$(function(f, memo, xs)***REMOVED***
  var i$, x;
  for (i$ = xs.length - 1; i$ >= 0; --i$) ***REMOVED***
    x = xs[i$];
    memo = f(x, memo);
  ***REMOVED***
  return memo;
***REMOVED***);
foldr1 = curry$(function(f, xs)***REMOVED***
  return foldr(f, xs[xs.length - 1], xs.slice(0, -1));
***REMOVED***);
unfoldr = curry$(function(f, b)***REMOVED***
  var result, x, that;
  result = [];
  x = b;
  while ((that = f(x)) != null) ***REMOVED***
    result.push(that[0]);
    x = that[1];
  ***REMOVED***
  return result;
***REMOVED***);
concat = function(xss)***REMOVED***
  return [].concat.apply([], xss);
***REMOVED***;
concatMap = curry$(function(f, xs)***REMOVED***
  var x;
  return [].concat.apply([], (function()***REMOVED***
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) ***REMOVED***
      x = ref$[i$];
      results$.push(f(x));
    ***REMOVED***
    return results$;
  ***REMOVED***()));
***REMOVED***);
flatten = function(xs)***REMOVED***
  var x;
  return [].concat.apply([], (function()***REMOVED***
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) ***REMOVED***
      x = ref$[i$];
      if (toString$.call(x).slice(8, -1) === 'Array') ***REMOVED***
        results$.push(flatten(x));
      ***REMOVED*** else ***REMOVED***
        results$.push(x);
      ***REMOVED***
    ***REMOVED***
    return results$;
  ***REMOVED***()));
***REMOVED***;
difference = function(xs)***REMOVED***
  var yss, results, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) ***REMOVED***
      ys = yss[j$];
      if (in$(x, ys)) ***REMOVED***
        continue outer;
      ***REMOVED***
    ***REMOVED***
    results.push(x);
  ***REMOVED***
  return results;
***REMOVED***;
intersection = function(xs)***REMOVED***
  var yss, results, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) ***REMOVED***
      ys = yss[j$];
      if (!in$(x, ys)) ***REMOVED***
        continue outer;
      ***REMOVED***
    ***REMOVED***
    results.push(x);
  ***REMOVED***
  return results;
***REMOVED***;
union = function()***REMOVED***
  var xss, results, i$, len$, xs, j$, len1$, x;
  xss = slice$.call(arguments);
  results = [];
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) ***REMOVED***
    xs = xss[i$];
    for (j$ = 0, len1$ = xs.length; j$ < len1$; ++j$) ***REMOVED***
      x = xs[j$];
      if (!in$(x, results)) ***REMOVED***
        results.push(x);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
  return results;
***REMOVED***;
countBy = curry$(function(f, xs)***REMOVED***
  var results, i$, len$, x, key;
  results = ***REMOVED******REMOVED***;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    key = f(x);
    if (key in results) ***REMOVED***
      results[key] += 1;
    ***REMOVED*** else ***REMOVED***
      results[key] = 1;
    ***REMOVED***
  ***REMOVED***
  return results;
***REMOVED***);
groupBy = curry$(function(f, xs)***REMOVED***
  var results, i$, len$, x, key;
  results = ***REMOVED******REMOVED***;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    key = f(x);
    if (key in results) ***REMOVED***
      results[key].push(x);
    ***REMOVED*** else ***REMOVED***
      results[key] = [x];
    ***REMOVED***
  ***REMOVED***
  return results;
***REMOVED***);
andList = function(xs)***REMOVED***
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    if (!x) ***REMOVED***
      return false;
    ***REMOVED***
  ***REMOVED***
  return true;
***REMOVED***;
orList = function(xs)***REMOVED***
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    if (x) ***REMOVED***
      return true;
    ***REMOVED***
  ***REMOVED***
  return false;
***REMOVED***;
any = curry$(function(f, xs)***REMOVED***
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    if (f(x)) ***REMOVED***
      return true;
    ***REMOVED***
  ***REMOVED***
  return false;
***REMOVED***);
all = curry$(function(f, xs)***REMOVED***
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    if (!f(x)) ***REMOVED***
      return false;
    ***REMOVED***
  ***REMOVED***
  return true;
***REMOVED***);
sort = function(xs)***REMOVED***
  return xs.concat().sort(function(x, y)***REMOVED***
    if (x > y) ***REMOVED***
      return 1;
    ***REMOVED*** else if (x < y) ***REMOVED***
      return -1;
    ***REMOVED*** else ***REMOVED***
      return 0;
    ***REMOVED***
  ***REMOVED***);
***REMOVED***;
sortWith = curry$(function(f, xs)***REMOVED***
  return xs.concat().sort(f);
***REMOVED***);
sortBy = curry$(function(f, xs)***REMOVED***
  return xs.concat().sort(function(x, y)***REMOVED***
    if (f(x) > f(y)) ***REMOVED***
      return 1;
    ***REMOVED*** else if (f(x) < f(y)) ***REMOVED***
      return -1;
    ***REMOVED*** else ***REMOVED***
      return 0;
    ***REMOVED***
  ***REMOVED***);
***REMOVED***);
sum = function(xs)***REMOVED***
  var result, i$, len$, x;
  result = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    result += x;
  ***REMOVED***
  return result;
***REMOVED***;
product = function(xs)***REMOVED***
  var result, i$, len$, x;
  result = 1;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    result *= x;
  ***REMOVED***
  return result;
***REMOVED***;
mean = average = function(xs)***REMOVED***
  var sum, i$, len$, x;
  sum = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    x = xs[i$];
    sum += x;
  ***REMOVED***
  return sum / xs.length;
***REMOVED***;
maximum = function(xs)***REMOVED***
  var max, i$, ref$, len$, x;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) ***REMOVED***
    x = ref$[i$];
    if (x > max) ***REMOVED***
      max = x;
    ***REMOVED***
  ***REMOVED***
  return max;
***REMOVED***;
minimum = function(xs)***REMOVED***
  var min, i$, ref$, len$, x;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) ***REMOVED***
    x = ref$[i$];
    if (x < min) ***REMOVED***
      min = x;
    ***REMOVED***
  ***REMOVED***
  return min;
***REMOVED***;
maximumBy = curry$(function(f, xs)***REMOVED***
  var max, i$, ref$, len$, x;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) ***REMOVED***
    x = ref$[i$];
    if (f(x) > f(max)) ***REMOVED***
      max = x;
    ***REMOVED***
  ***REMOVED***
  return max;
***REMOVED***);
minimumBy = curry$(function(f, xs)***REMOVED***
  var min, i$, ref$, len$, x;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) ***REMOVED***
    x = ref$[i$];
    if (f(x) < f(min)) ***REMOVED***
      min = x;
    ***REMOVED***
  ***REMOVED***
  return min;
***REMOVED***);
scan = scanl = curry$(function(f, memo, xs)***REMOVED***
  var last, x;
  last = memo;
  return [memo].concat((function()***REMOVED***
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) ***REMOVED***
      x = ref$[i$];
      results$.push(last = f(last, x));
    ***REMOVED***
    return results$;
  ***REMOVED***()));
***REMOVED***);
scan1 = scanl1 = curry$(function(f, xs)***REMOVED***
  if (!xs.length) ***REMOVED***
    return;
  ***REMOVED***
  return scan(f, xs[0], xs.slice(1));
***REMOVED***);
scanr = curry$(function(f, memo, xs)***REMOVED***
  xs = xs.concat().reverse();
  return scan(f, memo, xs).reverse();
***REMOVED***);
scanr1 = curry$(function(f, xs)***REMOVED***
  if (!xs.length) ***REMOVED***
    return;
  ***REMOVED***
  xs = xs.concat().reverse();
  return scan(f, xs[0], xs.slice(1)).reverse();
***REMOVED***);
slice = curry$(function(x, y, xs)***REMOVED***
  return xs.slice(x, y);
***REMOVED***);
take = curry$(function(n, xs)***REMOVED***
  if (n <= 0) ***REMOVED***
    return xs.slice(0, 0);
  ***REMOVED*** else ***REMOVED***
    return xs.slice(0, n);
  ***REMOVED***
***REMOVED***);
drop = curry$(function(n, xs)***REMOVED***
  if (n <= 0) ***REMOVED***
    return xs;
  ***REMOVED*** else ***REMOVED***
    return xs.slice(n);
  ***REMOVED***
***REMOVED***);
splitAt = curry$(function(n, xs)***REMOVED***
  return [take(n, xs), drop(n, xs)];
***REMOVED***);
takeWhile = curry$(function(p, xs)***REMOVED***
  var len, i;
  len = xs.length;
  if (!len) ***REMOVED***
    return xs;
  ***REMOVED***
  i = 0;
  while (i < len && p(xs[i])) ***REMOVED***
    i += 1;
  ***REMOVED***
  return xs.slice(0, i);
***REMOVED***);
dropWhile = curry$(function(p, xs)***REMOVED***
  var len, i;
  len = xs.length;
  if (!len) ***REMOVED***
    return xs;
  ***REMOVED***
  i = 0;
  while (i < len && p(xs[i])) ***REMOVED***
    i += 1;
  ***REMOVED***
  return xs.slice(i);
***REMOVED***);
span = curry$(function(p, xs)***REMOVED***
  return [takeWhile(p, xs), dropWhile(p, xs)];
***REMOVED***);
breakList = curry$(function(p, xs)***REMOVED***
  return span(compose$(p, not$), xs);
***REMOVED***);
zip = curry$(function(xs, ys)***REMOVED***
  var result, len, i$, len$, i, x;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    i = i$;
    x = xs[i$];
    if (i === len) ***REMOVED***
      break;
    ***REMOVED***
    result.push([x, ys[i]]);
  ***REMOVED***
  return result;
***REMOVED***);
zipWith = curry$(function(f, xs, ys)***REMOVED***
  var result, len, i$, len$, i, x;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    i = i$;
    x = xs[i$];
    if (i === len) ***REMOVED***
      break;
    ***REMOVED***
    result.push(f(x, ys[i]));
  ***REMOVED***
  return result;
***REMOVED***);
zipAll = function()***REMOVED***
  var xss, minLength, i$, len$, xs, ref$, i, lresult$, j$, results$ = [];
  xss = slice$.call(arguments);
  minLength = undefined;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) ***REMOVED***
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  ***REMOVED***
  for (i$ = 0; i$ < minLength; ++i$) ***REMOVED***
    i = i$;
    lresult$ = [];
    for (j$ = 0, len$ = xss.length; j$ < len$; ++j$) ***REMOVED***
      xs = xss[j$];
      lresult$.push(xs[i]);
    ***REMOVED***
    results$.push(lresult$);
  ***REMOVED***
  return results$;
***REMOVED***;
zipAllWith = function(f)***REMOVED***
  var xss, minLength, i$, len$, xs, ref$, i, results$ = [];
  xss = slice$.call(arguments, 1);
  minLength = undefined;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) ***REMOVED***
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  ***REMOVED***
  for (i$ = 0; i$ < minLength; ++i$) ***REMOVED***
    i = i$;
    results$.push(f.apply(null, (fn$())));
  ***REMOVED***
  return results$;
  function fn$()***REMOVED***
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xss).length; i$ < len$; ++i$) ***REMOVED***
      xs = ref$[i$];
      results$.push(xs[i]);
    ***REMOVED***
    return results$;
  ***REMOVED***
***REMOVED***;
at = curry$(function(n, xs)***REMOVED***
  if (n < 0) ***REMOVED***
    return xs[xs.length + n];
  ***REMOVED*** else ***REMOVED***
    return xs[n];
  ***REMOVED***
***REMOVED***);
elemIndex = curry$(function(el, xs)***REMOVED***
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    i = i$;
    x = xs[i$];
    if (x === el) ***REMOVED***
      return i;
    ***REMOVED***
  ***REMOVED***
***REMOVED***);
elemIndices = curry$(function(el, xs)***REMOVED***
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    i = i$;
    x = xs[i$];
    if (x === el) ***REMOVED***
      results$.push(i);
    ***REMOVED***
  ***REMOVED***
  return results$;
***REMOVED***);
findIndex = curry$(function(f, xs)***REMOVED***
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    i = i$;
    x = xs[i$];
    if (f(x)) ***REMOVED***
      return i;
    ***REMOVED***
  ***REMOVED***
***REMOVED***);
findIndices = curry$(function(f, xs)***REMOVED***
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) ***REMOVED***
    i = i$;
    x = xs[i$];
    if (f(x)) ***REMOVED***
      results$.push(i);
    ***REMOVED***
  ***REMOVED***
  return results$;
***REMOVED***);
module.exports = ***REMOVED***
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  partition: partition,
  find: find,
  head: head,
  first: first,
  tail: tail,
  last: last,
  initial: initial,
  empty: empty,
  reverse: reverse,
  difference: difference,
  intersection: intersection,
  union: union,
  countBy: countBy,
  groupBy: groupBy,
  fold: fold,
  fold1: fold1,
  foldl: foldl,
  foldl1: foldl1,
  foldr: foldr,
  foldr1: foldr1,
  unfoldr: unfoldr,
  andList: andList,
  orList: orList,
  any: any,
  all: all,
  unique: unique,
  uniqueBy: uniqueBy,
  sort: sort,
  sortWith: sortWith,
  sortBy: sortBy,
  sum: sum,
  product: product,
  mean: mean,
  average: average,
  concat: concat,
  concatMap: concatMap,
  flatten: flatten,
  maximum: maximum,
  minimum: minimum,
  maximumBy: maximumBy,
  minimumBy: minimumBy,
  scan: scan,
  scan1: scan1,
  scanl: scanl,
  scanl1: scanl1,
  scanr: scanr,
  scanr1: scanr1,
  slice: slice,
  take: take,
  drop: drop,
  splitAt: splitAt,
  takeWhile: takeWhile,
  dropWhile: dropWhile,
  span: span,
  breakList: breakList,
  zip: zip,
  zipWith: zipWith,
  zipAll: zipAll,
  zipAllWith: zipAllWith,
  at: at,
  elemIndex: elemIndex,
  elemIndices: elemIndices,
  findIndex: findIndex,
  findIndices: findIndices
***REMOVED***;
function curry$(f, bound)***REMOVED***
  var context,
  _curry = function(args) ***REMOVED***
    return f.length > 1 ? function()***REMOVED***
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    ***REMOVED*** : f;
  ***REMOVED***;
  return _curry();
***REMOVED***
function in$(x, xs)***REMOVED***
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
***REMOVED***
function compose$() ***REMOVED***
  var functions = arguments;
  return function() ***REMOVED***
    var i, result;
    result = functions[0].apply(this, arguments);
    for (i = 1; i < functions.length; ++i) ***REMOVED***
      result = functions[i](result);
    ***REMOVED***
    return result;
  ***REMOVED***;
***REMOVED***
function not$(x)***REMOVED*** return !x; ***REMOVED***