'use strict';

/*eslint-disable max-len*/

var common        = require('./common');
var YAMLException = require('./exception');
var Type          = require('./type');


function compileList(schema, name, result) ***REMOVED***
  var exclude = [];

  schema.include.forEach(function (includedSchema) ***REMOVED***
    result = compileList(includedSchema, name, result);
  ***REMOVED***);

  schema[name].forEach(function (currentType) ***REMOVED***
    result.forEach(function (previousType, previousIndex) ***REMOVED***
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) ***REMOVED***
        exclude.push(previousIndex);
      ***REMOVED***
    ***REMOVED***);

    result.push(currentType);
  ***REMOVED***);

  return result.filter(function (type, index) ***REMOVED***
    return exclude.indexOf(index) === -1;
  ***REMOVED***);
***REMOVED***


function compileMap(/* lists... */) ***REMOVED***
  var result = ***REMOVED***
        scalar: ***REMOVED******REMOVED***,
        sequence: ***REMOVED******REMOVED***,
        mapping: ***REMOVED******REMOVED***,
        fallback: ***REMOVED******REMOVED***
      ***REMOVED***, index, length;

  function collectType(type) ***REMOVED***
    result[type.kind][type.tag] = result['fallback'][type.tag] = type;
  ***REMOVED***

  for (index = 0, length = arguments.length; index < length; index += 1) ***REMOVED***
    arguments[index].forEach(collectType);
  ***REMOVED***
  return result;
***REMOVED***


function Schema(definition) ***REMOVED***
  this.include  = definition.include  || [];
  this.implicit = definition.implicit || [];
  this.explicit = definition.explicit || [];

  this.implicit.forEach(function (type) ***REMOVED***
    if (type.loadKind && type.loadKind !== 'scalar') ***REMOVED***
      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
    ***REMOVED***
  ***REMOVED***);

  this.compiledImplicit = compileList(this, 'implicit', []);
  this.compiledExplicit = compileList(this, 'explicit', []);
  this.compiledTypeMap  = compileMap(this.compiledImplicit, this.compiledExplicit);
***REMOVED***


Schema.DEFAULT = null;


Schema.create = function createSchema() ***REMOVED***
  var schemas, types;

  switch (arguments.length) ***REMOVED***
    case 1:
      schemas = Schema.DEFAULT;
      types = arguments[0];
      break;

    case 2:
      schemas = arguments[0];
      types = arguments[1];
      break;

    default:
      throw new YAMLException('Wrong number of arguments for Schema.create function');
  ***REMOVED***

  schemas = common.toArray(schemas);
  types = common.toArray(types);

  if (!schemas.every(function (schema) ***REMOVED*** return schema instanceof Schema; ***REMOVED***)) ***REMOVED***
    throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');
  ***REMOVED***

  if (!types.every(function (type) ***REMOVED*** return type instanceof Type; ***REMOVED***)) ***REMOVED***
    throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');
  ***REMOVED***

  return new Schema(***REMOVED***
    include: schemas,
    explicit: types
  ***REMOVED***);
***REMOVED***;


module.exports = Schema;
