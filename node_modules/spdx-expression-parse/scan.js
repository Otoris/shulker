'use strict'

var licenses = []
  .concat(require('spdx-license-ids'))
  .concat(require('spdx-license-ids/deprecated'))
var exceptions = require('spdx-exceptions')

module.exports = function (source) ***REMOVED***
  var index = 0

  function hasMore () ***REMOVED***
    return index < source.length
  ***REMOVED***

  // `value` can be a regexp or a string.
  // If it is recognized, the matching source string is returned and
  // the index is incremented. Otherwise `undefined` is returned.
  function read (value) ***REMOVED***
    if (value instanceof RegExp) ***REMOVED***
      var chars = source.slice(index)
      var match = chars.match(value)
      if (match) ***REMOVED***
        index += match[0].length
        return match[0]
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      if (source.indexOf(value, index) === index) ***REMOVED***
        index += value.length
        return value
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  function skipWhitespace () ***REMOVED***
    read(/[ ]*/)
  ***REMOVED***

  function operator () ***REMOVED***
    var string
    var possibilities = ['WITH', 'AND', 'OR', '(', ')', ':', '+']
    for (var i = 0; i < possibilities.length; i++) ***REMOVED***
      string = read(possibilities[i])
      if (string) ***REMOVED***
        break
      ***REMOVED***
    ***REMOVED***

    if (string === '+' && index > 1 && source[index - 2] === ' ') ***REMOVED***
      throw new Error('Space before `+`')
    ***REMOVED***

    return string && ***REMOVED***
      type: 'OPERATOR',
      string: string
    ***REMOVED***
  ***REMOVED***

  function idstring () ***REMOVED***
    return read(/[A-Za-z0-9-.]+/)
  ***REMOVED***

  function expectIdstring () ***REMOVED***
    var string = idstring()
    if (!string) ***REMOVED***
      throw new Error('Expected idstring at offset ' + index)
    ***REMOVED***
    return string
  ***REMOVED***

  function documentRef () ***REMOVED***
    if (read('DocumentRef-')) ***REMOVED***
      var string = expectIdstring()
      return ***REMOVED***type: 'DOCUMENTREF', string: string***REMOVED***
    ***REMOVED***
  ***REMOVED***

  function licenseRef () ***REMOVED***
    if (read('LicenseRef-')) ***REMOVED***
      var string = expectIdstring()
      return ***REMOVED***type: 'LICENSEREF', string: string***REMOVED***
    ***REMOVED***
  ***REMOVED***

  function identifier () ***REMOVED***
    var begin = index
    var string = idstring()

    if (licenses.indexOf(string) !== -1) ***REMOVED***
      return ***REMOVED***
        type: 'LICENSE',
        string: string
      ***REMOVED***
    ***REMOVED*** else if (exceptions.indexOf(string) !== -1) ***REMOVED***
      return ***REMOVED***
        type: 'EXCEPTION',
        string: string
      ***REMOVED***
    ***REMOVED***

    index = begin
  ***REMOVED***

  // Tries to read the next token. Returns `undefined` if no token is
  // recognized.
  function parseToken () ***REMOVED***
    // Ordering matters
    return (
      operator() ||
      documentRef() ||
      licenseRef() ||
      identifier()
    )
  ***REMOVED***

  var tokens = []
  while (hasMore()) ***REMOVED***
    skipWhitespace()
    if (!hasMore()) ***REMOVED***
      break
    ***REMOVED***

    var token = parseToken()
    if (!token) ***REMOVED***
      throw new Error('Unexpected `' + source[index] +
                      '` at offset ' + index)
    ***REMOVED***

    tokens.push(token)
  ***REMOVED***
  return tokens
***REMOVED***
