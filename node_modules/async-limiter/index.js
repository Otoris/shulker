'use strict';

function Queue(options) ***REMOVED***
  if (!(this instanceof Queue)) ***REMOVED***
    return new Queue(options);
  ***REMOVED***

  options = options || ***REMOVED******REMOVED***;
  this.concurrency = options.concurrency || Infinity;
  this.pending = 0;
  this.jobs = [];
  this.cbs = [];
  this._done = done.bind(this);
***REMOVED***

var arrayAddMethods = [
  'push',
  'unshift',
  'splice'
];

arrayAddMethods.forEach(function(method) ***REMOVED***
  Queue.prototype[method] = function() ***REMOVED***
    var methodResult = Array.prototype[method].apply(this.jobs, arguments);
    this._run();
    return methodResult;
  ***REMOVED***;
***REMOVED***);

Object.defineProperty(Queue.prototype, 'length', ***REMOVED***
  get: function() ***REMOVED***
    return this.pending + this.jobs.length;
  ***REMOVED***
***REMOVED***);

Queue.prototype._run = function() ***REMOVED***
  if (this.pending === this.concurrency) ***REMOVED***
    return;
  ***REMOVED***
  if (this.jobs.length) ***REMOVED***
    var job = this.jobs.shift();
    this.pending++;
    job(this._done);
    this._run();
  ***REMOVED***

  if (this.pending === 0) ***REMOVED***
    while (this.cbs.length !== 0) ***REMOVED***
      var cb = this.cbs.pop();
      process.nextTick(cb);
    ***REMOVED***
  ***REMOVED***
***REMOVED***;

Queue.prototype.onDone = function(cb) ***REMOVED***
  if (typeof cb === 'function') ***REMOVED***
    this.cbs.push(cb);
    this._run();
  ***REMOVED***
***REMOVED***;

function done() ***REMOVED***
  this.pending--;
  this._run();
***REMOVED***

module.exports = Queue;
