var path = require('path');
var test = require('tape');
var resolve = require('../');

test('mock', function (t) ***REMOVED***
    t.plan(8);

    var files = ***REMOVED******REMOVED***;
    files[path.resolve('/foo/bar/baz.js')] = 'beep';

    var dirs = ***REMOVED******REMOVED***;
    dirs[path.resolve('/foo/bar')] = true;

    function opts(basedir) ***REMOVED***
        return ***REMOVED***
            basedir: path.resolve(basedir),
            isFile: function (file, cb) ***REMOVED***
                cb(null, Object.prototype.hasOwnProperty.call(files, path.resolve(file)));
            ***REMOVED***,
            isDirectory: function (dir, cb) ***REMOVED***
                cb(null, !!dirs[path.resolve(dir)]);
            ***REMOVED***,
            readFile: function (file, cb) ***REMOVED***
                cb(null, files[path.resolve(file)]);
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***

    resolve('./baz', opts('/foo/bar'), function (err, res, pkg) ***REMOVED***
        if (err) return t.fail(err);
        t.equal(res, path.resolve('/foo/bar/baz.js'));
        t.equal(pkg, undefined);
    ***REMOVED***);

    resolve('./baz.js', opts('/foo/bar'), function (err, res, pkg) ***REMOVED***
        if (err) return t.fail(err);
        t.equal(res, path.resolve('/foo/bar/baz.js'));
        t.equal(pkg, undefined);
    ***REMOVED***);

    resolve('baz', opts('/foo/bar'), function (err, res) ***REMOVED***
        t.equal(err.message, "Cannot find module 'baz' from '" + path.resolve('/foo/bar') + "'");
        t.equal(err.code, 'MODULE_NOT_FOUND');
    ***REMOVED***);

    resolve('../baz', opts('/foo/bar'), function (err, res) ***REMOVED***
        t.equal(err.message, "Cannot find module '../baz' from '" + path.resolve('/foo/bar') + "'");
        t.equal(err.code, 'MODULE_NOT_FOUND');
    ***REMOVED***);
***REMOVED***);

test('mock from package', function (t) ***REMOVED***
    t.plan(8);

    var files = ***REMOVED******REMOVED***;
    files[path.resolve('/foo/bar/baz.js')] = 'beep';

    var dirs = ***REMOVED******REMOVED***;
    dirs[path.resolve('/foo/bar')] = true;

    function opts(basedir) ***REMOVED***
        return ***REMOVED***
            basedir: path.resolve(basedir),
            isFile: function (file, cb) ***REMOVED***
                cb(null, Object.prototype.hasOwnProperty.call(files, file));
            ***REMOVED***,
            isDirectory: function (dir, cb) ***REMOVED***
                cb(null, !!dirs[path.resolve(dir)]);
            ***REMOVED***,
            'package': ***REMOVED*** main: 'bar' ***REMOVED***,
            readFile: function (file, cb) ***REMOVED***
                cb(null, files[file]);
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***

    resolve('./baz', opts('/foo/bar'), function (err, res, pkg) ***REMOVED***
        if (err) return t.fail(err);
        t.equal(res, path.resolve('/foo/bar/baz.js'));
        t.equal(pkg && pkg.main, 'bar');
    ***REMOVED***);

    resolve('./baz.js', opts('/foo/bar'), function (err, res, pkg) ***REMOVED***
        if (err) return t.fail(err);
        t.equal(res, path.resolve('/foo/bar/baz.js'));
        t.equal(pkg && pkg.main, 'bar');
    ***REMOVED***);

    resolve('baz', opts('/foo/bar'), function (err, res) ***REMOVED***
        t.equal(err.message, "Cannot find module 'baz' from '" + path.resolve('/foo/bar') + "'");
        t.equal(err.code, 'MODULE_NOT_FOUND');
    ***REMOVED***);

    resolve('../baz', opts('/foo/bar'), function (err, res) ***REMOVED***
        t.equal(err.message, "Cannot find module '../baz' from '" + path.resolve('/foo/bar') + "'");
        t.equal(err.code, 'MODULE_NOT_FOUND');
    ***REMOVED***);
***REMOVED***);

test('mock package', function (t) ***REMOVED***
    t.plan(2);

    var files = ***REMOVED******REMOVED***;
    files[path.resolve('/foo/node_modules/bar/baz.js')] = 'beep';
    files[path.resolve('/foo/node_modules/bar/package.json')] = JSON.stringify(***REMOVED***
        main: './baz.js'
    ***REMOVED***);

    var dirs = ***REMOVED******REMOVED***;
    dirs[path.resolve('/foo')] = true;
    dirs[path.resolve('/foo/node_modules')] = true;

    function opts(basedir) ***REMOVED***
        return ***REMOVED***
            basedir: path.resolve(basedir),
            isFile: function (file, cb) ***REMOVED***
                cb(null, Object.prototype.hasOwnProperty.call(files, path.resolve(file)));
            ***REMOVED***,
            isDirectory: function (dir, cb) ***REMOVED***
                cb(null, !!dirs[path.resolve(dir)]);
            ***REMOVED***,
            readFile: function (file, cb) ***REMOVED***
                cb(null, files[path.resolve(file)]);
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***

    resolve('bar', opts('/foo'), function (err, res, pkg) ***REMOVED***
        if (err) return t.fail(err);
        t.equal(res, path.resolve('/foo/node_modules/bar/baz.js'));
        t.equal(pkg && pkg.main, './baz.js');
    ***REMOVED***);
***REMOVED***);

test('mock package from package', function (t) ***REMOVED***
    t.plan(2);

    var files = ***REMOVED******REMOVED***;
    files[path.resolve('/foo/node_modules/bar/baz.js')] = 'beep';
    files[path.resolve('/foo/node_modules/bar/package.json')] = JSON.stringify(***REMOVED***
        main: './baz.js'
    ***REMOVED***);

    var dirs = ***REMOVED******REMOVED***;
    dirs[path.resolve('/foo')] = true;
    dirs[path.resolve('/foo/node_modules')] = true;

    function opts(basedir) ***REMOVED***
        return ***REMOVED***
            basedir: path.resolve(basedir),
            isFile: function (file, cb) ***REMOVED***
                cb(null, Object.prototype.hasOwnProperty.call(files, path.resolve(file)));
            ***REMOVED***,
            isDirectory: function (dir, cb) ***REMOVED***
                cb(null, !!dirs[path.resolve(dir)]);
            ***REMOVED***,
            'package': ***REMOVED*** main: 'bar' ***REMOVED***,
            readFile: function (file, cb) ***REMOVED***
                cb(null, files[path.resolve(file)]);
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***

    resolve('bar', opts('/foo'), function (err, res, pkg) ***REMOVED***
        if (err) return t.fail(err);
        t.equal(res, path.resolve('/foo/node_modules/bar/baz.js'));
        t.equal(pkg && pkg.main, './baz.js');
    ***REMOVED***);
***REMOVED***);
