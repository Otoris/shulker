var path = require('path');
var test = require('tape');
var resolve = require('../');

test('mock', function (t) ***REMOVED***
    t.plan(4);

    var files = ***REMOVED******REMOVED***;
    files[path.resolve('/foo/bar/baz.js')] = 'beep';

    var dirs = ***REMOVED******REMOVED***;
    dirs[path.resolve('/foo/bar')] = true;

    function opts(basedir) ***REMOVED***
        return ***REMOVED***
            basedir: path.resolve(basedir),
            isFile: function (file) ***REMOVED***
                return Object.prototype.hasOwnProperty.call(files, path.resolve(file));
            ***REMOVED***,
            isDirectory: function (dir) ***REMOVED***
                return !!dirs[path.resolve(dir)];
            ***REMOVED***,
            readFileSync: function (file) ***REMOVED***
                return files[path.resolve(file)];
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***

    t.equal(
        resolve.sync('./baz', opts('/foo/bar')),
        path.resolve('/foo/bar/baz.js')
    );

    t.equal(
        resolve.sync('./baz.js', opts('/foo/bar')),
        path.resolve('/foo/bar/baz.js')
    );

    t.throws(function () ***REMOVED***
        resolve.sync('baz', opts('/foo/bar'));
    ***REMOVED***);

    t.throws(function () ***REMOVED***
        resolve.sync('../baz', opts('/foo/bar'));
    ***REMOVED***);
***REMOVED***);

test('mock package', function (t) ***REMOVED***
    t.plan(1);

    var files = ***REMOVED******REMOVED***;
    files[path.resolve('/foo/node_modules/bar/baz.js')] = 'beep';
    files[path.resolve('/foo/node_modules/bar/package.json')] = JSON.stringify(***REMOVED***
        main: './baz.js'
    ***REMOVED***);

    var dirs = ***REMOVED******REMOVED***;
    dirs[path.resolve('/foo')] = true;
    dirs[path.resolve('/foo/node_modules')] = true;

    function opts(basedir) ***REMOVED***
        return ***REMOVED***
            basedir: path.resolve(basedir),
            isFile: function (file) ***REMOVED***
                return Object.prototype.hasOwnProperty.call(files, path.resolve(file));
            ***REMOVED***,
            isDirectory: function (dir) ***REMOVED***
                return !!dirs[path.resolve(dir)];
            ***REMOVED***,
            readFileSync: function (file) ***REMOVED***
                return files[path.resolve(file)];
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***

    t.equal(
        resolve.sync('bar', opts('/foo')),
        path.resolve('/foo/node_modules/bar/baz.js')
    );
***REMOVED***);
