var path = require('path');
var fs = require('fs');
var test = require('tape');
var map = require('array.prototype.map');
var resolve = require('../');

var symlinkDir = path.join(__dirname, 'resolver', 'symlinked', 'symlink');
var packageDir = path.join(__dirname, 'resolver', 'symlinked', '_', 'node_modules', 'package');
var modADir = path.join(__dirname, 'symlinks', 'source', 'node_modules', 'mod-a');
var symlinkModADir = path.join(__dirname, 'symlinks', 'dest', 'node_modules', 'mod-a');
try ***REMOVED***
    fs.unlinkSync(symlinkDir);
***REMOVED*** catch (err) ***REMOVED******REMOVED***
try ***REMOVED***
    fs.unlinkSync(packageDir);
***REMOVED*** catch (err) ***REMOVED******REMOVED***
try ***REMOVED***
    fs.unlinkSync(modADir);
***REMOVED*** catch (err) ***REMOVED******REMOVED***
try ***REMOVED***
    fs.unlinkSync(symlinkModADir);
***REMOVED*** catch (err) ***REMOVED******REMOVED***

try ***REMOVED***
    fs.symlinkSync('./_/symlink_target', symlinkDir, 'dir');
***REMOVED*** catch (err) ***REMOVED***
    // if fails then it is probably on Windows and lets try to create a junction
    fs.symlinkSync(path.join(__dirname, 'resolver', 'symlinked', '_', 'symlink_target') + '\\', symlinkDir, 'junction');
***REMOVED***
try ***REMOVED***
    fs.symlinkSync('../../package', packageDir, 'dir');
***REMOVED*** catch (err) ***REMOVED***
    // if fails then it is probably on Windows and lets try to create a junction
    fs.symlinkSync(path.join(__dirname, '..', '..', 'package') + '\\', packageDir, 'junction');
***REMOVED***
try ***REMOVED***
    fs.symlinkSync('../../source/node_modules/mod-a', symlinkModADir, 'dir');
***REMOVED*** catch (err) ***REMOVED***
    // if fails then it is probably on Windows and lets try to create a junction
    fs.symlinkSync(path.join(__dirname, '..', '..', 'source', 'node_modules', 'mod-a') + '\\', symlinkModADir, 'junction');
***REMOVED***

test('symlink', function (t) ***REMOVED***
    t.plan(2);

    resolve('foo', ***REMOVED*** basedir: symlinkDir, preserveSymlinks: false ***REMOVED***, function (err, res, pkg) ***REMOVED***
        t.error(err);
        t.equal(res, path.join(__dirname, 'resolver', 'symlinked', '_', 'node_modules', 'foo.js'));
    ***REMOVED***);
***REMOVED***);

test('sync symlink when preserveSymlinks = true', function (t) ***REMOVED***
    t.plan(4);

    resolve('foo', ***REMOVED*** basedir: symlinkDir ***REMOVED***, function (err, res, pkg) ***REMOVED***
        t.ok(err, 'there is an error');
        t.notOk(res, 'no result');

        t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error code matches require.resolve');
        t.equal(
            err && err.message,
            'Cannot find module \'foo\' from \'' + symlinkDir + '\'',
            'can not find nonexistent module'
        );
    ***REMOVED***);
***REMOVED***);

test('sync symlink', function (t) ***REMOVED***
    var start = new Date();
    t.doesNotThrow(function () ***REMOVED***
        t.equal(resolve.sync('foo', ***REMOVED*** basedir: symlinkDir, preserveSymlinks: false ***REMOVED***), path.join(__dirname, 'resolver', 'symlinked', '_', 'node_modules', 'foo.js'));
    ***REMOVED***);
    t.ok(new Date() - start < 50, 'resolve.sync timedout');
    t.end();
***REMOVED***);

test('sync symlink when preserveSymlinks = true', function (t) ***REMOVED***
    t.throws(function () ***REMOVED***
        resolve.sync('foo', ***REMOVED*** basedir: symlinkDir ***REMOVED***);
    ***REMOVED***, /Cannot find module 'foo'/);
    t.end();
***REMOVED***);

test('sync symlink from node_modules to other dir when preserveSymlinks = false', function (t) ***REMOVED***
    var basedir = path.join(__dirname, 'resolver', 'symlinked', '_');
    var fn = resolve.sync('package', ***REMOVED*** basedir: basedir, preserveSymlinks: false ***REMOVED***);

    t.equal(fn, path.resolve(__dirname, 'resolver/symlinked/package/bar.js'));
    t.end();
***REMOVED***);

test('async symlink from node_modules to other dir when preserveSymlinks = false', function (t) ***REMOVED***
    t.plan(2);
    var basedir = path.join(__dirname, 'resolver', 'symlinked', '_');
    resolve('package', ***REMOVED*** basedir: basedir, preserveSymlinks: false ***REMOVED***, function (err, result) ***REMOVED***
        t.notOk(err, 'no error');
        t.equal(result, path.resolve(__dirname, 'resolver/symlinked/package/bar.js'));
    ***REMOVED***);
***REMOVED***);

test('packageFilter', function (t) ***REMOVED***
    function relative(x) ***REMOVED***
        return path.relative(__dirname, x);
    ***REMOVED***

    function testPackageFilter(preserveSymlinks) ***REMOVED***
        return function (st) ***REMOVED***
            st.plan('is 1.x' ? 3 : 5); // eslint-disable-line no-constant-condition

            var destMain = 'symlinks/dest/node_modules/mod-a/index.js';
            var destPkg = 'symlinks/dest/node_modules/mod-a/package.json';
            var sourceMain = 'symlinks/source/node_modules/mod-a/index.js';
            var sourcePkg = 'symlinks/source/node_modules/mod-a/package.json';
            var destDir = path.join(__dirname, 'symlinks', 'dest');

            /* eslint multiline-comment-style: 0 */
            /* v2.x will restore these tests
            var packageFilterPath = [];
            var actualPath = resolve.sync('mod-a', ***REMOVED***
                basedir: destDir,
                preserveSymlinks: preserveSymlinks,
                packageFilter: function (pkg, pkgfile, dir) ***REMOVED***
                    packageFilterPath.push(pkgfile);
                ***REMOVED***
            ***REMOVED***);
            st.equal(
                relative(actualPath),
                path.normalize(preserveSymlinks ? destMain : sourceMain),
                'sync: actual path is correct'
            );
            st.deepEqual(
                map(packageFilterPath, relative),
                map(preserveSymlinks ? [destPkg, destPkg] : [sourcePkg, sourcePkg], path.normalize),
                'sync: packageFilter pkgfile arg is correct'
            );
            */

            var asyncPackageFilterPath = [];
            resolve(
                'mod-a',
                ***REMOVED***
                    basedir: destDir,
                    preserveSymlinks: preserveSymlinks,
                    packageFilter: function (pkg, pkgfile) ***REMOVED***
                        asyncPackageFilterPath.push(pkgfile);
                    ***REMOVED***
                ***REMOVED***,
                function (err, actualPath) ***REMOVED***
                    st.error(err, 'no error');
                    st.equal(
                        relative(actualPath),
                        path.normalize(preserveSymlinks ? destMain : sourceMain),
                        'async: actual path is correct'
                    );
                    st.deepEqual(
                        map(asyncPackageFilterPath, relative),
                        map(
                            preserveSymlinks ? [destPkg, destPkg, destPkg] : [sourcePkg, sourcePkg, sourcePkg],
                            path.normalize
                        ),
                        'async: packageFilter pkgfile arg is correct'
                    );
                ***REMOVED***
            );
        ***REMOVED***;
    ***REMOVED***

    t.test('preserveSymlinks: false', testPackageFilter(false));

    t.test('preserveSymlinks: true', testPackageFilter(true));

    t.end();
***REMOVED***);
