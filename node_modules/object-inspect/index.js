var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;
var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
var booleanValueOf = Boolean.prototype.valueOf;
var objectToString = Object.prototype.toString;
var match = String.prototype.match;
var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;

var inspectCustom = require('./util.inspect').custom;
var inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;

module.exports = function inspect_(obj, options, depth, seen) ***REMOVED***
    var opts = options || ***REMOVED******REMOVED***;

    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) ***REMOVED***
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
    ***REMOVED***

    if (typeof obj === 'undefined') ***REMOVED***
        return 'undefined';
    ***REMOVED***
    if (obj === null) ***REMOVED***
        return 'null';
    ***REMOVED***
    if (typeof obj === 'boolean') ***REMOVED***
        return obj ? 'true' : 'false';
    ***REMOVED***

    if (typeof obj === 'string') ***REMOVED***
        return inspectString(obj, opts);
    ***REMOVED***
    if (typeof obj === 'number') ***REMOVED***
        if (obj === 0) ***REMOVED***
            return Infinity / obj > 0 ? '0' : '-0';
        ***REMOVED***
        return String(obj);
    ***REMOVED***
    if (typeof obj === 'bigint') ***REMOVED*** // eslint-disable-line valid-typeof
        return String(obj) + 'n';
    ***REMOVED***

    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
    if (typeof depth === 'undefined') ***REMOVED*** depth = 0; ***REMOVED***
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') ***REMOVED***
        return '[Object]';
    ***REMOVED***

    if (typeof seen === 'undefined') ***REMOVED***
        seen = [];
    ***REMOVED*** else if (indexOf(seen, obj) >= 0) ***REMOVED***
        return '[Circular]';
    ***REMOVED***

    function inspect(value, from) ***REMOVED***
        if (from) ***REMOVED***
            seen = seen.slice();
            seen.push(from);
        ***REMOVED***
        return inspect_(value, opts, depth + 1, seen);
    ***REMOVED***

    if (typeof obj === 'function') ***REMOVED***
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    ***REMOVED***
    if (isSymbol(obj)) ***REMOVED***
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? markBoxed(symString) : symString;
    ***REMOVED***
    if (isElement(obj)) ***REMOVED***
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) ***REMOVED***
            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
        ***REMOVED***
        s += '>';
        if (obj.childNodes && obj.childNodes.length) ***REMOVED*** s += '...'; ***REMOVED***
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    ***REMOVED***
    if (isArray(obj)) ***REMOVED***
        if (obj.length === 0) ***REMOVED*** return '[]'; ***REMOVED***
        return '[ ' + arrObjKeys(obj, inspect).join(', ') + ' ]';
    ***REMOVED***
    if (isError(obj)) ***REMOVED***
        var parts = arrObjKeys(obj, inspect);
        if (parts.length === 0) ***REMOVED*** return '[' + String(obj) + ']'; ***REMOVED***
        return '***REMOVED*** [' + String(obj) + '] ' + parts.join(', ') + ' ***REMOVED***';
    ***REMOVED***
    if (typeof obj === 'object') ***REMOVED***
        if (inspectSymbol && typeof obj[inspectSymbol] === 'function') ***REMOVED***
            return obj[inspectSymbol]();
        ***REMOVED*** else if (typeof obj.inspect === 'function') ***REMOVED***
            return obj.inspect();
        ***REMOVED***
    ***REMOVED***
    if (isMap(obj)) ***REMOVED***
        var mapParts = [];
        mapForEach.call(obj, function (value, key) ***REMOVED***
            mapParts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        ***REMOVED***);
        return collectionOf('Map', mapSize.call(obj), mapParts);
    ***REMOVED***
    if (isSet(obj)) ***REMOVED***
        var setParts = [];
        setForEach.call(obj, function (value) ***REMOVED***
            setParts.push(inspect(value, obj));
        ***REMOVED***);
        return collectionOf('Set', setSize.call(obj), setParts);
    ***REMOVED***
    if (isWeakMap(obj)) ***REMOVED***
        return weakCollectionOf('WeakMap');
    ***REMOVED***
    if (isWeakSet(obj)) ***REMOVED***
        return weakCollectionOf('WeakSet');
    ***REMOVED***
    if (isNumber(obj)) ***REMOVED***
        return markBoxed(inspect(Number(obj)));
    ***REMOVED***
    if (isBigInt(obj)) ***REMOVED***
        return markBoxed(inspect(bigIntValueOf.call(obj)));
    ***REMOVED***
    if (isBoolean(obj)) ***REMOVED***
        return markBoxed(booleanValueOf.call(obj));
    ***REMOVED***
    if (isString(obj)) ***REMOVED***
        return markBoxed(inspect(String(obj)));
    ***REMOVED***
    if (!isDate(obj) && !isRegExp(obj)) ***REMOVED***
        var xs = arrObjKeys(obj, inspect);
        if (xs.length === 0) ***REMOVED*** return '***REMOVED******REMOVED***'; ***REMOVED***
        return '***REMOVED*** ' + xs.join(', ') + ' ***REMOVED***';
    ***REMOVED***
    return String(obj);
***REMOVED***;

function wrapQuotes(s, defaultStyle, opts) ***REMOVED***
    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
    return quoteChar + s + quoteChar;
***REMOVED***

function quote(s) ***REMOVED***
    return String(s).replace(/"/g, '&quot;');
***REMOVED***

function isArray(obj) ***REMOVED*** return toStr(obj) === '[object Array]'; ***REMOVED***
function isDate(obj) ***REMOVED*** return toStr(obj) === '[object Date]'; ***REMOVED***
function isRegExp(obj) ***REMOVED*** return toStr(obj) === '[object RegExp]'; ***REMOVED***
function isError(obj) ***REMOVED*** return toStr(obj) === '[object Error]'; ***REMOVED***
function isSymbol(obj) ***REMOVED*** return toStr(obj) === '[object Symbol]'; ***REMOVED***
function isString(obj) ***REMOVED*** return toStr(obj) === '[object String]'; ***REMOVED***
function isNumber(obj) ***REMOVED*** return toStr(obj) === '[object Number]'; ***REMOVED***
function isBigInt(obj) ***REMOVED*** return toStr(obj) === '[object BigInt]'; ***REMOVED***
function isBoolean(obj) ***REMOVED*** return toStr(obj) === '[object Boolean]'; ***REMOVED***

var hasOwn = Object.prototype.hasOwnProperty || function (key) ***REMOVED*** return key in this; ***REMOVED***;
function has(obj, key) ***REMOVED***
    return hasOwn.call(obj, key);
***REMOVED***

function toStr(obj) ***REMOVED***
    return objectToString.call(obj);
***REMOVED***

function nameOf(f) ***REMOVED***
    if (f.name) ***REMOVED*** return f.name; ***REMOVED***
    var m = match.call(f, /^function\s*([\w$]+)/);
    if (m) ***REMOVED*** return m[1]; ***REMOVED***
    return null;
***REMOVED***

function indexOf(xs, x) ***REMOVED***
    if (xs.indexOf) ***REMOVED*** return xs.indexOf(x); ***REMOVED***
    for (var i = 0, l = xs.length; i < l; i++) ***REMOVED***
        if (xs[i] === x) ***REMOVED*** return i; ***REMOVED***
    ***REMOVED***
    return -1;
***REMOVED***

function isMap(x) ***REMOVED***
    if (!mapSize || !x || typeof x !== 'object') ***REMOVED***
        return false;
    ***REMOVED***
    try ***REMOVED***
        mapSize.call(x);
        try ***REMOVED***
            setSize.call(x);
        ***REMOVED*** catch (s) ***REMOVED***
            return true;
        ***REMOVED***
        return x instanceof Map; // core-js workaround, pre-v2.5.0
    ***REMOVED*** catch (e) ***REMOVED******REMOVED***
    return false;
***REMOVED***

function isWeakMap(x) ***REMOVED***
    if (!weakMapHas || !x || typeof x !== 'object') ***REMOVED***
        return false;
    ***REMOVED***
    try ***REMOVED***
        weakMapHas.call(x, weakMapHas);
        try ***REMOVED***
            weakSetHas.call(x, weakSetHas);
        ***REMOVED*** catch (s) ***REMOVED***
            return true;
        ***REMOVED***
        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
    ***REMOVED*** catch (e) ***REMOVED******REMOVED***
    return false;
***REMOVED***

function isSet(x) ***REMOVED***
    if (!setSize || !x || typeof x !== 'object') ***REMOVED***
        return false;
    ***REMOVED***
    try ***REMOVED***
        setSize.call(x);
        try ***REMOVED***
            mapSize.call(x);
        ***REMOVED*** catch (m) ***REMOVED***
            return true;
        ***REMOVED***
        return x instanceof Set; // core-js workaround, pre-v2.5.0
    ***REMOVED*** catch (e) ***REMOVED******REMOVED***
    return false;
***REMOVED***

function isWeakSet(x) ***REMOVED***
    if (!weakSetHas || !x || typeof x !== 'object') ***REMOVED***
        return false;
    ***REMOVED***
    try ***REMOVED***
        weakSetHas.call(x, weakSetHas);
        try ***REMOVED***
            weakMapHas.call(x, weakMapHas);
        ***REMOVED*** catch (s) ***REMOVED***
            return true;
        ***REMOVED***
        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
    ***REMOVED*** catch (e) ***REMOVED******REMOVED***
    return false;
***REMOVED***

function isElement(x) ***REMOVED***
    if (!x || typeof x !== 'object') ***REMOVED*** return false; ***REMOVED***
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) ***REMOVED***
        return true;
    ***REMOVED***
    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
***REMOVED***

function inspectString(str, opts) ***REMOVED***
    // eslint-disable-next-line no-control-regex
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s, 'single', opts);
***REMOVED***

function lowbyte(c) ***REMOVED***
    var n = c.charCodeAt(0);
    var x = ***REMOVED***
        8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r'
    ***REMOVED***[n];
    if (x) ***REMOVED*** return '\\' + x; ***REMOVED***
    return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
***REMOVED***

function markBoxed(str) ***REMOVED***
    return 'Object(' + str + ')';
***REMOVED***

function weakCollectionOf(type) ***REMOVED***
    return type + ' ***REMOVED*** ? ***REMOVED***';
***REMOVED***

function collectionOf(type, size, entries) ***REMOVED***
    return type + ' (' + size + ') ***REMOVED***' + entries.join(', ') + '***REMOVED***';
***REMOVED***

function arrObjKeys(obj, inspect) ***REMOVED***
    var isArr = isArray(obj);
    var xs = [];
    if (isArr) ***REMOVED***
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) ***REMOVED***
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        ***REMOVED***
    ***REMOVED***
    for (var key in obj) ***REMOVED*** // eslint-disable-line no-restricted-syntax
        if (!has(obj, key)) ***REMOVED*** continue; ***REMOVED*** // eslint-disable-line no-restricted-syntax, no-continue
        if (isArr && String(Number(key)) === key && key < obj.length) ***REMOVED*** continue; ***REMOVED*** // eslint-disable-line no-restricted-syntax, no-continue
        if ((/[^\w$]/).test(key)) ***REMOVED***
            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
        ***REMOVED*** else ***REMOVED***
            xs.push(key + ': ' + inspect(obj[key], obj));
        ***REMOVED***
    ***REMOVED***
    return xs;
***REMOVED***
