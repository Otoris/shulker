'use strict';

var test = require('tape');
var isRegex = require('..');
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

test('not regexes', function (t) ***REMOVED***
	t.notOk(isRegex(), 'undefined is not regex');
	t.notOk(isRegex(null), 'null is not regex');
	t.notOk(isRegex(false), 'false is not regex');
	t.notOk(isRegex(true), 'true is not regex');
	t.notOk(isRegex(42), 'number is not regex');
	t.notOk(isRegex('foo'), 'string is not regex');
	t.notOk(isRegex([]), 'array is not regex');
	t.notOk(isRegex(***REMOVED******REMOVED***), 'object is not regex');
	t.notOk(isRegex(function () ***REMOVED******REMOVED***), 'function is not regex');
	t.end();
***REMOVED***);

test('@@toStringTag', ***REMOVED*** skip: !hasToStringTag ***REMOVED***, function (t) ***REMOVED***
	var regex = /a/g;
	var fakeRegex = ***REMOVED***
		toString: function () ***REMOVED*** return String(regex); ***REMOVED***,
		valueOf: function () ***REMOVED*** return regex; ***REMOVED***
	***REMOVED***;
	fakeRegex[Symbol.toStringTag] = 'RegExp';
	t.notOk(isRegex(fakeRegex), 'fake RegExp with @@toStringTag "RegExp" is not regex');
	t.end();
***REMOVED***);

test('regexes', function (t) ***REMOVED***
	t.ok(isRegex(/a/g), 'regex literal is regex');
	t.ok(isRegex(new RegExp('a', 'g')), 'regex object is regex');
	t.end();
***REMOVED***);

test('does not mutate regexes', function (t) ***REMOVED***
	t.test('lastIndex is a marker object', function (st) ***REMOVED***
		var regex = /a/;
		var marker = ***REMOVED******REMOVED***;
		regex.lastIndex = marker;
		st.equal(regex.lastIndex, marker, 'lastIndex is the marker object');
		st.ok(isRegex(regex), 'is regex');
		st.equal(regex.lastIndex, marker, 'lastIndex is the marker object after isRegex');
		st.end();
	***REMOVED***);

	t.test('lastIndex is nonzero', function (st) ***REMOVED***
		var regex = /a/;
		regex.lastIndex = 3;
		st.equal(regex.lastIndex, 3, 'lastIndex is 3');
		st.ok(isRegex(regex), 'is regex');
		st.equal(regex.lastIndex, 3, 'lastIndex is 3 after isRegex');
		st.end();
	***REMOVED***);

	t.end();
***REMOVED***);
