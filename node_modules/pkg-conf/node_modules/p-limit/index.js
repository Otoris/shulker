'use strict';
const pTry = require('p-try');

const pLimit = concurrency => ***REMOVED***
	if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) ***REMOVED***
		return Promise.reject(new TypeError('Expected `concurrency` to be a number from 1 and up'));
	***REMOVED***

	const queue = [];
	let activeCount = 0;

	const next = () => ***REMOVED***
		activeCount--;

		if (queue.length > 0) ***REMOVED***
			queue.shift()();
		***REMOVED***
	***REMOVED***;

	const run = (fn, resolve, ...args) => ***REMOVED***
		activeCount++;

		const result = pTry(fn, ...args);

		resolve(result);

		result.then(next, next);
	***REMOVED***;

	const enqueue = (fn, resolve, ...args) => ***REMOVED***
		if (activeCount < concurrency) ***REMOVED***
			run(fn, resolve, ...args);
		***REMOVED*** else ***REMOVED***
			queue.push(run.bind(null, fn, resolve, ...args));
		***REMOVED***
	***REMOVED***;

	const generator = (fn, ...args) => new Promise(resolve => enqueue(fn, resolve, ...args));
	Object.defineProperties(generator, ***REMOVED***
		activeCount: ***REMOVED***
			get: () => activeCount
		***REMOVED***,
		pendingCount: ***REMOVED***
			get: () => queue.length
		***REMOVED***
	***REMOVED***);

	return generator;
***REMOVED***;

module.exports = pLimit;
module.exports.default = pLimit;
