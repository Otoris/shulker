import propName from './propName';

const DEFAULT_OPTIONS = ***REMOVED***
  ignoreCase: true,
***REMOVED***;

/**
 * Returns the JSXAttribute itself or undefined, indicating the prop
 * is not present on the JSXOpeningElement.
 *
 */
export default function getProp(props = [], prop = '', options = DEFAULT_OPTIONS) ***REMOVED***
  function getName(name) ***REMOVED*** return options.ignoreCase ? name.toUpperCase() : name; ***REMOVED***
  const propToFind = getName(prop);
  function isPropToFind(property) ***REMOVED***
    return property.type === 'Property'
      && property.key.type === 'Identifier'
      && propToFind === getName(property.key.name);
  ***REMOVED***

  const foundAttribute = props.find((attribute) => ***REMOVED***
    // If the props contain a spread prop, try to find the property in the object expression.
    if (attribute.type === 'JSXSpreadAttribute') ***REMOVED***
      return attribute.argument.type === 'ObjectExpression'
        && propToFind !== getName('key') // https://github.com/reactjs/rfcs/pull/107
        && attribute.argument.properties.some(isPropToFind);
    ***REMOVED***

    return propToFind === getName(propName(attribute));
  ***REMOVED***);

  if (foundAttribute && foundAttribute.type === 'JSXSpreadAttribute') ***REMOVED***
    return propertyToJSXAttribute(foundAttribute.argument.properties.find(isPropToFind));
  ***REMOVED***

  return foundAttribute;
***REMOVED***

function propertyToJSXAttribute(node) ***REMOVED***
  const ***REMOVED*** key, value ***REMOVED*** = node;
  return ***REMOVED***
    type: 'JSXAttribute',
    name: ***REMOVED*** type: 'JSXIdentifier', name: key.name, ...getBaseProps(key) ***REMOVED***,
    value: value.type === 'Literal'
      ? value
      : ***REMOVED*** type: 'JSXExpressionContainer', expression: value, ...getBaseProps(value) ***REMOVED***,
    ...getBaseProps(node),
  ***REMOVED***;
***REMOVED***

function getBaseProps(***REMOVED***
  start,
  end,
  loc,
  range,
***REMOVED***) ***REMOVED***
  return ***REMOVED***
    loc: getBaseLocation(loc),
    ...(start !== undefined ? ***REMOVED*** start ***REMOVED*** : ***REMOVED******REMOVED***),
    ...(end !== undefined ? ***REMOVED*** end ***REMOVED*** : ***REMOVED******REMOVED***),
    ...(range !== undefined ? ***REMOVED*** range ***REMOVED*** : ***REMOVED******REMOVED***),
  ***REMOVED***;
***REMOVED***

function getBaseLocation(***REMOVED***
  start,
  end,
  source,
  filename,
***REMOVED***) ***REMOVED***
  return ***REMOVED***
    start,
    end,
    ...(source !== undefined ? ***REMOVED*** source ***REMOVED*** : ***REMOVED******REMOVED***),
    ...(filename !== undefined ? ***REMOVED*** filename ***REMOVED*** : ***REMOVED******REMOVED***),
  ***REMOVED***;
***REMOVED***
