function resolveMemberExpressions(object = ***REMOVED******REMOVED***, property = ***REMOVED******REMOVED***) ***REMOVED***
  if (object.type === 'JSXMemberExpression') ***REMOVED***
    return `$***REMOVED***resolveMemberExpressions(object.object, object.property)***REMOVED***.$***REMOVED***property.name***REMOVED***`;
  ***REMOVED***

  return `$***REMOVED***object.name***REMOVED***.$***REMOVED***property.name***REMOVED***`;
***REMOVED***

/**
 * Returns the tagName associated with a JSXElement.
 */
export default function elementType(node = ***REMOVED******REMOVED***) ***REMOVED***
  const ***REMOVED*** name ***REMOVED*** = node;

  if (!name) ***REMOVED***
    throw new Error('The argument provided is not a JSXElement node.');
  ***REMOVED***

  if (name.type === 'JSXMemberExpression') ***REMOVED***
    const ***REMOVED*** object = ***REMOVED******REMOVED***, property = ***REMOVED******REMOVED*** ***REMOVED*** = name;
    return resolveMemberExpressions(object, property);
  ***REMOVED***

  if (name.type === 'JSXNamespacedName') ***REMOVED***
    return `$***REMOVED***name.namespace.name***REMOVED***:$***REMOVED***name.name.name***REMOVED***`;
  ***REMOVED***

  return node.name.name;
***REMOVED***
