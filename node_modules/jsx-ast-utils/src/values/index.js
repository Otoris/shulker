import Literal from './Literal';
import JSXElement from './JSXElement';
import JSXExpressionContainer, ***REMOVED*** extractLiteral ***REMOVED*** from './expressions';

// Composition map of types to their extractor functions.
const TYPES = ***REMOVED***
  Literal,
  JSXElement,
  JSXExpressionContainer,
***REMOVED***;

// Composition map of types to their extractor functions to handle literals.
const LITERAL_TYPES = Object.assign(***REMOVED******REMOVED***, TYPES, ***REMOVED***
  JSXElement: () => null,
  JSXExpressionContainer: extractLiteral,
***REMOVED***);

/**
 * This function maps an AST value node
 * to its correct extractor function for its
 * given type.
 *
 * This will map correctly for *all* possible types.
 *
 * @param value - AST Value object on a JSX Attribute.
 */
export default function getValue(value) ***REMOVED***
  return TYPES[value.type](value);
***REMOVED***

/**
 * This function maps an AST value node
 * to its correct extractor function for its
 * given type.
 *
 * This will map correctly for *some* possible types that map to literals.
 *
 * @param value - AST Value object on a JSX Attribute.
 */
export function getLiteralValue(value) ***REMOVED***
  return LITERAL_TYPES[value.type](value);
***REMOVED***
