import assign from 'object.assign';

/**
 * Extractor function for an ObjectExpression type value node.
 * An object expression is using ***REMOVED******REMOVED***.
 *
 * @returns - a representation of the object
 */
export default function extractValueFromObjectExpression(value) ***REMOVED***
  // eslint-disable-next-line global-require
  const getValue = require('./index.js').default;
  return value.properties.reduce((obj, property) => ***REMOVED***
    const object = Object.assign(***REMOVED******REMOVED***, obj);
    // Support types: SpreadProperty and ExperimentalSpreadProperty
    if (/^(?:Experimental)?Spread(?:Property|Element)$/.test(property.type)) ***REMOVED***
      if (property.argument.type === 'ObjectExpression') ***REMOVED***
        return assign(object, extractValueFromObjectExpression(property.argument));
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      object[getValue(property.key)] = getValue(property.value);
    ***REMOVED***
    return object;
  ***REMOVED***, ***REMOVED******REMOVED***);
***REMOVED***
