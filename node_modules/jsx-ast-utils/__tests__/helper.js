/* eslint-env jest */
import getProp from '../src/getProp';

const nodeVersion = parseInt(process.version.match(/^v(\d+)\./)[1], 10);

export const fallbackToBabylon = nodeVersion < 6;

let parserName;
const babelParser = fallbackToBabylon ? require('babylon') : require('@babel/parser');
const flowParser = require('flow-parser');

const defaultPlugins = ['jsx', 'functionBind', 'estree', 'objectRestSpread', 'optionalChaining'];
let plugins = [...defaultPlugins];

export function setParserName(name) ***REMOVED***
  parserName = name;
***REMOVED***

export function changePlugins(pluginOrFn) ***REMOVED***
  if (Array.isArray(pluginOrFn)) ***REMOVED***
    plugins = pluginOrFn;
  ***REMOVED*** else if (typeof pluginOrFn === 'function') ***REMOVED***
    plugins = pluginOrFn(plugins);
  ***REMOVED*** else ***REMOVED***
    throw new Error('changePlugins argument should be either an array or a function');
  ***REMOVED***
***REMOVED***

beforeEach(() => ***REMOVED***
  plugins = [...defaultPlugins];
***REMOVED***);

function parse(code) ***REMOVED***
  if (parserName === undefined) ***REMOVED***
    throw new Error('No parser specified');
  ***REMOVED***
  if (parserName === 'babel') ***REMOVED***
    try ***REMOVED***
      return babelParser.parse(code, ***REMOVED*** plugins, sourceFilename: 'test.js' ***REMOVED***);
    ***REMOVED*** catch (_) ***REMOVED***
      // eslint-disable-next-line no-console
      console.warn(`Failed to parse with $***REMOVED***fallbackToBabylon ? 'babylon' : 'Babel'***REMOVED*** parser.`);
    ***REMOVED***
  ***REMOVED***
  if (parserName === 'flow') ***REMOVED***
    try ***REMOVED***
      return flowParser.parse(code, ***REMOVED*** plugins ***REMOVED***);
    ***REMOVED*** catch (_) ***REMOVED***
      // eslint-disable-next-line no-console
      console.warn('Failed to parse with the Flow parser');
    ***REMOVED***
  ***REMOVED***
  throw new Error(`The parser $***REMOVED***parserName***REMOVED*** is not yet supported for testing.`);
***REMOVED***

export function getOpeningElement(code) ***REMOVED***
  const parsedCode = parse(code);
  let body;
  if (parsedCode.program) ***REMOVED***
    // eslint-disable-next-line prefer-destructuring
    body = parsedCode.program.body;
  ***REMOVED*** else ***REMOVED***
    // eslint-disable-next-line prefer-destructuring
    body = parsedCode.body;
  ***REMOVED***
  if (Array.isArray(body) && body[0] != null) ***REMOVED***
    return body[0].expression.openingElement;
  ***REMOVED***

  return null;
***REMOVED***

export function extractProp(code, prop = 'foo') ***REMOVED***
  const node = getOpeningElement(code);
  const ***REMOVED*** attributes: props ***REMOVED*** = node;
  return getProp(props, prop);
***REMOVED***

export const describeIfNotBabylon = fallbackToBabylon ? describe.skip : describe;
