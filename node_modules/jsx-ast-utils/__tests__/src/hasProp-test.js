/* eslint-env mocha */
import assert from 'assert';
import ***REMOVED*** getOpeningElement, setParserName ***REMOVED*** from '../helper';
import hasProp, ***REMOVED*** hasAnyProp, hasEveryProp ***REMOVED*** from '../../src/hasProp';

describe('hasProp', () => ***REMOVED***
  beforeEach(() => ***REMOVED***
    setParserName('babel');
  ***REMOVED***);
  it('should export a function', () => ***REMOVED***
    const expected = 'function';
    const actual = typeof hasProp;

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return false if no arguments are provided', () => ***REMOVED***
    const expected = false;
    const actual = hasProp();

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return false if the prop is absent', () => ***REMOVED***
    const code = '<div />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = 'id';

    const expected = false;
    const actual = hasProp(props, prop);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return true if the prop exists', () => ***REMOVED***
    const code = '<div id="foo" />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = 'id';

    const expected = true;
    const actual = hasProp(props, prop);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return true if the prop may exist in spread loose mode', () => ***REMOVED***
    const code = '<div ***REMOVED***...props***REMOVED*** />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = 'id';
    const options = ***REMOVED***
      spreadStrict: false,
    ***REMOVED***;

    const expected = true;
    const actual = hasProp(props, prop, options);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return false if the prop is considered absent in case-sensitive mode', () => ***REMOVED***
    const code = '<div ID="foo" />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = 'id';
    const options = ***REMOVED***
      ignoreCase: false,
    ***REMOVED***;

    const expected = false;
    const actual = hasProp(props, prop, options);

    assert.equal(expected, actual);
  ***REMOVED***);
***REMOVED***);

describe('hasAnyProp tests', () => ***REMOVED***
  it('should export a function', () => ***REMOVED***
    const expected = 'function';
    const actual = typeof hasAnyProp;

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return false if no arguments are provided', () => ***REMOVED***
    const expected = false;
    const actual = hasAnyProp();

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return false if the prop is absent', () => ***REMOVED***
    const code = '<div />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = 'id';

    const expected = false;
    const actual = hasAnyProp(props, prop);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return false if all props are absent in array', () => ***REMOVED***
    const code = '<div />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const propsToCheck = ['id', 'className'];

    const expected = false;
    const actual = hasAnyProp(props, propsToCheck);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return false if all props are absent in space delimited string', () => ***REMOVED***
    const code = '<div />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const propsToCheck = 'id className';

    const expected = false;
    const actual = hasAnyProp(props, propsToCheck);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return true if the prop exists', () => ***REMOVED***
    const code = '<div id="foo" />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = 'id';

    const expected = true;
    const actual = hasAnyProp(props, prop);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return true if any prop exists in array', () => ***REMOVED***
    const code = '<div id="foo" />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = ['className', 'id'];

    const expected = true;
    const actual = hasAnyProp(props, prop);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return true if any prop exists in space delimited string', () => ***REMOVED***
    const code = '<div id="foo" />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = 'className id';

    const expected = true;
    const actual = hasAnyProp(props, prop);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return true if the prop may exist in spread loose mode', () => ***REMOVED***
    const code = '<div ***REMOVED***...props***REMOVED*** />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = 'id';
    const options = ***REMOVED***
      spreadStrict: false,
    ***REMOVED***;

    const expected = true;
    const actual = hasAnyProp(props, prop, options);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return true if any prop may exist in spread loose mode', () => ***REMOVED***
    const code = '<div ***REMOVED***...props***REMOVED*** />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = ['id', 'className'];
    const options = ***REMOVED***
      spreadStrict: false,
    ***REMOVED***;

    const expected = true;
    const actual = hasAnyProp(props, prop, options);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return false if the prop is considered absent in case-sensitive mode', () => ***REMOVED***
    const code = '<div ID="foo" />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = 'id';
    const options = ***REMOVED***
      ignoreCase: false,
    ***REMOVED***;

    const expected = false;
    const actual = hasAnyProp(props, prop, options);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return false if all props are considered absent in case-sensitive mode', () => ***REMOVED***
    const code = '<div ID="foo" />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = ['id', 'iD', 'className'];
    const options = ***REMOVED***
      ignoreCase: false,
    ***REMOVED***;

    const expected = false;
    const actual = hasAnyProp(props, prop, options);

    assert.equal(expected, actual);
  ***REMOVED***);
***REMOVED***);

describe('hasEveryProp tests', () => ***REMOVED***
  it('should export a function', () => ***REMOVED***
    const expected = 'function';
    const actual = typeof hasEveryProp;

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return true if no arguments are provided', () => ***REMOVED***
    const expected = true;
    const actual = hasEveryProp();

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return false if the prop is absent', () => ***REMOVED***
    const code = '<div />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = 'id';

    const expected = false;
    const actual = hasEveryProp(props, prop);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return false if any props are absent in array', () => ***REMOVED***
    const code = '<div id="foo" />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const propsToCheck = ['id', 'className'];

    const expected = false;
    const actual = hasEveryProp(props, propsToCheck);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return false if all props are absent in array', () => ***REMOVED***
    const code = '<div />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const propsToCheck = ['id', 'className'];

    const expected = false;
    const actual = hasEveryProp(props, propsToCheck);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return false if any props are absent in space delimited string', () => ***REMOVED***
    const code = '<div id="foo" />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const propsToCheck = 'id className';

    const expected = false;
    const actual = hasEveryProp(props, propsToCheck);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return false if all props are absent in space delimited string', () => ***REMOVED***
    const code = '<div />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const propsToCheck = 'id className';

    const expected = false;
    const actual = hasEveryProp(props, propsToCheck);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return true if the prop exists', () => ***REMOVED***
    const code = '<div id="foo" />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = 'id';

    const expected = true;
    const actual = hasEveryProp(props, prop);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return true if all props exist in array', () => ***REMOVED***
    const code = '<div id="foo" className="box" />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = ['className', 'id'];

    const expected = true;
    const actual = hasEveryProp(props, prop);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return true if all props exist in space delimited string', () => ***REMOVED***
    const code = '<div id="foo" className="box" />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = 'className id';

    const expected = true;
    const actual = hasEveryProp(props, prop);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return true if the props may exist in spread loose mode', () => ***REMOVED***
    const code = '<div ***REMOVED***...props***REMOVED*** />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = 'id';
    const options = ***REMOVED***
      spreadStrict: false,
    ***REMOVED***;

    const expected = true;
    const actual = hasEveryProp(props, prop, options);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return true if all props may exist in spread loose mode', () => ***REMOVED***
    const code = '<div ***REMOVED***...props***REMOVED*** />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = ['id', 'className'];
    const options = ***REMOVED***
      spreadStrict: false,
    ***REMOVED***;

    const expected = true;
    const actual = hasEveryProp(props, prop, options);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return false if the prop is considered absent in case-sensitive mode', () => ***REMOVED***
    const code = '<div ID="foo" />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = 'id';
    const options = ***REMOVED***
      ignoreCase: false,
    ***REMOVED***;

    const expected = false;
    const actual = hasEveryProp(props, prop, options);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return false if all props are considered absent in case-sensitive mode', () => ***REMOVED***
    const code = '<div ID="foo" />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = ['id', 'iD', 'className'];
    const options = ***REMOVED***
      ignoreCase: false,
    ***REMOVED***;

    const expected = false;
    const actual = hasEveryProp(props, prop, options);

    assert.equal(expected, actual);
  ***REMOVED***);

  it('should return true if all props are considered present in case-sensitive mode', () => ***REMOVED***
    const code = '<div ID="foo" className="box" />';
    const node = getOpeningElement(code);
    const ***REMOVED*** attributes: props ***REMOVED*** = node;
    const prop = ['ID', 'className'];
    const options = ***REMOVED***
      ignoreCase: false,
    ***REMOVED***;

    const expected = true;
    const actual = hasEveryProp(props, prop, options);

    assert.equal(expected, actual);
  ***REMOVED***);
***REMOVED***);
