'use strict';

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
***REMOVED***);

var _extends = Object.assign || function (target) ***REMOVED*** for (var i = 1; i < arguments.length; i++) ***REMOVED*** var source = arguments[i]; for (var key in source) ***REMOVED*** if (Object.prototype.hasOwnProperty.call(source, key)) ***REMOVED*** target[key] = source[key]; ***REMOVED*** ***REMOVED*** ***REMOVED*** return target; ***REMOVED***;

exports.default = getProp;

var _propName = require('./propName');

var _propName2 = _interopRequireDefault(_propName);

function _interopRequireDefault(obj) ***REMOVED*** return obj && obj.__esModule ? obj : ***REMOVED*** default: obj ***REMOVED***; ***REMOVED***

var DEFAULT_OPTIONS = ***REMOVED***
  ignoreCase: true
***REMOVED***;

/**
 * Returns the JSXAttribute itself or undefined, indicating the prop
 * is not present on the JSXOpeningElement.
 *
 */
function getProp() ***REMOVED***
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_OPTIONS;

  function getName(name) ***REMOVED***
    return options.ignoreCase ? name.toUpperCase() : name;
  ***REMOVED***
  var propToFind = getName(prop);
  function isPropToFind(property) ***REMOVED***
    return property.type === 'Property' && property.key.type === 'Identifier' && propToFind === getName(property.key.name);
  ***REMOVED***

  var foundAttribute = props.find(function (attribute) ***REMOVED***
    // If the props contain a spread prop, try to find the property in the object expression.
    if (attribute.type === 'JSXSpreadAttribute') ***REMOVED***
      return attribute.argument.type === 'ObjectExpression' && propToFind !== getName('key') // https://github.com/reactjs/rfcs/pull/107
      && attribute.argument.properties.some(isPropToFind);
    ***REMOVED***

    return propToFind === getName((0, _propName2.default)(attribute));
  ***REMOVED***);

  if (foundAttribute && foundAttribute.type === 'JSXSpreadAttribute') ***REMOVED***
    return propertyToJSXAttribute(foundAttribute.argument.properties.find(isPropToFind));
  ***REMOVED***

  return foundAttribute;
***REMOVED***

function propertyToJSXAttribute(node) ***REMOVED***
  var key = node.key,
      value = node.value;

  return _extends(***REMOVED***
    type: 'JSXAttribute',
    name: _extends(***REMOVED*** type: 'JSXIdentifier', name: key.name ***REMOVED***, getBaseProps(key)),
    value: value.type === 'Literal' ? value : _extends(***REMOVED*** type: 'JSXExpressionContainer', expression: value ***REMOVED***, getBaseProps(value))
  ***REMOVED***, getBaseProps(node));
***REMOVED***

function getBaseProps(_ref) ***REMOVED***
  var start = _ref.start,
      end = _ref.end,
      loc = _ref.loc,
      range = _ref.range;

  return _extends(***REMOVED***
    loc: getBaseLocation(loc)
  ***REMOVED***, start !== undefined ? ***REMOVED*** start: start ***REMOVED*** : ***REMOVED******REMOVED***, end !== undefined ? ***REMOVED*** end: end ***REMOVED*** : ***REMOVED******REMOVED***, range !== undefined ? ***REMOVED*** range: range ***REMOVED*** : ***REMOVED******REMOVED***);
***REMOVED***

function getBaseLocation(_ref2) ***REMOVED***
  var start = _ref2.start,
      end = _ref2.end,
      source = _ref2.source,
      filename = _ref2.filename;

  return _extends(***REMOVED***
    start: start,
    end: end
  ***REMOVED***, source !== undefined ? ***REMOVED*** source: source ***REMOVED*** : ***REMOVED******REMOVED***, filename !== undefined ? ***REMOVED*** filename: filename ***REMOVED*** : ***REMOVED******REMOVED***);
***REMOVED***