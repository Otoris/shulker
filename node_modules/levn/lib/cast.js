// Generated by LiveScript 1.4.0
(function()***REMOVED***
  var parsedTypeCheck, types, toString$ = ***REMOVED******REMOVED***.toString;
  parsedTypeCheck = require('type-check').parsedTypeCheck;
  types = ***REMOVED***
    '*': function(value, options)***REMOVED***
      switch (toString$.call(value).slice(8, -1)) ***REMOVED***
      case 'Array':
        return typeCast(value, ***REMOVED***
          type: 'Array'
        ***REMOVED***, options);
      case 'Object':
        return typeCast(value, ***REMOVED***
          type: 'Object'
        ***REMOVED***, options);
      default:
        return ***REMOVED***
          type: 'Just',
          value: typesCast(value, [
            ***REMOVED***
              type: 'Undefined'
            ***REMOVED***, ***REMOVED***
              type: 'Null'
            ***REMOVED***, ***REMOVED***
              type: 'NaN'
            ***REMOVED***, ***REMOVED***
              type: 'Boolean'
            ***REMOVED***, ***REMOVED***
              type: 'Number'
            ***REMOVED***, ***REMOVED***
              type: 'Date'
            ***REMOVED***, ***REMOVED***
              type: 'RegExp'
            ***REMOVED***, ***REMOVED***
              type: 'Array'
            ***REMOVED***, ***REMOVED***
              type: 'Object'
            ***REMOVED***, ***REMOVED***
              type: 'String'
            ***REMOVED***
          ], (options.explicit = true, options))
        ***REMOVED***;
      ***REMOVED***
    ***REMOVED***,
    Undefined: function(it)***REMOVED***
      if (it === 'undefined' || it === void 8) ***REMOVED***
        return ***REMOVED***
          type: 'Just',
          value: void 8
        ***REMOVED***;
      ***REMOVED*** else ***REMOVED***
        return ***REMOVED***
          type: 'Nothing'
        ***REMOVED***;
      ***REMOVED***
    ***REMOVED***,
    Null: function(it)***REMOVED***
      if (it === 'null') ***REMOVED***
        return ***REMOVED***
          type: 'Just',
          value: null
        ***REMOVED***;
      ***REMOVED*** else ***REMOVED***
        return ***REMOVED***
          type: 'Nothing'
        ***REMOVED***;
      ***REMOVED***
    ***REMOVED***,
    NaN: function(it)***REMOVED***
      if (it === 'NaN') ***REMOVED***
        return ***REMOVED***
          type: 'Just',
          value: NaN
        ***REMOVED***;
      ***REMOVED*** else ***REMOVED***
        return ***REMOVED***
          type: 'Nothing'
        ***REMOVED***;
      ***REMOVED***
    ***REMOVED***,
    Boolean: function(it)***REMOVED***
      if (it === 'true') ***REMOVED***
        return ***REMOVED***
          type: 'Just',
          value: true
        ***REMOVED***;
      ***REMOVED*** else if (it === 'false') ***REMOVED***
        return ***REMOVED***
          type: 'Just',
          value: false
        ***REMOVED***;
      ***REMOVED*** else ***REMOVED***
        return ***REMOVED***
          type: 'Nothing'
        ***REMOVED***;
      ***REMOVED***
    ***REMOVED***,
    Number: function(it)***REMOVED***
      return ***REMOVED***
        type: 'Just',
        value: +it
      ***REMOVED***;
    ***REMOVED***,
    Int: function(it)***REMOVED***
      return ***REMOVED***
        type: 'Just',
        value: +it
      ***REMOVED***;
    ***REMOVED***,
    Float: function(it)***REMOVED***
      return ***REMOVED***
        type: 'Just',
        value: +it
      ***REMOVED***;
    ***REMOVED***,
    Date: function(value, options)***REMOVED***
      var that;
      if (that = /^\#([\s\S]*)\#$/.exec(value)) ***REMOVED***
        return ***REMOVED***
          type: 'Just',
          value: new Date(+that[1] || that[1])
        ***REMOVED***;
      ***REMOVED*** else if (options.explicit) ***REMOVED***
        return ***REMOVED***
          type: 'Nothing'
        ***REMOVED***;
      ***REMOVED*** else ***REMOVED***
        return ***REMOVED***
          type: 'Just',
          value: new Date(+value || value)
        ***REMOVED***;
      ***REMOVED***
    ***REMOVED***,
    RegExp: function(value, options)***REMOVED***
      var that;
      if (that = /^\/([\s\S]*)\/([gimy]*)$/.exec(value)) ***REMOVED***
        return ***REMOVED***
          type: 'Just',
          value: new RegExp(that[1], that[2])
        ***REMOVED***;
      ***REMOVED*** else if (options.explicit) ***REMOVED***
        return ***REMOVED***
          type: 'Nothing'
        ***REMOVED***;
      ***REMOVED*** else ***REMOVED***
        return ***REMOVED***
          type: 'Just',
          value: new RegExp(value)
        ***REMOVED***;
      ***REMOVED***
    ***REMOVED***,
    Array: function(value, options)***REMOVED***
      return castArray(value, ***REMOVED***
        of: [***REMOVED***
          type: '*'
        ***REMOVED***]
      ***REMOVED***, options);
    ***REMOVED***,
    Object: function(value, options)***REMOVED***
      return castFields(value, ***REMOVED***
        of: ***REMOVED******REMOVED***
      ***REMOVED***, options);
    ***REMOVED***,
    String: function(it)***REMOVED***
      var that;
      if (toString$.call(it).slice(8, -1) !== 'String') ***REMOVED***
        return ***REMOVED***
          type: 'Nothing'
        ***REMOVED***;
      ***REMOVED***
      if (that = it.match(/^'([\s\S]*)'$/)) ***REMOVED***
        return ***REMOVED***
          type: 'Just',
          value: that[1].replace(/\\'/g, "'")
        ***REMOVED***;
      ***REMOVED*** else if (that = it.match(/^"([\s\S]*)"$/)) ***REMOVED***
        return ***REMOVED***
          type: 'Just',
          value: that[1].replace(/\\"/g, '"')
        ***REMOVED***;
      ***REMOVED*** else ***REMOVED***
        return ***REMOVED***
          type: 'Just',
          value: it
        ***REMOVED***;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***;
  function castArray(node, type, options)***REMOVED***
    var typeOf, element;
    if (toString$.call(node).slice(8, -1) !== 'Array') ***REMOVED***
      return ***REMOVED***
        type: 'Nothing'
      ***REMOVED***;
    ***REMOVED***
    typeOf = type.of;
    return ***REMOVED***
      type: 'Just',
      value: (function()***REMOVED***
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = node).length; i$ < len$; ++i$) ***REMOVED***
          element = ref$[i$];
          results$.push(typesCast(element, typeOf, options));
        ***REMOVED***
        return results$;
      ***REMOVED***())
    ***REMOVED***;
  ***REMOVED***
  function castTuple(node, type, options)***REMOVED***
    var result, i, i$, ref$, len$, types, cast;
    if (toString$.call(node).slice(8, -1) !== 'Array') ***REMOVED***
      return ***REMOVED***
        type: 'Nothing'
      ***REMOVED***;
    ***REMOVED***
    result = [];
    i = 0;
    for (i$ = 0, len$ = (ref$ = type.of).length; i$ < len$; ++i$) ***REMOVED***
      types = ref$[i$];
      cast = typesCast(node[i], types, options);
      if (toString$.call(cast).slice(8, -1) !== 'Undefined') ***REMOVED***
        result.push(cast);
      ***REMOVED***
      i++;
    ***REMOVED***
    if (node.length <= i) ***REMOVED***
      return ***REMOVED***
        type: 'Just',
        value: result
      ***REMOVED***;
    ***REMOVED*** else ***REMOVED***
      return ***REMOVED***
        type: 'Nothing'
      ***REMOVED***;
    ***REMOVED***
  ***REMOVED***
  function castFields(node, type, options)***REMOVED***
    var typeOf, key, value;
    if (toString$.call(node).slice(8, -1) !== 'Object') ***REMOVED***
      return ***REMOVED***
        type: 'Nothing'
      ***REMOVED***;
    ***REMOVED***
    typeOf = type.of;
    return ***REMOVED***
      type: 'Just',
      value: (function()***REMOVED***
        var ref$, resultObj$ = ***REMOVED******REMOVED***;
        for (key in ref$ = node) ***REMOVED***
          value = ref$[key];
          resultObj$[typesCast(key, [***REMOVED***
            type: 'String'
          ***REMOVED***], options)] = typesCast(value, typeOf[key] || [***REMOVED***
            type: '*'
          ***REMOVED***], options);
        ***REMOVED***
        return resultObj$;
      ***REMOVED***())
    ***REMOVED***;
  ***REMOVED***
  function typeCast(node, typeObj, options)***REMOVED***
    var type, structure, castFunc, ref$;
    type = typeObj.type, structure = typeObj.structure;
    if (type) ***REMOVED***
      castFunc = ((ref$ = options.customTypes[type]) != null ? ref$.cast : void 8) || types[type];
      if (!castFunc) ***REMOVED***
        throw new Error("Type not defined: " + type + ".");
      ***REMOVED***
      return castFunc(node, options, typesCast);
    ***REMOVED*** else ***REMOVED***
      switch (structure) ***REMOVED***
      case 'array':
        return castArray(node, typeObj, options);
      case 'tuple':
        return castTuple(node, typeObj, options);
      case 'fields':
        return castFields(node, typeObj, options);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
  function typesCast(node, types, options)***REMOVED***
    var i$, len$, type, ref$, valueType, value;
    for (i$ = 0, len$ = types.length; i$ < len$; ++i$) ***REMOVED***
      type = types[i$];
      ref$ = typeCast(node, type, options), valueType = ref$.type, value = ref$.value;
      if (valueType === 'Nothing') ***REMOVED***
        continue;
      ***REMOVED***
      if (parsedTypeCheck([type], value, ***REMOVED***
        customTypes: options.customTypes
      ***REMOVED***)) ***REMOVED***
        return value;
      ***REMOVED***
    ***REMOVED***
    throw new Error("Value " + JSON.stringify(node) + " does not type check against " + JSON.stringify(types) + ".");
  ***REMOVED***
  module.exports = typesCast;
***REMOVED***).call(this);
