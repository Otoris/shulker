'use strict';

var jsTokens = require('js-tokens').default;

var processEnvRe = /\bprocess\.env\.[_$a-zA-Z][$\w]+\b/;
var spaceOrCommentRe = /^(?:\s|\/[/*])/;

function replace(src, envs) ***REMOVED***
  if (!processEnvRe.test(src)) ***REMOVED***
    return src;
  ***REMOVED***

  var out = [];
  var purge = envs.some(function(env) ***REMOVED***
    return env._ && env._.indexOf('purge') !== -1;
  ***REMOVED***);

  jsTokens.lastIndex = 0
  var parts = src.match(jsTokens);

  for (var i = 0; i < parts.length; i++) ***REMOVED***
    if (parts[i    ] === 'process' &&
        parts[i + 1] === '.' &&
        parts[i + 2] === 'env' &&
        parts[i + 3] === '.') ***REMOVED***
      var prevCodeToken = getAdjacentCodeToken(-1, parts, i);
      var nextCodeToken = getAdjacentCodeToken(1, parts, i + 4);
      var replacement = getReplacementString(envs, parts[i + 4], purge);
      if (prevCodeToken !== '.' &&
          nextCodeToken !== '.' &&
          nextCodeToken !== '=' &&
          typeof replacement === 'string') ***REMOVED***
        out.push(replacement);
        i += 4;
        continue;
      ***REMOVED***
    ***REMOVED***
    out.push(parts[i]);
  ***REMOVED***

  return out.join('');
***REMOVED***

function getAdjacentCodeToken(dir, parts, i) ***REMOVED***
  while (true) ***REMOVED***
    var part = parts[i += dir];
    if (!spaceOrCommentRe.test(part)) ***REMOVED***
      return part;
    ***REMOVED***
  ***REMOVED***
***REMOVED***

function getReplacementString(envs, name, purge) ***REMOVED***
  for (var j = 0; j < envs.length; j++) ***REMOVED***
    var env = envs[j];
    if (typeof env[name] !== 'undefined') ***REMOVED***
      return JSON.stringify(env[name]);
    ***REMOVED***
  ***REMOVED***
  if (purge) ***REMOVED***
    return 'undefined';
  ***REMOVED***
***REMOVED***

module.exports = replace;
