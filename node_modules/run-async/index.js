'use strict';

var isPromise = require('is-promise');

/**
 * Return a function that will run a function asynchronously or synchronously
 *
 * example:
 * runAsync(wrappedFunction, callback)(...args);
 *
 * @param   ***REMOVED***Function***REMOVED*** func  Function to run
 * @param   ***REMOVED***Function***REMOVED*** cb    Callback function passed the `func` returned value
 * @return  ***REMOVED***Function(arguments)***REMOVED*** Arguments to pass to `func`. This function will in turn
 *                                return a Promise (Node >= 0.12) or call the callbacks.
 */

var runAsync = module.exports = function (func, cb) ***REMOVED***
  cb = cb || function () ***REMOVED******REMOVED***;

  return function () ***REMOVED***
    var async = false;
    var args = arguments;

    var promise = new Promise(function (resolve, reject) ***REMOVED***
      var answer = func.apply(***REMOVED***
        async: function () ***REMOVED***
          async = true;
          return function (err, value) ***REMOVED***
            if (err) ***REMOVED***
              reject(err);
            ***REMOVED*** else ***REMOVED***
              resolve(value);
            ***REMOVED***
          ***REMOVED***;
        ***REMOVED***
      ***REMOVED***, Array.prototype.slice.call(args));

      if (!async) ***REMOVED***
        if (isPromise(answer)) ***REMOVED***
          answer.then(resolve, reject);
        ***REMOVED*** else ***REMOVED***
          resolve(answer);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***);

    promise.then(cb.bind(null, null), cb);

    return promise;
  ***REMOVED***
***REMOVED***;

runAsync.cb = function (func, cb) ***REMOVED***
  return runAsync(function () ***REMOVED***
    var args = Array.prototype.slice.call(arguments);
    if (args.length === func.length - 1) ***REMOVED***
      args.push(this.async());
    ***REMOVED***
    return func.apply(this, args);
  ***REMOVED***, cb);
***REMOVED***;
