'use strict';
module.exports = function generate_uniqueItems(it, $keyword, $ruleType) ***REMOVED***
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) ***REMOVED***
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  ***REMOVED*** else ***REMOVED***
    $schemaValue = $schema;
  ***REMOVED***
  if (($schema || $isData) && it.opts.uniqueItems !== false) ***REMOVED***
    if ($isData) ***REMOVED***
      out += ' var ' + ($valid) + '; if (' + ($schemaValue) + ' === false || ' + ($schemaValue) + ' === undefined) ' + ($valid) + ' = true; else if (typeof ' + ($schemaValue) + ' != \'boolean\') ' + ($valid) + ' = false; else ***REMOVED*** ';
    ***REMOVED***
    out += ' var i = ' + ($data) + '.length , ' + ($valid) + ' = true , j; if (i > 1) ***REMOVED*** ';
    var $itemType = it.schema.items && it.schema.items.type,
      $typeIsArray = Array.isArray($itemType);
    if (!$itemType || $itemType == 'object' || $itemType == 'array' || ($typeIsArray && ($itemType.indexOf('object') >= 0 || $itemType.indexOf('array') >= 0))) ***REMOVED***
      out += ' outer: for (;i--;) ***REMOVED*** for (j = i; j--;) ***REMOVED*** if (equal(' + ($data) + '[i], ' + ($data) + '[j])) ***REMOVED*** ' + ($valid) + ' = false; break outer; ***REMOVED*** ***REMOVED*** ***REMOVED*** ';
    ***REMOVED*** else ***REMOVED***
      out += ' var itemIndices = ***REMOVED******REMOVED***, item; for (;i--;) ***REMOVED*** var item = ' + ($data) + '[i]; ';
      var $method = 'checkDataType' + ($typeIsArray ? 's' : '');
      out += ' if (' + (it.util[$method]($itemType, 'item', true)) + ') continue; ';
      if ($typeIsArray) ***REMOVED***
        out += ' if (typeof item == \'string\') item = \'"\' + item; ';
      ***REMOVED***
      out += ' if (typeof itemIndices[item] == \'number\') ***REMOVED*** ' + ($valid) + ' = false; j = itemIndices[item]; break; ***REMOVED*** itemIndices[item] = i; ***REMOVED*** ';
    ***REMOVED***
    out += ' ***REMOVED*** ';
    if ($isData) ***REMOVED***
      out += '  ***REMOVED***  ';
    ***REMOVED***
    out += ' if (!' + ($valid) + ') ***REMOVED***   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) ***REMOVED***
      out += ' ***REMOVED*** keyword: \'' + ('uniqueItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: ***REMOVED*** i: i, j: j ***REMOVED*** ';
      if (it.opts.messages !== false) ***REMOVED***
        out += ' , message: \'should NOT have duplicate items (items ## \' + j + \' and \' + i + \' are identical)\' ';
      ***REMOVED***
      if (it.opts.verbose) ***REMOVED***
        out += ' , schema:  ';
        if ($isData) ***REMOVED***
          out += 'validate.schema' + ($schemaPath);
        ***REMOVED*** else ***REMOVED***
          out += '' + ($schema);
        ***REMOVED***
        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      ***REMOVED***
      out += ' ***REMOVED*** ';
    ***REMOVED*** else ***REMOVED***
      out += ' ***REMOVED******REMOVED*** ';
    ***REMOVED***
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) ***REMOVED***
      /* istanbul ignore if */
      if (it.async) ***REMOVED***
        out += ' throw new ValidationError([' + (__err) + ']); ';
      ***REMOVED*** else ***REMOVED***
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    ***REMOVED***
    out += ' ***REMOVED*** ';
    if ($breakOnError) ***REMOVED***
      out += ' else ***REMOVED*** ';
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
    if ($breakOnError) ***REMOVED***
      out += ' if (true) ***REMOVED*** ';
    ***REMOVED***
  ***REMOVED***
  return out;
***REMOVED***
