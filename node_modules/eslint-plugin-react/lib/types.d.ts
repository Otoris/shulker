import eslint from 'eslint';
import estree from 'estree';

declare global ***REMOVED***
  interface ASTNode extends estree.BaseNode ***REMOVED***
    [_: string]: any; // TODO: fixme
  ***REMOVED***
  type Scope = eslint.Scope.Scope;
  type Token = eslint.AST.Token;
  type Fixer = eslint.Rule.RuleFixer;
  type JSXAttribute = ASTNode;
  type JSXSpreadAttribute = ASTNode;

  interface Context extends eslint.SourceCode ***REMOVED***
    getFirstTokens(node: estree.Node | ASTNode, options?: eslint.SourceCode.CursorWithCountOptions): eslint.AST.Token[];
  ***REMOVED***

  type TypeDeclarationBuilder = (annotation: ASTNode, parentName: string, seen: Set<typeof annotation>) => object;

  type TypeDeclarationBuilders = ***REMOVED***
    [k in string]: TypeDeclarationBuilder;
  ***REMOVED***;

  type UnionTypeDefinitionChildren = unknown[];
  type UnionTypeDefinition = ***REMOVED***
    type: 'union' | 'shape';
    children: UnionTypeDefinitionChildren | true;
  ***REMOVED***;
***REMOVED***
