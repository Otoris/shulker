/**
 * @fileoverview Common defaultProps detection functionality.
 */

'use strict';

const fromEntries = require('object.fromentries');
const astUtil = require('./ast');
const propsUtil = require('./props');
const variableUtil = require('./variable');
const propWrapperUtil = require('../util/propWrapper');

const QUOTES_REGEX = /^["']|["']$/g;

module.exports = function defaultPropsInstructions(context, components, utils) ***REMOVED***
  const sourceCode = context.getSourceCode();

  /**
   * Try to resolve the node passed in to a variable in the current scope. If the node passed in is not
   * an Identifier, then the node is simply returned.
   * @param   ***REMOVED***ASTNode***REMOVED*** node The node to resolve.
   * @returns ***REMOVED***ASTNode|null***REMOVED*** Return null if the value could not be resolved, ASTNode otherwise.
   */
  function resolveNodeValue(node) ***REMOVED***
    if (node.type === 'Identifier') ***REMOVED***
      return variableUtil.findVariableByName(context, node.name);
    ***REMOVED***
    if (
      node.type === 'CallExpression' &&
      propWrapperUtil.isPropWrapperFunction(context, node.callee.name) &&
      node.arguments && node.arguments[0]
    ) ***REMOVED***
      return resolveNodeValue(node.arguments[0]);
    ***REMOVED***
    return node;
  ***REMOVED***

  /**
   * Extracts a DefaultProp from an ObjectExpression node.
   * @param   ***REMOVED***ASTNode***REMOVED*** objectExpression ObjectExpression node.
   * @returns ***REMOVED***Object|string***REMOVED***            Object representation of a defaultProp, to be consumed by
   *                                     `addDefaultPropsToComponent`, or string "unresolved", if the defaultProps
   *                                     from this ObjectExpression can't be resolved.
   */
  function getDefaultPropsFromObjectExpression(objectExpression) ***REMOVED***
    const hasSpread = objectExpression.properties.find(property => property.type === 'ExperimentalSpreadProperty' || property.type === 'SpreadElement');

    if (hasSpread) ***REMOVED***
      return 'unresolved';
    ***REMOVED***

    return objectExpression.properties.map(defaultProp => (***REMOVED***
      name: sourceCode.getText(defaultProp.key).replace(QUOTES_REGEX, ''),
      node: defaultProp
    ***REMOVED***));
  ***REMOVED***

  /**
   * Marks a component's DefaultProps declaration as "unresolved". A component's DefaultProps is
   * marked as "unresolved" if we cannot safely infer the values of its defaultProps declarations
   * without risking false negatives.
   * @param   ***REMOVED***Object***REMOVED*** component The component to mark.
   * @returns ***REMOVED***void***REMOVED***
   */
  function markDefaultPropsAsUnresolved(component) ***REMOVED***
    components.set(component.node, ***REMOVED***
      defaultProps: 'unresolved'
    ***REMOVED***);
  ***REMOVED***

  /**
   * Adds defaultProps to the component passed in.
   * @param   ***REMOVED***ASTNode***REMOVED***         component    The component to add the defaultProps to.
   * @param   ***REMOVED***Object[]|'unresolved'***REMOVED*** defaultProps defaultProps to add to the component or the string "unresolved"
   *                                         if this component has defaultProps that can't be resolved.
   * @returns ***REMOVED***void***REMOVED***
   */
  function addDefaultPropsToComponent(component, defaultProps) ***REMOVED***
    // Early return if this component's defaultProps is already marked as "unresolved".
    if (component.defaultProps === 'unresolved') ***REMOVED***
      return;
    ***REMOVED***

    if (defaultProps === 'unresolved') ***REMOVED***
      markDefaultPropsAsUnresolved(component);
      return;
    ***REMOVED***

    const defaults = component.defaultProps || ***REMOVED******REMOVED***;
    const newDefaultProps = Object.assign(
      ***REMOVED******REMOVED***,
      defaults,
      fromEntries(defaultProps.map(prop => [prop.name, prop]))
    );

    components.set(component.node, ***REMOVED***
      defaultProps: newDefaultProps
    ***REMOVED***);
  ***REMOVED***

  return ***REMOVED***
    MemberExpression(node) ***REMOVED***
      const isDefaultProp = propsUtil.isDefaultPropsDeclaration(node);

      if (!isDefaultProp) ***REMOVED***
        return;
      ***REMOVED***

      // find component this defaultProps belongs to
      const component = utils.getRelatedComponent(node);
      if (!component) ***REMOVED***
        return;
      ***REMOVED***

      // e.g.:
      // MyComponent.propTypes = ***REMOVED***
      //   foo: React.PropTypes.string.isRequired,
      //   bar: React.PropTypes.string
      // ***REMOVED***;
      //
      // or:
      //
      // MyComponent.propTypes = myPropTypes;
      if (node.parent.type === 'AssignmentExpression') ***REMOVED***
        const expression = resolveNodeValue(node.parent.right);
        if (!expression || expression.type !== 'ObjectExpression') ***REMOVED***
          // If a value can't be found, we mark the defaultProps declaration as "unresolved", because
          // we should ignore this component and not report any errors for it, to avoid false-positives
          // with e.g. external defaultProps declarations.
          if (isDefaultProp) ***REMOVED***
            markDefaultPropsAsUnresolved(component);
          ***REMOVED***

          return;
        ***REMOVED***

        addDefaultPropsToComponent(component, getDefaultPropsFromObjectExpression(expression));

        return;
      ***REMOVED***

      // e.g.:
      // MyComponent.propTypes.baz = React.PropTypes.string;
      if (node.parent.type === 'MemberExpression' && node.parent.parent &&
        node.parent.parent.type === 'AssignmentExpression') ***REMOVED***
        addDefaultPropsToComponent(component, [***REMOVED***
          name: node.parent.property.name,
          node: node.parent.parent
        ***REMOVED***]);
      ***REMOVED***
    ***REMOVED***,

    // e.g.:
    // class Hello extends React.Component ***REMOVED***
    //   static get defaultProps() ***REMOVED***
    //     return ***REMOVED***
    //       name: 'Dean'
    //     ***REMOVED***;
    //   ***REMOVED***
    //   render() ***REMOVED***
    //     return <div>Hello ***REMOVED***this.props.name***REMOVED***</div>;
    //   ***REMOVED***
    // ***REMOVED***
    MethodDefinition(node) ***REMOVED***
      if (!node.static || node.kind !== 'get') ***REMOVED***
        return;
      ***REMOVED***

      if (!propsUtil.isDefaultPropsDeclaration(node)) ***REMOVED***
        return;
      ***REMOVED***

      // find component this propTypes/defaultProps belongs to
      const component = components.get(utils.getParentES6Component());
      if (!component) ***REMOVED***
        return;
      ***REMOVED***

      const returnStatement = utils.findReturnStatement(node);
      if (!returnStatement) ***REMOVED***
        return;
      ***REMOVED***

      const expression = resolveNodeValue(returnStatement.argument);
      if (!expression || expression.type !== 'ObjectExpression') ***REMOVED***
        return;
      ***REMOVED***

      addDefaultPropsToComponent(component, getDefaultPropsFromObjectExpression(expression));
    ***REMOVED***,

    // e.g.:
    // class Greeting extends React.Component ***REMOVED***
    //   render() ***REMOVED***
    //     return (
    //       <h1>Hello, ***REMOVED***this.props.foo***REMOVED*** ***REMOVED***this.props.bar***REMOVED***</h1>
    //     );
    //   ***REMOVED***
    //   static defaultProps = ***REMOVED***
    //     foo: 'bar',
    //     bar: 'baz'
    //   ***REMOVED***;
    // ***REMOVED***
    ClassProperty(node) ***REMOVED***
      if (!(node.static && node.value)) ***REMOVED***
        return;
      ***REMOVED***

      const propName = astUtil.getPropertyName(node);
      const isDefaultProp = propName === 'defaultProps' || propName === 'getDefaultProps';

      if (!isDefaultProp) ***REMOVED***
        return;
      ***REMOVED***

      // find component this propTypes/defaultProps belongs to
      const component = components.get(utils.getParentES6Component());
      if (!component) ***REMOVED***
        return;
      ***REMOVED***

      const expression = resolveNodeValue(node.value);
      if (!expression || expression.type !== 'ObjectExpression') ***REMOVED***
        return;
      ***REMOVED***

      addDefaultPropsToComponent(component, getDefaultPropsFromObjectExpression(expression));
    ***REMOVED***,

    // e.g.:
    // React.createClass(***REMOVED***
    //   render: function() ***REMOVED***
    //     return <div>***REMOVED***this.props.foo***REMOVED***</div>;
    //   ***REMOVED***,
    //   getDefaultProps: function() ***REMOVED***
    //     return ***REMOVED***
    //       foo: 'default'
    //     ***REMOVED***;
    //   ***REMOVED***
    // ***REMOVED***);
    ObjectExpression(node) ***REMOVED***
      // find component this propTypes/defaultProps belongs to
      const component = utils.isES5Component(node) && components.get(node);
      if (!component) ***REMOVED***
        return;
      ***REMOVED***

      // Search for the proptypes declaration
      node.properties.forEach((property) => ***REMOVED***
        if (property.type === 'ExperimentalSpreadProperty' || property.type === 'SpreadElement') ***REMOVED***
          return;
        ***REMOVED***

        const isDefaultProp = propsUtil.isDefaultPropsDeclaration(property);

        if (isDefaultProp && property.value.type === 'FunctionExpression') ***REMOVED***
          const returnStatement = utils.findReturnStatement(property);
          if (!returnStatement || returnStatement.argument.type !== 'ObjectExpression') ***REMOVED***
            return;
          ***REMOVED***

          addDefaultPropsToComponent(component, getDefaultPropsFromObjectExpression(returnStatement.argument));
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***
  ***REMOVED***;
***REMOVED***;
