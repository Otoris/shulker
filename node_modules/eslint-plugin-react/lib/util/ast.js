/**
 * @fileoverview Utility functions for AST
 */

'use strict';

/**
 * Find a return statment in the current node
 *
 * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked
 */
function findReturnStatement(node) ***REMOVED***
  if (
    (!node.value || !node.value.body || !node.value.body.body) &&
    (!node.body || !node.body.body)
  ) ***REMOVED***
    return false;
  ***REMOVED***

  const bodyNodes = (node.value ? node.value.body.body : node.body.body);

  return (function loopNodes(nodes) ***REMOVED***
    let i = nodes.length - 1;
    for (; i >= 0; i--) ***REMOVED***
      if (nodes[i].type === 'ReturnStatement') ***REMOVED***
        return nodes[i];
      ***REMOVED***
      if (nodes[i].type === 'SwitchStatement') ***REMOVED***
        let j = nodes[i].cases.length - 1;
        for (; j >= 0; j--) ***REMOVED***
          return loopNodes(nodes[i].cases[j].consequent);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
    return false;
  ***REMOVED***(bodyNodes));
***REMOVED***

/**
 * Get node with property's name
 * @param ***REMOVED***Object***REMOVED*** node - Property.
 * @returns ***REMOVED***Object***REMOVED*** Property name node.
 */
function getPropertyNameNode(node) ***REMOVED***
  if (node.key || ['MethodDefinition', 'Property'].indexOf(node.type) !== -1) ***REMOVED***
    return node.key;
  ***REMOVED***
  if (node.type === 'MemberExpression') ***REMOVED***
    return node.property;
  ***REMOVED***
  return null;
***REMOVED***

/**
 * Get properties name
 * @param ***REMOVED***Object***REMOVED*** node - Property.
 * @returns ***REMOVED***String***REMOVED*** Property name.
 */
function getPropertyName(node) ***REMOVED***
  const nameNode = getPropertyNameNode(node);
  return nameNode ? nameNode.name : '';
***REMOVED***

/**
 * Get properties for a given AST node
 * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked.
 * @returns ***REMOVED***Array***REMOVED*** Properties array.
 */
function getComponentProperties(node) ***REMOVED***
  switch (node.type) ***REMOVED***
    case 'ClassDeclaration':
    case 'ClassExpression':
      return node.body.body;
    case 'ObjectExpression':
      return node.properties;
    default:
      return [];
  ***REMOVED***
***REMOVED***


/**
 * Gets the first node in a line from the initial node, excluding whitespace.
 * @param ***REMOVED***Object***REMOVED*** context The node to check
 * @param ***REMOVED***ASTNode***REMOVED*** node The node to check
 * @return ***REMOVED***ASTNode***REMOVED*** the first node in the line
 */
function getFirstNodeInLine(context, node) ***REMOVED***
  const sourceCode = context.getSourceCode();
  let token = node;
  let lines;
  do ***REMOVED***
    token = sourceCode.getTokenBefore(token);
    lines = token.type === 'JSXText' ?
      token.value.split('\n') :
      null;
  ***REMOVED*** while (
    token.type === 'JSXText' &&
        /^\s*$/.test(lines[lines.length - 1])
  );
  return token;
***REMOVED***

/**
 * Checks if the node is the first in its line, excluding whitespace.
 * @param ***REMOVED***Object***REMOVED*** context The node to check
 * @param ***REMOVED***ASTNode***REMOVED*** node The node to check
 * @return ***REMOVED***Boolean***REMOVED*** true if it's the first node in its line
 */
function isNodeFirstInLine(context, node) ***REMOVED***
  const token = getFirstNodeInLine(context, node);
  const startLine = node.loc.start.line;
  const endLine = token ? token.loc.end.line : -1;
  return startLine !== endLine;
***REMOVED***

/**
 * Checks if the node is a function or arrow function expression.
 * @param ***REMOVED***ASTNode***REMOVED*** node The node to check
 * @return ***REMOVED***Boolean***REMOVED*** true if it's a function-like expression
 */
function isFunctionLikeExpression(node) ***REMOVED***
  return node.type === 'FunctionExpression' || node.type === 'ArrowFunctionExpression';
***REMOVED***

/**
 * Checks if the node is a function.
 * @param ***REMOVED***ASTNode***REMOVED*** node The node to check
 * @return ***REMOVED***Boolean***REMOVED*** true if it's a function
 */
function isFunction(node) ***REMOVED***
  return node.type === 'FunctionExpression' || node.type === 'FunctionDeclaration';
***REMOVED***

/**
 * Checks if the node is an arrow function.
 * @param ***REMOVED***ASTNode***REMOVED*** node The node to check
 * @return ***REMOVED***Boolean***REMOVED*** true if it's an arrow function
 */
function isArrowFunction(node) ***REMOVED***
  return node.type === 'ArrowFunctionExpression';
***REMOVED***

/**
 * Checks if the node is a class.
 * @param ***REMOVED***ASTNode***REMOVED*** node The node to check
 * @return ***REMOVED***Boolean***REMOVED*** true if it's a class
 */
function isClass(node) ***REMOVED***
  return node.type === 'ClassDeclaration' || node.type === 'ClassExpression';
***REMOVED***

/**
 * Removes quotes from around an identifier.
 * @param ***REMOVED***string***REMOVED*** string the identifier to strip
 */
function stripQuotes(string) ***REMOVED***
  return string.replace(/^'|'$/g, '');
***REMOVED***

/**
 * Retrieve the name of a key node
 * @param ***REMOVED***Context***REMOVED*** context The AST node with the key.
 * @param ***REMOVED***ASTNode***REMOVED*** node The AST node with the key.
 * @return ***REMOVED***string***REMOVED*** the name of the key
 */
function getKeyValue(context, node) ***REMOVED***
  if (node.type === 'ObjectTypeProperty') ***REMOVED***
    const tokens = context.getFirstTokens(node, 2);
    return (tokens[0].value === '+' || tokens[0].value === '-' ?
      tokens[1].value :
      stripQuotes(tokens[0].value)
    );
  ***REMOVED***
  const key = node.key || node.argument;
  return key.type === 'Identifier' ? key.name : key.value;
***REMOVED***

/**
 * Checks if a node is being assigned a value: props.bar = 'bar'
 * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked.
 * @returns ***REMOVED***Boolean***REMOVED***
 */
function isAssignmentLHS(node) ***REMOVED***
  return (
    node.parent &&
    node.parent.type === 'AssignmentExpression' &&
    node.parent.left === node
  );
***REMOVED***

module.exports = ***REMOVED***
  findReturnStatement,
  getFirstNodeInLine,
  getPropertyName,
  getPropertyNameNode,
  getComponentProperties,
  getKeyValue,
  isArrowFunction,
  isAssignmentLHS,
  isClass,
  isFunction,
  isFunctionLikeExpression,
  isNodeFirstInLine
***REMOVED***;
