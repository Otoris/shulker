/**
 * @fileoverview Utility functions for React pragma configuration
 * @author Yannick Croissant
 */

'use strict';

const JSX_ANNOTATION_REGEX = /^\*\s*@jsx\s+([^\s]+)/;
// Does not check for reserved keywords or unicode characters
const JS_IDENTIFIER_REGEX = /^[_$a-zA-Z][_$a-zA-Z0-9]*$/;


function getCreateClassFromContext(context) ***REMOVED***
  let pragma = 'createReactClass';
  // .eslintrc shared settings (http://eslint.org/docs/user-guide/configuring#adding-shared-settings)
  if (context.settings.react && context.settings.react.createClass) ***REMOVED***
    pragma = context.settings.react.createClass;
  ***REMOVED***
  if (!JS_IDENTIFIER_REGEX.test(pragma)) ***REMOVED***
    throw new Error(`createClass pragma $***REMOVED***pragma***REMOVED*** is not a valid function name`);
  ***REMOVED***
  return pragma;
***REMOVED***

function getFragmentFromContext(context) ***REMOVED***
  let pragma = 'Fragment';
  // .eslintrc shared settings (http://eslint.org/docs/user-guide/configuring#adding-shared-settings)
  if (context.settings.react && context.settings.react.fragment) ***REMOVED***
    pragma = context.settings.react.fragment;
  ***REMOVED***
  if (!JS_IDENTIFIER_REGEX.test(pragma)) ***REMOVED***
    throw new Error(`Fragment pragma $***REMOVED***pragma***REMOVED*** is not a valid identifier`);
  ***REMOVED***
  return pragma;
***REMOVED***

function getFromContext(context) ***REMOVED***
  let pragma = 'React';

  const sourceCode = context.getSourceCode();
  const pragmaNode = sourceCode.getAllComments().find(node => JSX_ANNOTATION_REGEX.test(node.value));

  if (pragmaNode) ***REMOVED***
    const matches = JSX_ANNOTATION_REGEX.exec(pragmaNode.value);
    pragma = matches[1].split('.')[0];
  // .eslintrc shared settings (http://eslint.org/docs/user-guide/configuring#adding-shared-settings)
  ***REMOVED*** else if (context.settings.react && context.settings.react.pragma) ***REMOVED***
    pragma = context.settings.react.pragma;
  ***REMOVED***

  if (!JS_IDENTIFIER_REGEX.test(pragma)) ***REMOVED***
    throw new Error(`React pragma $***REMOVED***pragma***REMOVED*** is not a valid identifier`);
  ***REMOVED***
  return pragma;
***REMOVED***

module.exports = ***REMOVED***
  getCreateClassFromContext,
  getFragmentFromContext,
  getFromContext
***REMOVED***;
