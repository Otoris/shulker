/**
 * @fileoverview Utility functions for React and Flow version configuration
 * @author Yannick Croissant
 */

'use strict';

const resolve = require('resolve');
const error = require('./error');

let warnedForMissingVersion = false;

function resetWarningFlag() ***REMOVED***
  warnedForMissingVersion = false;
***REMOVED***

function detectReactVersion() ***REMOVED***
  try ***REMOVED***
    const reactPath = resolve.sync('react', ***REMOVED***basedir: process.cwd()***REMOVED***);
    const react = require(reactPath); // eslint-disable-line import/no-dynamic-require
    return react.version;
  ***REMOVED*** catch (e) ***REMOVED***
    if (e.code === 'MODULE_NOT_FOUND') ***REMOVED***
      if (!warnedForMissingVersion) ***REMOVED***
        error('Warning: React version was set to "detect" in eslint-plugin-react settings, ' +
        'but the "react" package is not installed. Assuming latest React version for linting.');
        warnedForMissingVersion = true;
      ***REMOVED***
      return '999.999.999';
    ***REMOVED***
    throw e;
  ***REMOVED***
***REMOVED***

function getReactVersionFromContext(context) ***REMOVED***
  let confVer = '999.999.999';
  // .eslintrc shared settings (http://eslint.org/docs/user-guide/configuring#adding-shared-settings)
  if (context.settings.react && context.settings.react.version) ***REMOVED***
    let settingsVersion = context.settings.react.version;
    if (settingsVersion === 'detect') ***REMOVED***
      settingsVersion = detectReactVersion();
    ***REMOVED***
    if (typeof settingsVersion !== 'string') ***REMOVED***
      error('Warning: React version specified in eslint-plugin-react-settings must be a string; ' +
        `got “$***REMOVED***typeof settingsVersion***REMOVED***”`);
    ***REMOVED***
    confVer = String(settingsVersion);
  ***REMOVED*** else if (!warnedForMissingVersion) ***REMOVED***
    error('Warning: React version not specified in eslint-plugin-react settings. ' +
      'See https://github.com/yannickcr/eslint-plugin-react#configuration .');
    warnedForMissingVersion = true;
  ***REMOVED***
  confVer = /^[0-9]+\.[0-9]+$/.test(confVer) ? `$***REMOVED***confVer***REMOVED***.0` : confVer;
  return confVer.split('.').map(part => Number(part));
***REMOVED***

function detectFlowVersion() ***REMOVED***
  try ***REMOVED***
    const flowPackageJsonPath = resolve.sync('flow-bin/package.json', ***REMOVED***basedir: process.cwd()***REMOVED***);
    const flowPackageJson = require(flowPackageJsonPath); // eslint-disable-line import/no-dynamic-require
    return flowPackageJson.version;
  ***REMOVED*** catch (e) ***REMOVED***
    if (e.code === 'MODULE_NOT_FOUND') ***REMOVED***
      error('Warning: Flow version was set to "detect" in eslint-plugin-react settings, ' +
        'but the "flow-bin" package is not installed. Assuming latest Flow version for linting.');
      return '999.999.999';
    ***REMOVED***
    throw e;
  ***REMOVED***
***REMOVED***

function getFlowVersionFromContext(context) ***REMOVED***
  let confVer = '999.999.999';
  // .eslintrc shared settings (http://eslint.org/docs/user-guide/configuring#adding-shared-settings)
  if (context.settings.react && context.settings.react.flowVersion) ***REMOVED***
    let flowVersion = context.settings.react.flowVersion;
    if (flowVersion === 'detect') ***REMOVED***
      flowVersion = detectFlowVersion();
    ***REMOVED***
    if (typeof flowVersion !== 'string') ***REMOVED***
      error('Warning: Flow version specified in eslint-plugin-react-settings must be a string; ' +
        `got “$***REMOVED***typeof flowVersion***REMOVED***”`);
    ***REMOVED***
    confVer = String(flowVersion);
  ***REMOVED*** else ***REMOVED***
    throw 'Could not retrieve flowVersion from settings'; // eslint-disable-line no-throw-literal
  ***REMOVED***
  confVer = /^[0-9]+\.[0-9]+$/.test(confVer) ? `$***REMOVED***confVer***REMOVED***.0` : confVer;
  return confVer.split('.').map(part => Number(part));
***REMOVED***

function normalizeParts(parts) ***REMOVED***
  return Array.from(***REMOVED***length: 3***REMOVED***, (_, i) => (parts[i] || 0));
***REMOVED***

function test(context, methodVer, confVer) ***REMOVED***
  const methodVers = normalizeParts(String(methodVer || '').split('.').map(part => Number(part)));
  const confVers = normalizeParts(confVer);
  const higherMajor = methodVers[0] < confVers[0];
  const higherMinor = methodVers[0] === confVers[0] && methodVers[1] < confVers[1];
  const higherOrEqualPatch = methodVers[0] === confVers[0] &&
    methodVers[1] === confVers[1] &&
    methodVers[2] <= confVers[2];

  return higherMajor || higherMinor || higherOrEqualPatch;
***REMOVED***

function testReactVersion(context, methodVer) ***REMOVED***
  return test(context, methodVer, getReactVersionFromContext(context));
***REMOVED***

function testFlowVersion(context, methodVer) ***REMOVED***
  return test(context, methodVer, getFlowVersionFromContext(context));
***REMOVED***

module.exports = ***REMOVED***
  testReactVersion,
  testFlowVersion,
  resetWarningFlag
***REMOVED***;
