/**
 * @fileoverview Utility functions for React components detection
 * @author Yannick Croissant
 */

'use strict';

/**
 * Search a particular variable in a list
 * @param ***REMOVED***Array***REMOVED*** variables The variables list.
 * @param ***REMOVED***string***REMOVED*** name The name of the variable to search.
 * @returns ***REMOVED***Boolean***REMOVED*** True if the variable was found, false if not.
 */
function findVariable(variables, name) ***REMOVED***
  return variables.some(variable => variable.name === name);
***REMOVED***

/**
 * Find and return a particular variable in a list
 * @param ***REMOVED***Array***REMOVED*** variables The variables list.
 * @param ***REMOVED***string***REMOVED*** name The name of the variable to search.
 * @returns ***REMOVED***Object***REMOVED*** Variable if the variable was found, null if not.
 */
function getVariable(variables, name) ***REMOVED***
  return variables.find(variable => variable.name === name);
***REMOVED***

/**
 * List all variable in a given scope
 *
 * Contain a patch for babel-eslint to avoid https://github.com/babel/babel-eslint/issues/21
 *
 * @param ***REMOVED***Object***REMOVED*** context The current rule context.
 * @returns ***REMOVED***Array***REMOVED*** The variables list
 */
function variablesInScope(context) ***REMOVED***
  let scope = context.getScope();
  let variables = scope.variables;

  while (scope.type !== 'global') ***REMOVED***
    scope = scope.upper;
    variables = scope.variables.concat(variables);
  ***REMOVED***
  if (scope.childScopes.length) ***REMOVED***
    variables = scope.childScopes[0].variables.concat(variables);
    if (scope.childScopes[0].childScopes.length) ***REMOVED***
      variables = scope.childScopes[0].childScopes[0].variables.concat(variables);
    ***REMOVED***
  ***REMOVED***
  variables.reverse();

  return variables;
***REMOVED***

/**
 * Find a variable by name in the current scope.
 * @param ***REMOVED***Object***REMOVED*** context The current rule context.
 * @param  ***REMOVED***string***REMOVED*** name Name of the variable to look for.
 * @returns ***REMOVED***ASTNode|null***REMOVED*** Return null if the variable could not be found, ASTNode otherwise.
 */
function findVariableByName(context, name) ***REMOVED***
  const variable = getVariable(variablesInScope(context), name);

  if (!variable || !variable.defs[0] || !variable.defs[0].node) ***REMOVED***
    return null;
  ***REMOVED***

  if (variable.defs[0].node.type === 'TypeAlias') ***REMOVED***
    return variable.defs[0].node.right;
  ***REMOVED***

  return variable.defs[0].node.init;
***REMOVED***

module.exports = ***REMOVED***
  findVariable,
  findVariableByName,
  getVariable,
  variablesInScope
***REMOVED***;
