/**
 * @fileoverview Prevent usage of setState in lifecycle methods
 * @author Yannick Croissant
 */

'use strict';

const docsUrl = require('./docsUrl');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

function mapTitle(methodName) ***REMOVED***
  const map = ***REMOVED***
    componentDidMount: 'did-mount',
    componentDidUpdate: 'did-update',
    componentWillUpdate: 'will-update'
  ***REMOVED***;
  const title = map[methodName];
  if (!title) ***REMOVED***
    throw Error(`No docsUrl for '$***REMOVED***methodName***REMOVED***'`);
  ***REMOVED***
  return `no-$***REMOVED***title***REMOVED***-set-state`;
***REMOVED***

function makeNoMethodSetStateRule(methodName, shouldCheckUnsafeCb) ***REMOVED***
  return ***REMOVED***
    meta: ***REMOVED***
      docs: ***REMOVED***
        description: `Prevent usage of setState in $***REMOVED***methodName***REMOVED***`,
        category: 'Best Practices',
        recommended: false,
        url: docsUrl(mapTitle(methodName))
      ***REMOVED***,

      schema: [***REMOVED***
        enum: ['disallow-in-func']
      ***REMOVED***]
    ***REMOVED***,

    create(context) ***REMOVED***
      const mode = context.options[0] || 'allow-in-func';

      function nameMatches(name) ***REMOVED***
        if (name === methodName) ***REMOVED***
          return true;
        ***REMOVED***

        if (typeof shouldCheckUnsafeCb === 'function' && shouldCheckUnsafeCb(context)) ***REMOVED***
          return name === `UNSAFE_$***REMOVED***methodName***REMOVED***`;
        ***REMOVED***

        return false;
      ***REMOVED***

      // --------------------------------------------------------------------------
      // Public
      // --------------------------------------------------------------------------

      return ***REMOVED***

        CallExpression(node) ***REMOVED***
          const callee = node.callee;
          if (
            callee.type !== 'MemberExpression' ||
            callee.object.type !== 'ThisExpression' ||
            callee.property.name !== 'setState'
          ) ***REMOVED***
            return;
          ***REMOVED***
          const ancestors = context.getAncestors(callee).reverse();
          let depth = 0;
          ancestors.some((ancestor) => ***REMOVED***
            if (/Function(Expression|Declaration)$/.test(ancestor.type)) ***REMOVED***
              depth++;
            ***REMOVED***
            if (
              (ancestor.type !== 'Property' && ancestor.type !== 'MethodDefinition' && ancestor.type !== 'ClassProperty') ||
              !nameMatches(ancestor.key.name) ||
              (mode !== 'disallow-in-func' && depth > 1)
            ) ***REMOVED***
              return false;
            ***REMOVED***
            context.report(***REMOVED***
              node: callee,
              message: `Do not use setState in $***REMOVED***ancestor.key.name***REMOVED***`
            ***REMOVED***);
            return true;
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***;
    ***REMOVED***
  ***REMOVED***;
***REMOVED***

module.exports = makeNoMethodSetStateRule;
