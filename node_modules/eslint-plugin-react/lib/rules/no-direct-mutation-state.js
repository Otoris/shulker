/**
 * @fileoverview Prevent direct mutation of this.state
 * @author David Petersen
 * @author Nicolas Fernandez <@burabure>
 */

'use strict';

const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Prevent direct mutation of this.state',
      category: 'Possible Errors',
      recommended: true,
      url: docsUrl('no-direct-mutation-state')
    ***REMOVED***
  ***REMOVED***,

  create: Components.detect((context, components, utils) => ***REMOVED***
    /**
     * Checks if the component is valid
     * @param ***REMOVED***Object***REMOVED*** component The component to process
     * @returns ***REMOVED***Boolean***REMOVED*** True if the component is valid, false if not.
     */
    function isValid(component) ***REMOVED***
      return Boolean(component && !component.mutateSetState);
    ***REMOVED***

    /**
     * Reports undeclared proptypes for a given component
     * @param ***REMOVED***Object***REMOVED*** component The component to process
     */
    function reportMutations(component) ***REMOVED***
      let mutation;
      for (let i = 0, j = component.mutations.length; i < j; i++) ***REMOVED***
        mutation = component.mutations[i];
        context.report(***REMOVED***
          node: mutation,
          message: 'Do not mutate state directly. Use setState().'
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***

    /**
     * Walks throughs the MemberExpression to the top-most property.
     * @param ***REMOVED***Object***REMOVED*** node The node to process
     * @returns ***REMOVED***Object***REMOVED*** The outer-most MemberExpression
     */
    function getOuterMemberExpression(node) ***REMOVED***
      while (node.object && node.object.property) ***REMOVED***
        node = node.object;
      ***REMOVED***
      return node;
    ***REMOVED***

    /**
     * Determine if we should currently ignore assignments in this component.
     * @param ***REMOVED***?Object***REMOVED*** component The component to process
     * @returns ***REMOVED***Boolean***REMOVED*** True if we should skip assignment checks.
     */
    function shouldIgnoreComponent(component) ***REMOVED***
      return !component || (component.inConstructor && !component.inCallExpression);
    ***REMOVED***

    // --------------------------------------------------------------------------
    // Public
    // --------------------------------------------------------------------------
    return ***REMOVED***
      MethodDefinition(node) ***REMOVED***
        if (node.kind === 'constructor') ***REMOVED***
          components.set(node, ***REMOVED***
            inConstructor: true
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***,

      CallExpression(node) ***REMOVED***
        components.set(node, ***REMOVED***
          inCallExpression: true
        ***REMOVED***);
      ***REMOVED***,

      AssignmentExpression(node) ***REMOVED***
        const component = components.get(utils.getParentComponent());
        if (shouldIgnoreComponent(component) || !node.left || !node.left.object) ***REMOVED***
          return;
        ***REMOVED***
        const item = getOuterMemberExpression(node.left);
        if (utils.isStateMemberExpression(item)) ***REMOVED***
          const mutations = (component && component.mutations) || [];
          mutations.push(node.left.object);
          components.set(node, ***REMOVED***
            mutateSetState: true,
            mutations
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***,

      UpdateExpression(node) ***REMOVED***
        const component = components.get(utils.getParentComponent());
        if (shouldIgnoreComponent(component) || node.argument.type !== 'MemberExpression') ***REMOVED***
          return;
        ***REMOVED***
        const item = getOuterMemberExpression(node.argument);
        if (utils.isStateMemberExpression(item)) ***REMOVED***
          const mutations = (component && component.mutations) || [];
          mutations.push(item);
          components.set(node, ***REMOVED***
            mutateSetState: true,
            mutations
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***,

      'CallExpression:exit': function (node) ***REMOVED***
        components.set(node, ***REMOVED***
          inCallExpression: false
        ***REMOVED***);
      ***REMOVED***,

      'MethodDefinition:exit': function (node) ***REMOVED***
        if (node.kind === 'constructor') ***REMOVED***
          components.set(node, ***REMOVED***
            inConstructor: false
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***,

      'Program:exit': function () ***REMOVED***
        const list = components.list();

        Object.keys(list).forEach((key) => ***REMOVED***
          if (!isValid(list[key])) ***REMOVED***
            reportMutations(list[key]);
          ***REMOVED***
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***)
***REMOVED***;
