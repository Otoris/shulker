/**
 * @fileoverview HTML special characters should be escaped.
 * @author Patrick Hayes
 */

'use strict';

const docsUrl = require('../util/docsUrl');
const jsxUtil = require('../util/jsx');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

// NOTE: '<' and '***REMOVED***' are also problematic characters, but they do not need
// to be included here because it is a syntax error when these characters are
// included accidentally.
const DEFAULTS = [***REMOVED***
  char: '>',
  alternatives: ['&gt;']
***REMOVED***, ***REMOVED***
  char: '"',
  alternatives: ['&quot;', '&ldquo;', '&#34;', '&rdquo;']
***REMOVED***, ***REMOVED***
  char: '\'',
  alternatives: ['&apos;', '&lsquo;', '&#39;', '&rsquo;']
***REMOVED***, ***REMOVED***
  char: '***REMOVED***',
  alternatives: ['&#125;']
***REMOVED***];

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Detect unescaped HTML entities, which might represent malformed tags',
      category: 'Possible Errors',
      recommended: true,
      url: docsUrl('no-unescaped-entities')
    ***REMOVED***,
    schema: [***REMOVED***
      type: 'object',
      properties: ***REMOVED***
        forbid: ***REMOVED***
          type: 'array',
          items: ***REMOVED***
            oneOf: [***REMOVED***
              type: 'string'
            ***REMOVED***, ***REMOVED***
              type: 'object',
              properties: ***REMOVED***
                char: ***REMOVED***
                  type: 'string'
                ***REMOVED***,
                alternatives: ***REMOVED***
                  type: 'array',
                  uniqueItems: true,
                  items: ***REMOVED***
                    type: 'string'
                  ***REMOVED***
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***]
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***,
      additionalProperties: false
    ***REMOVED***]
  ***REMOVED***,

  create(context) ***REMOVED***
    function reportInvalidEntity(node) ***REMOVED***
      const configuration = context.options[0] || ***REMOVED******REMOVED***;
      const entities = configuration.forbid || DEFAULTS;

      // HTML entites are already escaped in node.value (as well as node.raw),
      // so pull the raw text from context.getSourceCode()
      for (let i = node.loc.start.line; i <= node.loc.end.line; i++) ***REMOVED***
        let rawLine = context.getSourceCode().lines[i - 1];
        let start = 0;
        let end = rawLine.length;
        if (i === node.loc.start.line) ***REMOVED***
          start = node.loc.start.column;
        ***REMOVED***
        if (i === node.loc.end.line) ***REMOVED***
          end = node.loc.end.column;
        ***REMOVED***
        rawLine = rawLine.substring(start, end);
        for (let j = 0; j < entities.length; j++) ***REMOVED***
          for (let index = 0; index < rawLine.length; index++) ***REMOVED***
            const c = rawLine[index];
            if (typeof entities[j] === 'string') ***REMOVED***
              if (c === entities[j]) ***REMOVED***
                context.report(***REMOVED***
                  loc: ***REMOVED***line: i, column: start + index***REMOVED***,
                  message: `HTML entity, \`$***REMOVED***entities[j]***REMOVED***\` , must be escaped.`,
                  node
                ***REMOVED***);
              ***REMOVED***
            ***REMOVED*** else if (c === entities[j].char) ***REMOVED***
              context.report(***REMOVED***
                loc: ***REMOVED***line: i, column: start + index***REMOVED***,
                message: `\`$***REMOVED***entities[j].char***REMOVED***\` can be escaped with $***REMOVED***entities[j].alternatives.map(alt => `\`$***REMOVED***alt***REMOVED***\``).join(', ')***REMOVED***.`,
                node
              ***REMOVED***);
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

    return ***REMOVED***
      'Literal, JSXText': function (node) ***REMOVED***
        if (jsxUtil.isJSX(node.parent)) ***REMOVED***
          reportInvalidEntity(node);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
