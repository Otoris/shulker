/**
 * @fileoverview Prevent void elements (e.g. <img />, <br />) from receiving
 *   children
 * @author Joe Lencioni
 */

'use strict';

const has = require('has');

const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');

// ------------------------------------------------------------------------------
// Helpers
// ------------------------------------------------------------------------------

// Using an object here to avoid array scan. We should switch to Set once
// support is good enough.
const VOID_DOM_ELEMENTS = ***REMOVED***
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  menuitem: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
***REMOVED***;

function isVoidDOMElement(elementName) ***REMOVED***
  return has(VOID_DOM_ELEMENTS, elementName);
***REMOVED***

function errorMessage(elementName) ***REMOVED***
  return `Void DOM element <$***REMOVED***elementName***REMOVED*** /> cannot receive children.`;
***REMOVED***

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Prevent passing of children to void DOM elements (e.g. <br />).',
      category: 'Best Practices',
      recommended: false,
      url: docsUrl('void-dom-elements-no-children')
    ***REMOVED***,
    schema: []
  ***REMOVED***,

  create: Components.detect((context, components, utils) => (***REMOVED***
    JSXElement(node) ***REMOVED***
      const elementName = node.openingElement.name.name;

      if (!isVoidDOMElement(elementName)) ***REMOVED***
        // e.g. <div />
        return;
      ***REMOVED***

      if (node.children.length > 0) ***REMOVED***
        // e.g. <br>Foo</br>
        context.report(***REMOVED***
          node,
          message: errorMessage(elementName)
        ***REMOVED***);
      ***REMOVED***

      const attributes = node.openingElement.attributes;

      const hasChildrenAttributeOrDanger = attributes.some((attribute) => ***REMOVED***
        if (!attribute.name) ***REMOVED***
          return false;
        ***REMOVED***

        return attribute.name.name === 'children' || attribute.name.name === 'dangerouslySetInnerHTML';
      ***REMOVED***);

      if (hasChildrenAttributeOrDanger) ***REMOVED***
        // e.g. <br children="Foo" />
        context.report(***REMOVED***
          node,
          message: errorMessage(elementName)
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***,

    CallExpression(node) ***REMOVED***
      if (node.callee.type !== 'MemberExpression' && node.callee.type !== 'Identifier') ***REMOVED***
        return;
      ***REMOVED***

      if (!utils.isCreateElement(node)) ***REMOVED***
        return;
      ***REMOVED***

      const args = node.arguments;

      if (args.length < 1) ***REMOVED***
        // React.createElement() should not crash linter
        return;
      ***REMOVED***

      const elementName = args[0].value;

      if (!isVoidDOMElement(elementName)) ***REMOVED***
        // e.g. React.createElement('div');
        return;
      ***REMOVED***

      if (args.length < 2 || args[1].type !== 'ObjectExpression') ***REMOVED***
        return;
      ***REMOVED***

      const firstChild = args[2];
      if (firstChild) ***REMOVED***
        // e.g. React.createElement('br', undefined, 'Foo')
        context.report(***REMOVED***
          node,
          message: errorMessage(elementName)
        ***REMOVED***);
      ***REMOVED***

      const props = args[1].properties;

      const hasChildrenPropOrDanger = props.some((prop) => ***REMOVED***
        if (!prop.key) ***REMOVED***
          return false;
        ***REMOVED***

        return prop.key.name === 'children' || prop.key.name === 'dangerouslySetInnerHTML';
      ***REMOVED***);

      if (hasChildrenPropOrDanger) ***REMOVED***
        // e.g. React.createElement('br', ***REMOVED*** children: 'Foo' ***REMOVED***)
        context.report(***REMOVED***
          node,
          message: errorMessage(elementName)
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***))
***REMOVED***;
