/**
 * @fileoverview Prevent string definitions for references and prevent referencing this.refs
 * @author Tom Hastjarjanto
 */

'use strict';

const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Prevent string definitions for references and prevent referencing this.refs',
      category: 'Best Practices',
      recommended: true,
      url: docsUrl('no-string-refs')
    ***REMOVED***,
    schema: [***REMOVED***
      type: 'object',
      properties: ***REMOVED***
        noTemplateLiterals: ***REMOVED***
          type: 'boolean'
        ***REMOVED***
      ***REMOVED***,
      additionalProperties: false
    ***REMOVED***]
  ***REMOVED***,

  create: Components.detect((context, components, utils) => ***REMOVED***
    const detectTemplateLiterals = context.options[0] ? context.options[0].noTemplateLiterals : false;
    /**
     * Checks if we are using refs
     * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked.
     * @returns ***REMOVED***Boolean***REMOVED*** True if we are using refs, false if not.
     */
    function isRefsUsage(node) ***REMOVED***
      return Boolean(
        (
          utils.getParentES6Component() ||
          utils.getParentES5Component()
        ) &&
        node.object.type === 'ThisExpression' &&
        node.property.name === 'refs'
      );
    ***REMOVED***

    /**
     * Checks if we are using a ref attribute
     * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked.
     * @returns ***REMOVED***Boolean***REMOVED*** True if we are using a ref attribute, false if not.
     */
    function isRefAttribute(node) ***REMOVED***
      return Boolean(
        node.type === 'JSXAttribute' &&
        node.name &&
        node.name.name === 'ref'
      );
    ***REMOVED***

    /**
     * Checks if a node contains a string value
     * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked.
     * @returns ***REMOVED***Boolean***REMOVED*** True if the node contains a string value, false if not.
     */
    function containsStringLiteral(node) ***REMOVED***
      return Boolean(
        node.value &&
        node.value.type === 'Literal' &&
        typeof node.value.value === 'string'
      );
    ***REMOVED***

    /**
     * Checks if a node contains a string value within a jsx expression
     * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked.
     * @returns ***REMOVED***Boolean***REMOVED*** True if the node contains a string value within a jsx expression, false if not.
     */
    function containsStringExpressionContainer(node) ***REMOVED***
      return Boolean(
        node.value &&
        node.value.type === 'JSXExpressionContainer' &&
        node.value.expression &&
        ((node.value.expression.type === 'Literal' && typeof node.value.expression.value === 'string') ||
        (node.value.expression.type === 'TemplateLiteral' && detectTemplateLiterals))
      );
    ***REMOVED***

    return ***REMOVED***
      MemberExpression(node) ***REMOVED***
        if (isRefsUsage(node)) ***REMOVED***
          context.report(***REMOVED***
            node,
            message: 'Using this.refs is deprecated.'
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***,
      JSXAttribute(node) ***REMOVED***
        if (
          isRefAttribute(node) &&
          (containsStringLiteral(node) || containsStringExpressionContainer(node))
        ) ***REMOVED***
          context.report(***REMOVED***
            node,
            message: 'Using string literals in ref attributes is deprecated.'
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***)
***REMOVED***;
