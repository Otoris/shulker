/**
 * @fileoverview Prevent using string literals in React component definition
 * @author Caleb Morris
 * @author David Buchan-Swanson
 */

'use strict';

const docsUrl = require('../util/docsUrl');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Prevent using string literals in React component definition',
      category: 'Stylistic Issues',
      recommended: false,
      url: docsUrl('jsx-no-literals')
    ***REMOVED***,

    schema: [***REMOVED***
      type: 'object',
      properties: ***REMOVED***
        noStrings: ***REMOVED***
          type: 'boolean'
        ***REMOVED***
      ***REMOVED***,
      additionalProperties: false
    ***REMOVED***]
  ***REMOVED***,

  create(context) ***REMOVED***
    const isNoStrings = context.options[0] ? context.options[0].noStrings : false;

    const message = isNoStrings ?
      'Strings not allowed in JSX files' :
      'Missing JSX expression container around literal string';

    function reportLiteralNode(node) ***REMOVED***
      context.report(***REMOVED***
        node,
        message: `$***REMOVED***message***REMOVED***: “$***REMOVED***context.getSourceCode().getText(node).trim()***REMOVED***”`
      ***REMOVED***);
    ***REMOVED***

    function getParentIgnoringBinaryExpressions(node) ***REMOVED***
      let current = node;
      while (current.parent.type === 'BinaryExpression') ***REMOVED***
        current = current.parent;
      ***REMOVED***
      return current.parent;
    ***REMOVED***

    function getValidation(node) ***REMOVED***
      const parent = getParentIgnoringBinaryExpressions(node);
      const standard = !/^[\s]+$/.test(node.value) &&
          typeof node.value === 'string' &&
          parent.type.indexOf('JSX') !== -1 &&
          parent.type !== 'JSXAttribute';
      if (isNoStrings) ***REMOVED***
        return standard;
      ***REMOVED***
      return standard && parent.type !== 'JSXExpressionContainer';
    ***REMOVED***

    // --------------------------------------------------------------------------
    // Public
    // --------------------------------------------------------------------------

    return ***REMOVED***

      Literal(node) ***REMOVED***
        if (getValidation(node)) ***REMOVED***
          reportLiteralNode(node);
        ***REMOVED***
      ***REMOVED***,

      JSXText(node) ***REMOVED***
        if (getValidation(node)) ***REMOVED***
          reportLiteralNode(node);
        ***REMOVED***
      ***REMOVED***,

      TemplateLiteral(node) ***REMOVED***
        const parent = getParentIgnoringBinaryExpressions(node);
        if (isNoStrings && parent.type === 'JSXExpressionContainer') ***REMOVED***
          reportLiteralNode(node);
        ***REMOVED***
      ***REMOVED***

    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
