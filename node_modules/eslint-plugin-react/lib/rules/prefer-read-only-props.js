/**
 * @fileoverview Require component props to be typed as read-only.
 * @author Luke Zapart
 */

'use strict';

const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');

function isFlowPropertyType(node) ***REMOVED***
  return node.type === 'ObjectTypeProperty';
***REMOVED***

function isCovariant(node) ***REMOVED***
  return node.variance && node.variance.kind === 'plus';
***REMOVED***

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Require read-only props.',
      category: 'Stylistic Issues',
      recommended: false,
      url: docsUrl('prefer-read-only-props')
    ***REMOVED***,
    fixable: 'code',
    schema: []
  ***REMOVED***,

  create: Components.detect((context, components) => (***REMOVED***
    'Program:exit': function () ***REMOVED***
      const list = components.list();

      Object.keys(list).forEach((key) => ***REMOVED***
        const component = list[key];

        if (!component.declaredPropTypes) ***REMOVED***
          return;
        ***REMOVED***

        Object.keys(component.declaredPropTypes).forEach((propName) => ***REMOVED***
          const prop = component.declaredPropTypes[propName];

          if (!isFlowPropertyType(prop.node)) ***REMOVED***
            return;
          ***REMOVED***

          if (!isCovariant(prop.node)) ***REMOVED***
            context.report(***REMOVED***
              node: prop.node,
              message: 'Prop \'***REMOVED******REMOVED***propName***REMOVED******REMOVED***\' should be read-only.',
              data: ***REMOVED***
                propName
              ***REMOVED***,
              fix: (fixer) => ***REMOVED***
                if (!prop.node.variance) ***REMOVED***
                  // Insert covariance
                  return fixer.insertTextBefore(prop.node, '+');
                ***REMOVED***

                // Replace contravariance with covariance
                return fixer.replaceText(prop.node.variance, '+');
              ***REMOVED***
            ***REMOVED***);
          ***REMOVED***
        ***REMOVED***);
      ***REMOVED***);
    ***REMOVED***
  ***REMOVED***))
***REMOVED***;
