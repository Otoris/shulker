/**
 * @fileoverview Disallow undeclared variables in JSX
 * @author Yannick Croissant
 */

'use strict';

const docsUrl = require('../util/docsUrl');
const jsxUtil = require('../util/jsx');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Disallow undeclared variables in JSX',
      category: 'Possible Errors',
      recommended: true,
      url: docsUrl('jsx-no-undef')
    ***REMOVED***,
    schema: [***REMOVED***
      type: 'object',
      properties: ***REMOVED***
        allowGlobals: ***REMOVED***
          type: 'boolean'
        ***REMOVED***
      ***REMOVED***,
      additionalProperties: false
    ***REMOVED***]
  ***REMOVED***,

  create(context) ***REMOVED***
    const config = context.options[0] || ***REMOVED******REMOVED***;
    const allowGlobals = config.allowGlobals || false;

    /**
     * Compare an identifier with the variables declared in the scope
     * @param ***REMOVED***ASTNode***REMOVED*** node - Identifier or JSXIdentifier node
     * @returns ***REMOVED***void***REMOVED***
     */
    function checkIdentifierInJSX(node) ***REMOVED***
      let scope = context.getScope();
      const sourceCode = context.getSourceCode();
      const sourceType = sourceCode.ast.sourceType;
      let variables = scope.variables;
      let scopeType = 'global';
      let i;
      let len;

      // Ignore 'this' keyword (also maked as JSXIdentifier when used in JSX)
      if (node.name === 'this') ***REMOVED***
        return;
      ***REMOVED***

      if (!allowGlobals && sourceType === 'module') ***REMOVED***
        scopeType = 'module';
      ***REMOVED***

      while (scope.type !== scopeType) ***REMOVED***
        scope = scope.upper;
        variables = scope.variables.concat(variables);
      ***REMOVED***
      if (scope.childScopes.length) ***REMOVED***
        variables = scope.childScopes[0].variables.concat(variables);
        // Temporary fix for babel-eslint
        if (scope.childScopes[0].childScopes.length) ***REMOVED***
          variables = scope.childScopes[0].childScopes[0].variables.concat(variables);
        ***REMOVED***
      ***REMOVED***

      for (i = 0, len = variables.length; i < len; i++) ***REMOVED***
        if (variables[i].name === node.name) ***REMOVED***
          return;
        ***REMOVED***
      ***REMOVED***

      context.report(***REMOVED***
        node,
        message: `'$***REMOVED***node.name***REMOVED***' is not defined.`
      ***REMOVED***);
    ***REMOVED***

    return ***REMOVED***
      JSXOpeningElement(node) ***REMOVED***
        switch (node.name.type) ***REMOVED***
          case 'JSXIdentifier':
            if (jsxUtil.isDOMComponent(node)) ***REMOVED***
              return;
            ***REMOVED***
            node = node.name;
            break;
          case 'JSXMemberExpression':
            node = node.name;
            do ***REMOVED***
              node = node.object;
            ***REMOVED*** while (node && node.type !== 'JSXIdentifier');
            break;
          case 'JSXNamespacedName':
            node = node.name.namespace;
            break;
          default:
            break;
        ***REMOVED***
        checkIdentifierInJSX(node);
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
