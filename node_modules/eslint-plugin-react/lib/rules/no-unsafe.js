/**
 * @fileoverview Prevent usage of unsafe lifecycle methods
 * @author Sergei Startsev
 */

'use strict';

const Components = require('../util/Components');
const astUtil = require('../util/ast');
const docsUrl = require('../util/docsUrl');
const versionUtil = require('../util/version');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Prevent usage of unsafe lifecycle methods',
      category: 'Best Practices',
      recommended: false,
      url: docsUrl('no-unsafe')
    ***REMOVED***,
    schema: [
      ***REMOVED***
        type: 'object',
        properties: ***REMOVED***
          checkAliases: ***REMOVED***
            default: false,
            type: 'boolean'
          ***REMOVED***
        ***REMOVED***,
        additionalProperties: false
      ***REMOVED***
    ]
  ***REMOVED***,

  create: Components.detect((context, components, utils) => ***REMOVED***
    const config = context.options[0] || ***REMOVED******REMOVED***;
    const checkAliases = config.checkAliases || false;

    const isApplicable = versionUtil.testReactVersion(context, '16.3.0');
    if (!isApplicable) ***REMOVED***
      return ***REMOVED******REMOVED***;
    ***REMOVED***

    const unsafe = ***REMOVED***
      UNSAFE_componentWillMount: ***REMOVED***
        newMethod: 'componentDidMount',
        details:
          'See https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html.'
      ***REMOVED***,
      UNSAFE_componentWillReceiveProps: ***REMOVED***
        newMethod: 'getDerivedStateFromProps',
        details:
          'See https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html.'
      ***REMOVED***,
      UNSAFE_componentWillUpdate: ***REMOVED***
        newMethod: 'componentDidUpdate',
        details:
          'See https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html.'
      ***REMOVED***
    ***REMOVED***;
    if (checkAliases) ***REMOVED***
      unsafe.componentWillMount = unsafe.UNSAFE_componentWillMount;
      unsafe.componentWillReceiveProps = unsafe.UNSAFE_componentWillReceiveProps;
      unsafe.componentWillUpdate = unsafe.UNSAFE_componentWillUpdate;
    ***REMOVED***

    /**
     * Returns a list of unsafe methods
     * @returns ***REMOVED***Array***REMOVED*** A list of unsafe methods
     */
    function getUnsafeMethods() ***REMOVED***
      return Object.keys(unsafe);
    ***REMOVED***

    /**
     * Checks if a passed method is unsafe
     * @param ***REMOVED***string***REMOVED*** method Life cycle method
     * @returns ***REMOVED***boolean***REMOVED*** Returns true for unsafe methods, otherwise returns false
     */
    function isUnsafe(method) ***REMOVED***
      const unsafeMethods = getUnsafeMethods();
      return unsafeMethods.indexOf(method) !== -1;
    ***REMOVED***

    /**
     * Reports the error for an unsafe method
     * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked
     * @param ***REMOVED***string***REMOVED*** method Life cycle method
     */
    function checkUnsafe(node, method) ***REMOVED***
      if (!isUnsafe(method)) ***REMOVED***
        return;
      ***REMOVED***

      const meta = unsafe[method];
      const newMethod = meta.newMethod;
      const details = meta.details;

      context.report(***REMOVED***
        node,
        message: `$***REMOVED***method***REMOVED*** is unsafe for use in async rendering. Update the component to use $***REMOVED***newMethod***REMOVED*** instead. $***REMOVED***details***REMOVED***`
      ***REMOVED***);
    ***REMOVED***

    /**
     * Returns life cycle methods if available
     * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked.
     * @returns ***REMOVED***Array***REMOVED*** The array of methods.
     */
    function getLifeCycleMethods(node) ***REMOVED***
      const properties = astUtil.getComponentProperties(node);
      return properties.map(property => astUtil.getPropertyName(property));
    ***REMOVED***

    /**
     * Checks life cycle methods
     * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked.
     */
    function checkLifeCycleMethods(node) ***REMOVED***
      if (utils.isES5Component(node) || utils.isES6Component(node)) ***REMOVED***
        const methods = getLifeCycleMethods(node);
        methods.forEach(method => checkUnsafe(node, method));
      ***REMOVED***
    ***REMOVED***

    return ***REMOVED***
      ClassDeclaration: checkLifeCycleMethods,
      ClassExpression: checkLifeCycleMethods,
      ObjectExpression: checkLifeCycleMethods
    ***REMOVED***;
  ***REMOVED***)
***REMOVED***;
