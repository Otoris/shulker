/**
 * @fileoverview Restrict file extensions that may contain JSX
 * @author Joe Lencioni
 */

'use strict';

const path = require('path');
const docsUrl = require('../util/docsUrl');

// ------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------

const DEFAULTS = ***REMOVED***
  extensions: ['.jsx']
***REMOVED***;

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Restrict file extensions that may contain JSX',
      category: 'Stylistic Issues',
      recommended: false,
      url: docsUrl('jsx-filename-extension')
    ***REMOVED***,

    schema: [***REMOVED***
      type: 'object',
      properties: ***REMOVED***
        extensions: ***REMOVED***
          type: 'array',
          items: ***REMOVED***
            type: 'string'
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***,
      additionalProperties: false
    ***REMOVED***]
  ***REMOVED***,

  create(context) ***REMOVED***
    let invalidExtension;
    let invalidNode;

    function getExtensionsConfig() ***REMOVED***
      return context.options[0] && context.options[0].extensions || DEFAULTS.extensions;
    ***REMOVED***

    function handleJSX(node) ***REMOVED***
      const filename = context.getFilename();
      if (filename === '<text>') ***REMOVED***
        return;
      ***REMOVED***

      if (invalidNode) ***REMOVED***
        return;
      ***REMOVED***

      const allowedExtensions = getExtensionsConfig();
      const isAllowedExtension = allowedExtensions.some(extension => filename.slice(-extension.length) === extension);

      if (isAllowedExtension) ***REMOVED***
        return;
      ***REMOVED***

      invalidNode = node;
      invalidExtension = path.extname(filename);
    ***REMOVED***

    // --------------------------------------------------------------------------
    // Public
    // --------------------------------------------------------------------------

    return ***REMOVED***
      JSXElement: handleJSX,
      JSXFragment: handleJSX,

      'Program:exit': function () ***REMOVED***
        if (!invalidNode) ***REMOVED***
          return;
        ***REMOVED***

        context.report(***REMOVED***
          node: invalidNode,
          message: `JSX not allowed in files with extension '$***REMOVED***invalidExtension***REMOVED***'`
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
