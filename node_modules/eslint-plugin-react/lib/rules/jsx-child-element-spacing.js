'use strict';

const docsUrl = require('../util/docsUrl');

// This list is taken from https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements
const INLINE_ELEMENTS = new Set([
  'a',
  'abbr',
  'acronym',
  'b',
  'bdo',
  'big',
  'br',
  'button',
  'cite',
  'code',
  'dfn',
  'em',
  'i',
  'img',
  'input',
  'kbd',
  'label',
  'map',
  'object',
  'q',
  'samp',
  'script',
  'select',
  'small',
  'span',
  'strong',
  'sub',
  'sup',
  'textarea',
  'tt',
  'var'
]);

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Ensures inline tags are not rendered without spaces between them',
      category: 'Stylistic Issues',
      recommended: false,
      url: docsUrl('jsx-child-element-spacing')
    ***REMOVED***,
    fixable: false,
    schema: [
      ***REMOVED***
        type: 'object',
        properties: ***REMOVED******REMOVED***,
        default: ***REMOVED******REMOVED***,
        additionalProperties: false
      ***REMOVED***
    ]
  ***REMOVED***,
  create(context) ***REMOVED***
    const TEXT_FOLLOWING_ELEMENT_PATTERN = /^\s*\n\s*\S/;
    const TEXT_PRECEDING_ELEMENT_PATTERN = /\S\s*\n\s*$/;

    const elementName = node => (
      node.openingElement &&
      node.openingElement.name &&
      node.openingElement.name.type === 'JSXIdentifier' &&
      node.openingElement.name.name
    );

    const isInlineElement = node => (
      node.type === 'JSXElement' &&
      INLINE_ELEMENTS.has(elementName(node))
    );

    const handleJSX = (node) => ***REMOVED***
      let lastChild = null;
      let child = null;
      (node.children.concat([null])).forEach((nextChild) => ***REMOVED***
        if (
          (lastChild || nextChild) &&
          (!lastChild || isInlineElement(lastChild)) &&
          (child && (child.type === 'Literal' || child.type === 'JSXText')) &&
          (!nextChild || isInlineElement(nextChild)) &&
          true
        ) ***REMOVED***
          if (lastChild && child.value.match(TEXT_FOLLOWING_ELEMENT_PATTERN)) ***REMOVED***
            context.report(***REMOVED***
              node: lastChild,
              loc: lastChild.loc.end,
              message: `Ambiguous spacing after previous element $***REMOVED***elementName(lastChild)***REMOVED***`
            ***REMOVED***);
          ***REMOVED*** else if (nextChild && child.value.match(TEXT_PRECEDING_ELEMENT_PATTERN)) ***REMOVED***
            context.report(***REMOVED***
              node: nextChild,
              loc: nextChild.loc.start,
              message: `Ambiguous spacing before next element $***REMOVED***elementName(nextChild)***REMOVED***`
            ***REMOVED***);
          ***REMOVED***
        ***REMOVED***
        lastChild = child;
        child = nextChild;
      ***REMOVED***);
    ***REMOVED***;

    return ***REMOVED***
      JSXElement: handleJSX,
      JSXFragment: handleJSX
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
