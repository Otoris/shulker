/**
 * @fileoverview Enforce ES5 or ES6 class for returning value in render function.
 * @author Mark Orel
 */

'use strict';

const Components = require('../util/Components');
const astUtil = require('../util/ast');
const docsUrl = require('../util/docsUrl');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Enforce ES5 or ES6 class for returning value in render function',
      category: 'Possible Errors',
      recommended: true,
      url: docsUrl('require-render-return')
    ***REMOVED***,
    schema: [***REMOVED******REMOVED***]
  ***REMOVED***,

  create: Components.detect((context, components, utils) => ***REMOVED***
    /**
     * Mark a return statement as present
     * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked.
     */
    function markReturnStatementPresent(node) ***REMOVED***
      components.set(node, ***REMOVED***
        hasReturnStatement: true
      ***REMOVED***);
    ***REMOVED***

    /**
     * Find render method in a given AST node
     * @param ***REMOVED***ASTNode***REMOVED*** node The component to find render method.
     * @returns ***REMOVED***ASTNode***REMOVED*** Method node if found, undefined if not.
     */
    function findRenderMethod(node) ***REMOVED***
      const properties = astUtil.getComponentProperties(node);
      return properties
        .filter(property => astUtil.getPropertyName(property) === 'render' && property.value)
        .find(property => astUtil.isFunctionLikeExpression(property.value));
    ***REMOVED***

    return ***REMOVED***
      ReturnStatement(node) ***REMOVED***
        const ancestors = context.getAncestors(node).reverse();
        let depth = 0;
        ancestors.forEach((ancestor) => ***REMOVED***
          if (/Function(Expression|Declaration)$/.test(ancestor.type)) ***REMOVED***
            depth++;
          ***REMOVED***
          if (
            /(MethodDefinition|(Class)?Property)$/.test(ancestor.type) &&
            astUtil.getPropertyName(ancestor) === 'render' &&
            depth <= 1
          ) ***REMOVED***
            markReturnStatementPresent(node);
          ***REMOVED***
        ***REMOVED***);
      ***REMOVED***,

      ArrowFunctionExpression(node) ***REMOVED***
        if (node.expression === false || astUtil.getPropertyName(node.parent) !== 'render') ***REMOVED***
          return;
        ***REMOVED***
        markReturnStatementPresent(node);
      ***REMOVED***,

      'Program:exit': function () ***REMOVED***
        const list = components.list();
        Object.keys(list).forEach((component) => ***REMOVED***
          if (
            !findRenderMethod(list[component].node) ||
            list[component].hasReturnStatement ||
            (!utils.isES5Component(list[component].node) && !utils.isES6Component(list[component].node))
          ) ***REMOVED***
            return;
          ***REMOVED***
          context.report(***REMOVED***
            node: findRenderMethod(list[component].node),
            message: 'Your render method should have return statement'
          ***REMOVED***);
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***)
***REMOVED***;
