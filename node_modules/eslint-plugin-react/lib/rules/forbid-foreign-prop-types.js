/**
 * @fileoverview Forbid using another component's propTypes
 * @author Ian Christian Myers
 */

'use strict';

const docsUrl = require('../util/docsUrl');
const ast = require('../util/ast');

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Forbid using another component\'s propTypes',
      category: 'Best Practices',
      recommended: false,
      url: docsUrl('forbid-foreign-prop-types')
    ***REMOVED***,

    schema: [
      ***REMOVED***
        type: 'object',
        properties: ***REMOVED***
          allowInPropTypes: ***REMOVED***
            type: 'boolean'
          ***REMOVED***
        ***REMOVED***,
        additionalProperties: false
      ***REMOVED***
    ]
  ***REMOVED***,

  create(context) ***REMOVED***
    const config = context.options[0] || ***REMOVED******REMOVED***;
    const allowInPropTypes = config.allowInPropTypes || false;

    // --------------------------------------------------------------------------
    // Helpers
    // --------------------------------------------------------------------------

    function findParentAssignmentExpression(node) ***REMOVED***
      let parent = node.parent;

      while (parent && parent.type !== 'Program') ***REMOVED***
        if (parent.type === 'AssignmentExpression') ***REMOVED***
          return parent;
        ***REMOVED***
        parent = parent.parent;
      ***REMOVED***
      return null;
    ***REMOVED***

    function findParentClassProperty(node) ***REMOVED***
      let parent = node.parent;

      while (parent && parent.type !== 'Program') ***REMOVED***
        if (parent.type === 'ClassProperty') ***REMOVED***
          return parent;
        ***REMOVED***
        parent = parent.parent;
      ***REMOVED***
      return null;
    ***REMOVED***

    function isAllowedAssignment(node) ***REMOVED***
      if (!allowInPropTypes) ***REMOVED***
        return false;
      ***REMOVED***

      const assignmentExpression = findParentAssignmentExpression(node);

      if (
        assignmentExpression &&
        assignmentExpression.left &&
        assignmentExpression.left.property &&
        assignmentExpression.left.property.name === 'propTypes'
      ) ***REMOVED***
        return true;
      ***REMOVED***

      const classProperty = findParentClassProperty(node);

      if (
        classProperty &&
        classProperty.key &&
        classProperty.key.name === 'propTypes'
      ) ***REMOVED***
        return true;
      ***REMOVED***
      return false;
    ***REMOVED***

    return ***REMOVED***
      MemberExpression(node) ***REMOVED***
        if (
          node.property &&
          (
            !node.computed &&
            node.property.type === 'Identifier' &&
            node.property.name === 'propTypes' &&
            !ast.isAssignmentLHS(node) &&
            !isAllowedAssignment(node)
          ) || (
            (node.property.type === 'Literal' || node.property.type === 'JSXText') &&
            node.property.value === 'propTypes' &&
            !ast.isAssignmentLHS(node) &&
            !isAllowedAssignment(node)
          )
        ) ***REMOVED***
          context.report(***REMOVED***
            node: node.property,
            message: 'Using propTypes from another component is not safe because they may be removed in production builds'
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***,

      ObjectPattern(node) ***REMOVED***
        const propTypesNode = node.properties.find(property => property.type === 'Property' && property.key.name === 'propTypes');

        if (propTypesNode) ***REMOVED***
          context.report(***REMOVED***
            node: propTypesNode,
            message: 'Using propTypes from another component is not safe because they may be removed in production builds'
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
