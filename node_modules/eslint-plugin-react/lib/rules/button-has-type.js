/**
 * @fileoverview Forbid "button" element without an explicit "type" attribute
 * @author Filipp Riabchun
 */

'use strict';

const getProp = require('jsx-ast-utils/getProp');
const getLiteralPropValue = require('jsx-ast-utils/getLiteralPropValue');
const docsUrl = require('../util/docsUrl');
const pragmaUtil = require('../util/pragma');

// ------------------------------------------------------------------------------
// Helpers
// ------------------------------------------------------------------------------

function isCreateElement(node, context) ***REMOVED***
  const pragma = pragmaUtil.getFromContext(context);
  return node.callee &&
    node.callee.type === 'MemberExpression' &&
    node.callee.property.name === 'createElement' &&
    node.callee.object &&
    node.callee.object.name === pragma &&
    node.arguments.length > 0;
***REMOVED***

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

const optionDefaults = ***REMOVED***
  button: true,
  submit: true,
  reset: true
***REMOVED***;

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Forbid "button" element without an explicit "type" attribute',
      category: 'Possible Errors',
      recommended: false,
      url: docsUrl('button-has-type')
    ***REMOVED***,
    schema: [***REMOVED***
      type: 'object',
      properties: ***REMOVED***
        button: ***REMOVED***
          default: optionDefaults.button,
          type: 'boolean'
        ***REMOVED***,
        submit: ***REMOVED***
          default: optionDefaults.submit,
          type: 'boolean'
        ***REMOVED***,
        reset: ***REMOVED***
          default: optionDefaults.reset,
          type: 'boolean'
        ***REMOVED***
      ***REMOVED***,
      additionalProperties: false
    ***REMOVED***]
  ***REMOVED***,

  create(context) ***REMOVED***
    const configuration = Object.assign(***REMOVED******REMOVED***, optionDefaults, context.options[0]);

    function reportMissing(node) ***REMOVED***
      context.report(***REMOVED***
        node,
        message: 'Missing an explicit type attribute for button'
      ***REMOVED***);
    ***REMOVED***

    function checkValue(node, value, quoteFn) ***REMOVED***
      const q = quoteFn || (x => `"$***REMOVED***x***REMOVED***"`);
      if (!(value in configuration)) ***REMOVED***
        context.report(***REMOVED***
          node,
          message: `$***REMOVED***q(value)***REMOVED*** is an invalid value for button type attribute`
        ***REMOVED***);
      ***REMOVED*** else if (!configuration[value]) ***REMOVED***
        context.report(***REMOVED***
          node,
          message: `$***REMOVED***q(value)***REMOVED*** is a forbidden value for button type attribute`
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***

    return ***REMOVED***
      JSXElement(node) ***REMOVED***
        if (node.openingElement.name.name !== 'button') ***REMOVED***
          return;
        ***REMOVED***

        const typeProp = getProp(node.openingElement.attributes, 'type');

        if (!typeProp) ***REMOVED***
          reportMissing(node);
          return;
        ***REMOVED***

        const propValue = getLiteralPropValue(typeProp);
        if (!propValue && typeProp.value && typeProp.value.expression) ***REMOVED***
          checkValue(node, typeProp.value.expression.name, x => `\`$***REMOVED***x***REMOVED***\``);
        ***REMOVED*** else ***REMOVED***
          checkValue(node, propValue);
        ***REMOVED***
      ***REMOVED***,
      CallExpression(node) ***REMOVED***
        if (!isCreateElement(node, context)) ***REMOVED***
          return;
        ***REMOVED***

        if (node.arguments[0].type !== 'Literal' || node.arguments[0].value !== 'button') ***REMOVED***
          return;
        ***REMOVED***

        if (!node.arguments[1] || node.arguments[1].type !== 'ObjectExpression') ***REMOVED***
          reportMissing(node);
          return;
        ***REMOVED***

        const props = node.arguments[1].properties;
        const typeProp = props.find(prop => prop.key && prop.key.name === 'type');

        if (!typeProp || typeProp.value.type !== 'Literal') ***REMOVED***
          reportMissing(node);
          return;
        ***REMOVED***

        checkValue(node, typeProp.value.value);
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
