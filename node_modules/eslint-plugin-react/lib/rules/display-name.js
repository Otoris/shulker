/**
 * @fileoverview Prevent missing displayName in a React component definition
 * @author Yannick Croissant
 */

'use strict';

const Components = require('../util/Components');
const astUtil = require('../util/ast');
const docsUrl = require('../util/docsUrl');
const propsUtil = require('../util/props');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Prevent missing displayName in a React component definition',
      category: 'Best Practices',
      recommended: true,
      url: docsUrl('display-name')
    ***REMOVED***,

    schema: [***REMOVED***
      type: 'object',
      properties: ***REMOVED***
        ignoreTranspilerName: ***REMOVED***
          type: 'boolean'
        ***REMOVED***
      ***REMOVED***,
      additionalProperties: false
    ***REMOVED***]
  ***REMOVED***,

  create: Components.detect((context, components, utils) => ***REMOVED***
    const config = context.options[0] || ***REMOVED******REMOVED***;
    const ignoreTranspilerName = config.ignoreTranspilerName || false;

    const MISSING_MESSAGE = 'Component definition is missing display name';

    /**
     * Mark a prop type as declared
     * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked.
     */
    function markDisplayNameAsDeclared(node) ***REMOVED***
      components.set(node, ***REMOVED***
        hasDisplayName: true
      ***REMOVED***);
    ***REMOVED***

    /**
     * Reports missing display name for a given component
     * @param ***REMOVED***Object***REMOVED*** component The component to process
     */
    function reportMissingDisplayName(component) ***REMOVED***
      context.report(***REMOVED***
        node: component.node,
        message: MISSING_MESSAGE,
        data: ***REMOVED***
          component: component.name
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***

    /**
     * Checks if the component have a name set by the transpiler
     * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked.
     * @returns ***REMOVED***Boolean***REMOVED*** True if component has a name, false if not.
     */
    function hasTranspilerName(node) ***REMOVED***
      const namedObjectAssignment = (
        node.type === 'ObjectExpression' &&
        node.parent &&
        node.parent.parent &&
        node.parent.parent.type === 'AssignmentExpression' &&
        (
          !node.parent.parent.left.object ||
          node.parent.parent.left.object.name !== 'module' ||
          node.parent.parent.left.property.name !== 'exports'
        )
      );
      const namedObjectDeclaration = (
        node.type === 'ObjectExpression' &&
        node.parent &&
        node.parent.parent &&
        node.parent.parent.type === 'VariableDeclarator'
      );
      const namedClass = (
        (node.type === 'ClassDeclaration' || node.type === 'ClassExpression') &&
        node.id &&
        node.id.name
      );

      const namedFunctionDeclaration = (
        (node.type === 'FunctionDeclaration' || node.type === 'FunctionExpression') &&
        node.id &&
        node.id.name
      );

      const namedFunctionExpression = (
        astUtil.isFunctionLikeExpression(node) &&
        node.parent &&
        (node.parent.type === 'VariableDeclarator' || node.parent.method === true) &&
        (!node.parent.parent || !utils.isES5Component(node.parent.parent))
      );

      if (
        namedObjectAssignment || namedObjectDeclaration ||
        namedClass ||
        namedFunctionDeclaration || namedFunctionExpression
      ) ***REMOVED***
        return true;
      ***REMOVED***
      return false;
    ***REMOVED***

    // --------------------------------------------------------------------------
    // Public
    // --------------------------------------------------------------------------

    return ***REMOVED***

      ClassProperty(node) ***REMOVED***
        if (!propsUtil.isDisplayNameDeclaration(node)) ***REMOVED***
          return;
        ***REMOVED***
        markDisplayNameAsDeclared(node);
      ***REMOVED***,

      MemberExpression(node) ***REMOVED***
        if (!propsUtil.isDisplayNameDeclaration(node.property)) ***REMOVED***
          return;
        ***REMOVED***
        const component = utils.getRelatedComponent(node);
        if (!component) ***REMOVED***
          return;
        ***REMOVED***
        markDisplayNameAsDeclared(component.node);
      ***REMOVED***,

      FunctionExpression(node) ***REMOVED***
        if (ignoreTranspilerName || !hasTranspilerName(node)) ***REMOVED***
          return;
        ***REMOVED***
        if (components.get(node)) ***REMOVED***
          markDisplayNameAsDeclared(node);
        ***REMOVED***
      ***REMOVED***,

      FunctionDeclaration(node) ***REMOVED***
        if (ignoreTranspilerName || !hasTranspilerName(node)) ***REMOVED***
          return;
        ***REMOVED***
        if (components.get(node)) ***REMOVED***
          markDisplayNameAsDeclared(node);
        ***REMOVED***
      ***REMOVED***,

      ArrowFunctionExpression(node) ***REMOVED***
        if (ignoreTranspilerName || !hasTranspilerName(node)) ***REMOVED***
          return;
        ***REMOVED***
        if (components.get(node)) ***REMOVED***
          markDisplayNameAsDeclared(node);
        ***REMOVED***
      ***REMOVED***,

      MethodDefinition(node) ***REMOVED***
        if (!propsUtil.isDisplayNameDeclaration(node.key)) ***REMOVED***
          return;
        ***REMOVED***
        markDisplayNameAsDeclared(node);
      ***REMOVED***,

      ClassExpression(node) ***REMOVED***
        if (ignoreTranspilerName || !hasTranspilerName(node)) ***REMOVED***
          return;
        ***REMOVED***
        markDisplayNameAsDeclared(node);
      ***REMOVED***,

      ClassDeclaration(node) ***REMOVED***
        if (ignoreTranspilerName || !hasTranspilerName(node)) ***REMOVED***
          return;
        ***REMOVED***
        markDisplayNameAsDeclared(node);
      ***REMOVED***,

      ObjectExpression(node) ***REMOVED***
        if (ignoreTranspilerName || !hasTranspilerName(node)) ***REMOVED***
          // Search for the displayName declaration
          node.properties.forEach((property) => ***REMOVED***
            if (!property.key || !propsUtil.isDisplayNameDeclaration(property.key)) ***REMOVED***
              return;
            ***REMOVED***
            markDisplayNameAsDeclared(node);
          ***REMOVED***);
          return;
        ***REMOVED***
        markDisplayNameAsDeclared(node);
      ***REMOVED***,

      'Program:exit': function () ***REMOVED***
        const list = components.list();
        // Report missing display name for all components
        Object.keys(list).filter(component => !list[component].hasDisplayName).forEach((component) => ***REMOVED***
          reportMissingDisplayName(list[component]);
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***)
***REMOVED***;
