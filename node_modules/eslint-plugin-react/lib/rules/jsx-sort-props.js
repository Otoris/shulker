/**
 * @fileoverview Enforce props alphabetical sorting
 * @author Ilya Volodin, Yannick Croissant
 */

'use strict';

const propName = require('jsx-ast-utils/propName');
const docsUrl = require('../util/docsUrl');
const jsxUtil = require('../util/jsx');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

function isCallbackPropName(name) ***REMOVED***
  return /^on[A-Z]/.test(name);
***REMOVED***

const RESERVED_PROPS_LIST = [
  'children',
  'dangerouslySetInnerHTML',
  'key',
  'ref'
];

function isReservedPropName(name, list) ***REMOVED***
  return list.indexOf(name) >= 0;
***REMOVED***

function contextCompare(a, b, options) ***REMOVED***
  let aProp = propName(a);
  let bProp = propName(b);

  if (options.reservedFirst) ***REMOVED***
    const aIsReserved = isReservedPropName(aProp, options.reservedList);
    const bIsReserved = isReservedPropName(bProp, options.reservedList);
    if (aIsReserved && !bIsReserved) ***REMOVED***
      return -1;
    ***REMOVED***
    if (!aIsReserved && bIsReserved) ***REMOVED***
      return 1;
    ***REMOVED***
  ***REMOVED***

  if (options.callbacksLast) ***REMOVED***
    const aIsCallback = isCallbackPropName(aProp);
    const bIsCallback = isCallbackPropName(bProp);
    if (aIsCallback && !bIsCallback) ***REMOVED***
      return 1;
    ***REMOVED***
    if (!aIsCallback && bIsCallback) ***REMOVED***
      return -1;
    ***REMOVED***
  ***REMOVED***

  if (options.shorthandFirst || options.shorthandLast) ***REMOVED***
    const shorthandSign = options.shorthandFirst ? -1 : 1;
    if (!a.value && b.value) ***REMOVED***
      return shorthandSign;
    ***REMOVED***
    if (a.value && !b.value) ***REMOVED***
      return -shorthandSign;
    ***REMOVED***
  ***REMOVED***

  if (options.noSortAlphabetically) ***REMOVED***
    return 0;
  ***REMOVED***

  if (options.ignoreCase) ***REMOVED***
    aProp = aProp.toLowerCase();
    bProp = bProp.toLowerCase();
  ***REMOVED***
  return aProp.localeCompare(bProp);
***REMOVED***

/**
 * Create an array of arrays where each subarray is composed of attributes
 * that are considered sortable.
 * @param ***REMOVED***Array<JSXSpreadAttribute|JSXAttribute>***REMOVED*** attributes
 * @return ***REMOVED***Array<Array<JSXAttribute>>***REMOVED***
 */
function getGroupsOfSortableAttributes(attributes) ***REMOVED***
  const sortableAttributeGroups = [];
  let groupCount = 0;
  for (let i = 0; i < attributes.length; i++) ***REMOVED***
    const lastAttr = attributes[i - 1];
    // If we have no groups or if the last attribute was JSXSpreadAttribute
    // then we start a new group. Append attributes to the group until we
    // come across another JSXSpreadAttribute or exhaust the array.
    if (
      !lastAttr ||
      (lastAttr.type === 'JSXSpreadAttribute' &&
        attributes[i].type !== 'JSXSpreadAttribute')
    ) ***REMOVED***
      groupCount++;
      sortableAttributeGroups[groupCount - 1] = [];
    ***REMOVED***
    if (attributes[i].type !== 'JSXSpreadAttribute') ***REMOVED***
      sortableAttributeGroups[groupCount - 1].push(attributes[i]);
    ***REMOVED***
  ***REMOVED***
  return sortableAttributeGroups;
***REMOVED***

const generateFixerFunction = (node, context, reservedList) => ***REMOVED***
  const sourceCode = context.getSourceCode();
  const attributes = node.attributes.slice(0);
  const configuration = context.options[0] || ***REMOVED******REMOVED***;
  const ignoreCase = configuration.ignoreCase || false;
  const callbacksLast = configuration.callbacksLast || false;
  const shorthandFirst = configuration.shorthandFirst || false;
  const shorthandLast = configuration.shorthandLast || false;
  const noSortAlphabetically = configuration.noSortAlphabetically || false;
  const reservedFirst = configuration.reservedFirst || false;

  // Sort props according to the context. Only supports ignoreCase.
  // Since we cannot safely move JSXSpreadAttribute (due to potential variable overrides),
  // we only consider groups of sortable attributes.
  const options = ***REMOVED***
    ignoreCase,
    callbacksLast,
    shorthandFirst,
    shorthandLast,
    noSortAlphabetically,
    reservedFirst,
    reservedList
  ***REMOVED***;
  const sortableAttributeGroups = getGroupsOfSortableAttributes(attributes);
  const sortedAttributeGroups = sortableAttributeGroups
    .slice(0)
    .map(group => group.slice(0).sort((a, b) => contextCompare(a, b, options)));

  return function (fixer) ***REMOVED***
    const fixers = [];
    let source = sourceCode.getText();

    // Replace each unsorted attribute with the sorted one.
    sortableAttributeGroups.forEach((sortableGroup, ii) => ***REMOVED***
      sortableGroup.forEach((attr, jj) => ***REMOVED***
        const sortedAttr = sortedAttributeGroups[ii][jj];
        const sortedAttrText = sourceCode.getText(sortedAttr);
        fixers.push(***REMOVED***
          range: [attr.range[0], attr.range[1]],
          text: sortedAttrText
        ***REMOVED***);
      ***REMOVED***);
    ***REMOVED***);

    fixers.sort((a, b) => b.range[0] - a.range[0]);

    const rangeStart = fixers[fixers.length - 1].range[0];
    const rangeEnd = fixers[0].range[1];

    fixers.forEach((fix) => ***REMOVED***
      source = `$***REMOVED***source.substr(0, fix.range[0])***REMOVED***$***REMOVED***fix.text***REMOVED***$***REMOVED***source.substr(fix.range[1])***REMOVED***`;
    ***REMOVED***);

    return fixer.replaceTextRange([rangeStart, rangeEnd], source.substr(rangeStart, rangeEnd - rangeStart));
  ***REMOVED***;
***REMOVED***;

/**
 * Checks if the `reservedFirst` option is valid
 * @param ***REMOVED***Object***REMOVED*** context The context of the rule
 * @param ***REMOVED***Boolean|Array<String>***REMOVED*** reservedFirst The `reservedFirst` option
 * @return ***REMOVED***Function|undefined***REMOVED*** If an error is detected, a function to generate the error message, otherwise, `undefined`
 */
// eslint-disable-next-line consistent-return
function validateReservedFirstConfig(context, reservedFirst) ***REMOVED***
  if (reservedFirst) ***REMOVED***
    if (Array.isArray(reservedFirst)) ***REMOVED***
      // Only allow a subset of reserved words in customized lists
      const nonReservedWords = reservedFirst.filter(word => !isReservedPropName(
        word,
        RESERVED_PROPS_LIST
      ));

      if (reservedFirst.length === 0) ***REMOVED***
        return function (decl) ***REMOVED***
          context.report(***REMOVED***
            node: decl,
            message: 'A customized reserved first list must not be empty'
          ***REMOVED***);
        ***REMOVED***;
      ***REMOVED***
      if (nonReservedWords.length > 0) ***REMOVED***
        return function (decl) ***REMOVED***
          context.report(***REMOVED***
            node: decl,
            message: 'A customized reserved first list must only contain a subset of React reserved props.' +
              ' Remove: ***REMOVED******REMOVED*** nonReservedWords ***REMOVED******REMOVED***',
            data: ***REMOVED***
              nonReservedWords: nonReservedWords.toString()
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Enforce props alphabetical sorting',
      category: 'Stylistic Issues',
      recommended: false,
      url: docsUrl('jsx-sort-props')
    ***REMOVED***,
    fixable: 'code',
    schema: [***REMOVED***
      type: 'object',
      properties: ***REMOVED***
        // Whether callbacks (prefixed with "on") should be listed at the very end,
        // after all other props. Supersedes shorthandLast.
        callbacksLast: ***REMOVED***
          type: 'boolean'
        ***REMOVED***,
        // Whether shorthand properties (without a value) should be listed first
        shorthandFirst: ***REMOVED***
          type: 'boolean'
        ***REMOVED***,
        // Whether shorthand properties (without a value) should be listed last
        shorthandLast: ***REMOVED***
          type: 'boolean'
        ***REMOVED***,
        ignoreCase: ***REMOVED***
          type: 'boolean'
        ***REMOVED***,
        // Whether alphabetical sorting should be enforced
        noSortAlphabetically: ***REMOVED***
          type: 'boolean'
        ***REMOVED***,
        reservedFirst: ***REMOVED***
          type: ['array', 'boolean']
        ***REMOVED***
      ***REMOVED***,
      additionalProperties: false
    ***REMOVED***]
  ***REMOVED***,

  create(context) ***REMOVED***
    const configuration = context.options[0] || ***REMOVED******REMOVED***;
    const ignoreCase = configuration.ignoreCase || false;
    const callbacksLast = configuration.callbacksLast || false;
    const shorthandFirst = configuration.shorthandFirst || false;
    const shorthandLast = configuration.shorthandLast || false;
    const noSortAlphabetically = configuration.noSortAlphabetically || false;
    const reservedFirst = configuration.reservedFirst || false;
    const reservedFirstError = validateReservedFirstConfig(context, reservedFirst);
    let reservedList = Array.isArray(reservedFirst) ? reservedFirst : RESERVED_PROPS_LIST;

    return ***REMOVED***
      JSXOpeningElement(node) ***REMOVED***
        // `dangerouslySetInnerHTML` is only "reserved" on DOM components
        if (reservedFirst && !jsxUtil.isDOMComponent(node)) ***REMOVED***
          reservedList = reservedList.filter(prop => prop !== 'dangerouslySetInnerHTML');
        ***REMOVED***

        node.attributes.reduce((memo, decl, idx, attrs) => ***REMOVED***
          if (decl.type === 'JSXSpreadAttribute') ***REMOVED***
            return attrs[idx + 1];
          ***REMOVED***

          let previousPropName = propName(memo);
          let currentPropName = propName(decl);
          const previousValue = memo.value;
          const currentValue = decl.value;
          const previousIsCallback = isCallbackPropName(previousPropName);
          const currentIsCallback = isCallbackPropName(currentPropName);

          if (ignoreCase) ***REMOVED***
            previousPropName = previousPropName.toLowerCase();
            currentPropName = currentPropName.toLowerCase();
          ***REMOVED***

          if (reservedFirst) ***REMOVED***
            if (reservedFirstError) ***REMOVED***
              reservedFirstError(decl);
              return memo;
            ***REMOVED***

            const previousIsReserved = isReservedPropName(previousPropName, reservedList);
            const currentIsReserved = isReservedPropName(currentPropName, reservedList);

            if (previousIsReserved && !currentIsReserved) ***REMOVED***
              return decl;
            ***REMOVED***
            if (!previousIsReserved && currentIsReserved) ***REMOVED***
              context.report(***REMOVED***
                node: decl.name,
                message: 'Reserved props must be listed before all other props',
                fix: generateFixerFunction(node, context, reservedList)
              ***REMOVED***);
              return memo;
            ***REMOVED***
          ***REMOVED***

          if (callbacksLast) ***REMOVED***
            if (!previousIsCallback && currentIsCallback) ***REMOVED***
              // Entering the callback prop section
              return decl;
            ***REMOVED***
            if (previousIsCallback && !currentIsCallback) ***REMOVED***
              // Encountered a non-callback prop after a callback prop
              context.report(***REMOVED***
                node: memo.name,
                message: 'Callbacks must be listed after all other props',
                fix: generateFixerFunction(node, context, reservedList)
              ***REMOVED***);
              return memo;
            ***REMOVED***
          ***REMOVED***

          if (shorthandFirst) ***REMOVED***
            if (currentValue && !previousValue) ***REMOVED***
              return decl;
            ***REMOVED***
            if (!currentValue && previousValue) ***REMOVED***
              context.report(***REMOVED***
                node: memo.name,
                message: 'Shorthand props must be listed before all other props',
                fix: generateFixerFunction(node, context, reservedList)
              ***REMOVED***);
              return memo;
            ***REMOVED***
          ***REMOVED***

          if (shorthandLast) ***REMOVED***
            if (!currentValue && previousValue) ***REMOVED***
              return decl;
            ***REMOVED***
            if (currentValue && !previousValue) ***REMOVED***
              context.report(***REMOVED***
                node: memo.name,
                message: 'Shorthand props must be listed after all other props',
                fix: generateFixerFunction(node, context, reservedList)
              ***REMOVED***);
              return memo;
            ***REMOVED***
          ***REMOVED***

          if (!noSortAlphabetically && currentPropName < previousPropName) ***REMOVED***
            context.report(***REMOVED***
              node: decl.name,
              message: 'Props should be sorted alphabetically',
              fix: generateFixerFunction(node, context, reservedList)
            ***REMOVED***);
            return memo;
          ***REMOVED***

          return decl;
        ***REMOVED***, node.attributes[0]);
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
