/**
 * @fileoverview Enforce boolean attributes notation in JSX
 * @author Yannick Croissant
 */

'use strict';

const docsUrl = require('../util/docsUrl');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

const exceptionsSchema = ***REMOVED***
  type: 'array',
  items: ***REMOVED***type: 'string', minLength: 1***REMOVED***,
  uniqueItems: true
***REMOVED***;

const ALWAYS = 'always';
const NEVER = 'never';

const errorData = new WeakMap();
function getErrorData(exceptions) ***REMOVED***
  if (!errorData.has(exceptions)) ***REMOVED***
    const exceptionProps = Array.from(exceptions, name => `\`$***REMOVED***name***REMOVED***\``).join(', ');
    const exceptionsMessage = exceptions.size > 0 ? ` for the following props: $***REMOVED***exceptionProps***REMOVED***` : '';
    errorData.set(exceptions, ***REMOVED***exceptionsMessage***REMOVED***);
  ***REMOVED***
  return errorData.get(exceptions);
***REMOVED***

function isAlways(configuration, exceptions, propName) ***REMOVED***
  const isException = exceptions.has(propName);
  if (configuration === ALWAYS) ***REMOVED***
    return !isException;
  ***REMOVED***
  return isException;
***REMOVED***

function isNever(configuration, exceptions, propName) ***REMOVED***
  const isException = exceptions.has(propName);
  if (configuration === NEVER) ***REMOVED***
    return !isException;
  ***REMOVED***
  return isException;
***REMOVED***

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Enforce boolean attributes notation in JSX',
      category: 'Stylistic Issues',
      recommended: false,
      url: docsUrl('jsx-boolean-value')
    ***REMOVED***,
    fixable: 'code',

    schema: ***REMOVED***
      anyOf: [***REMOVED***
        type: 'array',
        items: [***REMOVED***enum: [ALWAYS, NEVER]***REMOVED***],
        additionalItems: false
      ***REMOVED***, ***REMOVED***
        type: 'array',
        items: [***REMOVED***
          enum: [ALWAYS]
        ***REMOVED***, ***REMOVED***
          type: 'object',
          additionalProperties: false,
          properties: ***REMOVED***
            [NEVER]: exceptionsSchema
          ***REMOVED***
        ***REMOVED***],
        additionalItems: false
      ***REMOVED***, ***REMOVED***
        type: 'array',
        items: [***REMOVED***
          enum: [NEVER]
        ***REMOVED***, ***REMOVED***
          type: 'object',
          additionalProperties: false,
          properties: ***REMOVED***
            [ALWAYS]: exceptionsSchema
          ***REMOVED***
        ***REMOVED***],
        additionalItems: false
      ***REMOVED***]
    ***REMOVED***
  ***REMOVED***,

  create(context) ***REMOVED***
    const configuration = context.options[0] || NEVER;
    const configObject = context.options[1] || ***REMOVED******REMOVED***;
    const exceptions = new Set((configuration === ALWAYS ? configObject[NEVER] : configObject[ALWAYS]) || []);

    const NEVER_MESSAGE = 'Value must be omitted for boolean attributes***REMOVED******REMOVED***exceptionsMessage***REMOVED******REMOVED***';
    const ALWAYS_MESSAGE = 'Value must be set for boolean attributes***REMOVED******REMOVED***exceptionsMessage***REMOVED******REMOVED***';

    return ***REMOVED***
      JSXAttribute(node) ***REMOVED***
        const propName = node.name && node.name.name;
        const value = node.value;

        if (isAlways(configuration, exceptions, propName) && value === null) ***REMOVED***
          const data = getErrorData(exceptions);
          context.report(***REMOVED***
            node,
            message: ALWAYS_MESSAGE,
            data,
            fix(fixer) ***REMOVED***
              return fixer.insertTextAfter(node, '=***REMOVED***true***REMOVED***');
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
        if (isNever(configuration, exceptions, propName) && value && value.type === 'JSXExpressionContainer' && value.expression.value === true) ***REMOVED***
          const data = getErrorData(exceptions);
          context.report(***REMOVED***
            node,
            message: NEVER_MESSAGE,
            data,
            fix(fixer) ***REMOVED***
              return fixer.removeRange([node.name.range[1], value.range[1]]);
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
