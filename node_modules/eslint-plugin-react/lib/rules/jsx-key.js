/**
 * @fileoverview Report missing `key` props in iterators/collection literals.
 * @author Ben Mosher
 */

'use strict';

const hasProp = require('jsx-ast-utils/hasProp');
const docsUrl = require('../util/docsUrl');


// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

const defaultOptions = ***REMOVED***
  checkFragmentShorthand: false
***REMOVED***;

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Report missing `key` props in iterators/collection literals',
      category: 'Possible Errors',
      recommended: true,
      url: docsUrl('jsx-key')
    ***REMOVED***,
    schema: [***REMOVED***
      type: 'object',
      properties: ***REMOVED***
        checkFragmentShorthand: ***REMOVED***
          type: 'boolean',
          default: defaultOptions.checkFragmentShorthand
        ***REMOVED***
      ***REMOVED***,
      additionalProperties: false
    ***REMOVED***]
  ***REMOVED***,

  create(context) ***REMOVED***
    const options = Object.assign(***REMOVED******REMOVED***, defaultOptions, context.options[0]);
    const checkFragmentShorthand = options.checkFragmentShorthand;

    function checkIteratorElement(node) ***REMOVED***
      if (node.type === 'JSXElement' && !hasProp(node.openingElement.attributes, 'key')) ***REMOVED***
        context.report(***REMOVED***
          node,
          message: 'Missing "key" prop for element in iterator'
        ***REMOVED***);
      ***REMOVED*** else if (checkFragmentShorthand && node.type === 'JSXFragment') ***REMOVED***
        context.report(***REMOVED***
          node,
          message: 'Missing "key" prop for element in iterator. Shorthand fragment syntax does support providing keys'
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***

    function getReturnStatement(body) ***REMOVED***
      return body.filter(item => item.type === 'ReturnStatement')[0];
    ***REMOVED***

    return ***REMOVED***
      JSXElement(node) ***REMOVED***
        if (hasProp(node.openingElement.attributes, 'key')) ***REMOVED***
          return;
        ***REMOVED***

        if (node.parent.type === 'ArrayExpression') ***REMOVED***
          context.report(***REMOVED***
            node,
            message: 'Missing "key" prop for element in array'
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***,

      JSXFragment(node) ***REMOVED***
        if (!checkFragmentShorthand) ***REMOVED***
          return;
        ***REMOVED***

        if (node.parent.type === 'ArrayExpression') ***REMOVED***
          context.report(***REMOVED***
            node,
            message: 'Missing "key" prop for element in array. Shorthand fragment syntax does support providing keys'
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***,

      // Array.prototype.map
      CallExpression(node) ***REMOVED***
        if (node.callee && node.callee.type !== 'MemberExpression') ***REMOVED***
          return;
        ***REMOVED***

        if (node.callee && node.callee.property && node.callee.property.name !== 'map') ***REMOVED***
          return;
        ***REMOVED***

        const fn = node.arguments[0];
        const isFn = fn && fn.type === 'FunctionExpression';
        const isArrFn = fn && fn.type === 'ArrowFunctionExpression';

        if (isArrFn && (fn.body.type === 'JSXElement' || fn.body.type === 'JSXFragment')) ***REMOVED***
          checkIteratorElement(fn.body);
        ***REMOVED***

        if (isFn || isArrFn) ***REMOVED***
          if (fn.body.type === 'BlockStatement') ***REMOVED***
            const returnStatement = getReturnStatement(fn.body.body);
            if (returnStatement && returnStatement.argument) ***REMOVED***
              checkIteratorElement(returnStatement.argument);
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
