/**
 * @fileoverview Validate JSX maximum depth
 * @author Chris<wfsr@foxmail.com>
 */

'use strict';

const has = require('has');
const variableUtil = require('../util/variable');
const jsxUtil = require('../util/jsx');
const docsUrl = require('../util/docsUrl');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------
module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Validate JSX maximum depth',
      category: 'Stylistic Issues',
      recommended: false,
      url: docsUrl('jsx-max-depth')
    ***REMOVED***,
    schema: [
      ***REMOVED***
        type: 'object',
        properties: ***REMOVED***
          max: ***REMOVED***
            type: 'integer',
            minimum: 0
          ***REMOVED***
        ***REMOVED***,
        additionalProperties: false
      ***REMOVED***
    ]
  ***REMOVED***,
  create(context) ***REMOVED***
    const MESSAGE = 'Expected the depth of nested jsx elements to be <= ***REMOVED******REMOVED***needed***REMOVED******REMOVED***, but found ***REMOVED******REMOVED***found***REMOVED******REMOVED***.';
    const DEFAULT_DEPTH = 2;

    const option = context.options[0] || ***REMOVED******REMOVED***;
    const maxDepth = has(option, 'max') ? option.max : DEFAULT_DEPTH;

    function isExpression(node) ***REMOVED***
      return node.type === 'JSXExpressionContainer';
    ***REMOVED***

    function hasJSX(node) ***REMOVED***
      return jsxUtil.isJSX(node) || isExpression(node) && jsxUtil.isJSX(node.expression);
    ***REMOVED***

    function isLeaf(node) ***REMOVED***
      const children = node.children;

      return !children.length || !children.some(hasJSX);
    ***REMOVED***

    function getDepth(node) ***REMOVED***
      let count = 0;

      while (jsxUtil.isJSX(node.parent) || isExpression(node.parent)) ***REMOVED***
        node = node.parent;
        if (jsxUtil.isJSX(node)) ***REMOVED***
          count++;
        ***REMOVED***
      ***REMOVED***

      return count;
    ***REMOVED***


    function report(node, depth) ***REMOVED***
      context.report(***REMOVED***
        node,
        message: MESSAGE,
        data: ***REMOVED***
          found: depth,
          needed: maxDepth
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***

    function findJSXElementOrFragment(variables, name) ***REMOVED***
      function find(refs) ***REMOVED***
        let i = refs.length;

        while (--i >= 0) ***REMOVED***
          if (has(refs[i], 'writeExpr')) ***REMOVED***
            const writeExpr = refs[i].writeExpr;

            return jsxUtil.isJSX(writeExpr) &&
              writeExpr ||
              (writeExpr && writeExpr.type === 'Identifier') &&
              findJSXElementOrFragment(variables, writeExpr.name);
          ***REMOVED***
        ***REMOVED***

        return null;
      ***REMOVED***

      const variable = variableUtil.getVariable(variables, name);
      return variable && variable.references && find(variable.references);
    ***REMOVED***

    function checkDescendant(baseDepth, children) ***REMOVED***
      baseDepth++;
      (children || []).forEach((node) => ***REMOVED***
        if (!hasJSX(node)) ***REMOVED***
          return;
        ***REMOVED***

        if (baseDepth > maxDepth) ***REMOVED***
          report(node, baseDepth);
        ***REMOVED*** else if (!isLeaf(node)) ***REMOVED***
          checkDescendant(baseDepth, node.children);
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***

    function handleJSX(node) ***REMOVED***
      if (!isLeaf(node)) ***REMOVED***
        return;
      ***REMOVED***

      const depth = getDepth(node);
      if (depth > maxDepth) ***REMOVED***
        report(node, depth);
      ***REMOVED***
    ***REMOVED***

    return ***REMOVED***
      JSXElement: handleJSX,
      JSXFragment: handleJSX,

      JSXExpressionContainer(node) ***REMOVED***
        if (node.expression.type !== 'Identifier') ***REMOVED***
          return;
        ***REMOVED***

        const variables = variableUtil.variablesInScope(context);
        const element = findJSXElementOrFragment(variables, node.expression.name);

        if (element) ***REMOVED***
          const baseDepth = getDepth(node);
          checkDescendant(baseDepth, element.children);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
