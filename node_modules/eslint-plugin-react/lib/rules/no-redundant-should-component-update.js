/**
 * @fileoverview Flag shouldComponentUpdate when extending PureComponent
 */

'use strict';

const Components = require('../util/Components');
const astUtil = require('../util/ast');
const docsUrl = require('../util/docsUrl');

function errorMessage(node) ***REMOVED***
  return `$***REMOVED***node***REMOVED*** does not need shouldComponentUpdate when extending React.PureComponent.`;
***REMOVED***

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Flag shouldComponentUpdate when extending PureComponent',
      category: 'Possible Errors',
      recommended: false,
      url: docsUrl('no-redundant-should-component-update')
    ***REMOVED***,
    schema: []
  ***REMOVED***,

  create: Components.detect((context, components, utils) => ***REMOVED***
    /**
     * Checks for shouldComponentUpdate property
     * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked.
     * @returns ***REMOVED***Boolean***REMOVED*** Whether or not the property exists.
     */
    function hasShouldComponentUpdate(node) ***REMOVED***
      const properties = astUtil.getComponentProperties(node);
      return properties.some((property) => ***REMOVED***
        const name = astUtil.getPropertyName(property);
        return name === 'shouldComponentUpdate';
      ***REMOVED***);
    ***REMOVED***

    /**
     * Get name of node if available
     * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked.
     * @return ***REMOVED***String***REMOVED*** The name of the node
     */
    function getNodeName(node) ***REMOVED***
      if (node.id) ***REMOVED***
        return node.id.name;
      ***REMOVED***
      if (node.parent && node.parent.id) ***REMOVED***
        return node.parent.id.name;
      ***REMOVED***
      return '';
    ***REMOVED***

    /**
     * Checks for violation of rule
     * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked.
     */
    function checkForViolation(node) ***REMOVED***
      if (utils.isPureComponent(node)) ***REMOVED***
        const hasScu = hasShouldComponentUpdate(node);
        if (hasScu) ***REMOVED***
          const className = getNodeName(node);
          context.report(***REMOVED***
            node,
            message: errorMessage(className)
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

    return ***REMOVED***
      ClassDeclaration: checkForViolation,
      ClassExpression: checkForViolation
    ***REMOVED***;
  ***REMOVED***)
***REMOVED***;
