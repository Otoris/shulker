/**
 * @fileoverview Prevent usage of the return value of React.render
 * @author Dustan Kasten
 */

'use strict';

const versionUtil = require('../util/version');
const docsUrl = require('../util/docsUrl');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Prevent usage of the return value of React.render',
      category: 'Best Practices',
      recommended: true,
      url: docsUrl('no-render-return-value')
    ***REMOVED***,
    schema: []
  ***REMOVED***,

  create(context) ***REMOVED***
    // --------------------------------------------------------------------------
    // Public
    // --------------------------------------------------------------------------

    let calleeObjectName = /^ReactDOM$/;
    if (versionUtil.testReactVersion(context, '15.0.0')) ***REMOVED***
      calleeObjectName = /^ReactDOM$/;
    ***REMOVED*** else if (versionUtil.testReactVersion(context, '0.14.0')) ***REMOVED***
      calleeObjectName = /^React(DOM)?$/;
    ***REMOVED*** else if (versionUtil.testReactVersion(context, '0.13.0')) ***REMOVED***
      calleeObjectName = /^React$/;
    ***REMOVED***

    return ***REMOVED***

      CallExpression(node) ***REMOVED***
        const callee = node.callee;
        const parent = node.parent;
        if (callee.type !== 'MemberExpression') ***REMOVED***
          return;
        ***REMOVED***

        if (
          callee.object.type !== 'Identifier' ||
          !calleeObjectName.test(callee.object.name) ||
          callee.property.name !== 'render'
        ) ***REMOVED***
          return;
        ***REMOVED***

        if (
          parent.type === 'VariableDeclarator' ||
          parent.type === 'Property' ||
          parent.type === 'ReturnStatement' ||
          parent.type === 'ArrowFunctionExpression'
        ) ***REMOVED***
          context.report(***REMOVED***
            node: callee,
            message: `Do not depend on the return value from $***REMOVED***callee.object.name***REMOVED***.render`
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
