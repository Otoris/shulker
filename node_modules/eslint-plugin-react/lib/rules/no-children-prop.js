/**
 * @fileoverview Prevent passing of children as props
 * @author Benjamin Stepp
 */

'use strict';

const docsUrl = require('../util/docsUrl');

// ------------------------------------------------------------------------------
// Helpers
// ------------------------------------------------------------------------------

/**
 * Checks if the node is a createElement call with a props literal.
 * @param ***REMOVED***ASTNode***REMOVED*** node - The AST node being checked.
 * @returns ***REMOVED***Boolean***REMOVED*** - True if node is a createElement call with a props
 * object literal, False if not.
*/
function isCreateElementWithProps(node) ***REMOVED***
  return node.callee &&
    node.callee.type === 'MemberExpression' &&
    node.callee.property.name === 'createElement' &&
    node.arguments.length > 1 &&
    node.arguments[1].type === 'ObjectExpression';
***REMOVED***

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Prevent passing of children as props.',
      category: 'Best Practices',
      recommended: true,
      url: docsUrl('no-children-prop')
    ***REMOVED***,
    schema: []
  ***REMOVED***,
  create(context) ***REMOVED***
    return ***REMOVED***
      JSXAttribute(node) ***REMOVED***
        if (node.name.name !== 'children') ***REMOVED***
          return;
        ***REMOVED***

        context.report(***REMOVED***
          node,
          message: 'Do not pass children as props. Instead, nest children between the opening and closing tags.'
        ***REMOVED***);
      ***REMOVED***,
      CallExpression(node) ***REMOVED***
        if (!isCreateElementWithProps(node)) ***REMOVED***
          return;
        ***REMOVED***

        const props = node.arguments[1].properties;
        const childrenProp = props.find(prop => prop.key && prop.key.name === 'children');

        if (childrenProp) ***REMOVED***
          context.report(***REMOVED***
            node,
            message: 'Do not pass children as props. Instead, pass them as additional arguments to React.createElement.'
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
