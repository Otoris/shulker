/**
 * @fileoverview Forbid target='_blank' attribute
 * @author Kevin Miller
 */

'use strict';

const docsUrl = require('../util/docsUrl');
const linkComponentsUtil = require('../util/linkComponents');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

function isTargetBlank(attr) ***REMOVED***
  return attr.name &&
    attr.name.name === 'target' &&
    attr.value &&
    attr.value.type === 'Literal' &&
    attr.value.value.toLowerCase() === '_blank';
***REMOVED***

function hasExternalLink(element, linkAttribute) ***REMOVED***
  return element.attributes.some(attr => attr.name &&
      attr.name.name === linkAttribute &&
      attr.value.type === 'Literal' &&
      /^(?:\w+:|\/\/)/.test(attr.value.value));
***REMOVED***

function hasDynamicLink(element, linkAttribute) ***REMOVED***
  return element.attributes.some(attr => attr.name &&
    attr.name.name === linkAttribute &&
    attr.value.type === 'JSXExpressionContainer');
***REMOVED***

function hasSecureRel(element) ***REMOVED***
  return element.attributes.find((attr) => ***REMOVED***
    if (attr.type === 'JSXAttribute' && attr.name.name === 'rel') ***REMOVED***
      const tags = attr.value && attr.value.type === 'Literal' && attr.value.value.toLowerCase().split(' ');
      return tags && (tags.indexOf('noopener') >= 0 && tags.indexOf('noreferrer') >= 0);
    ***REMOVED***
    return false;
  ***REMOVED***);
***REMOVED***

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Forbid target="_blank" attribute without rel="noopener noreferrer"',
      category: 'Best Practices',
      recommended: true,
      url: docsUrl('jsx-no-target-blank')
    ***REMOVED***,
    schema: [***REMOVED***
      type: 'object',
      properties: ***REMOVED***
        enforceDynamicLinks: ***REMOVED***
          enum: ['always', 'never']
        ***REMOVED***
      ***REMOVED***,
      additionalProperties: false
    ***REMOVED***]
  ***REMOVED***,

  create(context) ***REMOVED***
    const configuration = context.options[0] || ***REMOVED******REMOVED***;
    const enforceDynamicLinks = configuration.enforceDynamicLinks || 'always';
    const components = linkComponentsUtil.getLinkComponents(context);

    return ***REMOVED***
      JSXAttribute(node) ***REMOVED***
        if (!components.has(node.parent.name.name) || !isTargetBlank(node) || hasSecureRel(node.parent)) ***REMOVED***
          return;
        ***REMOVED***

        const linkAttribute = components.get(node.parent.name.name);

        if (hasExternalLink(node.parent, linkAttribute) || (enforceDynamicLinks === 'always' && hasDynamicLink(node.parent, linkAttribute))) ***REMOVED***
          context.report(***REMOVED***
            node,
            message: 'Using target="_blank" without rel="noopener noreferrer" ' +
              'is a security risk: see https://mathiasbynens.github.io/rel-noopener'
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
