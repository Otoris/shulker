/**
 * @fileoverview Enforce style prop value is an object
 * @author David Petersen
 */

'use strict';

const variableUtil = require('../util/variable');
const docsUrl = require('../util/docsUrl');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Enforce style prop value is an object',
      category: '',
      recommended: false,
      url: docsUrl('style-prop-object')
    ***REMOVED***,
    schema: []
  ***REMOVED***,

  create(context) ***REMOVED***
    /**
     * @param ***REMOVED***ASTNode***REMOVED*** expression An Identifier node
     */
    function isNonNullaryLiteral(expression) ***REMOVED***
      return expression.type === 'Literal' && expression.value !== null;
    ***REMOVED***

    /**
     * @param ***REMOVED***object***REMOVED*** node A Identifier node
     */
    function checkIdentifiers(node) ***REMOVED***
      const variable = variableUtil.variablesInScope(context).find(item => item.name === node.name);

      if (!variable || !variable.defs[0] || !variable.defs[0].node.init) ***REMOVED***
        return;
      ***REMOVED***

      if (isNonNullaryLiteral(variable.defs[0].node.init)) ***REMOVED***
        context.report(***REMOVED***
          node,
          message: 'Style prop value must be an object'
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***

    return ***REMOVED***
      CallExpression(node) ***REMOVED***
        if (
          node.callee &&
          node.callee.type === 'MemberExpression' &&
          node.callee.property.name === 'createElement' &&
          node.arguments.length > 1
        ) ***REMOVED***
          if (node.arguments[1].type === 'ObjectExpression') ***REMOVED***
            const style = node.arguments[1].properties.find(property => property.key && property.key.name === 'style' && !property.computed);
            if (style) ***REMOVED***
              if (style.value.type === 'Identifier') ***REMOVED***
                checkIdentifiers(style.value);
              ***REMOVED*** else if (isNonNullaryLiteral(style.value)) ***REMOVED***
                context.report(***REMOVED***
                  node: style.value,
                  message: 'Style prop value must be an object'
                ***REMOVED***);
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***,

      JSXAttribute(node) ***REMOVED***
        if (!node.value || node.name.name !== 'style') ***REMOVED***
          return;
        ***REMOVED***

        if (node.value.type !== 'JSXExpressionContainer' || isNonNullaryLiteral(node.value.expression)) ***REMOVED***
          context.report(***REMOVED***
            node,
            message: 'Style prop value must be an object'
          ***REMOVED***);
        ***REMOVED*** else if (node.value.expression.type === 'Identifier') ***REMOVED***
          checkIdentifiers(node.value.expression);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
