/**
 * @fileoverview Prevent extra closing tags for components without children
 * @author Yannick Croissant
 */

'use strict';

const docsUrl = require('../util/docsUrl');
const jsxUtil = require('../util/jsx');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

const optionDefaults = ***REMOVED***component: true, html: true***REMOVED***;

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Prevent extra closing tags for components without children',
      category: 'Stylistic Issues',
      recommended: false,
      url: docsUrl('self-closing-comp')
    ***REMOVED***,
    fixable: 'code',

    schema: [***REMOVED***
      type: 'object',
      properties: ***REMOVED***
        component: ***REMOVED***
          default: optionDefaults.component,
          type: 'boolean'
        ***REMOVED***,
        html: ***REMOVED***
          default: optionDefaults.html,
          type: 'boolean'
        ***REMOVED***
      ***REMOVED***,
      additionalProperties: false
    ***REMOVED***]
  ***REMOVED***,

  create(context) ***REMOVED***
    function isComponent(node) ***REMOVED***
      return node.name && node.name.type === 'JSXIdentifier' && !jsxUtil.isDOMComponent(node);
    ***REMOVED***

    function childrenIsEmpty(node) ***REMOVED***
      return node.parent.children.length === 0;
    ***REMOVED***

    function childrenIsMultilineSpaces(node) ***REMOVED***
      const childrens = node.parent.children;

      return (
        childrens.length === 1 &&
        (childrens[0].type === 'Literal' || childrens[0].type === 'JSXText') &&
        childrens[0].value.indexOf('\n') !== -1 &&
        childrens[0].value.replace(/(?!\xA0)\s/g, '') === ''
      );
    ***REMOVED***

    function isShouldBeSelfClosed(node) ***REMOVED***
      const configuration = Object.assign(***REMOVED******REMOVED***, optionDefaults, context.options[0]);
      return (
        configuration.component && isComponent(node) ||
        configuration.html && jsxUtil.isDOMComponent(node)
      ) && !node.selfClosing && (childrenIsEmpty(node) || childrenIsMultilineSpaces(node));
    ***REMOVED***

    // --------------------------------------------------------------------------
    // Public
    // --------------------------------------------------------------------------

    return ***REMOVED***

      JSXOpeningElement(node) ***REMOVED***
        if (!isShouldBeSelfClosed(node)) ***REMOVED***
          return;
        ***REMOVED***
        context.report(***REMOVED***
          node,
          message: 'Empty components are self-closing',
          fix(fixer) ***REMOVED***
            // Represents the last character of the JSXOpeningElement, the '>' character
            const openingElementEnding = node.range[1] - 1;
            // Represents the last character of the JSXClosingElement, the '>' character
            const closingElementEnding = node.parent.closingElement.range[1];

            // Replace />.*<\/.*>/ with '/>'
            const range = [openingElementEnding, closingElementEnding];
            return fixer.replaceTextRange(range, ' />');
          ***REMOVED***
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
