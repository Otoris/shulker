/**
 * @fileoverview Prevent multiple component definition per file
 * @author Yannick Croissant
 */

'use strict';

const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Prevent multiple component definition per file',
      category: 'Stylistic Issues',
      recommended: false,
      url: docsUrl('no-multi-comp')
    ***REMOVED***,

    schema: [***REMOVED***
      type: 'object',
      properties: ***REMOVED***
        ignoreStateless: ***REMOVED***
          default: false,
          type: 'boolean'
        ***REMOVED***
      ***REMOVED***,
      additionalProperties: false
    ***REMOVED***]
  ***REMOVED***,

  create: Components.detect((context, components, utils) => ***REMOVED***
    const configuration = context.options[0] || ***REMOVED******REMOVED***;
    const ignoreStateless = configuration.ignoreStateless || false;

    const MULTI_COMP_MESSAGE = 'Declare only one React component per file';

    /**
     * Checks if the component is ignored
     * @param ***REMOVED***Object***REMOVED*** component The component being checked.
     * @returns ***REMOVED***Boolean***REMOVED*** True if the component is ignored, false if not.
     */
    function isIgnored(component) ***REMOVED***
      return (
        ignoreStateless && (
          /Function/.test(component.node.type) ||
          utils.isPragmaComponentWrapper(component.node)
        )
      );
    ***REMOVED***

    // --------------------------------------------------------------------------
    // Public
    // --------------------------------------------------------------------------

    return ***REMOVED***
      'Program:exit': function () ***REMOVED***
        if (components.length() <= 1) ***REMOVED***
          return;
        ***REMOVED***

        const list = components.list();

        Object.keys(list).filter(component => !isIgnored(list[component])).forEach((component, i) => ***REMOVED***
          if (i >= 1) ***REMOVED***
            context.report(***REMOVED***
              node: list[component].node,
              message: MULTI_COMP_MESSAGE
            ***REMOVED***);
          ***REMOVED***
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***)
***REMOVED***;
