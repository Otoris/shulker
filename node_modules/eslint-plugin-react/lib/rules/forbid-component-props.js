/**
 * @fileoverview Forbid certain props on components
 * @author Joe Lencioni
 */

'use strict';

const docsUrl = require('../util/docsUrl');

// ------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------

const DEFAULTS = ['className', 'style'];

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Forbid certain props on components',
      category: 'Best Practices',
      recommended: false,
      url: docsUrl('forbid-component-props')
    ***REMOVED***,

    schema: [***REMOVED***
      type: 'object',
      properties: ***REMOVED***
        forbid: ***REMOVED***
          type: 'array',
          items: ***REMOVED***
            oneOf: [***REMOVED***
              type: 'string'
            ***REMOVED***, ***REMOVED***
              type: 'object',
              properties: ***REMOVED***
                propName: ***REMOVED***
                  type: 'string'
                ***REMOVED***,
                allowedFor: ***REMOVED***
                  type: 'array',
                  uniqueItems: true,
                  items: ***REMOVED***
                    type: 'string'
                  ***REMOVED***
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***]
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***]
  ***REMOVED***,

  create(context) ***REMOVED***
    const configuration = context.options[0] || ***REMOVED******REMOVED***;
    const forbid = new Map((configuration.forbid || DEFAULTS).map((value) => ***REMOVED***
      const propName = typeof value === 'string' ? value : value.propName;
      const whitelist = typeof value === 'string' ? [] : (value.allowedFor || []);
      return [propName, whitelist];
    ***REMOVED***));

    function isForbidden(prop, tagName) ***REMOVED***
      const whitelist = forbid.get(prop);
      // if the tagName is undefined (`<this.something>`), we assume it's a forbidden element
      return typeof whitelist !== 'undefined' && (typeof tagName === 'undefined' || whitelist.indexOf(tagName) === -1);
    ***REMOVED***

    return ***REMOVED***
      JSXAttribute(node) ***REMOVED***
        const tag = node.parent.name.name;
        if (tag && tag[0] !== tag[0].toUpperCase()) ***REMOVED***
          // This is a DOM node, not a Component, so exit.
          return;
        ***REMOVED***

        const prop = node.name.name;

        if (!isForbidden(prop, tag)) ***REMOVED***
          return;
        ***REMOVED***

        context.report(***REMOVED***
          node,
          message: `Prop \`$***REMOVED***prop***REMOVED***\` is forbidden on Components`
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
