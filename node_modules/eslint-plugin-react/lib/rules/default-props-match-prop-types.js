/**
 * @fileOverview Enforce all defaultProps are defined in propTypes
 * @author Vitor Balocco
 * @author Roy Sutton
 */

'use strict';

const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Enforce all defaultProps are defined and not "required" in propTypes.',
      category: 'Best Practices',
      url: docsUrl('default-props-match-prop-types')
    ***REMOVED***,

    schema: [***REMOVED***
      type: 'object',
      properties: ***REMOVED***
        allowRequiredDefaults: ***REMOVED***
          default: false,
          type: 'boolean'
        ***REMOVED***
      ***REMOVED***,
      additionalProperties: false
    ***REMOVED***]
  ***REMOVED***,

  create: Components.detect((context, components) => ***REMOVED***
    const configuration = context.options[0] || ***REMOVED******REMOVED***;
    const allowRequiredDefaults = configuration.allowRequiredDefaults || false;

    /**
     * Reports all defaultProps passed in that don't have an appropriate propTypes counterpart.
     * @param  ***REMOVED***Object[]***REMOVED*** propTypes    Array of propTypes to check.
     * @param  ***REMOVED***Object***REMOVED***   defaultProps Object of defaultProps to check. Keys are the props names.
     * @return ***REMOVED***void***REMOVED***
     */
    function reportInvalidDefaultProps(propTypes, defaultProps) ***REMOVED***
      // If this defaultProps is "unresolved" or the propTypes is undefined, then we should ignore
      // this component and not report any errors for it, to avoid false-positives with e.g.
      // external defaultProps/propTypes declarations or spread operators.
      if (defaultProps === 'unresolved' || !propTypes || Object.keys(propTypes).length === 0) ***REMOVED***
        return;
      ***REMOVED***

      Object.keys(defaultProps).forEach((defaultPropName) => ***REMOVED***
        const defaultProp = defaultProps[defaultPropName];
        const prop = propTypes[defaultPropName];

        if (prop && (allowRequiredDefaults || !prop.isRequired)) ***REMOVED***
          return;
        ***REMOVED***

        if (prop) ***REMOVED***
          context.report(***REMOVED***
            node: defaultProp.node,
            message: 'defaultProp "***REMOVED******REMOVED***name***REMOVED******REMOVED***" defined for isRequired propType.',
            data: ***REMOVED***name: defaultPropName***REMOVED***
          ***REMOVED***);
        ***REMOVED*** else ***REMOVED***
          context.report(***REMOVED***
            node: defaultProp.node,
            message: 'defaultProp "***REMOVED******REMOVED***name***REMOVED******REMOVED***" has no corresponding propTypes declaration.',
            data: ***REMOVED***name: defaultPropName***REMOVED***
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***

    // --------------------------------------------------------------------------
    // Public API
    // --------------------------------------------------------------------------

    return ***REMOVED***
      'Program:exit': function () ***REMOVED***
        const list = components.list();

        // If no defaultProps could be found, we don't report anything.
        Object.keys(list).filter(component => list[component].defaultProps).forEach((component) => ***REMOVED***
          reportInvalidDefaultProps(
            list[component].declaredPropTypes,
            list[component].defaultProps || ***REMOVED******REMOVED***
          );
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***)
***REMOVED***;
