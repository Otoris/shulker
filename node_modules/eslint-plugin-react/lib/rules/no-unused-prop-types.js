/**
 * @fileoverview Prevent definitions of unused prop types
 * @author Evgueni Naverniouk
 */

'use strict';

// As for exceptions for props.children or props.className (and alike) look at
// https://github.com/yannickcr/eslint-plugin-react/issues/7

const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Prevent definitions of unused prop types',
      category: 'Best Practices',
      recommended: false,
      url: docsUrl('no-unused-prop-types')
    ***REMOVED***,

    schema: [***REMOVED***
      type: 'object',
      properties: ***REMOVED***
        customValidators: ***REMOVED***
          type: 'array',
          items: ***REMOVED***
            type: 'string'
          ***REMOVED***
        ***REMOVED***,
        skipShapeProps: ***REMOVED***
          type: 'boolean'
        ***REMOVED***
      ***REMOVED***,
      additionalProperties: false
    ***REMOVED***]
  ***REMOVED***,

  create: Components.detect((context, components) => ***REMOVED***
    const defaults = ***REMOVED***skipShapeProps: true, customValidators: []***REMOVED***;
    const configuration = Object.assign(***REMOVED******REMOVED***, defaults, context.options[0] || ***REMOVED******REMOVED***);
    const UNUSED_MESSAGE = '\'***REMOVED******REMOVED***name***REMOVED******REMOVED***\' PropType is defined but prop is never used';

    /**
     * Checks if the component must be validated
     * @param ***REMOVED***Object***REMOVED*** component The component to process
     * @returns ***REMOVED***Boolean***REMOVED*** True if the component must be validated, false if not.
     */
    function mustBeValidated(component) ***REMOVED***
      return Boolean(
        component &&
        !component.ignoreUnusedPropTypesValidation
      );
    ***REMOVED***

    /**
     * Checks if a prop is used
     * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked.
     * @param ***REMOVED***Object***REMOVED*** prop Declared prop object
     * @returns ***REMOVED***Boolean***REMOVED*** True if the prop is used, false if not.
     */
    function isPropUsed(node, prop) ***REMOVED***
      const usedPropTypes = node.usedPropTypes || [];
      for (let i = 0, l = usedPropTypes.length; i < l; i++) ***REMOVED***
        const usedProp = usedPropTypes[i];
        if (
          prop.type === 'shape' ||
          prop.name === '__ANY_KEY__' ||
          usedProp.name === prop.name
        ) ***REMOVED***
          return true;
        ***REMOVED***
      ***REMOVED***

      return false;
    ***REMOVED***

    /**
     * Used to recursively loop through each declared prop type
     * @param ***REMOVED***Object***REMOVED*** component The component to process
     * @param ***REMOVED***ASTNode[]|true***REMOVED*** props List of props to validate
     */
    function reportUnusedPropType(component, props) ***REMOVED***
      // Skip props that check instances
      if (props === true) ***REMOVED***
        return;
      ***REMOVED***

      Object.keys(props || ***REMOVED******REMOVED***).forEach((key) => ***REMOVED***
        const prop = props[key];
        // Skip props that check instances
        if (prop === true) ***REMOVED***
          return;
        ***REMOVED***

        if (prop.type === 'shape' && configuration.skipShapeProps) ***REMOVED***
          return;
        ***REMOVED***

        if (prop.node && !isPropUsed(component, prop)) ***REMOVED***
          context.report(***REMOVED***
            node: prop.node.value || prop.node,
            message: UNUSED_MESSAGE,
            data: ***REMOVED***
              name: prop.fullName
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***

        if (prop.children) ***REMOVED***
          reportUnusedPropType(component, prop.children);
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***

    /**
     * Reports unused proptypes for a given component
     * @param ***REMOVED***Object***REMOVED*** component The component to process
     */
    function reportUnusedPropTypes(component) ***REMOVED***
      reportUnusedPropType(component, component.declaredPropTypes);
    ***REMOVED***

    // --------------------------------------------------------------------------
    // Public
    // --------------------------------------------------------------------------

    return ***REMOVED***
      'Program:exit': function () ***REMOVED***
        const list = components.list();
        // Report undeclared proptypes for all classes
        Object.keys(list).filter(component => mustBeValidated(list[component])).forEach((component) => ***REMOVED***
          if (!mustBeValidated(list[component])) ***REMOVED***
            return;
          ***REMOVED***
          reportUnusedPropTypes(list[component]);
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***)
***REMOVED***;
