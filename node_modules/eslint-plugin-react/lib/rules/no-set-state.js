/**
 * @fileoverview Prevent usage of setState
 * @author Mark Dalgleish
 */

'use strict';

const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Prevent usage of setState',
      category: 'Stylistic Issues',
      recommended: false,
      url: docsUrl('no-set-state')
    ***REMOVED***,
    schema: []
  ***REMOVED***,

  create: Components.detect((context, components, utils) => ***REMOVED***
    /**
     * Checks if the component is valid
     * @param ***REMOVED***Object***REMOVED*** component The component to process
     * @returns ***REMOVED***Boolean***REMOVED*** True if the component is valid, false if not.
     */
    function isValid(component) ***REMOVED***
      return Boolean(component && !component.useSetState);
    ***REMOVED***

    /**
     * Reports usages of setState for a given component
     * @param ***REMOVED***Object***REMOVED*** component The component to process
     */
    function reportSetStateUsages(component) ***REMOVED***
      let setStateUsage;
      for (let i = 0, j = component.setStateUsages.length; i < j; i++) ***REMOVED***
        setStateUsage = component.setStateUsages[i];
        context.report(***REMOVED***
          node: setStateUsage,
          message: 'Do not use setState'
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***

    // --------------------------------------------------------------------------
    // Public
    // --------------------------------------------------------------------------

    return ***REMOVED***

      CallExpression(node) ***REMOVED***
        const callee = node.callee;
        if (
          callee.type !== 'MemberExpression' ||
          callee.object.type !== 'ThisExpression' ||
          callee.property.name !== 'setState'
        ) ***REMOVED***
          return;
        ***REMOVED***
        const component = components.get(utils.getParentComponent());
        const setStateUsages = component && component.setStateUsages || [];
        setStateUsages.push(callee);
        components.set(node, ***REMOVED***
          useSetState: true,
          setStateUsages
        ***REMOVED***);
      ***REMOVED***,

      'Program:exit': function () ***REMOVED***
        const list = components.list();
        Object.keys(list).filter(component => !isValid(list[component])).forEach((component) => ***REMOVED***
          reportSetStateUsages(list[component]);
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***)
***REMOVED***;
