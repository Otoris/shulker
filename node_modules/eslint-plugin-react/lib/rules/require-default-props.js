/**
 * @fileOverview Enforce a defaultProps definition for every prop that is not a required prop.
 * @author Vitor Balocco
 */

'use strict';

const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');


// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Enforce a defaultProps definition for every prop that is not a required prop.',
      category: 'Best Practices',
      url: docsUrl('require-default-props')
    ***REMOVED***,

    schema: [***REMOVED***
      type: 'object',
      properties: ***REMOVED***
        forbidDefaultForRequired: ***REMOVED***
          type: 'boolean'
        ***REMOVED***
      ***REMOVED***,
      additionalProperties: false
    ***REMOVED***]
  ***REMOVED***,

  create: Components.detect((context, components) => ***REMOVED***
    const configuration = context.options[0] || ***REMOVED******REMOVED***;
    const forbidDefaultForRequired = configuration.forbidDefaultForRequired || false;


    /**
     * Reports all propTypes passed in that don't have a defaultProps counterpart.
     * @param  ***REMOVED***Object[]***REMOVED*** propTypes    List of propTypes to check.
     * @param  ***REMOVED***Object***REMOVED***   defaultProps Object of defaultProps to check. Keys are the props names.
     * @return ***REMOVED***void***REMOVED***
     */
    function reportPropTypesWithoutDefault(propTypes, defaultProps) ***REMOVED***
      // If this defaultProps is "unresolved", then we should ignore this component and not report
      // any errors for it, to avoid false-positives with e.g. external defaultProps declarations or spread operators.
      if (defaultProps === 'unresolved') ***REMOVED***
        return;
      ***REMOVED***

      Object.keys(propTypes).forEach((propName) => ***REMOVED***
        const prop = propTypes[propName];
        if (prop.isRequired) ***REMOVED***
          if (forbidDefaultForRequired && defaultProps[propName]) ***REMOVED***
            context.report(***REMOVED***
              node: prop.node,
              message: 'propType "***REMOVED******REMOVED***name***REMOVED******REMOVED***" is required and should not have a defaultProps declaration.',
              data: ***REMOVED***name: propName***REMOVED***
            ***REMOVED***);
          ***REMOVED***
          return;
        ***REMOVED***

        if (defaultProps[propName]) ***REMOVED***
          return;
        ***REMOVED***

        context.report(***REMOVED***
          node: prop.node,
          message: 'propType "***REMOVED******REMOVED***name***REMOVED******REMOVED***" is not required, but has no corresponding defaultProps declaration.',
          data: ***REMOVED***name: propName***REMOVED***
        ***REMOVED***);
      ***REMOVED***);
    ***REMOVED***

    // --------------------------------------------------------------------------
    // Public API
    // --------------------------------------------------------------------------

    return ***REMOVED***
      'Program:exit': function () ***REMOVED***
        const list = components.list();

        Object.keys(list).filter(component => list[component].declaredPropTypes).forEach((component) => ***REMOVED***
          reportPropTypesWithoutDefault(
            list[component].declaredPropTypes,
            list[component].defaultProps || ***REMOVED******REMOVED***
          );
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***)
***REMOVED***;
