/**
 * @fileoverview Disallow multiple spaces between inline JSX props
 * @author Adrian Moennich
 */

'use strict';

const docsUrl = require('../util/docsUrl');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Disallow multiple spaces between inline JSX props',
      category: 'Stylistic Issues',
      recommended: false,
      url: docsUrl('jsx-props-no-multi-spaces')
    ***REMOVED***,
    fixable: 'code',
    schema: []
  ***REMOVED***,

  create(context) ***REMOVED***
    function getPropName(propNode) ***REMOVED***
      switch (propNode.type) ***REMOVED***
        case 'JSXSpreadAttribute':
          return context.getSourceCode().getText(propNode.argument);
        case 'JSXIdentifier':
          return propNode.name;
        case 'JSXMemberExpression':
          return `$***REMOVED***getPropName(propNode.object)***REMOVED***.$***REMOVED***propNode.property.name***REMOVED***`;
        default:
          return propNode.name.name;
      ***REMOVED***
    ***REMOVED***

    function checkSpacing(prev, node) ***REMOVED***
      if (prev.loc.end.line !== node.loc.end.line) ***REMOVED***
        return;
      ***REMOVED***
      const between = context.getSourceCode().text.slice(prev.range[1], node.range[0]);
      if (between !== ' ') ***REMOVED***
        context.report(***REMOVED***
          node,
          message: `Expected only one space between "$***REMOVED***getPropName(prev)***REMOVED***" and "$***REMOVED***getPropName(node)***REMOVED***"`,
          fix(fixer) ***REMOVED***
            return fixer.replaceTextRange([prev.range[1], node.range[0]], ' ');
          ***REMOVED***
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***

    function containsGenericType(node) ***REMOVED***
      const containsTypeParams = typeof node.typeParameters !== 'undefined';
      return containsTypeParams && node.typeParameters.type === 'TSTypeParameterInstantiation';
    ***REMOVED***

    function getGenericNode(node) ***REMOVED***
      const name = node.name;
      if (containsGenericType(node)) ***REMOVED***
        const type = node.typeParameters;

        return Object.assign(
          ***REMOVED******REMOVED***,
          node,
          ***REMOVED***
            range: [
              name.range[0],
              type.range[1]
            ]
          ***REMOVED***
        );
      ***REMOVED***

      return name;
    ***REMOVED***

    return ***REMOVED***
      JSXOpeningElement(node) ***REMOVED***
        node.attributes.reduce((prev, prop) => ***REMOVED***
          checkSpacing(prev, prop);
          return prop;
        ***REMOVED***, getGenericNode(node));
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
