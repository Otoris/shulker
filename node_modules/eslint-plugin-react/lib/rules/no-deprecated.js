/**
 * @fileoverview Prevent usage of deprecated methods
 * @author Yannick Croissant
 * @author Scott Feeney
 * @author Sergei Startsev
 */

'use strict';

const values = require('object.values');

const Components = require('../util/Components');
const astUtil = require('../util/ast');
const docsUrl = require('../util/docsUrl');
const pragmaUtil = require('../util/pragma');
const versionUtil = require('../util/version');

// ------------------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------------------

const MODULES = ***REMOVED***
  react: ['React'],
  'react-addons-perf': ['ReactPerf', 'Perf']
***REMOVED***;

const DEPRECATED_MESSAGE = '***REMOVED******REMOVED***oldMethod***REMOVED******REMOVED*** is deprecated since React ***REMOVED******REMOVED***version***REMOVED******REMOVED******REMOVED******REMOVED***newMethod***REMOVED******REMOVED******REMOVED******REMOVED***refs***REMOVED******REMOVED***';

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      description: 'Prevent usage of deprecated methods',
      category: 'Best Practices',
      recommended: true,
      url: docsUrl('no-deprecated')
    ***REMOVED***,
    schema: []
  ***REMOVED***,

  create: Components.detect((context, components, utils) => ***REMOVED***
    const pragma = pragmaUtil.getFromContext(context);

    function getDeprecated() ***REMOVED***
      const deprecated = ***REMOVED******REMOVED***;
      // 0.12.0
      deprecated[`$***REMOVED***pragma***REMOVED***.renderComponent`] = ['0.12.0', `$***REMOVED***pragma***REMOVED***.render`];
      deprecated[`$***REMOVED***pragma***REMOVED***.renderComponentToString`] = ['0.12.0', `$***REMOVED***pragma***REMOVED***.renderToString`];
      deprecated[`$***REMOVED***pragma***REMOVED***.renderComponentToStaticMarkup`] = ['0.12.0', `$***REMOVED***pragma***REMOVED***.renderToStaticMarkup`];
      deprecated[`$***REMOVED***pragma***REMOVED***.isValidComponent`] = ['0.12.0', `$***REMOVED***pragma***REMOVED***.isValidElement`];
      deprecated[`$***REMOVED***pragma***REMOVED***.PropTypes.component`] = ['0.12.0', `$***REMOVED***pragma***REMOVED***.PropTypes.element`];
      deprecated[`$***REMOVED***pragma***REMOVED***.PropTypes.renderable`] = ['0.12.0', `$***REMOVED***pragma***REMOVED***.PropTypes.node`];
      deprecated[`$***REMOVED***pragma***REMOVED***.isValidClass`] = ['0.12.0'];
      deprecated['this.transferPropsTo'] = ['0.12.0', 'spread operator (***REMOVED***...***REMOVED***)'];
      // 0.13.0
      deprecated[`$***REMOVED***pragma***REMOVED***.addons.classSet`] = ['0.13.0', 'the npm module classnames'];
      deprecated[`$***REMOVED***pragma***REMOVED***.addons.cloneWithProps`] = ['0.13.0', `$***REMOVED***pragma***REMOVED***.cloneElement`];
      // 0.14.0
      deprecated[`$***REMOVED***pragma***REMOVED***.render`] = ['0.14.0', 'ReactDOM.render'];
      deprecated[`$***REMOVED***pragma***REMOVED***.unmountComponentAtNode`] = ['0.14.0', 'ReactDOM.unmountComponentAtNode'];
      deprecated[`$***REMOVED***pragma***REMOVED***.findDOMNode`] = ['0.14.0', 'ReactDOM.findDOMNode'];
      deprecated[`$***REMOVED***pragma***REMOVED***.renderToString`] = ['0.14.0', 'ReactDOMServer.renderToString'];
      deprecated[`$***REMOVED***pragma***REMOVED***.renderToStaticMarkup`] = ['0.14.0', 'ReactDOMServer.renderToStaticMarkup'];
      // 15.0.0
      deprecated[`$***REMOVED***pragma***REMOVED***.addons.LinkedStateMixin`] = ['15.0.0'];
      deprecated['ReactPerf.printDOM'] = ['15.0.0', 'ReactPerf.printOperations'];
      deprecated['Perf.printDOM'] = ['15.0.0', 'Perf.printOperations'];
      deprecated['ReactPerf.getMeasurementsSummaryMap'] = ['15.0.0', 'ReactPerf.getWasted'];
      deprecated['Perf.getMeasurementsSummaryMap'] = ['15.0.0', 'Perf.getWasted'];
      // 15.5.0
      deprecated[`$***REMOVED***pragma***REMOVED***.createClass`] = ['15.5.0', 'the npm module create-react-class'];
      deprecated[`$***REMOVED***pragma***REMOVED***.addons.TestUtils`] = ['15.5.0', 'ReactDOM.TestUtils'];
      deprecated[`$***REMOVED***pragma***REMOVED***.PropTypes`] = ['15.5.0', 'the npm module prop-types'];
      // 15.6.0
      deprecated[`$***REMOVED***pragma***REMOVED***.DOM`] = ['15.6.0', 'the npm module react-dom-factories'];
      // 16.999.0
      // For now the following life-cycle methods are just legacy, not deprecated:
      // `componentWillMount`, `componentWillReceiveProps`, `componentWillUpdate`
      // https://github.com/yannickcr/eslint-plugin-react/pull/1750#issuecomment-425975934
      deprecated.componentWillMount = [
        '16.999.0',
        'UNSAFE_componentWillMount',
        'https://reactjs.org/docs/react-component.html#unsafe_componentwillmount. ' +
        'Use https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles to automatically update your components.'
      ];
      deprecated.componentWillReceiveProps = [
        '16.999.0',
        'UNSAFE_componentWillReceiveProps',
        'https://reactjs.org/docs/react-component.html#unsafe_componentwillreceiveprops. ' +
        'Use https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles to automatically update your components.'
      ];
      deprecated.componentWillUpdate = [
        '16.999.0',
        'UNSAFE_componentWillUpdate',
        'https://reactjs.org/docs/react-component.html#unsafe_componentwillupdate. ' +
        'Use https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles to automatically update your components.'
      ];
      return deprecated;
    ***REMOVED***

    function isDeprecated(method) ***REMOVED***
      const deprecated = getDeprecated();

      return (
        deprecated &&
        deprecated[method] &&
        deprecated[method][0] &&
        versionUtil.testReactVersion(context, deprecated[method][0])
      );
    ***REMOVED***

    function checkDeprecation(node, methodName, methodNode) ***REMOVED***
      if (!isDeprecated(methodName)) ***REMOVED***
        return;
      ***REMOVED***
      const deprecated = getDeprecated();
      const version = deprecated[methodName][0];
      const newMethod = deprecated[methodName][1];
      const refs = deprecated[methodName][2];
      context.report(***REMOVED***
        node: methodNode || node,
        message: DEPRECATED_MESSAGE,
        data: ***REMOVED***
          oldMethod: methodName,
          version,
          newMethod: newMethod ? `, use $***REMOVED***newMethod***REMOVED*** instead` : '',
          refs: refs ? `, see $***REMOVED***refs***REMOVED***` : ''
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***

    function getReactModuleName(node) ***REMOVED***
      let moduleName = false;
      if (!node.init) ***REMOVED***
        return moduleName;
      ***REMOVED***

      values(MODULES).some((moduleNames) => ***REMOVED***
        moduleName = moduleNames.find(name => name === node.init.name);
        return moduleName;
      ***REMOVED***);

      return moduleName;
    ***REMOVED***

    /**
     * Returns life cycle methods if available
     * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked.
     * @returns ***REMOVED***Array***REMOVED*** The array of methods.
     */
    function getLifeCycleMethods(node) ***REMOVED***
      const properties = astUtil.getComponentProperties(node);
      return properties.map(property => (***REMOVED***
        name: astUtil.getPropertyName(property),
        node: astUtil.getPropertyNameNode(property)
      ***REMOVED***));
    ***REMOVED***

    /**
     * Checks life cycle methods
     * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked.
     */
    function checkLifeCycleMethods(node) ***REMOVED***
      if (utils.isES5Component(node) || utils.isES6Component(node)) ***REMOVED***
        const methods = getLifeCycleMethods(node);
        methods.forEach(method => checkDeprecation(node, method.name, method.node));
      ***REMOVED***
    ***REMOVED***

    // --------------------------------------------------------------------------
    // Public
    // --------------------------------------------------------------------------

    return ***REMOVED***
      MemberExpression(node) ***REMOVED***
        checkDeprecation(node, context.getSourceCode().getText(node));
      ***REMOVED***,

      ImportDeclaration(node) ***REMOVED***
        const isReactImport = typeof MODULES[node.source.value] !== 'undefined';
        if (!isReactImport) ***REMOVED***
          return;
        ***REMOVED***
        node.specifiers.forEach((specifier) => ***REMOVED***
          if (!specifier.imported) ***REMOVED***
            return;
          ***REMOVED***
          checkDeprecation(node, `$***REMOVED***MODULES[node.source.value][0]***REMOVED***.$***REMOVED***specifier.imported.name***REMOVED***`);
        ***REMOVED***);
      ***REMOVED***,

      VariableDeclarator(node) ***REMOVED***
        const reactModuleName = getReactModuleName(node);
        const isRequire = node.init && node.init.callee && node.init.callee.name === 'require';
        const isReactRequire = node.init &&
          node.init.arguments &&
          node.init.arguments.length &&
          typeof MODULES[node.init.arguments[0].value] !== 'undefined';
        const isDestructuring = node.id && node.id.type === 'ObjectPattern';

        if (
          !(isDestructuring && reactModuleName) &&
          !(isDestructuring && isRequire && isReactRequire)
        ) ***REMOVED***
          return;
        ***REMOVED***
        node.id.properties.forEach((property) => ***REMOVED***
          checkDeprecation(node, `$***REMOVED***reactModuleName || pragma***REMOVED***.$***REMOVED***property.key.name***REMOVED***`);
        ***REMOVED***);
      ***REMOVED***,

      ClassDeclaration: checkLifeCycleMethods,
      ClassExpression: checkLifeCycleMethods,
      ObjectExpression: checkLifeCycleMethods
    ***REMOVED***;
  ***REMOVED***)
***REMOVED***;
