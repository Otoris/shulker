'use strict';

var utils = require('./utils');
var normalizeHeaderName = require('./helpers/normalizeHeaderName');

var DEFAULT_CONTENT_TYPE = ***REMOVED***
  'Content-Type': 'application/x-www-form-urlencoded'
***REMOVED***;

function setContentTypeIfUnset(headers, value) ***REMOVED***
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) ***REMOVED***
    headers['Content-Type'] = value;
  ***REMOVED***
***REMOVED***

function getDefaultAdapter() ***REMOVED***
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') ***REMOVED***
    // For browsers use XHR adapter
    adapter = require('./adapters/xhr');
  ***REMOVED*** else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') ***REMOVED***
    // For node use HTTP adapter
    adapter = require('./adapters/http');
  ***REMOVED***
  return adapter;
***REMOVED***

var defaults = ***REMOVED***
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) ***REMOVED***
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) ***REMOVED***
      return data;
    ***REMOVED***
    if (utils.isArrayBufferView(data)) ***REMOVED***
      return data.buffer;
    ***REMOVED***
    if (utils.isURLSearchParams(data)) ***REMOVED***
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    ***REMOVED***
    if (utils.isObject(data)) ***REMOVED***
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    ***REMOVED***
    return data;
  ***REMOVED***],

  transformResponse: [function transformResponse(data) ***REMOVED***
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') ***REMOVED***
      try ***REMOVED***
        data = JSON.parse(data);
      ***REMOVED*** catch (e) ***REMOVED*** /* Ignore */ ***REMOVED***
    ***REMOVED***
    return data;
  ***REMOVED***],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) ***REMOVED***
    return status >= 200 && status < 300;
  ***REMOVED***
***REMOVED***;

defaults.headers = ***REMOVED***
  common: ***REMOVED***
    'Accept': 'application/json, text/plain, */*'
  ***REMOVED***
***REMOVED***;

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) ***REMOVED***
  defaults.headers[method] = ***REMOVED******REMOVED***;
***REMOVED***);

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) ***REMOVED***
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
***REMOVED***);

module.exports = defaults;
