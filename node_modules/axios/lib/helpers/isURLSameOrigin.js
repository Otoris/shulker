'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() ***REMOVED***
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param ***REMOVED***String***REMOVED*** url The URL to be parsed
    * @returns ***REMOVED***Object***REMOVED***
    */
      function resolveURL(url) ***REMOVED***
        var href = url;

        if (msie) ***REMOVED***
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        ***REMOVED***

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return ***REMOVED***
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        ***REMOVED***;
      ***REMOVED***

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param ***REMOVED***String***REMOVED*** requestURL The URL to test
    * @returns ***REMOVED***boolean***REMOVED*** True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) ***REMOVED***
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      ***REMOVED***;
    ***REMOVED***)() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() ***REMOVED***
      return function isURLSameOrigin() ***REMOVED***
        return true;
      ***REMOVED***;
    ***REMOVED***)()
);
