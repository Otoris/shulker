'use strict';

var Cancel = require('./Cancel');

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param ***REMOVED***Function***REMOVED*** executor The executor function.
 */
function CancelToken(executor) ***REMOVED***
  if (typeof executor !== 'function') ***REMOVED***
    throw new TypeError('executor must be a function.');
  ***REMOVED***

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) ***REMOVED***
    resolvePromise = resolve;
  ***REMOVED***);

  var token = this;
  executor(function cancel(message) ***REMOVED***
    if (token.reason) ***REMOVED***
      // Cancellation has already been requested
      return;
    ***REMOVED***

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  ***REMOVED***);
***REMOVED***

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() ***REMOVED***
  if (this.reason) ***REMOVED***
    throw this.reason;
  ***REMOVED***
***REMOVED***;

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() ***REMOVED***
  var cancel;
  var token = new CancelToken(function executor(c) ***REMOVED***
    cancel = c;
  ***REMOVED***);
  return ***REMOVED***
    token: token,
    cancel: cancel
  ***REMOVED***;
***REMOVED***;

module.exports = CancelToken;
