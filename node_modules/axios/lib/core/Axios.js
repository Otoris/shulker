'use strict';

var utils = require('./../utils');
var buildURL = require('../helpers/buildURL');
var InterceptorManager = require('./InterceptorManager');
var dispatchRequest = require('./dispatchRequest');
var mergeConfig = require('./mergeConfig');

/**
 * Create a new instance of Axios
 *
 * @param ***REMOVED***Object***REMOVED*** instanceConfig The default config for the instance
 */
function Axios(instanceConfig) ***REMOVED***
  this.defaults = instanceConfig;
  this.interceptors = ***REMOVED***
    request: new InterceptorManager(),
    response: new InterceptorManager()
  ***REMOVED***;
***REMOVED***

/**
 * Dispatch a request
 *
 * @param ***REMOVED***Object***REMOVED*** config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) ***REMOVED***
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') ***REMOVED***
    config = arguments[1] || ***REMOVED******REMOVED***;
    config.url = arguments[0];
  ***REMOVED*** else ***REMOVED***
    config = config || ***REMOVED******REMOVED***;
  ***REMOVED***

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) ***REMOVED***
    config.method = config.method.toLowerCase();
  ***REMOVED*** else if (this.defaults.method) ***REMOVED***
    config.method = this.defaults.method.toLowerCase();
  ***REMOVED*** else ***REMOVED***
    config.method = 'get';
  ***REMOVED***

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) ***REMOVED***
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  ***REMOVED***);

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) ***REMOVED***
    chain.push(interceptor.fulfilled, interceptor.rejected);
  ***REMOVED***);

  while (chain.length) ***REMOVED***
    promise = promise.then(chain.shift(), chain.shift());
  ***REMOVED***

  return promise;
***REMOVED***;

Axios.prototype.getUri = function getUri(config) ***REMOVED***
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
***REMOVED***;

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) ***REMOVED***
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) ***REMOVED***
    return this.request(utils.merge(config || ***REMOVED******REMOVED***, ***REMOVED***
      method: method,
      url: url
    ***REMOVED***));
  ***REMOVED***;
***REMOVED***);

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) ***REMOVED***
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) ***REMOVED***
    return this.request(utils.merge(config || ***REMOVED******REMOVED***, ***REMOVED***
      method: method,
      url: url,
      data: data
    ***REMOVED***));
  ***REMOVED***;
***REMOVED***);

module.exports = Axios;
