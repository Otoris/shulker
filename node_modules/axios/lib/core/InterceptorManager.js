'use strict';

var utils = require('./../utils');

function InterceptorManager() ***REMOVED***
  this.handlers = [];
***REMOVED***

/**
 * Add a new interceptor to the stack
 *
 * @param ***REMOVED***Function***REMOVED*** fulfilled The function to handle `then` for a `Promise`
 * @param ***REMOVED***Function***REMOVED*** rejected The function to handle `reject` for a `Promise`
 *
 * @return ***REMOVED***Number***REMOVED*** An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) ***REMOVED***
  this.handlers.push(***REMOVED***
    fulfilled: fulfilled,
    rejected: rejected
  ***REMOVED***);
  return this.handlers.length - 1;
***REMOVED***;

/**
 * Remove an interceptor from the stack
 *
 * @param ***REMOVED***Number***REMOVED*** id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) ***REMOVED***
  if (this.handlers[id]) ***REMOVED***
    this.handlers[id] = null;
  ***REMOVED***
***REMOVED***;

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param ***REMOVED***Function***REMOVED*** fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) ***REMOVED***
  utils.forEach(this.handlers, function forEachHandler(h) ***REMOVED***
    if (h !== null) ***REMOVED***
      fn(h);
    ***REMOVED***
  ***REMOVED***);
***REMOVED***;

module.exports = InterceptorManager;
