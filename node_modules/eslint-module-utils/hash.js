/**
 * utilities for hashing config objects.
 * basically iteratively updates hash with a JSON-like format
 */
'use strict'
exports.__esModule = true

const createHash = require('crypto').createHash

const stringify = JSON.stringify

function hashify(value, hash) ***REMOVED***
  if (!hash) hash = createHash('sha256')

  if (value instanceof Array) ***REMOVED***
    hashArray(value, hash)
  ***REMOVED*** else if (value instanceof Object) ***REMOVED***
    hashObject(value, hash)
  ***REMOVED*** else ***REMOVED***
    hash.update(stringify(value) || 'undefined')
  ***REMOVED***

  return hash
***REMOVED***
exports.default = hashify

function hashArray(array, hash) ***REMOVED***
  if (!hash) hash = createHash('sha256')

  hash.update('[')
  for (let i = 0; i < array.length; i++) ***REMOVED***
    hashify(array[i], hash)
    hash.update(',')
  ***REMOVED***
  hash.update(']')

  return hash
***REMOVED***
hashify.array = hashArray
exports.hashArray = hashArray

function hashObject(object, hash) ***REMOVED***
  if (!hash) hash = createHash('sha256')

  hash.update('***REMOVED***')
  Object.keys(object).sort().forEach(key => ***REMOVED***
    hash.update(stringify(key))
    hash.update(':')
    hashify(object[key], hash)
    hash.update(',')
  ***REMOVED***)
  hash.update('***REMOVED***')

  return hash
***REMOVED***
hashify.object = hashObject
exports.hashObject = hashObject


