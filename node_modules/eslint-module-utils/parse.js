'use strict'
exports.__esModule = true

const moduleRequire = require('./module-require').default
const extname = require('path').extname

const log = require('debug')('eslint-plugin-import:parse')

exports.default = function parse(path, content, context) ***REMOVED***

  if (context == null) throw new Error('need context to parse properly')

  let parserOptions = context.parserOptions
  const parserPath = getParserPath(path, context)

  if (!parserPath) throw new Error('parserPath is required!')

  // hack: espree blows up with frozen options
  parserOptions = Object.assign(***REMOVED******REMOVED***, parserOptions)
  parserOptions.ecmaFeatures = Object.assign(***REMOVED******REMOVED***, parserOptions.ecmaFeatures)

  // always include comments and tokens (for doc parsing)
  parserOptions.comment = true
  parserOptions.attachComment = true  // keeping this for backward-compat with  older parsers
  parserOptions.tokens = true

  // attach node locations
  parserOptions.loc = true
  parserOptions.range = true

  // provide the `filePath` like eslint itself does, in `parserOptions`
  // https://github.com/eslint/eslint/blob/3ec436ee/lib/linter.js#L637
  parserOptions.filePath = path
  
  // @typescript-eslint/parser will parse the entire project with typechecking if you provide
  // "project" or "projects" in parserOptions. Removing these options means the parser will
  // only parse one file in isolate mode, which is much, much faster.
  // https://github.com/benmosher/eslint-plugin-import/issues/1408#issuecomment-509298962
  delete parserOptions.project
  delete parserOptions.projects
  
  // require the parser relative to the main module (i.e., ESLint)
  const parser = moduleRequire(parserPath)

  if (typeof parser.parseForESLint === 'function') ***REMOVED***
    let ast
    try ***REMOVED***
      ast = parser.parseForESLint(content, parserOptions).ast
    ***REMOVED*** catch (e) ***REMOVED***
      //
    ***REMOVED***
    if (!ast || typeof ast !== 'object') ***REMOVED***
      console.warn(
        '`parseForESLint` from parser `' +
          parserPath +
          '` is invalid and will just be ignored'
      )
    ***REMOVED*** else ***REMOVED***
      return ast
    ***REMOVED***
  ***REMOVED***

  return parser.parse(content, parserOptions)
***REMOVED***

function getParserPath(path, context) ***REMOVED***
  const parsers = context.settings['import/parsers']
  if (parsers != null) ***REMOVED***
    const extension = extname(path)
    for (let parserPath in parsers) ***REMOVED***
      if (parsers[parserPath].indexOf(extension) > -1) ***REMOVED***
        // use this alternate parser
        log('using alt parser:', parserPath)
        return parserPath
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
  // default to use ESLint parser
  return context.parserPath
***REMOVED***
