'use strict'
exports.__esModule = true

/**
 * Returns an object of node visitors that will call
 * 'visitor' with every discovered module path.
 *
 * todo: correct function prototype for visitor
 * @param  ***REMOVED***Function(String)***REMOVED*** visitor [description]
 * @param  ***REMOVED***[type]***REMOVED*** options [description]
 * @return ***REMOVED***object***REMOVED***
 */
exports.default = function visitModules(visitor, options) ***REMOVED***
  // if esmodule is not explicitly disabled, it is assumed to be enabled
  options = Object.assign(***REMOVED*** esmodule: true ***REMOVED***, options)

  let ignoreRegExps = []
  if (options.ignore != null) ***REMOVED***
    ignoreRegExps = options.ignore.map(p => new RegExp(p))
  ***REMOVED***

  function checkSourceValue(source, importer) ***REMOVED***
    if (source == null) return //?

    // handle ignore
    if (ignoreRegExps.some(re => re.test(source.value))) return

    // fire visitor
    visitor(source, importer)
  ***REMOVED***

  // for import-y declarations
  function checkSource(node) ***REMOVED***
    checkSourceValue(node.source, node)
  ***REMOVED***

  // for esmodule dynamic `import()` calls
  function checkImportCall(node) ***REMOVED***
    if (node.callee.type !== 'Import') return
    if (node.arguments.length !== 1) return

    const modulePath = node.arguments[0]
    if (modulePath.type !== 'Literal') return
    if (typeof modulePath.value !== 'string') return

    checkSourceValue(modulePath, node)
  ***REMOVED***

  // for CommonJS `require` calls
  // adapted from @mctep: http://git.io/v4rAu
  function checkCommon(call) ***REMOVED***
    if (call.callee.type !== 'Identifier') return
    if (call.callee.name !== 'require') return
    if (call.arguments.length !== 1) return

    const modulePath = call.arguments[0]
    if (modulePath.type !== 'Literal') return
    if (typeof modulePath.value !== 'string') return

    checkSourceValue(modulePath, call)
  ***REMOVED***

  function checkAMD(call) ***REMOVED***
    if (call.callee.type !== 'Identifier') return
    if (call.callee.name !== 'require' &&
        call.callee.name !== 'define') return
    if (call.arguments.length !== 2) return

    const modules = call.arguments[0]
    if (modules.type !== 'ArrayExpression') return

    for (let element of modules.elements) ***REMOVED***
      if (element.type !== 'Literal') continue
      if (typeof element.value !== 'string') continue

      if (element.value === 'require' ||
          element.value === 'exports') continue // magic modules: http://git.io/vByan

      checkSourceValue(element, element)
    ***REMOVED***
  ***REMOVED***

  const visitors = ***REMOVED******REMOVED***
  if (options.esmodule) ***REMOVED***
    Object.assign(visitors, ***REMOVED***
      'ImportDeclaration': checkSource,
      'ExportNamedDeclaration': checkSource,
      'ExportAllDeclaration': checkSource,
      'CallExpression': checkImportCall,
    ***REMOVED***)
  ***REMOVED***

  if (options.commonjs || options.amd) ***REMOVED***
    const currentCallExpression = visitors['CallExpression']
    visitors['CallExpression'] = function (call) ***REMOVED***
      if (currentCallExpression) currentCallExpression(call)
      if (options.commonjs) checkCommon(call)
      if (options.amd) checkAMD(call)
    ***REMOVED***
  ***REMOVED***

  return visitors
***REMOVED***

/**
 * make an options schema for the module visitor, optionally
 * adding extra fields.
 */
function makeOptionsSchema(additionalProperties) ***REMOVED***
  const base =  ***REMOVED***
    'type': 'object',
    'properties': ***REMOVED***
      'commonjs': ***REMOVED*** 'type': 'boolean' ***REMOVED***,
      'amd': ***REMOVED*** 'type': 'boolean' ***REMOVED***,
      'esmodule': ***REMOVED*** 'type': 'boolean' ***REMOVED***,
      'ignore': ***REMOVED***
        'type': 'array',
        'minItems': 1,
        'items': ***REMOVED*** 'type': 'string' ***REMOVED***,
        'uniqueItems': true,
      ***REMOVED***,
    ***REMOVED***,
    'additionalProperties': false,
  ***REMOVED***

  if (additionalProperties)***REMOVED***
    for (let key in additionalProperties) ***REMOVED***
      base.properties[key] = additionalProperties[key]
    ***REMOVED***
  ***REMOVED***

  return base
***REMOVED***
exports.makeOptionsSchema = makeOptionsSchema

/**
 * json schema object for options parameter. can be used to build
 * rule options schema object.
 * @type ***REMOVED***Object***REMOVED***
 */
exports.optionsSchema = makeOptionsSchema()
