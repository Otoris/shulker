'use strict'
exports.__esModule = true

const extname = require('path').extname

const log = require('debug')('eslint-plugin-import:utils:ignore')

// one-shot memoized
let cachedSet, lastSettings
function validExtensions(context) ***REMOVED***
  if (cachedSet && context.settings === lastSettings) ***REMOVED***
    return cachedSet
  ***REMOVED***

  lastSettings = context.settings
  cachedSet = makeValidExtensionSet(context.settings)
  return cachedSet
***REMOVED***

function makeValidExtensionSet(settings) ***REMOVED***
  // start with explicit JS-parsed extensions
  const exts = new Set(settings['import/extensions'] || [ '.js' ])

  // all alternate parser extensions are also valid
  if ('import/parsers' in settings) ***REMOVED***
    for (let parser in settings['import/parsers']) ***REMOVED***
      const parserSettings = settings['import/parsers'][parser]
      if (!Array.isArray(parserSettings)) ***REMOVED***
        throw new TypeError('"settings" for ' + parser + ' must be an array')
      ***REMOVED***
      parserSettings.forEach(ext => exts.add(ext))
    ***REMOVED***
  ***REMOVED***

  return exts
***REMOVED***
exports.getFileExtensions = makeValidExtensionSet

exports.default = function ignore(path, context) ***REMOVED***
  // check extension whitelist first (cheap)
  if (!hasValidExtension(path, context)) return true

  if (!('import/ignore' in context.settings)) return false
  const ignoreStrings = context.settings['import/ignore']

  for (let i = 0; i < ignoreStrings.length; i++) ***REMOVED***
    const regex = new RegExp(ignoreStrings[i])
    if (regex.test(path)) ***REMOVED***
      log(`ignoring $***REMOVED***path***REMOVED***, matched pattern /$***REMOVED***ignoreStrings[i]***REMOVED***/`)
      return true
    ***REMOVED***
  ***REMOVED***

  return false
***REMOVED***

function hasValidExtension(path, context) ***REMOVED***
  return validExtensions(context).has(extname(path))
***REMOVED***
exports.hasValidExtension = hasValidExtension
