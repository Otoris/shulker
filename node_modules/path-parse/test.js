var assert = require('assert');
var pathParse = require('./index');

var winParseTests = [
  [***REMOVED*** root: 'C:\\', dir: 'C:\\path\\dir', base: 'index.html', ext: '.html', name: 'index' ***REMOVED***, 'C:\\path\\dir\\index.html'],
  [***REMOVED*** root: 'C:\\', dir: 'C:\\another_path\\DIR\\1\\2\\33', base: 'index', ext: '', name: 'index' ***REMOVED***, 'C:\\another_path\\DIR\\1\\2\\33\\index'],
  [***REMOVED*** root: '', dir: 'another_path\\DIR with spaces\\1\\2\\33', base: 'index', ext: '', name: 'index' ***REMOVED***, 'another_path\\DIR with spaces\\1\\2\\33\\index'],
  [***REMOVED*** root: '\\', dir: '\\foo', base: 'C:', ext: '', name: 'C:' ***REMOVED***, '\\foo\\C:'],
  [***REMOVED*** root: '', dir: '', base: 'file', ext: '', name: 'file' ***REMOVED***, 'file'],
  [***REMOVED*** root: '', dir: '.', base: 'file', ext: '', name: 'file' ***REMOVED***, '.\\file'],

  // unc
  [***REMOVED*** root: '\\\\server\\share\\', dir: '\\\\server\\share\\', base: 'file_path', ext: '', name: 'file_path' ***REMOVED***, '\\\\server\\share\\file_path'],
  [***REMOVED*** root: '\\\\server two\\shared folder\\', dir: '\\\\server two\\shared folder\\', base: 'file path.zip', ext: '.zip', name: 'file path' ***REMOVED***, '\\\\server two\\shared folder\\file path.zip'],
  [***REMOVED*** root: '\\\\teela\\admin$\\', dir: '\\\\teela\\admin$\\', base: 'system32', ext: '', name: 'system32' ***REMOVED***, '\\\\teela\\admin$\\system32'],
  [***REMOVED*** root: '\\\\?\\UNC\\', dir: '\\\\?\\UNC\\server', base: 'share', ext: '', name: 'share' ***REMOVED***, '\\\\?\\UNC\\server\\share']
];

var winSpecialCaseFormatTests = [
  [***REMOVED***dir: 'some\\dir'***REMOVED***, 'some\\dir\\'],
  [***REMOVED***base: 'index.html'***REMOVED***, 'index.html'],
  [***REMOVED******REMOVED***, '']
];

var unixParseTests = [
  [***REMOVED*** root: '/', dir: '/home/user/dir', base: 'file.txt', ext: '.txt', name: 'file' ***REMOVED***, '/home/user/dir/file.txt'],
  [***REMOVED*** root: '/', dir: '/home/user/a dir', base: 'another File.zip', ext: '.zip', name: 'another File' ***REMOVED***, '/home/user/a dir/another File.zip'],
  [***REMOVED*** root: '/', dir: '/home/user/a dir/', base: 'another&File.', ext: '.', name: 'another&File' ***REMOVED***, '/home/user/a dir//another&File.'],
  [***REMOVED*** root: '/', dir: '/home/user/a$$$dir/', base: 'another File.zip', ext: '.zip', name: 'another File' ***REMOVED***, '/home/user/a$$$dir//another File.zip'],
  [***REMOVED*** root: '', dir: 'user/dir', base: 'another File.zip', ext: '.zip', name: 'another File' ***REMOVED***, 'user/dir/another File.zip'],
  [***REMOVED*** root: '', dir: '', base: 'file', ext: '', name: 'file' ***REMOVED***, 'file'],
  [***REMOVED*** root: '', dir: '', base: '.\\file', ext: '', name: '.\\file' ***REMOVED***, '.\\file'],
  [***REMOVED*** root: '', dir: '.', base: 'file', ext: '', name: 'file' ***REMOVED***, './file'],
  [***REMOVED*** root: '', dir: '', base: 'C:\\foo', ext: '', name: 'C:\\foo' ***REMOVED***, 'C:\\foo']
];

var unixSpecialCaseFormatTests = [
  [***REMOVED***dir: 'some/dir'***REMOVED***, 'some/dir/'],
  [***REMOVED***base: 'index.html'***REMOVED***, 'index.html'],
  [***REMOVED******REMOVED***, '']
];

var errors = [
  ***REMOVED***input: null, message: /Parameter 'pathString' must be a string, not/***REMOVED***,
  ***REMOVED***input: ***REMOVED******REMOVED***, message: /Parameter 'pathString' must be a string, not object/***REMOVED***,
  ***REMOVED***input: true, message: /Parameter 'pathString' must be a string, not boolean/***REMOVED***,
  ***REMOVED***input: 1, message: /Parameter 'pathString' must be a string, not number/***REMOVED***,
  ***REMOVED***input: undefined, message: /Parameter 'pathString' must be a string, not undefined/***REMOVED***,
];

checkParseFormat(pathParse.win32, winParseTests);
checkParseFormat(pathParse.posix, unixParseTests);
checkErrors(pathParse.win32);
checkErrors(pathParse.posix);

function checkErrors(parse) ***REMOVED***
  errors.forEach(function(errorCase) ***REMOVED***
    try ***REMOVED***
      parse(errorCase.input);
    ***REMOVED*** catch(err) ***REMOVED***
      assert.ok(err instanceof TypeError);
      assert.ok(
        errorCase.message.test(err.message),
        'expected ' + errorCase.message + ' to match ' + err.message
      );
      return;
    ***REMOVED***

    assert.fail('should have thrown');
  ***REMOVED***);
***REMOVED***

function checkParseFormat(parse, testCases) ***REMOVED***
  testCases.forEach(function(testCase) ***REMOVED***
    assert.deepEqual(parse(testCase[1]), testCase[0]);
  ***REMOVED***);
***REMOVED***
