import ***REMOVED*** SCHEMES ***REMOVED*** from "../uri";
const NID$ = "(?:[0-9A-Za-z][0-9A-Za-z\\-]***REMOVED***1,31***REMOVED***)";
const PCT_ENCODED$ = "(?:\\%[0-9A-Fa-f]***REMOVED***2***REMOVED***)";
const TRANS$$ = "[0-9A-Za-z\\(\\)\\+\\,\\-\\.\\:\\=\\@\\;\\$\\_\\!\\*\\'\\/\\?\\#]";
const NSS$ = "(?:(?:" + PCT_ENCODED$ + "|" + TRANS$$ + ")+)";
const URN_SCHEME = new RegExp("^urn\\:(" + NID$ + ")$");
const URN_PATH = new RegExp("^(" + NID$ + ")\\:(" + NSS$ + ")$");
const URN_PARSE = /^([^\:]+)\:(.*)/;
const URN_EXCLUDED = /[\x00-\x20\\\"\&\<\>\[\]\^\`\***REMOVED***\|\***REMOVED***\~\x7F-\xFF]/g;
//RFC 2141
const handler = ***REMOVED***
    scheme: "urn",
    parse: function (components, options) ***REMOVED***
        const matches = components.path && components.path.match(URN_PARSE);
        let urnComponents = components;
        if (matches) ***REMOVED***
            const scheme = options.scheme || urnComponents.scheme || "urn";
            const nid = matches[1].toLowerCase();
            const nss = matches[2];
            const urnScheme = `$***REMOVED***scheme***REMOVED***:$***REMOVED***options.nid || nid***REMOVED***`;
            const schemeHandler = SCHEMES[urnScheme];
            urnComponents.nid = nid;
            urnComponents.nss = nss;
            urnComponents.path = undefined;
            if (schemeHandler) ***REMOVED***
                urnComponents = schemeHandler.parse(urnComponents, options);
            ***REMOVED***
        ***REMOVED***
        else ***REMOVED***
            urnComponents.error = urnComponents.error || "URN can not be parsed.";
        ***REMOVED***
        return urnComponents;
    ***REMOVED***,
    serialize: function (urnComponents, options) ***REMOVED***
        const scheme = options.scheme || urnComponents.scheme || "urn";
        const nid = urnComponents.nid;
        const urnScheme = `$***REMOVED***scheme***REMOVED***:$***REMOVED***options.nid || nid***REMOVED***`;
        const schemeHandler = SCHEMES[urnScheme];
        if (schemeHandler) ***REMOVED***
            urnComponents = schemeHandler.serialize(urnComponents, options);
        ***REMOVED***
        const uriComponents = urnComponents;
        const nss = urnComponents.nss;
        uriComponents.path = `$***REMOVED***nid || options.nid***REMOVED***:$***REMOVED***nss***REMOVED***`;
        return uriComponents;
    ***REMOVED***,
***REMOVED***;
export default handler;
//# sourceMappingURL=urn.js.map