export function merge(...sets) ***REMOVED***
    if (sets.length > 1) ***REMOVED***
        sets[0] = sets[0].slice(0, -1);
        const xl = sets.length - 1;
        for (let x = 1; x < xl; ++x) ***REMOVED***
            sets[x] = sets[x].slice(1, -1);
        ***REMOVED***
        sets[xl] = sets[xl].slice(1);
        return sets.join('');
    ***REMOVED***
    else ***REMOVED***
        return sets[0];
    ***REMOVED***
***REMOVED***
export function subexp(str) ***REMOVED***
    return "(?:" + str + ")";
***REMOVED***
export function typeOf(o) ***REMOVED***
    return o === undefined ? "undefined" : (o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase());
***REMOVED***
export function toUpperCase(str) ***REMOVED***
    return str.toUpperCase();
***REMOVED***
export function toArray(obj) ***REMOVED***
    return obj !== undefined && obj !== null ? (obj instanceof Array ? obj : (typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj))) : [];
***REMOVED***
export function assign(target, source) ***REMOVED***
    const obj = target;
    if (source) ***REMOVED***
        for (const key in source) ***REMOVED***
            obj[key] = source[key];
        ***REMOVED***
    ***REMOVED***
    return obj;
***REMOVED***
//# sourceMappingURL=util.js.map