import ***REMOVED*** URISchemeHandler, URIComponents, URIOptions ***REMOVED*** from "../uri";
import ***REMOVED*** URNComponents ***REMOVED*** from "./urn";
import ***REMOVED*** SCHEMES ***REMOVED*** from "../uri";

export interface UUIDComponents extends URNComponents ***REMOVED***
	uuid?: string;
***REMOVED***

const UUID = /^[0-9A-Fa-f]***REMOVED***8***REMOVED***(?:\-[0-9A-Fa-f]***REMOVED***4***REMOVED***)***REMOVED***3***REMOVED***\-[0-9A-Fa-f]***REMOVED***12***REMOVED***$/;
const UUID_PARSE = /^[0-9A-Fa-f\-]***REMOVED***36***REMOVED***/;

//RFC 4122
const handler:URISchemeHandler<UUIDComponents, URIOptions, URNComponents> = ***REMOVED***
	scheme : "urn:uuid",

	parse : function (urnComponents:URNComponents, options:URIOptions):UUIDComponents ***REMOVED***
		const uuidComponents = urnComponents as UUIDComponents;
		uuidComponents.uuid = uuidComponents.nss;
		uuidComponents.nss = undefined;

		if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) ***REMOVED***
			uuidComponents.error = uuidComponents.error || "UUID is not valid.";
		***REMOVED***

		return uuidComponents;
	***REMOVED***,

	serialize : function (uuidComponents:UUIDComponents, options:URIOptions):URNComponents ***REMOVED***
		const urnComponents = uuidComponents as URNComponents;
		//normalize UUID
		urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
		return urnComponents;
	***REMOVED***,
***REMOVED***;

export default handler;