/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * See LICENSE file in root directory for full license.
 */
"use strict";

const KEYS = require("./visitor-keys.json");

// Types.
const NODE_TYPES = Object.freeze(Object.keys(KEYS));

// Freeze the keys.
for (const type of NODE_TYPES) ***REMOVED***
    Object.freeze(KEYS[type]);
***REMOVED***
Object.freeze(KEYS);

// List to ignore keys.
const KEY_BLACKLIST = new Set([
    "parent",
    "leadingComments",
    "trailingComments"
]);

/**
 * Check whether a given key should be used or not.
 * @param ***REMOVED***string***REMOVED*** key The key to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the key should be used.
 */
function filterKey(key) ***REMOVED***
    return !KEY_BLACKLIST.has(key) && key[0] !== "_";
***REMOVED***

//------------------------------------------------------------------------------
// Public interfaces
//------------------------------------------------------------------------------

module.exports = Object.freeze(***REMOVED***

    /**
     * Visitor keys.
     * @type ***REMOVED******REMOVED*** [type: string]: string[] | undefined ***REMOVED******REMOVED***
     */
    KEYS,

    /**
     * Get visitor keys of a given node.
     * @param ***REMOVED***Object***REMOVED*** node The AST node to get keys.
     * @returns ***REMOVED***string[]***REMOVED*** Visitor keys of the node.
     */
    getKeys(node) ***REMOVED***
        return Object.keys(node).filter(filterKey);
    ***REMOVED***,

    // Disable valid-jsdoc rule because it reports syntax error on the type of @returns.
    // eslint-disable-next-line valid-jsdoc
    /**
     * Make the union set with `KEYS` and given keys.
     * @param ***REMOVED***Object***REMOVED*** additionalKeys The additional keys.
     * @returns ***REMOVED******REMOVED*** [type: string]: string[] | undefined ***REMOVED******REMOVED*** The union set.
     */
    unionWith(additionalKeys) ***REMOVED***
        const retv = Object.assign(***REMOVED******REMOVED***, KEYS);

        for (const type of Object.keys(additionalKeys)) ***REMOVED***
            if (retv.hasOwnProperty(type)) ***REMOVED***
                const keys = new Set(additionalKeys[type]);

                for (const key of retv[type]) ***REMOVED***
                    keys.add(key);
                ***REMOVED***

                retv[type] = Object.freeze(Array.from(keys));
            ***REMOVED*** else ***REMOVED***
                retv[type] = Object.freeze(Array.from(additionalKeys[type]));
            ***REMOVED***
        ***REMOVED***

        return Object.freeze(retv);
    ***REMOVED***
***REMOVED***);
