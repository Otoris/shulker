/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * See LICENSE file in root directory for full license.
 */
"use strict"

const ***REMOVED*** RegExpValidator ***REMOVED*** = require("regexpp")
const ***REMOVED*** getRegExpCalls ***REMOVED*** = require("../utils")

/**
 * Verify a given regular expression.
 * @param ***REMOVED***RuleContext***REMOVED*** context The rule context to report.
 * @param ***REMOVED***Node***REMOVED*** node The AST node to report.
 * @param ***REMOVED***string***REMOVED*** pattern The pattern part of a RegExp.
 * @param ***REMOVED***string***REMOVED*** flags The flags part of a RegExp.
 * @returns ***REMOVED***void***REMOVED***
 */
function verify(context, node, pattern, flags) ***REMOVED***
    try ***REMOVED***
        let found = false

        new RegExpValidator(***REMOVED***
            onUnicodePropertyCharacterSet() ***REMOVED***
                found = true
            ***REMOVED***,
        ***REMOVED***).validatePattern(pattern, 0, pattern.length, flags.includes("u"))

        if (found) ***REMOVED***
            context.report(***REMOVED*** node, messageId: "forbidden" ***REMOVED***)
        ***REMOVED***
    ***REMOVED*** catch (error) ***REMOVED***
        //istanbul ignore else
        if (error.message.startsWith("Invalid regular expression:")) ***REMOVED***
            return
        ***REMOVED***
        //istanbul ignore next
        throw error
    ***REMOVED***
***REMOVED***

module.exports = ***REMOVED***
    meta: ***REMOVED***
        docs: ***REMOVED***
            description: "disallow RegExp Unicode property escape sequences.",
            category: "ES2018",
            recommended: false,
            url:
                "http://mysticatea.github.io/eslint-plugin-es/rules/no-regexp-unicode-property-escapes.html",
        ***REMOVED***,
        fixable: null,
        messages: ***REMOVED***
            forbidden:
                "ES2018 RegExp Unicode property escape sequences are forbidden.",
        ***REMOVED***,
        schema: [],
        type: "problem",
    ***REMOVED***,
    create(context) ***REMOVED***
        return ***REMOVED***
            "Literal[regex]"(node) ***REMOVED***
                const ***REMOVED*** pattern, flags ***REMOVED*** = node.regex
                verify(context, node, pattern || "", flags || "")
            ***REMOVED***,

            "Program:exit"() ***REMOVED***
                const scope = context.getScope()
                for (const ***REMOVED*** node, pattern, flags ***REMOVED*** of getRegExpCalls(scope)) ***REMOVED***
                    verify(context, node, pattern || "", flags || "")
                ***REMOVED***
            ***REMOVED***,
        ***REMOVED***
    ***REMOVED***,
***REMOVED***
