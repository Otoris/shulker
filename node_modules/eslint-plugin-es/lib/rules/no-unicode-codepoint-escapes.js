/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * See LICENSE file in root directory for full license.
 */
"use strict"

const ***REMOVED*** definePatternSearchGenerator ***REMOVED*** = require("../utils")
const codePointEscapeSearchGenerator = definePatternSearchGenerator(
    /\\u\***REMOVED***[0-9a-fA-F]+\***REMOVED***/gu
)

/**
 * Number to Hex
 * @param ***REMOVED***number***REMOVED*** num number
 * @returns ***REMOVED***string***REMOVED*** hex string
 */
function toHex(num) ***REMOVED***
    return `0000$***REMOVED***num.toString(16).toUpperCase()***REMOVED***`.substr(-4)
***REMOVED***

module.exports = ***REMOVED***
    meta: ***REMOVED***
        docs: ***REMOVED***
            description: "disallow Unicode code point escape sequences.",
            category: "ES2015",
            recommended: false,
            url:
                "http://mysticatea.github.io/eslint-plugin-es/rules/no-unicode-codepoint-escapes.html",
        ***REMOVED***,
        fixable: "code",
        messages: ***REMOVED***
            forbidden:
                "ES2015 Unicode code point escape sequences are forbidden.",
        ***REMOVED***,
        schema: [],
        type: "problem",
    ***REMOVED***,
    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode()

        /**
         * find code point escape, and report
         * @param  ***REMOVED***string***REMOVED*** text text
         * @param  ***REMOVED***Node***REMOVED*** node node
         * @returns ***REMOVED***void***REMOVED***
         */
        function findAndReport(text, node) ***REMOVED***
            for (const match of codePointEscapeSearchGenerator(text)) ***REMOVED***
                const start = match.index
                const end = start + match[0].length
                const range = [start + node.start, end + node.start]
                context.report(***REMOVED***
                    node,
                    loc: ***REMOVED***
                        start: sourceCode.getLocFromIndex(range[0]),
                        end: sourceCode.getLocFromIndex(range[1]),
                    ***REMOVED***,
                    messageId: "forbidden",
                    fix(fixer) ***REMOVED***
                        const codePointStr = text.slice(start + 3, end - 1)
                        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint
                        let codePoint = Number(`0x$***REMOVED***codePointStr***REMOVED***`)
                        let replacement = null
                        if (codePoint <= 0xffff) ***REMOVED***
                            // BMP code point
                            replacement = toHex(codePoint)
                        ***REMOVED*** else ***REMOVED***
                            // Astral code point; split in surrogate halves
                            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                            codePoint -= 0x10000
                            const highSurrogate = (codePoint >> 10) + 0xd800
                            const lowSurrogate = (codePoint % 0x400) + 0xdc00
                            replacement = `$***REMOVED***toHex(highSurrogate)***REMOVED***\\u$***REMOVED***toHex(
                                lowSurrogate
                            )***REMOVED***`
                        ***REMOVED***
                        return fixer.replaceTextRange(
                            [range[0] + 2, range[1]],
                            replacement
                        )
                    ***REMOVED***,
                ***REMOVED***)
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            Identifier(node) ***REMOVED***
                findAndReport(sourceCode.getText(node), node)
            ***REMOVED***,
            Literal(node) ***REMOVED***
                if (typeof node.value === "string") ***REMOVED***
                    findAndReport(node.raw, node)
                ***REMOVED***
            ***REMOVED***,
            TemplateElement(elementNode) ***REMOVED***
                findAndReport(elementNode.value.raw, elementNode)
            ***REMOVED***,
        ***REMOVED***
    ***REMOVED***,
***REMOVED***
