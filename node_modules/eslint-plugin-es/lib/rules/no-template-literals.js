/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * See LICENSE file in root directory for full license.
 */
"use strict"

/**
 * Checks whether it is string literal
 * @param  ***REMOVED***string***REMOVED*** s string source code
 * @returns ***REMOVED***boolean***REMOVED*** true: is string literal source code
 */
function isStringLiteralCode(s) ***REMOVED***
    return (
        (s.startsWith("'") && s.endsWith("'")) ||
        (s.startsWith('"') && s.endsWith('"'))
    )
***REMOVED***

/**
 * Transform template literal to string concatenation.
 * @param  ***REMOVED***ASTNode***REMOVED*** node TemplateLiteral node.(not within TaggedTemplateExpression)
 * @param  ***REMOVED***SourceCode***REMOVED*** sourceCode SourceCode
 * @returns ***REMOVED***string***REMOVED*** After transformation
 */
function templateLiteralToStringConcat(node, sourceCode) ***REMOVED***
    const ss = []
    node.quasis.forEach((q, i) => ***REMOVED***
        const value = q.value.cooked
        if (value) ***REMOVED***
            ss.push(JSON.stringify(value))
        ***REMOVED***

        if (i < node.expressions.length) ***REMOVED***
            const e = node.expressions[i]
            const text = sourceCode.getText(e)
            ss.push(text)
        ***REMOVED***
    ***REMOVED***)
    if (!ss.length || !isStringLiteralCode(ss[0])) ***REMOVED***
        ss.unshift('""')
    ***REMOVED***
    return ss.join("+")
***REMOVED***

module.exports = ***REMOVED***
    meta: ***REMOVED***
        docs: ***REMOVED***
            description: "disallow template literals.",
            category: "ES2015",
            recommended: false,
            url:
                "http://mysticatea.github.io/eslint-plugin-es/rules/no-template-literals.html",
        ***REMOVED***,
        fixable: "code",
        messages: ***REMOVED***
            forbidden: "ES2015 template literals are forbidden.",
        ***REMOVED***,
        schema: [],
        type: "problem",
    ***REMOVED***,
    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode()
        return ***REMOVED***
            "TaggedTemplateExpression, :not(TaggedTemplateExpression) > TemplateLiteral"(
                node
            ) ***REMOVED***
                context.report(***REMOVED***
                    node,
                    messageId: "forbidden",
                    fix:
                        node.type === "TemplateLiteral"
                            ? fixer =>
                                  fixer.replaceText(
                                      node,
                                      templateLiteralToStringConcat(
                                          node,
                                          sourceCode
                                      )
                                  )
                            : undefined,
                ***REMOVED***)
            ***REMOVED***,
        ***REMOVED***
    ***REMOVED***,
***REMOVED***
