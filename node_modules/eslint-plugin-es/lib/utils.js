/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * See LICENSE file in root directory for full license.
 */
"use strict"

const ***REMOVED***
    CALL,
    CONSTRUCT,
    PatternMatcher,
    ReferenceTracker,
    getStringIfConstant,
***REMOVED*** = require("eslint-utils")

module.exports = ***REMOVED***
    /**
     * Define generator to search pattern.
     * The iterator generated by the generator returns the start and end index of the match.
     * @param ***REMOVED***RegExp***REMOVED*** pattern Base pattern
     * @returns ***REMOVED***function(string):IterableIterator<RegExpExecArray>***REMOVED*** generator
     */
    definePatternSearchGenerator(pattern) ***REMOVED***
        const matcher = new PatternMatcher(pattern)
        return matcher.execAll.bind(matcher)
    ***REMOVED***,

    /**
     * Check whether a given token is a comma token or not.
     * @param ***REMOVED***Token***REMOVED*** token The token to check.
     * @returns ***REMOVED***boolean***REMOVED*** `true` if the token is a comma token.
     */
    isCommaToken(token) ***REMOVED***
        return (
            token != null && token.type === "Punctuator" && token.value === ","
        )
    ***REMOVED***,

    /**
     * Iterate the calls of the `RegExp` global variable.
     * @param ***REMOVED***Scope***REMOVED*** globalScope The global scope object.
     * @returns ***REMOVED***IterableIterator<***REMOVED***node:Node,pattern:(string|null),flags:(string|null)***REMOVED***>***REMOVED*** The iterator of `CallExpression` or `NewExpression` for `RegExp`.
     */
    *getRegExpCalls(globalScope) ***REMOVED***
        const tracker = new ReferenceTracker(globalScope)
        for (const ***REMOVED*** node ***REMOVED*** of tracker.iterateGlobalReferences(***REMOVED***
            RegExp: ***REMOVED*** [CALL]: true, [CONSTRUCT]: true ***REMOVED***,
        ***REMOVED***)) ***REMOVED***
            const [patternNode, flagsNode] = node.arguments
            yield ***REMOVED***
                node,
                pattern: getStringIfConstant(patternNode, globalScope),
                flags: getStringIfConstant(flagsNode, globalScope),
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***,
***REMOVED***
