/**
 * @fileoverview Utility for executing npm commands.
 * @author Ian VanSchooten
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const fs = require("fs"),
    spawn = require("cross-spawn"),
    path = require("path"),
    log = require("../shared/logging");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Find the closest package.json file, starting at process.cwd (by default),
 * and working up to root.
 *
 * @param   ***REMOVED***string***REMOVED*** [startDir=process.cwd()] Starting directory
 * @returns ***REMOVED***string***REMOVED***                          Absolute path to closest package.json file
 */
function findPackageJson(startDir) ***REMOVED***
    let dir = path.resolve(startDir || process.cwd());

    do ***REMOVED***
        const pkgFile = path.join(dir, "package.json");

        if (!fs.existsSync(pkgFile) || !fs.statSync(pkgFile).isFile()) ***REMOVED***
            dir = path.join(dir, "..");
            continue;
        ***REMOVED***
        return pkgFile;
    ***REMOVED*** while (dir !== path.resolve(dir, ".."));
    return null;
***REMOVED***

//------------------------------------------------------------------------------
// Private
//------------------------------------------------------------------------------

/**
 * Install node modules synchronously and save to devDependencies in package.json
 * @param   ***REMOVED***string|string[]***REMOVED*** packages Node module or modules to install
 * @returns ***REMOVED***void***REMOVED***
 */
function installSyncSaveDev(packages) ***REMOVED***
    const packageList = Array.isArray(packages) ? packages : [packages];
    const npmProcess = spawn.sync("npm", ["i", "--save-dev"].concat(packageList),
        ***REMOVED*** stdio: "inherit" ***REMOVED***);
    const error = npmProcess.error;

    if (error && error.code === "ENOENT") ***REMOVED***
        const pluralS = packageList.length > 1 ? "s" : "";

        log.error(`Could not execute npm. Please install the following package$***REMOVED***pluralS***REMOVED*** with a package manager of your choice: $***REMOVED***packageList.join(", ")***REMOVED***`);
    ***REMOVED***
***REMOVED***

/**
 * Fetch `peerDependencies` of the given package by `npm show` command.
 * @param ***REMOVED***string***REMOVED*** packageName The package name to fetch peerDependencies.
 * @returns ***REMOVED***Object***REMOVED*** Gotten peerDependencies. Returns null if npm was not found.
 */
function fetchPeerDependencies(packageName) ***REMOVED***
    const npmProcess = spawn.sync(
        "npm",
        ["show", "--json", packageName, "peerDependencies"],
        ***REMOVED*** encoding: "utf8" ***REMOVED***
    );

    const error = npmProcess.error;

    if (error && error.code === "ENOENT") ***REMOVED***
        return null;
    ***REMOVED***
    const fetchedText = npmProcess.stdout.trim();

    return JSON.parse(fetchedText || "***REMOVED******REMOVED***");


***REMOVED***

/**
 * Check whether node modules are include in a project's package.json.
 *
 * @param   ***REMOVED***string[]***REMOVED*** packages           Array of node module names
 * @param   ***REMOVED***Object***REMOVED***  opt                 Options Object
 * @param   ***REMOVED***boolean***REMOVED*** opt.dependencies    Set to true to check for direct dependencies
 * @param   ***REMOVED***boolean***REMOVED*** opt.devDependencies Set to true to check for development dependencies
 * @param   ***REMOVED***boolean***REMOVED*** opt.startdir        Directory to begin searching from
 * @returns ***REMOVED***Object***REMOVED***                      An object whose keys are the module names
 *                                        and values are booleans indicating installation.
 */
function check(packages, opt) ***REMOVED***
    const deps = new Set();
    const pkgJson = (opt) ? findPackageJson(opt.startDir) : findPackageJson();
    let fileJson;

    if (!pkgJson) ***REMOVED***
        throw new Error("Could not find a package.json file. Run 'npm init' to create one.");
    ***REMOVED***

    try ***REMOVED***
        fileJson = JSON.parse(fs.readFileSync(pkgJson, "utf8"));
    ***REMOVED*** catch (e) ***REMOVED***
        const error = new Error(e);

        error.messageTemplate = "failed-to-read-json";
        error.messageData = ***REMOVED***
            path: pkgJson,
            message: e.message
        ***REMOVED***;
        throw error;
    ***REMOVED***

    ["dependencies", "devDependencies"].forEach(key => ***REMOVED***
        if (opt[key] && typeof fileJson[key] === "object") ***REMOVED***
            Object.keys(fileJson[key]).forEach(dep => deps.add(dep));
        ***REMOVED***
    ***REMOVED***);

    return packages.reduce((status, pkg) => ***REMOVED***
        status[pkg] = deps.has(pkg);
        return status;
    ***REMOVED***, ***REMOVED******REMOVED***);
***REMOVED***

/**
 * Check whether node modules are included in the dependencies of a project's
 * package.json.
 *
 * Convenience wrapper around check().
 *
 * @param   ***REMOVED***string[]***REMOVED*** packages  Array of node modules to check.
 * @param   ***REMOVED***string***REMOVED***   rootDir   The directory contianing a package.json
 * @returns ***REMOVED***Object***REMOVED***             An object whose keys are the module names
 *                               and values are booleans indicating installation.
 */
function checkDeps(packages, rootDir) ***REMOVED***
    return check(packages, ***REMOVED*** dependencies: true, startDir: rootDir ***REMOVED***);
***REMOVED***

/**
 * Check whether node modules are included in the devDependencies of a project's
 * package.json.
 *
 * Convenience wrapper around check().
 *
 * @param   ***REMOVED***string[]***REMOVED*** packages  Array of node modules to check.
 * @returns ***REMOVED***Object***REMOVED***             An object whose keys are the module names
 *                               and values are booleans indicating installation.
 */
function checkDevDeps(packages) ***REMOVED***
    return check(packages, ***REMOVED*** devDependencies: true ***REMOVED***);
***REMOVED***

/**
 * Check whether package.json is found in current path.
 *
 * @param   ***REMOVED***string=***REMOVED*** startDir Starting directory
 * @returns ***REMOVED***boolean***REMOVED*** Whether a package.json is found in current path.
 */
function checkPackageJson(startDir) ***REMOVED***
    return !!findPackageJson(startDir);
***REMOVED***

//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    installSyncSaveDev,
    fetchPeerDependencies,
    checkDeps,
    checkDevDeps,
    checkPackageJson
***REMOVED***;
