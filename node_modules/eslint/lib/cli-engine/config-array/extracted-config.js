/**
 * @fileoverview `ExtractedConfig` class.
 *
 * `ExtractedConfig` class expresses a final configuration for a specific file.
 *
 * It provides one method.
 *
 * - `toCompatibleObjectAsConfigFileContent()`
 *      Convert this configuration to the compatible object as the content of
 *      config files. It converts the loaded parser and plugins to strings.
 *      `CLIEngine#getConfigForFile(filePath)` method uses this method.
 *
 * `ConfigArray#extractConfig(filePath)` creates a `ExtractedConfig` instance.
 *
 * @author Toru Nagashima <https://github.com/mysticatea>
 */
"use strict";

// For VSCode intellisense
/** @typedef ***REMOVED***import("../../shared/types").ConfigData***REMOVED*** ConfigData */
/** @typedef ***REMOVED***import("../../shared/types").GlobalConf***REMOVED*** GlobalConf */
/** @typedef ***REMOVED***import("../../shared/types").SeverityConf***REMOVED*** SeverityConf */
/** @typedef ***REMOVED***import("./config-dependency").DependentParser***REMOVED*** DependentParser */
/** @typedef ***REMOVED***import("./config-dependency").DependentPlugin***REMOVED*** DependentPlugin */

/**
 * The class for extracted config data.
 */
class ExtractedConfig ***REMOVED***
    constructor() ***REMOVED***

        /**
         * The config name what `noInlineConfig` setting came from.
         * @type ***REMOVED***string***REMOVED***
         */
        this.configNameOfNoInlineConfig = "";

        /**
         * Environments.
         * @type ***REMOVED***Record<string, boolean>***REMOVED***
         */
        this.env = ***REMOVED******REMOVED***;

        /**
         * Global variables.
         * @type ***REMOVED***Record<string, GlobalConf>***REMOVED***
         */
        this.globals = ***REMOVED******REMOVED***;

        /**
         * The flag that disables directive comments.
         * @type ***REMOVED***boolean|undefined***REMOVED***
         */
        this.noInlineConfig = void 0;

        /**
         * Parser definition.
         * @type ***REMOVED***DependentParser|null***REMOVED***
         */
        this.parser = null;

        /**
         * Options for the parser.
         * @type ***REMOVED***Object***REMOVED***
         */
        this.parserOptions = ***REMOVED******REMOVED***;

        /**
         * Plugin definitions.
         * @type ***REMOVED***Record<string, DependentPlugin>***REMOVED***
         */
        this.plugins = ***REMOVED******REMOVED***;

        /**
         * Processor ID.
         * @type ***REMOVED***string|null***REMOVED***
         */
        this.processor = null;

        /**
         * The flag that reports unused `eslint-disable` directive comments.
         * @type ***REMOVED***boolean|undefined***REMOVED***
         */
        this.reportUnusedDisableDirectives = void 0;

        /**
         * Rule settings.
         * @type ***REMOVED***Record<string, [SeverityConf, ...any[]]>***REMOVED***
         */
        this.rules = ***REMOVED******REMOVED***;

        /**
         * Shared settings.
         * @type ***REMOVED***Object***REMOVED***
         */
        this.settings = ***REMOVED******REMOVED***;
    ***REMOVED***

    /**
     * Convert this config to the compatible object as a config file content.
     * @returns ***REMOVED***ConfigData***REMOVED*** The converted object.
     */
    toCompatibleObjectAsConfigFileContent() ***REMOVED***
        const ***REMOVED***
            /* eslint-disable no-unused-vars */
            configNameOfNoInlineConfig: _ignore1,
            processor: _ignore2,
            /* eslint-enable no-unused-vars */
            ...config
        ***REMOVED*** = this;

        config.parser = config.parser && config.parser.filePath;
        config.plugins = Object.keys(config.plugins).filter(Boolean).reverse();

        return config;
    ***REMOVED***
***REMOVED***

module.exports = ***REMOVED*** ExtractedConfig ***REMOVED***;
