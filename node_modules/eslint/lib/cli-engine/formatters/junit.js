/**
 * @fileoverview jUnit Reporter
 * @author Jamund Ferguson
 */
"use strict";

const xmlEscape = require("../xml-escape");
const path = require("path");

//------------------------------------------------------------------------------
// Helper Functions
//------------------------------------------------------------------------------

/**
 * Returns the severity of warning or error
 * @param ***REMOVED***Object***REMOVED*** message message object to examine
 * @returns ***REMOVED***string***REMOVED*** severity level
 * @private
 */
function getMessageType(message) ***REMOVED***
    if (message.fatal || message.severity === 2) ***REMOVED***
        return "Error";
    ***REMOVED***
    return "Warning";

***REMOVED***

/**
 * Returns a full file path without extension
 * @param ***REMOVED***string***REMOVED*** filePath input file path
 * @returns ***REMOVED***string***REMOVED*** file path without extension
 * @private
 */
function pathWithoutExt(filePath) ***REMOVED***
    return path.posix.join(path.posix.dirname(filePath), path.basename(filePath, path.extname(filePath)));
***REMOVED***

//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

module.exports = function(results) ***REMOVED***

    let output = "";

    output += "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
    output += "<testsuites>\n";

    results.forEach(result => ***REMOVED***

        const messages = result.messages;
        const classname = pathWithoutExt(result.filePath);

        if (messages.length > 0) ***REMOVED***
            output += `<testsuite package="org.eslint" time="0" tests="$***REMOVED***messages.length***REMOVED***" errors="$***REMOVED***messages.length***REMOVED***" name="$***REMOVED***result.filePath***REMOVED***">\n`;
            messages.forEach(message => ***REMOVED***
                const type = message.fatal ? "error" : "failure";

                output += `<testcase time="0" name="org.eslint.$***REMOVED***message.ruleId || "unknown"***REMOVED***" classname="$***REMOVED***classname***REMOVED***">`;
                output += `<$***REMOVED***type***REMOVED*** message="$***REMOVED***xmlEscape(message.message || "")***REMOVED***">`;
                output += "<![CDATA[";
                output += `line $***REMOVED***message.line || 0***REMOVED***, col `;
                output += `$***REMOVED***message.column || 0***REMOVED***, $***REMOVED***getMessageType(message)***REMOVED***`;
                output += ` - $***REMOVED***xmlEscape(message.message || "")***REMOVED***`;
                output += (message.ruleId ? ` ($***REMOVED***message.ruleId***REMOVED***)` : "");
                output += "]]>";
                output += `</$***REMOVED***type***REMOVED***>`;
                output += "</testcase>\n";
            ***REMOVED***);
            output += "</testsuite>\n";
        ***REMOVED*** else ***REMOVED***
            output += `<testsuite package="org.eslint" time="0" tests="1" errors="0" name="$***REMOVED***result.filePath***REMOVED***">\n`;
            output += `<testcase time="0" name="$***REMOVED***result.filePath***REMOVED***" classname="$***REMOVED***classname***REMOVED***" />\n`;
            output += "</testsuite>\n";
        ***REMOVED***

    ***REMOVED***);

    output += "</testsuites>\n";

    return output;
***REMOVED***;
