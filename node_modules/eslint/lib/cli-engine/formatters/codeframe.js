/**
 * @fileoverview Codeframe reporter
 * @author Vitor Balocco
 */
"use strict";

const chalk = require("chalk");
const ***REMOVED*** codeFrameColumns ***REMOVED*** = require("@babel/code-frame");
const path = require("path");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Given a word and a count, append an s if count is not one.
 * @param   ***REMOVED***string***REMOVED*** word  A word in its singular form.
 * @param   ***REMOVED***number***REMOVED*** count A number controlling whether word should be pluralized.
 * @returns ***REMOVED***string***REMOVED***       The original word with an s on the end if count is not one.
 */
function pluralize(word, count) ***REMOVED***
    return (count === 1 ? word : `$***REMOVED***word***REMOVED***s`);
***REMOVED***

/**
 * Gets a formatted relative file path from an absolute path and a line/column in the file.
 * @param   ***REMOVED***string***REMOVED*** filePath The absolute file path to format.
 * @param   ***REMOVED***number***REMOVED*** line     The line from the file to use for formatting.
 * @param   ***REMOVED***number***REMOVED*** column   The column from the file to use for formatting.
 * @returns ***REMOVED***string***REMOVED***          The formatted file path.
 */
function formatFilePath(filePath, line, column) ***REMOVED***
    let relPath = path.relative(process.cwd(), filePath);

    if (line && column) ***REMOVED***
        relPath += `:$***REMOVED***line***REMOVED***:$***REMOVED***column***REMOVED***`;
    ***REMOVED***

    return chalk.green(relPath);
***REMOVED***

/**
 * Gets the formatted output for a given message.
 * @param   ***REMOVED***Object***REMOVED*** message      The object that represents this message.
 * @param   ***REMOVED***Object***REMOVED*** parentResult The result object that this message belongs to.
 * @returns ***REMOVED***string***REMOVED***              The formatted output.
 */
function formatMessage(message, parentResult) ***REMOVED***
    const type = (message.fatal || message.severity === 2) ? chalk.red("error") : chalk.yellow("warning");
    const msg = `$***REMOVED***chalk.bold(message.message.replace(/([^ ])\.$/u, "$1"))***REMOVED***`;
    const ruleId = message.fatal ? "" : chalk.dim(`($***REMOVED***message.ruleId***REMOVED***)`);
    const filePath = formatFilePath(parentResult.filePath, message.line, message.column);
    const sourceCode = parentResult.output ? parentResult.output : parentResult.source;

    const firstLine = [
        `$***REMOVED***type***REMOVED***:`,
        `$***REMOVED***msg***REMOVED***`,
        ruleId ? `$***REMOVED***ruleId***REMOVED***` : "",
        sourceCode ? `at $***REMOVED***filePath***REMOVED***:` : `at $***REMOVED***filePath***REMOVED***`
    ].filter(String).join(" ");

    const result = [firstLine];

    if (sourceCode) ***REMOVED***
        result.push(
            codeFrameColumns(sourceCode, ***REMOVED*** start: ***REMOVED*** line: message.line, column: message.column ***REMOVED*** ***REMOVED***, ***REMOVED*** highlightCode: false ***REMOVED***)
        );
    ***REMOVED***

    return result.join("\n");
***REMOVED***

/**
 * Gets the formatted output summary for a given number of errors and warnings.
 * @param   ***REMOVED***number***REMOVED*** errors   The number of errors.
 * @param   ***REMOVED***number***REMOVED*** warnings The number of warnings.
 * @param   ***REMOVED***number***REMOVED*** fixableErrors The number of fixable errors.
 * @param   ***REMOVED***number***REMOVED*** fixableWarnings The number of fixable warnings.
 * @returns ***REMOVED***string***REMOVED***          The formatted output summary.
 */
function formatSummary(errors, warnings, fixableErrors, fixableWarnings) ***REMOVED***
    const summaryColor = errors > 0 ? "red" : "yellow";
    const summary = [];
    const fixablesSummary = [];

    if (errors > 0) ***REMOVED***
        summary.push(`$***REMOVED***errors***REMOVED*** $***REMOVED***pluralize("error", errors)***REMOVED***`);
    ***REMOVED***

    if (warnings > 0) ***REMOVED***
        summary.push(`$***REMOVED***warnings***REMOVED*** $***REMOVED***pluralize("warning", warnings)***REMOVED***`);
    ***REMOVED***

    if (fixableErrors > 0) ***REMOVED***
        fixablesSummary.push(`$***REMOVED***fixableErrors***REMOVED*** $***REMOVED***pluralize("error", fixableErrors)***REMOVED***`);
    ***REMOVED***

    if (fixableWarnings > 0) ***REMOVED***
        fixablesSummary.push(`$***REMOVED***fixableWarnings***REMOVED*** $***REMOVED***pluralize("warning", fixableWarnings)***REMOVED***`);
    ***REMOVED***

    let output = chalk[summaryColor].bold(`$***REMOVED***summary.join(" and ")***REMOVED*** found.`);

    if (fixableErrors || fixableWarnings) ***REMOVED***
        output += chalk[summaryColor].bold(`\n$***REMOVED***fixablesSummary.join(" and ")***REMOVED*** potentially fixable with the \`--fix\` option.`);
    ***REMOVED***

    return output;
***REMOVED***

//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

module.exports = function(results) ***REMOVED***
    let errors = 0;
    let warnings = 0;
    let fixableErrors = 0;
    let fixableWarnings = 0;

    const resultsWithMessages = results.filter(result => result.messages.length > 0);

    let output = resultsWithMessages.reduce((resultsOutput, result) => ***REMOVED***
        const messages = result.messages.map(message => `$***REMOVED***formatMessage(message, result)***REMOVED***\n\n`);

        errors += result.errorCount;
        warnings += result.warningCount;
        fixableErrors += result.fixableErrorCount;
        fixableWarnings += result.fixableWarningCount;

        return resultsOutput.concat(messages);
    ***REMOVED***, []).join("\n");

    output += "\n";
    output += formatSummary(errors, warnings, fixableErrors, fixableWarnings);

    return (errors + warnings) > 0 ? output : "";
***REMOVED***;
