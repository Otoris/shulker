/**
 * @fileoverview unix-style formatter.
 * @author oshi-shinobu
 */
"use strict";

//------------------------------------------------------------------------------
// Helper Functions
//------------------------------------------------------------------------------

/**
 * Returns a canonical error level string based upon the error message passed in.
 * @param ***REMOVED***Object***REMOVED*** message Individual error message provided by eslint
 * @returns ***REMOVED***string***REMOVED*** Error level string
 */
function getMessageType(message) ***REMOVED***
    if (message.fatal || message.severity === 2) ***REMOVED***
        return "Error";
    ***REMOVED***
    return "Warning";

***REMOVED***


//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

module.exports = function(results) ***REMOVED***

    let output = "",
        total = 0;

    results.forEach(result => ***REMOVED***

        const messages = result.messages;

        total += messages.length;

        messages.forEach(message => ***REMOVED***

            output += `$***REMOVED***result.filePath***REMOVED***:`;
            output += `$***REMOVED***message.line || 0***REMOVED***:`;
            output += `$***REMOVED***message.column || 0***REMOVED***:`;
            output += ` $***REMOVED***message.message***REMOVED*** `;
            output += `[$***REMOVED***getMessageType(message)***REMOVED***$***REMOVED***message.ruleId ? `/$***REMOVED***message.ruleId***REMOVED***` : ""***REMOVED***]`;
            output += "\n";

        ***REMOVED***);

    ***REMOVED***);

    if (total > 0) ***REMOVED***
        output += `\n$***REMOVED***total***REMOVED*** problem$***REMOVED***total !== 1 ? "s" : ""***REMOVED***`;
    ***REMOVED***

    return output;
***REMOVED***;
