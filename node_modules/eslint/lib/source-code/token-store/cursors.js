/**
 * @fileoverview Define 2 token factories; forward and backward.
 * @author Toru Nagashima
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const BackwardTokenCommentCursor = require("./backward-token-comment-cursor");
const BackwardTokenCursor = require("./backward-token-cursor");
const FilterCursor = require("./filter-cursor");
const ForwardTokenCommentCursor = require("./forward-token-comment-cursor");
const ForwardTokenCursor = require("./forward-token-cursor");
const LimitCursor = require("./limit-cursor");
const SkipCursor = require("./skip-cursor");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * The cursor factory.
 * @private
 */
class CursorFactory ***REMOVED***

    /**
     * Initializes this cursor.
     * @param ***REMOVED***Function***REMOVED*** TokenCursor - The class of the cursor which iterates tokens only.
     * @param ***REMOVED***Function***REMOVED*** TokenCommentCursor - The class of the cursor which iterates the mix of tokens and comments.
     */
    constructor(TokenCursor, TokenCommentCursor) ***REMOVED***
        this.TokenCursor = TokenCursor;
        this.TokenCommentCursor = TokenCommentCursor;
    ***REMOVED***

    /**
     * Creates a base cursor instance that can be decorated by createCursor.
     *
     * @param ***REMOVED***Token[]***REMOVED*** tokens - The array of tokens.
     * @param ***REMOVED***Comment[]***REMOVED*** comments - The array of comments.
     * @param ***REMOVED***Object***REMOVED*** indexMap - The map from locations to indices in `tokens`.
     * @param ***REMOVED***number***REMOVED*** startLoc - The start location of the iteration range.
     * @param ***REMOVED***number***REMOVED*** endLoc - The end location of the iteration range.
     * @param ***REMOVED***boolean***REMOVED*** includeComments - The flag to iterate comments as well.
     * @returns ***REMOVED***Cursor***REMOVED*** The created base cursor.
     */
    createBaseCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments) ***REMOVED***
        const Cursor = includeComments ? this.TokenCommentCursor : this.TokenCursor;

        return new Cursor(tokens, comments, indexMap, startLoc, endLoc);
    ***REMOVED***

    /**
     * Creates a cursor that iterates tokens with normalized options.
     *
     * @param ***REMOVED***Token[]***REMOVED*** tokens - The array of tokens.
     * @param ***REMOVED***Comment[]***REMOVED*** comments - The array of comments.
     * @param ***REMOVED***Object***REMOVED*** indexMap - The map from locations to indices in `tokens`.
     * @param ***REMOVED***number***REMOVED*** startLoc - The start location of the iteration range.
     * @param ***REMOVED***number***REMOVED*** endLoc - The end location of the iteration range.
     * @param ***REMOVED***boolean***REMOVED*** includeComments - The flag to iterate comments as well.
     * @param ***REMOVED***Function|null***REMOVED*** filter - The predicate function to choose tokens.
     * @param ***REMOVED***number***REMOVED*** skip - The count of tokens the cursor skips.
     * @param ***REMOVED***number***REMOVED*** count - The maximum count of tokens the cursor iterates. Zero is no iteration for backward compatibility.
     * @returns ***REMOVED***Cursor***REMOVED*** The created cursor.
     */
    createCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments, filter, skip, count) ***REMOVED***
        let cursor = this.createBaseCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments);

        if (filter) ***REMOVED***
            cursor = new FilterCursor(cursor, filter);
        ***REMOVED***
        if (skip >= 1) ***REMOVED***
            cursor = new SkipCursor(cursor, skip);
        ***REMOVED***
        if (count >= 0) ***REMOVED***
            cursor = new LimitCursor(cursor, count);
        ***REMOVED***

        return cursor;
    ***REMOVED***
***REMOVED***

//------------------------------------------------------------------------------
// Exports
//------------------------------------------------------------------------------

exports.forward = new CursorFactory(ForwardTokenCursor, ForwardTokenCommentCursor);
exports.backward = new CursorFactory(BackwardTokenCursor, BackwardTokenCommentCursor);
