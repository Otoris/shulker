/**
 * @fileoverview Defines a storage for rules.
 * @author Nicholas C. Zakas
 * @author aladdin-add
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const builtInRules = require("../rules");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Normalizes a rule module to the new-style API
 * @param ***REMOVED***(Function|***REMOVED***create: Function***REMOVED***)***REMOVED*** rule A rule object, which can either be a function
 * ("old-style") or an object with a `create` method ("new-style")
 * @returns ***REMOVED******REMOVED***create: Function***REMOVED******REMOVED*** A new-style rule.
 */
function normalizeRule(rule) ***REMOVED***
    return typeof rule === "function" ? Object.assign(***REMOVED*** create: rule ***REMOVED***, rule) : rule;
***REMOVED***

//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

class Rules ***REMOVED***
    constructor() ***REMOVED***
        this._rules = Object.create(null);
    ***REMOVED***

    /**
     * Registers a rule module for rule id in storage.
     * @param ***REMOVED***string***REMOVED*** ruleId Rule id (file name).
     * @param ***REMOVED***Function***REMOVED*** ruleModule Rule handler.
     * @returns ***REMOVED***void***REMOVED***
     */
    define(ruleId, ruleModule) ***REMOVED***
        this._rules[ruleId] = normalizeRule(ruleModule);
    ***REMOVED***

    /**
     * Access rule handler by id (file name).
     * @param ***REMOVED***string***REMOVED*** ruleId Rule id (file name).
     * @returns ***REMOVED******REMOVED***create: Function, schema: JsonSchema[]***REMOVED******REMOVED***
     * A rule. This is normalized to always have the new-style shape with a `create` method.
     */
    get(ruleId) ***REMOVED***
        if (typeof this._rules[ruleId] === "string") ***REMOVED***
            this.define(ruleId, require(this._rules[ruleId]));
        ***REMOVED***
        if (this._rules[ruleId]) ***REMOVED***
            return this._rules[ruleId];
        ***REMOVED***
        if (builtInRules.has(ruleId)) ***REMOVED***
            return builtInRules.get(ruleId);
        ***REMOVED***

        return null;
    ***REMOVED***

    *[Symbol.iterator]() ***REMOVED***
        yield* builtInRules;

        for (const ruleId of Object.keys(this._rules)) ***REMOVED***
            yield [ruleId, this.get(ruleId)];
        ***REMOVED***
    ***REMOVED***
***REMOVED***

module.exports = Rules;
