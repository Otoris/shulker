/**
 * @fileoverview Config Comment Parser
 * @author Nicholas C. Zakas
 */

/* eslint-disable class-methods-use-this*/
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const levn = require("levn"),
    ConfigOps = require("../shared/config-ops");

const debug = require("debug")("eslint:config-comment-parser");

//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

/**
 * Object to parse ESLint configuration comments inside JavaScript files.
 * @name ConfigCommentParser
 */
module.exports = class ConfigCommentParser ***REMOVED***

    /**
     * Parses a list of "name:string_value" or/and "name" options divided by comma or
     * whitespace. Used for "global" and "exported" comments.
     * @param ***REMOVED***string***REMOVED*** string The string to parse.
     * @param ***REMOVED***Comment***REMOVED*** comment The comment node which has the string.
     * @returns ***REMOVED***Object***REMOVED*** Result map object of names and string values, or null values if no value was provided
     */
    parseStringConfig(string, comment) ***REMOVED***
        debug("Parsing String config");

        const items = ***REMOVED******REMOVED***;

        // Collapse whitespace around `:` and `,` to make parsing easier
        const trimmedString = string.replace(/\s*([:,])\s*/gu, "$1");

        trimmedString.split(/\s|,+/u).forEach(name => ***REMOVED***
            if (!name) ***REMOVED***
                return;
            ***REMOVED***

            // value defaults to null (if not provided), e.g: "foo" => ["foo", null]
            const [key, value = null] = name.split(":");

            items[key] = ***REMOVED*** value, comment ***REMOVED***;
        ***REMOVED***);
        return items;
    ***REMOVED***

    /**
     * Parses a JSON-like config.
     * @param ***REMOVED***string***REMOVED*** string The string to parse.
     * @param ***REMOVED***Object***REMOVED*** location Start line and column of comments for potential error message.
     * @returns ***REMOVED***(***REMOVED***success: true, config: Object***REMOVED***|***REMOVED***success: false, error: Problem***REMOVED***)***REMOVED*** Result map object
     */
    parseJsonConfig(string, location) ***REMOVED***
        debug("Parsing JSON config");

        let items = ***REMOVED******REMOVED***;

        // Parses a JSON-like comment by the same way as parsing CLI option.
        try ***REMOVED***
            items = levn.parse("Object", string) || ***REMOVED******REMOVED***;

            // Some tests say that it should ignore invalid comments such as `/*eslint no-alert:abc*/`.
            // Also, commaless notations have invalid severity:
            //     "no-alert: 2 no-console: 2" --> ***REMOVED***"no-alert": "2 no-console: 2"***REMOVED***
            // Should ignore that case as well.
            if (ConfigOps.isEverySeverityValid(items)) ***REMOVED***
                return ***REMOVED***
                    success: true,
                    config: items
                ***REMOVED***;
            ***REMOVED***
        ***REMOVED*** catch (ex) ***REMOVED***

            debug("Levn parsing failed; falling back to manual parsing.");

            // ignore to parse the string by a fallback.
        ***REMOVED***

        /*
         * Optionator cannot parse commaless notations.
         * But we are supporting that. So this is a fallback for that.
         */
        items = ***REMOVED******REMOVED***;
        const normalizedString = string.replace(/([a-zA-Z0-9\-/]+):/gu, "\"$1\":").replace(/(\]|[0-9])\s+(?=")/u, "$1,");

        try ***REMOVED***
            items = JSON.parse(`***REMOVED***$***REMOVED***normalizedString***REMOVED******REMOVED***`);
        ***REMOVED*** catch (ex) ***REMOVED***
            debug("Manual parsing failed.");

            return ***REMOVED***
                success: false,
                error: ***REMOVED***
                    ruleId: null,
                    fatal: true,
                    severity: 2,
                    message: `Failed to parse JSON from '$***REMOVED***normalizedString***REMOVED***': $***REMOVED***ex.message***REMOVED***`,
                    line: location.start.line,
                    column: location.start.column + 1
                ***REMOVED***
            ***REMOVED***;

        ***REMOVED***

        return ***REMOVED***
            success: true,
            config: items
        ***REMOVED***;
    ***REMOVED***

    /**
     * Parses a config of values separated by comma.
     * @param ***REMOVED***string***REMOVED*** string The string to parse.
     * @returns ***REMOVED***Object***REMOVED*** Result map of values and true values
     */
    parseListConfig(string) ***REMOVED***
        debug("Parsing list config");

        const items = ***REMOVED******REMOVED***;

        // Collapse whitespace around commas
        string.replace(/\s*,\s*/gu, ",").split(/,+/u).forEach(name => ***REMOVED***
            const trimmedName = name.trim();

            if (trimmedName) ***REMOVED***
                items[trimmedName] = true;
            ***REMOVED***
        ***REMOVED***);
        return items;
    ***REMOVED***

***REMOVED***;
