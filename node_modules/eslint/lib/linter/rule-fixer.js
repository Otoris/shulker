/**
 * @fileoverview An object that creates fix commands for rules.
 * @author Nicholas C. Zakas
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

// none!

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Creates a fix command that inserts text at the specified index in the source text.
 * @param ***REMOVED***int***REMOVED*** index The 0-based index at which to insert the new text.
 * @param ***REMOVED***string***REMOVED*** text The text to insert.
 * @returns ***REMOVED***Object***REMOVED*** The fix command.
 * @private
 */
function insertTextAt(index, text) ***REMOVED***
    return ***REMOVED***
        range: [index, index],
        text
    ***REMOVED***;
***REMOVED***

//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

/**
 * Creates code fixing commands for rules.
 */

const ruleFixer = Object.freeze(***REMOVED***

    /**
     * Creates a fix command that inserts text after the given node or token.
     * The fix is not applied until applyFixes() is called.
     * @param ***REMOVED***ASTNode|Token***REMOVED*** nodeOrToken The node or token to insert after.
     * @param ***REMOVED***string***REMOVED*** text The text to insert.
     * @returns ***REMOVED***Object***REMOVED*** The fix command.
     */
    insertTextAfter(nodeOrToken, text) ***REMOVED***
        return this.insertTextAfterRange(nodeOrToken.range, text);
    ***REMOVED***,

    /**
     * Creates a fix command that inserts text after the specified range in the source text.
     * The fix is not applied until applyFixes() is called.
     * @param ***REMOVED***int[]***REMOVED*** range The range to replace, first item is start of range, second
     *      is end of range.
     * @param ***REMOVED***string***REMOVED*** text The text to insert.
     * @returns ***REMOVED***Object***REMOVED*** The fix command.
     */
    insertTextAfterRange(range, text) ***REMOVED***
        return insertTextAt(range[1], text);
    ***REMOVED***,

    /**
     * Creates a fix command that inserts text before the given node or token.
     * The fix is not applied until applyFixes() is called.
     * @param ***REMOVED***ASTNode|Token***REMOVED*** nodeOrToken The node or token to insert before.
     * @param ***REMOVED***string***REMOVED*** text The text to insert.
     * @returns ***REMOVED***Object***REMOVED*** The fix command.
     */
    insertTextBefore(nodeOrToken, text) ***REMOVED***
        return this.insertTextBeforeRange(nodeOrToken.range, text);
    ***REMOVED***,

    /**
     * Creates a fix command that inserts text before the specified range in the source text.
     * The fix is not applied until applyFixes() is called.
     * @param ***REMOVED***int[]***REMOVED*** range The range to replace, first item is start of range, second
     *      is end of range.
     * @param ***REMOVED***string***REMOVED*** text The text to insert.
     * @returns ***REMOVED***Object***REMOVED*** The fix command.
     */
    insertTextBeforeRange(range, text) ***REMOVED***
        return insertTextAt(range[0], text);
    ***REMOVED***,

    /**
     * Creates a fix command that replaces text at the node or token.
     * The fix is not applied until applyFixes() is called.
     * @param ***REMOVED***ASTNode|Token***REMOVED*** nodeOrToken The node or token to remove.
     * @param ***REMOVED***string***REMOVED*** text The text to insert.
     * @returns ***REMOVED***Object***REMOVED*** The fix command.
     */
    replaceText(nodeOrToken, text) ***REMOVED***
        return this.replaceTextRange(nodeOrToken.range, text);
    ***REMOVED***,

    /**
     * Creates a fix command that replaces text at the specified range in the source text.
     * The fix is not applied until applyFixes() is called.
     * @param ***REMOVED***int[]***REMOVED*** range The range to replace, first item is start of range, second
     *      is end of range.
     * @param ***REMOVED***string***REMOVED*** text The text to insert.
     * @returns ***REMOVED***Object***REMOVED*** The fix command.
     */
    replaceTextRange(range, text) ***REMOVED***
        return ***REMOVED***
            range,
            text
        ***REMOVED***;
    ***REMOVED***,

    /**
     * Creates a fix command that removes the node or token from the source.
     * The fix is not applied until applyFixes() is called.
     * @param ***REMOVED***ASTNode|Token***REMOVED*** nodeOrToken The node or token to remove.
     * @returns ***REMOVED***Object***REMOVED*** The fix command.
     */
    remove(nodeOrToken) ***REMOVED***
        return this.removeRange(nodeOrToken.range);
    ***REMOVED***,

    /**
     * Creates a fix command that removes the specified range of text from the source.
     * The fix is not applied until applyFixes() is called.
     * @param ***REMOVED***int[]***REMOVED*** range The range to remove, first item is start of range, second
     *      is end of range.
     * @returns ***REMOVED***Object***REMOVED*** The fix command.
     */
    removeRange(range) ***REMOVED***
        return ***REMOVED***
            range,
            text: ""
        ***REMOVED***;
    ***REMOVED***

***REMOVED***);


module.exports = ruleFixer;
