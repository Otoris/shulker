/**
 * @fileoverview Tracks performance of individual rules.
 * @author Brandon Mills
 */

"use strict";

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/* istanbul ignore next */
/**
 * Align the string to left
 * @param ***REMOVED***string***REMOVED*** str string to evaluate
 * @param ***REMOVED***int***REMOVED*** len length of the string
 * @param ***REMOVED***string***REMOVED*** ch delimiter character
 * @returns ***REMOVED***string***REMOVED*** modified string
 * @private
 */
function alignLeft(str, len, ch) ***REMOVED***
    return str + new Array(len - str.length + 1).join(ch || " ");
***REMOVED***

/* istanbul ignore next */
/**
 * Align the string to right
 * @param ***REMOVED***string***REMOVED*** str string to evaluate
 * @param ***REMOVED***int***REMOVED*** len length of the string
 * @param ***REMOVED***string***REMOVED*** ch delimiter character
 * @returns ***REMOVED***string***REMOVED*** modified string
 * @private
 */
function alignRight(str, len, ch) ***REMOVED***
    return new Array(len - str.length + 1).join(ch || " ") + str;
***REMOVED***

//------------------------------------------------------------------------------
// Module definition
//------------------------------------------------------------------------------

const enabled = !!process.env.TIMING;

const HEADERS = ["Rule", "Time (ms)", "Relative"];
const ALIGN = [alignLeft, alignRight, alignRight];

/* istanbul ignore next */
/**
 * display the data
 * @param ***REMOVED***Object***REMOVED*** data Data object to be displayed
 * @returns ***REMOVED***void***REMOVED*** prints modified string with console.log
 * @private
 */
function display(data) ***REMOVED***
    let total = 0;
    const rows = Object.keys(data)
        .map(key => ***REMOVED***
            const time = data[key];

            total += time;
            return [key, time];
        ***REMOVED***)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 10);

    rows.forEach(row => ***REMOVED***
        row.push(`$***REMOVED***(row[1] * 100 / total).toFixed(1)***REMOVED***%`);
        row[1] = row[1].toFixed(3);
    ***REMOVED***);

    rows.unshift(HEADERS);

    const widths = [];

    rows.forEach(row => ***REMOVED***
        const len = row.length;

        for (let i = 0; i < len; i++) ***REMOVED***
            const n = row[i].length;

            if (!widths[i] || n > widths[i]) ***REMOVED***
                widths[i] = n;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***);

    const table = rows.map(row => (
        row
            .map((cell, index) => ALIGN[index](cell, widths[index]))
            .join(" | ")
    ));

    table.splice(1, 0, widths.map((width, index) => ***REMOVED***
        const extraAlignment = index !== 0 && index !== widths.length - 1 ? 2 : 1;

        return ALIGN[index](":", width + extraAlignment, "-");
    ***REMOVED***).join("|"));

    console.log(table.join("\n")); // eslint-disable-line no-console
***REMOVED***

/* istanbul ignore next */
module.exports = (function() ***REMOVED***

    const data = Object.create(null);

    /**
     * Time the run
     * @param ***REMOVED*******REMOVED*** key key from the data object
     * @param ***REMOVED***Function***REMOVED*** fn function to be called
     * @returns ***REMOVED***Function***REMOVED*** function to be executed
     * @private
     */
    function time(key, fn) ***REMOVED***
        if (typeof data[key] === "undefined") ***REMOVED***
            data[key] = 0;
        ***REMOVED***

        return function(...args) ***REMOVED***
            let t = process.hrtime();

            fn(...args);
            t = process.hrtime(t);
            data[key] += t[0] * 1e3 + t[1] / 1e6;
        ***REMOVED***;
    ***REMOVED***

    if (enabled) ***REMOVED***
        process.on("exit", () => ***REMOVED***
            display(data);
        ***REMOVED***);
    ***REMOVED***

    return ***REMOVED***
        time,
        enabled
    ***REMOVED***;

***REMOVED***());
