/**
 * @fileoverview Common helpers for naming of plugins, formatters and configs
 */
"use strict";

const NAMESPACE_REGEX = /^@.*\//iu;

/**
 * Brings package name to correct format based on prefix
 * @param ***REMOVED***string***REMOVED*** name The name of the package.
 * @param ***REMOVED***string***REMOVED*** prefix Can be either "eslint-plugin", "eslint-config" or "eslint-formatter"
 * @returns ***REMOVED***string***REMOVED*** Normalized name of the package
 * @private
 */
function normalizePackageName(name, prefix) ***REMOVED***
    let normalizedName = name;

    /**
     * On Windows, name can come in with Windows slashes instead of Unix slashes.
     * Normalize to Unix first to avoid errors later on.
     * https://github.com/eslint/eslint/issues/5644
     */
    if (normalizedName.includes("\\")) ***REMOVED***
        normalizedName = normalizedName.replace(/\\/gu, "/");
    ***REMOVED***

    if (normalizedName.charAt(0) === "@") ***REMOVED***

        /**
         * it's a scoped package
         * package name is the prefix, or just a username
         */
        const scopedPackageShortcutRegex = new RegExp(`^(@[^/]+)(?:/(?:$***REMOVED***prefix***REMOVED***)?)?$`, "u"),
            scopedPackageNameRegex = new RegExp(`^$***REMOVED***prefix***REMOVED***(-|$)`, "u");

        if (scopedPackageShortcutRegex.test(normalizedName)) ***REMOVED***
            normalizedName = normalizedName.replace(scopedPackageShortcutRegex, `$1/$***REMOVED***prefix***REMOVED***`);
        ***REMOVED*** else if (!scopedPackageNameRegex.test(normalizedName.split("/")[1])) ***REMOVED***

            /**
             * for scoped packages, insert the prefix after the first / unless
             * the path is already @scope/eslint or @scope/eslint-xxx-yyy
             */
            normalizedName = normalizedName.replace(/^@([^/]+)\/(.*)$/u, `@$1/$***REMOVED***prefix***REMOVED***-$2`);
        ***REMOVED***
    ***REMOVED*** else if (!normalizedName.startsWith(`$***REMOVED***prefix***REMOVED***-`)) ***REMOVED***
        normalizedName = `$***REMOVED***prefix***REMOVED***-$***REMOVED***normalizedName***REMOVED***`;
    ***REMOVED***

    return normalizedName;
***REMOVED***

/**
 * Removes the prefix from a fullname.
 * @param ***REMOVED***string***REMOVED*** fullname The term which may have the prefix.
 * @param ***REMOVED***string***REMOVED*** prefix The prefix to remove.
 * @returns ***REMOVED***string***REMOVED*** The term without prefix.
 */
function getShorthandName(fullname, prefix) ***REMOVED***
    if (fullname[0] === "@") ***REMOVED***
        let matchResult = new RegExp(`^(@[^/]+)/$***REMOVED***prefix***REMOVED***$`, "u").exec(fullname);

        if (matchResult) ***REMOVED***
            return matchResult[1];
        ***REMOVED***

        matchResult = new RegExp(`^(@[^/]+)/$***REMOVED***prefix***REMOVED***-(.+)$`, "u").exec(fullname);
        if (matchResult) ***REMOVED***
            return `$***REMOVED***matchResult[1]***REMOVED***/$***REMOVED***matchResult[2]***REMOVED***`;
        ***REMOVED***
    ***REMOVED*** else if (fullname.startsWith(`$***REMOVED***prefix***REMOVED***-`)) ***REMOVED***
        return fullname.slice(prefix.length + 1);
    ***REMOVED***

    return fullname;
***REMOVED***

/**
 * Gets the scope (namespace) of a term.
 * @param ***REMOVED***string***REMOVED*** term The term which may have the namespace.
 * @returns ***REMOVED***string***REMOVED*** The namepace of the term if it has one.
 */
function getNamespaceFromTerm(term) ***REMOVED***
    const match = term.match(NAMESPACE_REGEX);

    return match ? match[0] : "";
***REMOVED***

//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    normalizePackageName,
    getShorthandName,
    getNamespaceFromTerm
***REMOVED***;
