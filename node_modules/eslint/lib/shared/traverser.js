/**
 * @fileoverview Traverser to traverse AST trees.
 * @author Nicholas C. Zakas
 * @author Toru Nagashima
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const vk = require("eslint-visitor-keys");
const debug = require("debug")("eslint:traverser");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Do nothing.
 * @returns ***REMOVED***void***REMOVED***
 */
function noop() ***REMOVED***

    // do nothing.
***REMOVED***

/**
 * Check whether the given value is an ASTNode or not.
 * @param ***REMOVED***any***REMOVED*** x The value to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the value is an ASTNode.
 */
function isNode(x) ***REMOVED***
    return x !== null && typeof x === "object" && typeof x.type === "string";
***REMOVED***

/**
 * Get the visitor keys of a given node.
 * @param ***REMOVED***Object***REMOVED*** visitorKeys The map of visitor keys.
 * @param ***REMOVED***ASTNode***REMOVED*** node The node to get their visitor keys.
 * @returns ***REMOVED***string[]***REMOVED*** The visitor keys of the node.
 */
function getVisitorKeys(visitorKeys, node) ***REMOVED***
    let keys = visitorKeys[node.type];

    if (!keys) ***REMOVED***
        keys = vk.getKeys(node);
        debug("Unknown node type \"%s\": Estimated visitor keys %j", node.type, keys);
    ***REMOVED***

    return keys;
***REMOVED***

/**
 * The traverser class to traverse AST trees.
 */
class Traverser ***REMOVED***
    constructor() ***REMOVED***
        this._current = null;
        this._parents = [];
        this._skipped = false;
        this._broken = false;
        this._visitorKeys = null;
        this._enter = null;
        this._leave = null;
    ***REMOVED***

    /**
     * @returns ***REMOVED***ASTNode***REMOVED*** The current node.
     */
    current() ***REMOVED***
        return this._current;
    ***REMOVED***

    /**
     * @returns ***REMOVED***ASTNode[]***REMOVED*** The ancestor nodes.
     */
    parents() ***REMOVED***
        return this._parents.slice(0);
    ***REMOVED***

    /**
     * Break the current traversal.
     * @returns ***REMOVED***void***REMOVED***
     */
    break() ***REMOVED***
        this._broken = true;
    ***REMOVED***

    /**
     * Skip child nodes for the current traversal.
     * @returns ***REMOVED***void***REMOVED***
     */
    skip() ***REMOVED***
        this._skipped = true;
    ***REMOVED***

    /**
     * Traverse the given AST tree.
     * @param ***REMOVED***ASTNode***REMOVED*** node The root node to traverse.
     * @param ***REMOVED***Object***REMOVED*** options The option object.
     * @param ***REMOVED***Object***REMOVED*** [options.visitorKeys=DEFAULT_VISITOR_KEYS] The keys of each node types to traverse child nodes. Default is `./default-visitor-keys.json`.
     * @param ***REMOVED***Function***REMOVED*** [options.enter=noop] The callback function which is called on entering each node.
     * @param ***REMOVED***Function***REMOVED*** [options.leave=noop] The callback function which is called on leaving each node.
     * @returns ***REMOVED***void***REMOVED***
     */
    traverse(node, options) ***REMOVED***
        this._current = null;
        this._parents = [];
        this._skipped = false;
        this._broken = false;
        this._visitorKeys = options.visitorKeys || vk.KEYS;
        this._enter = options.enter || noop;
        this._leave = options.leave || noop;
        this._traverse(node, null);
    ***REMOVED***

    /**
     * Traverse the given AST tree recursively.
     * @param ***REMOVED***ASTNode***REMOVED*** node The current node.
     * @param ***REMOVED***ASTNode|null***REMOVED*** parent The parent node.
     * @returns ***REMOVED***void***REMOVED***
     * @private
     */
    _traverse(node, parent) ***REMOVED***
        if (!isNode(node)) ***REMOVED***
            return;
        ***REMOVED***

        this._current = node;
        this._skipped = false;
        this._enter(node, parent);

        if (!this._skipped && !this._broken) ***REMOVED***
            const keys = getVisitorKeys(this._visitorKeys, node);

            if (keys.length >= 1) ***REMOVED***
                this._parents.push(node);
                for (let i = 0; i < keys.length && !this._broken; ++i) ***REMOVED***
                    const child = node[keys[i]];

                    if (Array.isArray(child)) ***REMOVED***
                        for (let j = 0; j < child.length && !this._broken; ++j) ***REMOVED***
                            this._traverse(child[j], node);
                        ***REMOVED***
                    ***REMOVED*** else ***REMOVED***
                        this._traverse(child, node);
                    ***REMOVED***
                ***REMOVED***
                this._parents.pop();
            ***REMOVED***
        ***REMOVED***

        if (!this._broken) ***REMOVED***
            this._leave(node, parent);
        ***REMOVED***

        this._current = parent;
    ***REMOVED***

    /**
     * Calculates the keys to use for traversal.
     * @param ***REMOVED***ASTNode***REMOVED*** node The node to read keys from.
     * @returns ***REMOVED***string[]***REMOVED*** An array of keys to visit on the node.
     * @private
     */
    static getKeys(node) ***REMOVED***
        return vk.getKeys(node);
    ***REMOVED***

    /**
     * Traverse the given AST tree.
     * @param ***REMOVED***ASTNode***REMOVED*** node The root node to traverse.
     * @param ***REMOVED***Object***REMOVED*** options The option object.
     * @param ***REMOVED***Object***REMOVED*** [options.visitorKeys=DEFAULT_VISITOR_KEYS] The keys of each node types to traverse child nodes. Default is `./default-visitor-keys.json`.
     * @param ***REMOVED***Function***REMOVED*** [options.enter=noop] The callback function which is called on entering each node.
     * @param ***REMOVED***Function***REMOVED*** [options.leave=noop] The callback function which is called on leaving each node.
     * @returns ***REMOVED***void***REMOVED***
     */
    static traverse(node, options) ***REMOVED***
        new Traverser().traverse(node, options);
    ***REMOVED***

    /**
     * The default visitor keys.
     * @type ***REMOVED***Object***REMOVED***
     */
    static get DEFAULT_VISITOR_KEYS() ***REMOVED***
        return vk.KEYS;
    ***REMOVED***
***REMOVED***

module.exports = Traverser;
