/**
 * @fileoverview Main CLI object.
 * @author Nicholas C. Zakas
 */

"use strict";

/*
 * The CLI object should *not* call process.exit() directly. It should only return
 * exit codes. This allows other programs to use the CLI object and still control
 * when the program exits.
 */

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const fs = require("fs"),
    path = require("path"),
    mkdirp = require("mkdirp"),
    ***REMOVED*** CLIEngine ***REMOVED*** = require("./cli-engine"),
    options = require("./options"),
    log = require("./shared/logging");

const debug = require("debug")("eslint:cli");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Predicate function for whether or not to apply fixes in quiet mode.
 * If a message is a warning, do not apply a fix.
 * @param ***REMOVED***LintResult***REMOVED*** lintResult The lint result.
 * @returns ***REMOVED***boolean***REMOVED*** True if the lint message is an error (and thus should be
 * autofixed), false otherwise.
 */
function quietFixPredicate(lintResult) ***REMOVED***
    return lintResult.severity === 2;
***REMOVED***

/**
 * Translates the CLI options into the options expected by the CLIEngine.
 * @param ***REMOVED***Object***REMOVED*** cliOptions The CLI options to translate.
 * @returns ***REMOVED***CLIEngineOptions***REMOVED*** The options object for the CLIEngine.
 * @private
 */
function translateOptions(cliOptions) ***REMOVED***
    return ***REMOVED***
        envs: cliOptions.env,
        extensions: cliOptions.ext,
        rules: cliOptions.rule,
        plugins: cliOptions.plugin,
        globals: cliOptions.global,
        ignore: cliOptions.ignore,
        ignorePath: cliOptions.ignorePath,
        ignorePattern: cliOptions.ignorePattern,
        configFile: cliOptions.config,
        rulePaths: cliOptions.rulesdir,
        useEslintrc: cliOptions.eslintrc,
        parser: cliOptions.parser,
        parserOptions: cliOptions.parserOptions,
        cache: cliOptions.cache,
        cacheFile: cliOptions.cacheFile,
        cacheLocation: cliOptions.cacheLocation,
        fix: (cliOptions.fix || cliOptions.fixDryRun) && (cliOptions.quiet ? quietFixPredicate : true),
        fixTypes: cliOptions.fixType,
        allowInlineConfig: cliOptions.inlineConfig,
        reportUnusedDisableDirectives: cliOptions.reportUnusedDisableDirectives,
        resolvePluginsRelativeTo: cliOptions.resolvePluginsRelativeTo
    ***REMOVED***;
***REMOVED***

/**
 * Outputs the results of the linting.
 * @param ***REMOVED***CLIEngine***REMOVED*** engine The CLIEngine to use.
 * @param ***REMOVED***LintResult[]***REMOVED*** results The results to print.
 * @param ***REMOVED***string***REMOVED*** format The name of the formatter to use or the path to the formatter.
 * @param ***REMOVED***string***REMOVED*** outputFile The path for the output file.
 * @returns ***REMOVED***boolean***REMOVED*** True if the printing succeeds, false if not.
 * @private
 */
function printResults(engine, results, format, outputFile) ***REMOVED***
    let formatter;
    let rulesMeta;

    try ***REMOVED***
        formatter = engine.getFormatter(format);
    ***REMOVED*** catch (e) ***REMOVED***
        log.error(e.message);
        return false;
    ***REMOVED***

    const output = formatter(results, ***REMOVED***
        get rulesMeta() ***REMOVED***
            if (!rulesMeta) ***REMOVED***
                rulesMeta = ***REMOVED******REMOVED***;
                for (const [ruleId, rule] of engine.getRules()) ***REMOVED***
                    rulesMeta[ruleId] = rule.meta;
                ***REMOVED***
            ***REMOVED***
            return rulesMeta;
        ***REMOVED***
    ***REMOVED***);

    if (output) ***REMOVED***
        if (outputFile) ***REMOVED***
            const filePath = path.resolve(process.cwd(), outputFile);

            if (fs.existsSync(filePath) && fs.statSync(filePath).isDirectory()) ***REMOVED***
                log.error("Cannot write to output file path, it is a directory: %s", outputFile);
                return false;
            ***REMOVED***

            try ***REMOVED***
                mkdirp.sync(path.dirname(filePath));
                fs.writeFileSync(filePath, output);
            ***REMOVED*** catch (ex) ***REMOVED***
                log.error("There was a problem writing the output file:\n%s", ex);
                return false;
            ***REMOVED***
        ***REMOVED*** else ***REMOVED***
            log.info(output);
        ***REMOVED***
    ***REMOVED***

    return true;

***REMOVED***

//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

/**
 * Encapsulates all CLI behavior for eslint. Makes it easier to test as well as
 * for other Node.js programs to effectively run the CLI.
 */
const cli = ***REMOVED***

    /**
     * Executes the CLI based on an array of arguments that is passed in.
     * @param ***REMOVED***string|Array|Object***REMOVED*** args The arguments to process.
     * @param ***REMOVED***string***REMOVED*** [text] The text to lint (used for TTY).
     * @returns ***REMOVED***int***REMOVED*** The exit code for the operation.
     */
    execute(args, text) ***REMOVED***
        if (Array.isArray(args)) ***REMOVED***
            debug("CLI args: %o", args.slice(2));
        ***REMOVED***

        let currentOptions;

        try ***REMOVED***
            currentOptions = options.parse(args);
        ***REMOVED*** catch (error) ***REMOVED***
            log.error(error.message);
            return 2;
        ***REMOVED***

        const files = currentOptions._;

        const useStdin = typeof text === "string";

        if (currentOptions.version) ***REMOVED*** // version from package.json

            log.info(`v$***REMOVED***require("../package.json").version***REMOVED***`);

        ***REMOVED*** else if (currentOptions.printConfig) ***REMOVED***
            if (files.length) ***REMOVED***
                log.error("The --print-config option must be used with exactly one file name.");
                return 2;
            ***REMOVED***
            if (useStdin) ***REMOVED***
                log.error("The --print-config option is not available for piped-in code.");
                return 2;
            ***REMOVED***

            const engine = new CLIEngine(translateOptions(currentOptions));

            const fileConfig = engine.getConfigForFile(currentOptions.printConfig);

            log.info(JSON.stringify(fileConfig, null, "  "));
            return 0;
        ***REMOVED*** else if (currentOptions.help || (!files.length && !useStdin)) ***REMOVED***

            log.info(options.generateHelp());

        ***REMOVED*** else ***REMOVED***

            debug(`Running on $***REMOVED***useStdin ? "text" : "files"***REMOVED***`);

            if (currentOptions.fix && currentOptions.fixDryRun) ***REMOVED***
                log.error("The --fix option and the --fix-dry-run option cannot be used together.");
                return 2;
            ***REMOVED***

            if (useStdin && currentOptions.fix) ***REMOVED***
                log.error("The --fix option is not available for piped-in code; use --fix-dry-run instead.");
                return 2;
            ***REMOVED***

            if (currentOptions.fixType && !currentOptions.fix && !currentOptions.fixDryRun) ***REMOVED***
                log.error("The --fix-type option requires either --fix or --fix-dry-run.");
                return 2;
            ***REMOVED***

            const engine = new CLIEngine(translateOptions(currentOptions));
            const report = useStdin ? engine.executeOnText(text, currentOptions.stdinFilename, true) : engine.executeOnFiles(files);

            if (currentOptions.fix) ***REMOVED***
                debug("Fix mode enabled - applying fixes");
                CLIEngine.outputFixes(report);
            ***REMOVED***

            if (currentOptions.quiet) ***REMOVED***
                debug("Quiet mode enabled - filtering out warnings");
                report.results = CLIEngine.getErrorResults(report.results);
            ***REMOVED***

            if (printResults(engine, report.results, currentOptions.format, currentOptions.outputFile)) ***REMOVED***
                const tooManyWarnings = currentOptions.maxWarnings >= 0 && report.warningCount > currentOptions.maxWarnings;

                if (!report.errorCount && tooManyWarnings) ***REMOVED***
                    log.error("ESLint found too many warnings (maximum: %s).", currentOptions.maxWarnings);
                ***REMOVED***

                return (report.errorCount || tooManyWarnings) ? 1 : 0;
            ***REMOVED***
            return 2;


        ***REMOVED***

        return 0;
    ***REMOVED***
***REMOVED***;

module.exports = cli;
