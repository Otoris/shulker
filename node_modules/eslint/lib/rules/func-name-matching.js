/**
 * @fileoverview Rule to require function names to match the name of the variable or property to which they are assigned.
 * @author Annie Zhang, Pavel Strashkin
 */

"use strict";

//--------------------------------------------------------------------------
// Requirements
//--------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");
const esutils = require("esutils");

//--------------------------------------------------------------------------
// Helpers
//--------------------------------------------------------------------------

/**
 * Determines if a pattern is `module.exports` or `module["exports"]`
 * @param ***REMOVED***ASTNode***REMOVED*** pattern The left side of the AssignmentExpression
 * @returns ***REMOVED***boolean***REMOVED*** True if the pattern is `module.exports` or `module["exports"]`
 */
function isModuleExports(pattern) ***REMOVED***
    if (pattern.type === "MemberExpression" && pattern.object.type === "Identifier" && pattern.object.name === "module") ***REMOVED***

        // module.exports
        if (pattern.property.type === "Identifier" && pattern.property.name === "exports") ***REMOVED***
            return true;
        ***REMOVED***

        // module["exports"]
        if (pattern.property.type === "Literal" && pattern.property.value === "exports") ***REMOVED***
            return true;
        ***REMOVED***
    ***REMOVED***
    return false;
***REMOVED***

/**
 * Determines if a string name is a valid identifier
 * @param ***REMOVED***string***REMOVED*** name The string to be checked
 * @param ***REMOVED***int***REMOVED*** ecmaVersion The ECMAScript version if specified in the parserOptions config
 * @returns ***REMOVED***boolean***REMOVED*** True if the string is a valid identifier
 */
function isIdentifier(name, ecmaVersion) ***REMOVED***
    if (ecmaVersion >= 6) ***REMOVED***
        return esutils.keyword.isIdentifierES6(name);
    ***REMOVED***
    return esutils.keyword.isIdentifierES5(name);
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

const alwaysOrNever = ***REMOVED*** enum: ["always", "never"] ***REMOVED***;
const optionsObject = ***REMOVED***
    type: "object",
    properties: ***REMOVED***
        considerPropertyDescriptor: ***REMOVED***
            type: "boolean"
        ***REMOVED***,
        includeCommonJSModuleExports: ***REMOVED***
            type: "boolean"
        ***REMOVED***
    ***REMOVED***,
    additionalProperties: false
***REMOVED***;

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "require function names to match the name of the variable or property to which they are assigned",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/func-name-matching"
        ***REMOVED***,

        schema: ***REMOVED***
            anyOf: [***REMOVED***
                type: "array",
                additionalItems: false,
                items: [alwaysOrNever, optionsObject]
            ***REMOVED***, ***REMOVED***
                type: "array",
                additionalItems: false,
                items: [optionsObject]
            ***REMOVED***]
        ***REMOVED***,

        messages: ***REMOVED***
            matchProperty: "Function name `***REMOVED******REMOVED***funcName***REMOVED******REMOVED***` should match property name `***REMOVED******REMOVED***name***REMOVED******REMOVED***`.",
            matchVariable: "Function name `***REMOVED******REMOVED***funcName***REMOVED******REMOVED***` should match variable name `***REMOVED******REMOVED***name***REMOVED******REMOVED***`.",
            notMatchProperty: "Function name `***REMOVED******REMOVED***funcName***REMOVED******REMOVED***` should not match property name `***REMOVED******REMOVED***name***REMOVED******REMOVED***`.",
            notMatchVariable: "Function name `***REMOVED******REMOVED***funcName***REMOVED******REMOVED***` should not match variable name `***REMOVED******REMOVED***name***REMOVED******REMOVED***`."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const options = (typeof context.options[0] === "object" ? context.options[0] : context.options[1]) || ***REMOVED******REMOVED***;
        const nameMatches = typeof context.options[0] === "string" ? context.options[0] : "always";
        const considerPropertyDescriptor = options.considerPropertyDescriptor;
        const includeModuleExports = options.includeCommonJSModuleExports;
        const ecmaVersion = context.parserOptions && context.parserOptions.ecmaVersion ? context.parserOptions.ecmaVersion : 5;

        /**
         * Check whether node is a certain CallExpression.
         * @param ***REMOVED***string***REMOVED*** objName object name
         * @param ***REMOVED***string***REMOVED*** funcName function name
         * @param ***REMOVED***ASTNode***REMOVED*** node The node to check
         * @returns ***REMOVED***boolean***REMOVED*** `true` if node matches CallExpression
         */
        function isPropertyCall(objName, funcName, node) ***REMOVED***
            if (!node) ***REMOVED***
                return false;
            ***REMOVED***
            return node.type === "CallExpression" &&
                node.callee.type === "MemberExpression" &&
                node.callee.object.name === objName &&
                node.callee.property.name === funcName;
        ***REMOVED***

        /**
         * Compares identifiers based on the nameMatches option
         * @param ***REMOVED***string***REMOVED*** x the first identifier
         * @param ***REMOVED***string***REMOVED*** y the second identifier
         * @returns ***REMOVED***boolean***REMOVED*** whether the two identifiers should warn.
         */
        function shouldWarn(x, y) ***REMOVED***
            return (nameMatches === "always" && x !== y) || (nameMatches === "never" && x === y);
        ***REMOVED***

        /**
         * Reports
         * @param ***REMOVED***ASTNode***REMOVED*** node The node to report
         * @param ***REMOVED***string***REMOVED*** name The variable or property name
         * @param ***REMOVED***string***REMOVED*** funcName The function name
         * @param ***REMOVED***boolean***REMOVED*** isProp True if the reported node is a property assignment
         * @returns ***REMOVED***void***REMOVED***
         */
        function report(node, name, funcName, isProp) ***REMOVED***
            let messageId;

            if (nameMatches === "always" && isProp) ***REMOVED***
                messageId = "matchProperty";
            ***REMOVED*** else if (nameMatches === "always") ***REMOVED***
                messageId = "matchVariable";
            ***REMOVED*** else if (isProp) ***REMOVED***
                messageId = "notMatchProperty";
            ***REMOVED*** else ***REMOVED***
                messageId = "notMatchVariable";
            ***REMOVED***
            context.report(***REMOVED***
                node,
                messageId,
                data: ***REMOVED***
                    name,
                    funcName
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Determines whether a given node is a string literal
         * @param ***REMOVED***ASTNode***REMOVED*** node The node to check
         * @returns ***REMOVED***boolean***REMOVED*** `true` if the node is a string literal
         */
        function isStringLiteral(node) ***REMOVED***
            return node.type === "Literal" && typeof node.value === "string";
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------

        return ***REMOVED***
            VariableDeclarator(node) ***REMOVED***
                if (!node.init || node.init.type !== "FunctionExpression" || node.id.type !== "Identifier") ***REMOVED***
                    return;
                ***REMOVED***
                if (node.init.id && shouldWarn(node.id.name, node.init.id.name)) ***REMOVED***
                    report(node, node.id.name, node.init.id.name, false);
                ***REMOVED***
            ***REMOVED***,

            AssignmentExpression(node) ***REMOVED***
                if (
                    node.right.type !== "FunctionExpression" ||
                    (node.left.computed && node.left.property.type !== "Literal") ||
                    (!includeModuleExports && isModuleExports(node.left)) ||
                    (node.left.type !== "Identifier" && node.left.type !== "MemberExpression")
                ) ***REMOVED***
                    return;
                ***REMOVED***

                const isProp = node.left.type === "MemberExpression";
                const name = isProp ? astUtils.getStaticPropertyName(node.left) : node.left.name;

                if (node.right.id && isIdentifier(name) && shouldWarn(name, node.right.id.name)) ***REMOVED***
                    report(node, name, node.right.id.name, isProp);
                ***REMOVED***
            ***REMOVED***,

            Property(node) ***REMOVED***
                if (node.value.type !== "FunctionExpression" || !node.value.id || node.computed && !isStringLiteral(node.key)) ***REMOVED***
                    return;
                ***REMOVED***

                if (node.key.type === "Identifier") ***REMOVED***
                    const functionName = node.value.id.name;
                    let propertyName = node.key.name;

                    if (considerPropertyDescriptor && propertyName === "value") ***REMOVED***
                        if (isPropertyCall("Object", "defineProperty", node.parent.parent) || isPropertyCall("Reflect", "defineProperty", node.parent.parent)) ***REMOVED***
                            const property = node.parent.parent.arguments[1];

                            if (isStringLiteral(property) && shouldWarn(property.value, functionName)) ***REMOVED***
                                report(node, property.value, functionName, true);
                            ***REMOVED***
                        ***REMOVED*** else if (isPropertyCall("Object", "defineProperties", node.parent.parent.parent.parent)) ***REMOVED***
                            propertyName = node.parent.parent.key.name;
                            if (!node.parent.parent.computed && shouldWarn(propertyName, functionName)) ***REMOVED***
                                report(node, propertyName, functionName, true);
                            ***REMOVED***
                        ***REMOVED*** else if (isPropertyCall("Object", "create", node.parent.parent.parent.parent)) ***REMOVED***
                            propertyName = node.parent.parent.key.name;
                            if (!node.parent.parent.computed && shouldWarn(propertyName, functionName)) ***REMOVED***
                                report(node, propertyName, functionName, true);
                            ***REMOVED***
                        ***REMOVED*** else if (shouldWarn(propertyName, functionName)) ***REMOVED***
                            report(node, propertyName, functionName, true);
                        ***REMOVED***
                    ***REMOVED*** else if (shouldWarn(propertyName, functionName)) ***REMOVED***
                        report(node, propertyName, functionName, true);
                    ***REMOVED***
                    return;
                ***REMOVED***

                if (
                    isStringLiteral(node.key) &&
                    isIdentifier(node.key.value, ecmaVersion) &&
                    shouldWarn(node.key.value, node.value.id.name)
                ) ***REMOVED***
                    report(node, node.key.value, node.value.id.name, true);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
