/**
 * @fileoverview Rule to check multiple var declarations per line
 * @author Alberto RodrÃ­guez
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "require or disallow newlines around variable declarations",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/one-var-declaration-per-line"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                enum: ["always", "initializations"]
            ***REMOVED***
        ],

        fixable: "whitespace"
    ***REMOVED***,

    create(context) ***REMOVED***

        const ERROR_MESSAGE = "Expected variable declaration to be on a new line.";
        const always = context.options[0] === "always";

        //--------------------------------------------------------------------------
        // Helpers
        //--------------------------------------------------------------------------


        /**
         * Determine if provided keyword is a variant of for specifiers
         * @private
         * @param ***REMOVED***string***REMOVED*** keyword - keyword to test
         * @returns ***REMOVED***boolean***REMOVED*** True if `keyword` is a variant of for specifier
         */
        function isForTypeSpecifier(keyword) ***REMOVED***
            return keyword === "ForStatement" || keyword === "ForInStatement" || keyword === "ForOfStatement";
        ***REMOVED***

        /**
         * Checks newlines around variable declarations.
         * @private
         * @param ***REMOVED***ASTNode***REMOVED*** node - `VariableDeclaration` node to test
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkForNewLine(node) ***REMOVED***
            if (isForTypeSpecifier(node.parent.type)) ***REMOVED***
                return;
            ***REMOVED***

            const declarations = node.declarations;
            let prev;

            declarations.forEach(current => ***REMOVED***
                if (prev && prev.loc.end.line === current.loc.start.line) ***REMOVED***
                    if (always || prev.init || current.init) ***REMOVED***
                        context.report(***REMOVED***
                            node,
                            message: ERROR_MESSAGE,
                            loc: current.loc.start,
                            fix: fixer => fixer.insertTextBefore(current, "\n")
                        ***REMOVED***);
                    ***REMOVED***
                ***REMOVED***
                prev = current;
            ***REMOVED***);
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------

        return ***REMOVED***
            VariableDeclaration: checkForNewLine
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
