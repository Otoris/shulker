/**
 * @fileoverview Rule to disallow a negated condition
 * @author Alberto Rodr√≠guez
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow negated conditions",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-negated-condition"
        ***REMOVED***,

        schema: []
    ***REMOVED***,

    create(context) ***REMOVED***

        /**
         * Determines if a given node is an if-else without a condition on the else
         * @param ***REMOVED***ASTNode***REMOVED*** node The node to check.
         * @returns ***REMOVED***boolean***REMOVED*** True if the node has an else without an if.
         * @private
         */
        function hasElseWithoutCondition(node) ***REMOVED***
            return node.alternate && node.alternate.type !== "IfStatement";
        ***REMOVED***

        /**
         * Determines if a given node is a negated unary expression
         * @param ***REMOVED***Object***REMOVED*** test The test object to check.
         * @returns ***REMOVED***boolean***REMOVED*** True if the node is a negated unary expression.
         * @private
         */
        function isNegatedUnaryExpression(test) ***REMOVED***
            return test.type === "UnaryExpression" && test.operator === "!";
        ***REMOVED***

        /**
         * Determines if a given node is a negated binary expression
         * @param ***REMOVED***Test***REMOVED*** test The test to check.
         * @returns ***REMOVED***boolean***REMOVED*** True if the node is a negated binary expression.
         * @private
         */
        function isNegatedBinaryExpression(test) ***REMOVED***
            return test.type === "BinaryExpression" &&
                (test.operator === "!=" || test.operator === "!==");
        ***REMOVED***

        /**
         * Determines if a given node has a negated if expression
         * @param ***REMOVED***ASTNode***REMOVED*** node The node to check.
         * @returns ***REMOVED***boolean***REMOVED*** True if the node has a negated if expression.
         * @private
         */
        function isNegatedIf(node) ***REMOVED***
            return isNegatedUnaryExpression(node.test) || isNegatedBinaryExpression(node.test);
        ***REMOVED***

        return ***REMOVED***
            IfStatement(node) ***REMOVED***
                if (!hasElseWithoutCondition(node)) ***REMOVED***
                    return;
                ***REMOVED***

                if (isNegatedIf(node)) ***REMOVED***
                    context.report(***REMOVED*** node, message: "Unexpected negated condition." ***REMOVED***);
                ***REMOVED***
            ***REMOVED***,
            ConditionalExpression(node) ***REMOVED***
                if (isNegatedIf(node)) ***REMOVED***
                    context.report(***REMOVED*** node, message: "Unexpected negated condition." ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
