/**
 * @fileoverview Prefer destructuring from arrays and objects
 * @author Alex LaFroscia
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "require destructuring from arrays and/or objects",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/prefer-destructuring"
        ***REMOVED***,

        fixable: "code",

        schema: [
            ***REMOVED***

                /*
                 * old support ***REMOVED***array: Boolean, object: Boolean***REMOVED***
                 * new support ***REMOVED***VariableDeclarator: ***REMOVED******REMOVED***, AssignmentExpression: ***REMOVED******REMOVED******REMOVED***
                 */
                oneOf: [
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            VariableDeclarator: ***REMOVED***
                                type: "object",
                                properties: ***REMOVED***
                                    array: ***REMOVED***
                                        type: "boolean"
                                    ***REMOVED***,
                                    object: ***REMOVED***
                                        type: "boolean"
                                    ***REMOVED***
                                ***REMOVED***,
                                additionalProperties: false
                            ***REMOVED***,
                            AssignmentExpression: ***REMOVED***
                                type: "object",
                                properties: ***REMOVED***
                                    array: ***REMOVED***
                                        type: "boolean"
                                    ***REMOVED***,
                                    object: ***REMOVED***
                                        type: "boolean"
                                    ***REMOVED***
                                ***REMOVED***,
                                additionalProperties: false
                            ***REMOVED***
                        ***REMOVED***,
                        additionalProperties: false
                    ***REMOVED***,
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            array: ***REMOVED***
                                type: "boolean"
                            ***REMOVED***,
                            object: ***REMOVED***
                                type: "boolean"
                            ***REMOVED***
                        ***REMOVED***,
                        additionalProperties: false
                    ***REMOVED***
                ]
            ***REMOVED***,
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    enforceForRenamedProperties: ***REMOVED***
                        type: "boolean"
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ]
    ***REMOVED***,
    create(context) ***REMOVED***

        const enabledTypes = context.options[0];
        const enforceForRenamedProperties = context.options[1] && context.options[1].enforceForRenamedProperties;
        let normalizedOptions = ***REMOVED***
            VariableDeclarator: ***REMOVED*** array: true, object: true ***REMOVED***,
            AssignmentExpression: ***REMOVED*** array: true, object: true ***REMOVED***
        ***REMOVED***;

        if (enabledTypes) ***REMOVED***
            normalizedOptions = typeof enabledTypes.array !== "undefined" || typeof enabledTypes.object !== "undefined"
                ? ***REMOVED*** VariableDeclarator: enabledTypes, AssignmentExpression: enabledTypes ***REMOVED***
                : enabledTypes;
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Helpers
        //--------------------------------------------------------------------------

        /**
         * @param ***REMOVED***string***REMOVED*** nodeType "AssignmentExpression" or "VariableDeclarator"
         * @param ***REMOVED***string***REMOVED*** destructuringType "array" or "object"
         * @returns ***REMOVED***boolean***REMOVED*** `true` if the destructuring type should be checked for the given node
         */
        function shouldCheck(nodeType, destructuringType) ***REMOVED***
            return normalizedOptions &&
                normalizedOptions[nodeType] &&
                normalizedOptions[nodeType][destructuringType];
        ***REMOVED***

        /**
         * Determines if the given node is accessing an array index
         *
         * This is used to differentiate array index access from object property
         * access.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node the node to evaluate
         * @returns ***REMOVED***boolean***REMOVED*** whether or not the node is an integer
         */
        function isArrayIndexAccess(node) ***REMOVED***
            return Number.isInteger(node.property.value);
        ***REMOVED***

        /**
         * Report that the given node should use destructuring
         *
         * @param ***REMOVED***ASTNode***REMOVED*** reportNode the node to report
         * @param ***REMOVED***string***REMOVED*** type the type of destructuring that should have been done
         * @param ***REMOVED***Function|null***REMOVED*** fix the fix function or null to pass to context.report
         * @returns ***REMOVED***void***REMOVED***
         */
        function report(reportNode, type, fix) ***REMOVED***
            context.report(***REMOVED***
                node: reportNode,
                message: "Use ***REMOVED******REMOVED***type***REMOVED******REMOVED*** destructuring.",
                data: ***REMOVED*** type ***REMOVED***,
                fix
            ***REMOVED***);
        ***REMOVED***

        /**
         * Determines if a node should be fixed into object destructuring
         *
         * The fixer only fixes the simplest case of object destructuring,
         * like: `let x = a.x`;
         *
         * Assignment expression is not fixed.
         * Array destructuring is not fixed.
         * Renamed property is not fixed.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node the the node to evaluate
         * @returns ***REMOVED***boolean***REMOVED*** whether or not the node should be fixed
         */
        function shouldFix(node) ***REMOVED***
            return node.type === "VariableDeclarator" &&
                node.id.type === "Identifier" &&
                node.init.type === "MemberExpression" &&
                node.id.name === node.init.property.name;
        ***REMOVED***

        /**
         * Fix a node into object destructuring.
         * This function only handles the simplest case of object destructuring,
         * see ***REMOVED***@link shouldFix***REMOVED***.
         *
         * @param ***REMOVED***SourceCodeFixer***REMOVED*** fixer the fixer object
         * @param ***REMOVED***ASTNode***REMOVED*** node the node to be fixed.
         * @returns ***REMOVED***Object***REMOVED*** a fix for the node
         */
        function fixIntoObjectDestructuring(fixer, node) ***REMOVED***
            const rightNode = node.init;
            const sourceCode = context.getSourceCode();

            return fixer.replaceText(
                node,
                `***REMOVED***$***REMOVED***rightNode.property.name***REMOVED******REMOVED*** = $***REMOVED***sourceCode.getText(rightNode.object)***REMOVED***`
            );
        ***REMOVED***

        /**
         * Check that the `prefer-destructuring` rules are followed based on the
         * given left- and right-hand side of the assignment.
         *
         * Pulled out into a separate method so that VariableDeclarators and
         * AssignmentExpressions can share the same verification logic.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** leftNode the left-hand side of the assignment
         * @param ***REMOVED***ASTNode***REMOVED*** rightNode the right-hand side of the assignment
         * @param ***REMOVED***ASTNode***REMOVED*** reportNode the node to report the error on
         * @returns ***REMOVED***void***REMOVED***
         */
        function performCheck(leftNode, rightNode, reportNode) ***REMOVED***
            if (rightNode.type !== "MemberExpression" || rightNode.object.type === "Super") ***REMOVED***
                return;
            ***REMOVED***

            if (isArrayIndexAccess(rightNode)) ***REMOVED***
                if (shouldCheck(reportNode.type, "array")) ***REMOVED***
                    report(reportNode, "array", null);
                ***REMOVED***
                return;
            ***REMOVED***

            const fix = shouldFix(reportNode)
                ? fixer => fixIntoObjectDestructuring(fixer, reportNode)
                : null;

            if (shouldCheck(reportNode.type, "object") && enforceForRenamedProperties) ***REMOVED***
                report(reportNode, "object", fix);
                return;
            ***REMOVED***

            if (shouldCheck(reportNode.type, "object")) ***REMOVED***
                const property = rightNode.property;

                if (
                    (property.type === "Literal" && leftNode.name === property.value) ||
                    (property.type === "Identifier" && leftNode.name === property.name && !rightNode.computed)
                ) ***REMOVED***
                    report(reportNode, "object", fix);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        /**
         * Check if a given variable declarator is coming from an property access
         * that should be using destructuring instead
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node the variable declarator to check
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkVariableDeclarator(node) ***REMOVED***

            // Skip if variable is declared without assignment
            if (!node.init) ***REMOVED***
                return;
            ***REMOVED***

            // We only care about member expressions past this point
            if (node.init.type !== "MemberExpression") ***REMOVED***
                return;
            ***REMOVED***

            performCheck(node.id, node.init, node);
        ***REMOVED***

        /**
         * Run the `prefer-destructuring` check on an AssignmentExpression
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node the AssignmentExpression node
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkAssigmentExpression(node) ***REMOVED***
            if (node.operator === "=") ***REMOVED***
                performCheck(node.left, node.right, node);
            ***REMOVED***
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------

        return ***REMOVED***
            VariableDeclarator: checkVariableDeclarator,
            AssignmentExpression: checkAssigmentExpression
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
