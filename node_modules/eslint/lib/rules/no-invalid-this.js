/**
 * @fileoverview A rule to disallow `this` keywords outside of classes or class-like objects.
 * @author Toru Nagashima
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow `this` keywords outside of classes or class-like objects",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-invalid-this"
        ***REMOVED***,

        schema: []
    ***REMOVED***,

    create(context) ***REMOVED***
        const stack = [],
            sourceCode = context.getSourceCode();

        /**
         * Gets the current checking context.
         *
         * The return value has a flag that whether or not `this` keyword is valid.
         * The flag is initialized when got at the first time.
         *
         * @returns ***REMOVED******REMOVED***valid: boolean***REMOVED******REMOVED***
         *   an object which has a flag that whether or not `this` keyword is valid.
         */
        stack.getCurrent = function() ***REMOVED***
            const current = this[this.length - 1];

            if (!current.init) ***REMOVED***
                current.init = true;
                current.valid = !astUtils.isDefaultThisBinding(
                    current.node,
                    sourceCode
                );
            ***REMOVED***
            return current;
        ***REMOVED***;

        /**
         * Pushs new checking context into the stack.
         *
         * The checking context is not initialized yet.
         * Because most functions don't have `this` keyword.
         * When `this` keyword was found, the checking context is initialized.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A function node that was entered.
         * @returns ***REMOVED***void***REMOVED***
         */
        function enterFunction(node) ***REMOVED***

            // `this` can be invalid only under strict mode.
            stack.push(***REMOVED***
                init: !context.getScope().isStrict,
                node,
                valid: true
            ***REMOVED***);
        ***REMOVED***

        /**
         * Pops the current checking context from the stack.
         * @returns ***REMOVED***void***REMOVED***
         */
        function exitFunction() ***REMOVED***
            stack.pop();
        ***REMOVED***

        return ***REMOVED***

            /*
             * `this` is invalid only under strict mode.
             * Modules is always strict mode.
             */
            Program(node) ***REMOVED***
                const scope = context.getScope(),
                    features = context.parserOptions.ecmaFeatures || ***REMOVED******REMOVED***;

                stack.push(***REMOVED***
                    init: true,
                    node,
                    valid: !(
                        scope.isStrict ||
                        node.sourceType === "module" ||
                        (features.globalReturn && scope.childScopes[0].isStrict)
                    )
                ***REMOVED***);
            ***REMOVED***,

            "Program:exit"() ***REMOVED***
                stack.pop();
            ***REMOVED***,

            FunctionDeclaration: enterFunction,
            "FunctionDeclaration:exit": exitFunction,
            FunctionExpression: enterFunction,
            "FunctionExpression:exit": exitFunction,

            // Reports if `this` of the current context is invalid.
            ThisExpression(node) ***REMOVED***
                const current = stack.getCurrent();

                if (current && !current.valid) ***REMOVED***
                    context.report(***REMOVED*** node, message: "Unexpected 'this'." ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
