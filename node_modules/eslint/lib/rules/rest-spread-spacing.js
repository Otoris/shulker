/**
 * @fileoverview Enforce spacing between rest and spread operators and their expressions.
 * @author Kai Cataldo
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "layout",

        docs: ***REMOVED***
            description: "enforce spacing between rest and spread operators and their expressions",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/rest-spread-spacing"
        ***REMOVED***,

        fixable: "whitespace",

        schema: [
            ***REMOVED***
                enum: ["always", "never"]
            ***REMOVED***
        ]
    ***REMOVED***,

    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode(),
            alwaysSpace = context.options[0] === "always";

        //--------------------------------------------------------------------------
        // Helpers
        //--------------------------------------------------------------------------

        /**
         * Checks whitespace between rest/spread operators and their expressions
         * @param ***REMOVED***ASTNode***REMOVED*** node - The node to check
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkWhiteSpace(node) ***REMOVED***
            const operator = sourceCode.getFirstToken(node),
                nextToken = sourceCode.getTokenAfter(operator),
                hasWhitespace = sourceCode.isSpaceBetweenTokens(operator, nextToken);
            let type;

            switch (node.type) ***REMOVED***
                case "SpreadElement":
                    type = "spread";
                    if (node.parent.type === "ObjectExpression") ***REMOVED***
                        type += " property";
                    ***REMOVED***
                    break;
                case "RestElement":
                    type = "rest";
                    if (node.parent.type === "ObjectPattern") ***REMOVED***
                        type += " property";
                    ***REMOVED***
                    break;
                case "ExperimentalSpreadProperty":
                    type = "spread property";
                    break;
                case "ExperimentalRestProperty":
                    type = "rest property";
                    break;
                default:
                    return;
            ***REMOVED***

            if (alwaysSpace && !hasWhitespace) ***REMOVED***
                context.report(***REMOVED***
                    node,
                    loc: ***REMOVED***
                        line: operator.loc.end.line,
                        column: operator.loc.end.column
                    ***REMOVED***,
                    message: "Expected whitespace after ***REMOVED******REMOVED***type***REMOVED******REMOVED*** operator.",
                    data: ***REMOVED***
                        type
                    ***REMOVED***,
                    fix(fixer) ***REMOVED***
                        return fixer.replaceTextRange([operator.range[1], nextToken.range[0]], " ");
                    ***REMOVED***
                ***REMOVED***);
            ***REMOVED*** else if (!alwaysSpace && hasWhitespace) ***REMOVED***
                context.report(***REMOVED***
                    node,
                    loc: ***REMOVED***
                        line: operator.loc.end.line,
                        column: operator.loc.end.column
                    ***REMOVED***,
                    message: "Unexpected whitespace after ***REMOVED******REMOVED***type***REMOVED******REMOVED*** operator.",
                    data: ***REMOVED***
                        type
                    ***REMOVED***,
                    fix(fixer) ***REMOVED***
                        return fixer.removeRange([operator.range[1], nextToken.range[0]]);
                    ***REMOVED***
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------

        return ***REMOVED***
            SpreadElement: checkWhiteSpace,
            RestElement: checkWhiteSpace,
            ExperimentalSpreadProperty: checkWhiteSpace,
            ExperimentalRestProperty: checkWhiteSpace
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
