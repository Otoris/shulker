/**
 * @fileoverview Rule to flag for-in loops without if statements inside
 * @author Nicholas C. Zakas
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "require `for-in` loops to include an `if` statement",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/guard-for-in"
        ***REMOVED***,

        schema: [],
        messages: ***REMOVED***
            wrap: "The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***

        return ***REMOVED***

            ForInStatement(node) ***REMOVED***
                const body = node.body;

                // empty statement
                if (body.type === "EmptyStatement") ***REMOVED***
                    return;
                ***REMOVED***

                // if statement
                if (body.type === "IfStatement") ***REMOVED***
                    return;
                ***REMOVED***

                // empty block
                if (body.type === "BlockStatement" && body.body.length === 0) ***REMOVED***
                    return;
                ***REMOVED***

                // block with just if statement
                if (body.type === "BlockStatement" && body.body.length === 1 && body.body[0].type === "IfStatement") ***REMOVED***
                    return;
                ***REMOVED***

                // block that starts with if statement
                if (body.type === "BlockStatement" && body.body.length >= 1 && body.body[0].type === "IfStatement") ***REMOVED***
                    const i = body.body[0];

                    // ... whose consequent is a continue
                    if (i.consequent.type === "ContinueStatement") ***REMOVED***
                        return;
                    ***REMOVED***

                    // ... whose consequent is a block that contains only a continue
                    if (i.consequent.type === "BlockStatement" && i.consequent.body.length === 1 && i.consequent.body[0].type === "ContinueStatement") ***REMOVED***
                        return;
                    ***REMOVED***
                ***REMOVED***

                context.report(***REMOVED*** node, messageId: "wrap" ***REMOVED***);
            ***REMOVED***
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
