/**
 * @fileoverview Rule to check for "block scoped" variables by binding context
 * @author Matt DuVall <http://www.mattduvall.com>
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "enforce the use of variables within the scope they are defined",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/block-scoped-var"
        ***REMOVED***,

        schema: [],

        messages: ***REMOVED***
            outOfScope: "'***REMOVED******REMOVED***name***REMOVED******REMOVED***' used outside of binding context."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        let stack = [];

        /**
         * Makes a block scope.
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node of a scope.
         * @returns ***REMOVED***void***REMOVED***
         */
        function enterScope(node) ***REMOVED***
            stack.push(node.range);
        ***REMOVED***

        /**
         * Pops the last block scope.
         * @returns ***REMOVED***void***REMOVED***
         */
        function exitScope() ***REMOVED***
            stack.pop();
        ***REMOVED***

        /**
         * Reports a given reference.
         * @param ***REMOVED***eslint-scope.Reference***REMOVED*** reference - A reference to report.
         * @returns ***REMOVED***void***REMOVED***
         */
        function report(reference) ***REMOVED***
            const identifier = reference.identifier;

            context.report(***REMOVED*** node: identifier, messageId: "outOfScope", data: ***REMOVED*** name: identifier.name ***REMOVED*** ***REMOVED***);
        ***REMOVED***

        /**
         * Finds and reports references which are outside of valid scopes.
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to get variables.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkForVariables(node) ***REMOVED***
            if (node.kind !== "var") ***REMOVED***
                return;
            ***REMOVED***

            // Defines a predicate to check whether or not a given reference is outside of valid scope.
            const scopeRange = stack[stack.length - 1];

            /**
             * Check if a reference is out of scope
             * @param ***REMOVED***ASTNode***REMOVED*** reference node to examine
             * @returns ***REMOVED***boolean***REMOVED*** True is its outside the scope
             * @private
             */
            function isOutsideOfScope(reference) ***REMOVED***
                const idRange = reference.identifier.range;

                return idRange[0] < scopeRange[0] || idRange[1] > scopeRange[1];
            ***REMOVED***

            // Gets declared variables, and checks its references.
            const variables = context.getDeclaredVariables(node);

            for (let i = 0; i < variables.length; ++i) ***REMOVED***

                // Reports.
                variables[i]
                    .references
                    .filter(isOutsideOfScope)
                    .forEach(report);
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            Program(node) ***REMOVED***
                stack = [node.range];
            ***REMOVED***,

            // Manages scopes.
            BlockStatement: enterScope,
            "BlockStatement:exit": exitScope,
            ForStatement: enterScope,
            "ForStatement:exit": exitScope,
            ForInStatement: enterScope,
            "ForInStatement:exit": exitScope,
            ForOfStatement: enterScope,
            "ForOfStatement:exit": exitScope,
            SwitchStatement: enterScope,
            "SwitchStatement:exit": exitScope,
            CatchClause: enterScope,
            "CatchClause:exit": exitScope,

            // Finds and reports references which are outside of valid scope.
            VariableDeclaration: checkForVariables
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
