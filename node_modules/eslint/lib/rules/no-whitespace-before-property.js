/**
 * @fileoverview Rule to disallow whitespace before properties
 * @author Kai Cataldo
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "layout",

        docs: ***REMOVED***
            description: "disallow whitespace before properties",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-whitespace-before-property"
        ***REMOVED***,

        fixable: "whitespace",
        schema: []
    ***REMOVED***,

    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode();

        //--------------------------------------------------------------------------
        // Helpers
        //--------------------------------------------------------------------------

        /**
         * Reports whitespace before property token
         * @param ***REMOVED***ASTNode***REMOVED*** node - the node to report in the event of an error
         * @param ***REMOVED***Token***REMOVED*** leftToken - the left token
         * @param ***REMOVED***Token***REMOVED*** rightToken - the right token
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function reportError(node, leftToken, rightToken) ***REMOVED***
            const replacementText = node.computed ? "" : ".";

            context.report(***REMOVED***
                node,
                message: "Unexpected whitespace before property ***REMOVED******REMOVED***propName***REMOVED******REMOVED***.",
                data: ***REMOVED***
                    propName: sourceCode.getText(node.property)
                ***REMOVED***,
                fix(fixer) ***REMOVED***
                    if (!node.computed && astUtils.isDecimalInteger(node.object)) ***REMOVED***

                        /*
                         * If the object is a number literal, fixing it to something like 5.toString() would cause a SyntaxError.
                         * Don't fix this case.
                         */
                        return null;
                    ***REMOVED***
                    return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], replacementText);
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------

        return ***REMOVED***
            MemberExpression(node) ***REMOVED***
                let rightToken;
                let leftToken;

                if (!astUtils.isTokenOnSameLine(node.object, node.property)) ***REMOVED***
                    return;
                ***REMOVED***

                if (node.computed) ***REMOVED***
                    rightToken = sourceCode.getTokenBefore(node.property, astUtils.isOpeningBracketToken);
                    leftToken = sourceCode.getTokenBefore(rightToken);
                ***REMOVED*** else ***REMOVED***
                    rightToken = sourceCode.getFirstToken(node.property);
                    leftToken = sourceCode.getTokenBefore(rightToken, 1);
                ***REMOVED***

                if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken)) ***REMOVED***
                    reportError(node, leftToken, rightToken);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
