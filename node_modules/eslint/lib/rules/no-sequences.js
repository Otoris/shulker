/**
 * @fileoverview Rule to flag use of comma operator
 * @author Brandon Mills
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow comma operators",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-sequences"
        ***REMOVED***,

        schema: []
    ***REMOVED***,

    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode();

        /**
         * Parts of the grammar that are required to have parens.
         */
        const parenthesized = ***REMOVED***
            DoWhileStatement: "test",
            IfStatement: "test",
            SwitchStatement: "discriminant",
            WhileStatement: "test",
            WithStatement: "object",
            ArrowFunctionExpression: "body"

            /*
             * Omitting CallExpression - commas are parsed as argument separators
             * Omitting NewExpression - commas are parsed as argument separators
             * Omitting ForInStatement - parts aren't individually parenthesised
             * Omitting ForStatement - parts aren't individually parenthesised
             */
        ***REMOVED***;

        /**
         * Determines whether a node is required by the grammar to be wrapped in
         * parens, e.g. the test of an if statement.
         * @param ***REMOVED***ASTNode***REMOVED*** node - The AST node
         * @returns ***REMOVED***boolean***REMOVED*** True if parens around node belong to parent node.
         */
        function requiresExtraParens(node) ***REMOVED***
            return node.parent && parenthesized[node.parent.type] &&
                    node === node.parent[parenthesized[node.parent.type]];
        ***REMOVED***

        /**
         * Check if a node is wrapped in parens.
         * @param ***REMOVED***ASTNode***REMOVED*** node - The AST node
         * @returns ***REMOVED***boolean***REMOVED*** True if the node has a paren on each side.
         */
        function isParenthesised(node) ***REMOVED***
            return astUtils.isParenthesised(sourceCode, node);
        ***REMOVED***

        /**
         * Check if a node is wrapped in two levels of parens.
         * @param ***REMOVED***ASTNode***REMOVED*** node - The AST node
         * @returns ***REMOVED***boolean***REMOVED*** True if two parens surround the node on each side.
         */
        function isParenthesisedTwice(node) ***REMOVED***
            const previousToken = sourceCode.getTokenBefore(node, 1),
                nextToken = sourceCode.getTokenAfter(node, 1);

            return isParenthesised(node) && previousToken && nextToken &&
                astUtils.isOpeningParenToken(previousToken) && previousToken.range[1] <= node.range[0] &&
                astUtils.isClosingParenToken(nextToken) && nextToken.range[0] >= node.range[1];
        ***REMOVED***

        return ***REMOVED***
            SequenceExpression(node) ***REMOVED***

                // Always allow sequences in for statement update
                if (node.parent.type === "ForStatement" &&
                        (node === node.parent.init || node === node.parent.update)) ***REMOVED***
                    return;
                ***REMOVED***

                // Wrapping a sequence in extra parens indicates intent
                if (requiresExtraParens(node)) ***REMOVED***
                    if (isParenthesisedTwice(node)) ***REMOVED***
                        return;
                    ***REMOVED***
                ***REMOVED*** else ***REMOVED***
                    if (isParenthesised(node)) ***REMOVED***
                        return;
                    ***REMOVED***
                ***REMOVED***

                const firstCommaToken = sourceCode.getTokenAfter(node.expressions[0], astUtils.isCommaToken);

                context.report(***REMOVED*** node, loc: firstCommaToken.loc, message: "Unexpected use of comma operator." ***REMOVED***);
            ***REMOVED***
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
