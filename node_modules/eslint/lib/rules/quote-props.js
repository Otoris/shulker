/**
 * @fileoverview Rule to flag non-quoted property names in object literals.
 * @author Mathias Bynens <http://mathiasbynens.be/>
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const espree = require("espree"),
    keywords = require("./utils/keywords");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "require quotes around object literal property names",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/quote-props"
        ***REMOVED***,

        schema: ***REMOVED***
            anyOf: [
                ***REMOVED***
                    type: "array",
                    items: [
                        ***REMOVED***
                            enum: ["always", "as-needed", "consistent", "consistent-as-needed"]
                        ***REMOVED***
                    ],
                    minItems: 0,
                    maxItems: 1
                ***REMOVED***,
                ***REMOVED***
                    type: "array",
                    items: [
                        ***REMOVED***
                            enum: ["always", "as-needed", "consistent", "consistent-as-needed"]
                        ***REMOVED***,
                        ***REMOVED***
                            type: "object",
                            properties: ***REMOVED***
                                keywords: ***REMOVED***
                                    type: "boolean"
                                ***REMOVED***,
                                unnecessary: ***REMOVED***
                                    type: "boolean"
                                ***REMOVED***,
                                numbers: ***REMOVED***
                                    type: "boolean"
                                ***REMOVED***
                            ***REMOVED***,
                            additionalProperties: false
                        ***REMOVED***
                    ],
                    minItems: 0,
                    maxItems: 2
                ***REMOVED***
            ]
        ***REMOVED***,

        fixable: "code"
    ***REMOVED***,

    create(context) ***REMOVED***

        const MODE = context.options[0],
            KEYWORDS = context.options[1] && context.options[1].keywords,
            CHECK_UNNECESSARY = !context.options[1] || context.options[1].unnecessary !== false,
            NUMBERS = context.options[1] && context.options[1].numbers,

            MESSAGE_UNNECESSARY = "Unnecessarily quoted property '***REMOVED******REMOVED***property***REMOVED******REMOVED***' found.",
            MESSAGE_UNQUOTED = "Unquoted property '***REMOVED******REMOVED***property***REMOVED******REMOVED***' found.",
            MESSAGE_NUMERIC = "Unquoted number literal '***REMOVED******REMOVED***property***REMOVED******REMOVED***' used as key.",
            MESSAGE_RESERVED = "Unquoted reserved word '***REMOVED******REMOVED***property***REMOVED******REMOVED***' used as key.",
            sourceCode = context.getSourceCode();


        /**
         * Checks whether a certain string constitutes an ES3 token
         * @param   ***REMOVED***string***REMOVED*** tokenStr - The string to be checked.
         * @returns ***REMOVED***boolean***REMOVED*** `true` if it is an ES3 token.
         */
        function isKeyword(tokenStr) ***REMOVED***
            return keywords.indexOf(tokenStr) >= 0;
        ***REMOVED***

        /**
         * Checks if an espree-tokenized key has redundant quotes (i.e. whether quotes are unnecessary)
         * @param   ***REMOVED***string***REMOVED*** rawKey The raw key value from the source
         * @param   ***REMOVED***espreeTokens***REMOVED*** tokens The espree-tokenized node key
         * @param   ***REMOVED***boolean***REMOVED*** [skipNumberLiterals=false] Indicates whether number literals should be checked
         * @returns ***REMOVED***boolean***REMOVED*** Whether or not a key has redundant quotes.
         * @private
         */
        function areQuotesRedundant(rawKey, tokens, skipNumberLiterals) ***REMOVED***
            return tokens.length === 1 && tokens[0].start === 0 && tokens[0].end === rawKey.length &&
                (["Identifier", "Keyword", "Null", "Boolean"].indexOf(tokens[0].type) >= 0 ||
                (tokens[0].type === "Numeric" && !skipNumberLiterals && String(+tokens[0].value) === tokens[0].value));
        ***REMOVED***

        /**
         * Returns a string representation of a property node with quotes removed
         * @param ***REMOVED***ASTNode***REMOVED*** key Key AST Node, which may or may not be quoted
         * @returns ***REMOVED***string***REMOVED*** A replacement string for this property
         */
        function getUnquotedKey(key) ***REMOVED***
            return key.type === "Identifier" ? key.name : key.value;
        ***REMOVED***

        /**
         * Returns a string representation of a property node with quotes added
         * @param ***REMOVED***ASTNode***REMOVED*** key Key AST Node, which may or may not be quoted
         * @returns ***REMOVED***string***REMOVED*** A replacement string for this property
         */
        function getQuotedKey(key) ***REMOVED***
            if (key.type === "Literal" && typeof key.value === "string") ***REMOVED***

                // If the key is already a string literal, don't replace the quotes with double quotes.
                return sourceCode.getText(key);
            ***REMOVED***

            // Otherwise, the key is either an identifier or a number literal.
            return `"$***REMOVED***key.type === "Identifier" ? key.name : key.value***REMOVED***"`;
        ***REMOVED***

        /**
         * Ensures that a property's key is quoted only when necessary
         * @param   ***REMOVED***ASTNode***REMOVED*** node Property AST node
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkUnnecessaryQuotes(node) ***REMOVED***
            const key = node.key;

            if (node.method || node.computed || node.shorthand) ***REMOVED***
                return;
            ***REMOVED***

            if (key.type === "Literal" && typeof key.value === "string") ***REMOVED***
                let tokens;

                try ***REMOVED***
                    tokens = espree.tokenize(key.value);
                ***REMOVED*** catch (e) ***REMOVED***
                    return;
                ***REMOVED***

                if (tokens.length !== 1) ***REMOVED***
                    return;
                ***REMOVED***

                const isKeywordToken = isKeyword(tokens[0].value);

                if (isKeywordToken && KEYWORDS) ***REMOVED***
                    return;
                ***REMOVED***

                if (CHECK_UNNECESSARY && areQuotesRedundant(key.value, tokens, NUMBERS)) ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        message: MESSAGE_UNNECESSARY,
                        data: ***REMOVED*** property: key.value ***REMOVED***,
                        fix: fixer => fixer.replaceText(key, getUnquotedKey(key))
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED*** else if (KEYWORDS && key.type === "Identifier" && isKeyword(key.name)) ***REMOVED***
                context.report(***REMOVED***
                    node,
                    message: MESSAGE_RESERVED,
                    data: ***REMOVED*** property: key.name ***REMOVED***,
                    fix: fixer => fixer.replaceText(key, getQuotedKey(key))
                ***REMOVED***);
            ***REMOVED*** else if (NUMBERS && key.type === "Literal" && typeof key.value === "number") ***REMOVED***
                context.report(***REMOVED***
                    node,
                    message: MESSAGE_NUMERIC,
                    data: ***REMOVED*** property: key.value ***REMOVED***,
                    fix: fixer => fixer.replaceText(key, getQuotedKey(key))
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        /**
         * Ensures that a property's key is quoted
         * @param   ***REMOVED***ASTNode***REMOVED*** node Property AST node
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkOmittedQuotes(node) ***REMOVED***
            const key = node.key;

            if (!node.method && !node.computed && !node.shorthand && !(key.type === "Literal" && typeof key.value === "string")) ***REMOVED***
                context.report(***REMOVED***
                    node,
                    message: MESSAGE_UNQUOTED,
                    data: ***REMOVED*** property: key.name || key.value ***REMOVED***,
                    fix: fixer => fixer.replaceText(key, getQuotedKey(key))
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        /**
         * Ensures that an object's keys are consistently quoted, optionally checks for redundancy of quotes
         * @param   ***REMOVED***ASTNode***REMOVED*** node Property AST node
         * @param   ***REMOVED***boolean***REMOVED*** checkQuotesRedundancy Whether to check quotes' redundancy
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkConsistency(node, checkQuotesRedundancy) ***REMOVED***
            const quotedProps = [],
                unquotedProps = [];
            let keywordKeyName = null,
                necessaryQuotes = false;

            node.properties.forEach(property => ***REMOVED***
                const key = property.key;

                if (!key || property.method || property.computed || property.shorthand) ***REMOVED***
                    return;
                ***REMOVED***

                if (key.type === "Literal" && typeof key.value === "string") ***REMOVED***

                    quotedProps.push(property);

                    if (checkQuotesRedundancy) ***REMOVED***
                        let tokens;

                        try ***REMOVED***
                            tokens = espree.tokenize(key.value);
                        ***REMOVED*** catch (e) ***REMOVED***
                            necessaryQuotes = true;
                            return;
                        ***REMOVED***

                        necessaryQuotes = necessaryQuotes || !areQuotesRedundant(key.value, tokens) || KEYWORDS && isKeyword(tokens[0].value);
                    ***REMOVED***
                ***REMOVED*** else if (KEYWORDS && checkQuotesRedundancy && key.type === "Identifier" && isKeyword(key.name)) ***REMOVED***
                    unquotedProps.push(property);
                    necessaryQuotes = true;
                    keywordKeyName = key.name;
                ***REMOVED*** else ***REMOVED***
                    unquotedProps.push(property);
                ***REMOVED***
            ***REMOVED***);

            if (checkQuotesRedundancy && quotedProps.length && !necessaryQuotes) ***REMOVED***
                quotedProps.forEach(property => ***REMOVED***
                    context.report(***REMOVED***
                        node: property,
                        message: "Properties shouldn't be quoted as all quotes are redundant.",
                        fix: fixer => fixer.replaceText(property.key, getUnquotedKey(property.key))
                    ***REMOVED***);
                ***REMOVED***);
            ***REMOVED*** else if (unquotedProps.length && keywordKeyName) ***REMOVED***
                unquotedProps.forEach(property => ***REMOVED***
                    context.report(***REMOVED***
                        node: property,
                        message: "Properties should be quoted as '***REMOVED******REMOVED***property***REMOVED******REMOVED***' is a reserved word.",
                        data: ***REMOVED*** property: keywordKeyName ***REMOVED***,
                        fix: fixer => fixer.replaceText(property.key, getQuotedKey(property.key))
                    ***REMOVED***);
                ***REMOVED***);
            ***REMOVED*** else if (quotedProps.length && unquotedProps.length) ***REMOVED***
                unquotedProps.forEach(property => ***REMOVED***
                    context.report(***REMOVED***
                        node: property,
                        message: "Inconsistently quoted property '***REMOVED******REMOVED***key***REMOVED******REMOVED***' found.",
                        data: ***REMOVED*** key: property.key.name || property.key.value ***REMOVED***,
                        fix: fixer => fixer.replaceText(property.key, getQuotedKey(property.key))
                    ***REMOVED***);
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            Property(node) ***REMOVED***
                if (MODE === "always" || !MODE) ***REMOVED***
                    checkOmittedQuotes(node);
                ***REMOVED***
                if (MODE === "as-needed") ***REMOVED***
                    checkUnnecessaryQuotes(node);
                ***REMOVED***
            ***REMOVED***,
            ObjectExpression(node) ***REMOVED***
                if (MODE === "consistent") ***REMOVED***
                    checkConsistency(node, false);
                ***REMOVED***
                if (MODE === "consistent-as-needed") ***REMOVED***
                    checkConsistency(node, true);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
