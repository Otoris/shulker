/**
 * @fileoverview Rule to enforce spacing around colons of switch statements.
 * @author Toru Nagashima
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "layout",

        docs: ***REMOVED***
            description: "enforce spacing around colons of switch statements",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/switch-colon-spacing"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    before: ***REMOVED*** type: "boolean", default: false ***REMOVED***,
                    after: ***REMOVED*** type: "boolean", default: true ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ],
        fixable: "whitespace",
        messages: ***REMOVED***
            expectedBefore: "Expected space(s) before this colon.",
            expectedAfter: "Expected space(s) after this colon.",
            unexpectedBefore: "Unexpected space(s) before this colon.",
            unexpectedAfter: "Unexpected space(s) after this colon."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode();
        const options = context.options[0] || ***REMOVED******REMOVED***;
        const beforeSpacing = options.before === true; // false by default
        const afterSpacing = options.after !== false; // true by default

        /**
         * Get the colon token of the given SwitchCase node.
         * @param ***REMOVED***ASTNode***REMOVED*** node The SwitchCase node to get.
         * @returns ***REMOVED***Token***REMOVED*** The colon token of the node.
         */
        function getColonToken(node) ***REMOVED***
            if (node.test) ***REMOVED***
                return sourceCode.getTokenAfter(node.test, astUtils.isColonToken);
            ***REMOVED***
            return sourceCode.getFirstToken(node, 1);
        ***REMOVED***

        /**
         * Check whether the spacing between the given 2 tokens is valid or not.
         * @param ***REMOVED***Token***REMOVED*** left The left token to check.
         * @param ***REMOVED***Token***REMOVED*** right The right token to check.
         * @param ***REMOVED***boolean***REMOVED*** expected The expected spacing to check. `true` if there should be a space.
         * @returns ***REMOVED***boolean***REMOVED*** `true` if the spacing between the tokens is valid.
         */
        function isValidSpacing(left, right, expected) ***REMOVED***
            return (
                astUtils.isClosingBraceToken(right) ||
                !astUtils.isTokenOnSameLine(left, right) ||
                sourceCode.isSpaceBetweenTokens(left, right) === expected
            );
        ***REMOVED***

        /**
         * Check whether comments exist between the given 2 tokens.
         * @param ***REMOVED***Token***REMOVED*** left The left token to check.
         * @param ***REMOVED***Token***REMOVED*** right The right token to check.
         * @returns ***REMOVED***boolean***REMOVED*** `true` if comments exist between the given 2 tokens.
         */
        function commentsExistBetween(left, right) ***REMOVED***
            return sourceCode.getFirstTokenBetween(
                left,
                right,
                ***REMOVED***
                    includeComments: true,
                    filter: astUtils.isCommentToken
                ***REMOVED***
            ) !== null;
        ***REMOVED***

        /**
         * Fix the spacing between the given 2 tokens.
         * @param ***REMOVED***RuleFixer***REMOVED*** fixer The fixer to fix.
         * @param ***REMOVED***Token***REMOVED*** left The left token of fix range.
         * @param ***REMOVED***Token***REMOVED*** right The right token of fix range.
         * @param ***REMOVED***boolean***REMOVED*** spacing The spacing style. `true` if there should be a space.
         * @returns ***REMOVED***Fix|null***REMOVED*** The fix object.
         */
        function fix(fixer, left, right, spacing) ***REMOVED***
            if (commentsExistBetween(left, right)) ***REMOVED***
                return null;
            ***REMOVED***
            if (spacing) ***REMOVED***
                return fixer.insertTextAfter(left, " ");
            ***REMOVED***
            return fixer.removeRange([left.range[1], right.range[0]]);
        ***REMOVED***

        return ***REMOVED***
            SwitchCase(node) ***REMOVED***
                const colonToken = getColonToken(node);
                const beforeToken = sourceCode.getTokenBefore(colonToken);
                const afterToken = sourceCode.getTokenAfter(colonToken);

                if (!isValidSpacing(beforeToken, colonToken, beforeSpacing)) ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        loc: colonToken.loc,
                        messageId: beforeSpacing ? "expectedBefore" : "unexpectedBefore",
                        fix: fixer => fix(fixer, beforeToken, colonToken, beforeSpacing)
                    ***REMOVED***);
                ***REMOVED***
                if (!isValidSpacing(colonToken, afterToken, afterSpacing)) ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        loc: colonToken.loc,
                        messageId: afterSpacing ? "expectedAfter" : "unexpectedAfter",
                        fix: fixer => fix(fixer, colonToken, afterToken, afterSpacing)
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
