/**
 * @fileoverview Rule to flag use of an lexical declarations inside a case clause
 * @author Erik Arvidsson
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow lexical declarations in case clauses",
            category: "Best Practices",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-case-declarations"
        ***REMOVED***,

        schema: [],

        messages: ***REMOVED***
            unexpected: "Unexpected lexical declaration in case block."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***

        /**
         * Checks whether or not a node is a lexical declaration.
         * @param ***REMOVED***ASTNode***REMOVED*** node A direct child statement of a switch case.
         * @returns ***REMOVED***boolean***REMOVED*** Whether or not the node is a lexical declaration.
         */
        function isLexicalDeclaration(node) ***REMOVED***
            switch (node.type) ***REMOVED***
                case "FunctionDeclaration":
                case "ClassDeclaration":
                    return true;
                case "VariableDeclaration":
                    return node.kind !== "var";
                default:
                    return false;
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            SwitchCase(node) ***REMOVED***
                for (let i = 0; i < node.consequent.length; i++) ***REMOVED***
                    const statement = node.consequent[i];

                    if (isLexicalDeclaration(statement)) ***REMOVED***
                        context.report(***REMOVED***
                            node: statement,
                            messageId: "unexpected"
                        ***REMOVED***);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
