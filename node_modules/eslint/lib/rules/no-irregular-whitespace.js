/**
 * @fileoverview Rule to disalow whitespace that is not a tab or space, whitespace inside strings and comments are allowed
 * @author Jonathan Kingston
 * @author Christophe Porteneuve
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const ALL_IRREGULARS = /[\f\v\u0085\ufeff\u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u202f\u205f\u3000\u2028\u2029]/u;
const IRREGULAR_WHITESPACE = /[\f\v\u0085\ufeff\u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u202f\u205f\u3000]+/mgu;
const IRREGULAR_LINE_TERMINATORS = /[\u2028\u2029]/mgu;
const LINE_BREAK = astUtils.createGlobalLinebreakMatcher();

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "problem",

        docs: ***REMOVED***
            description: "disallow irregular whitespace",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-irregular-whitespace"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    skipComments: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***,
                    skipStrings: ***REMOVED***
                        type: "boolean",
                        default: true
                    ***REMOVED***,
                    skipTemplates: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***,
                    skipRegExps: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ]
    ***REMOVED***,

    create(context) ***REMOVED***

        // Module store of errors that we have found
        let errors = [];

        // Lookup the `skipComments` option, which defaults to `false`.
        const options = context.options[0] || ***REMOVED******REMOVED***;
        const skipComments = !!options.skipComments;
        const skipStrings = options.skipStrings !== false;
        const skipRegExps = !!options.skipRegExps;
        const skipTemplates = !!options.skipTemplates;

        const sourceCode = context.getSourceCode();
        const commentNodes = sourceCode.getAllComments();

        /**
         * Removes errors that occur inside a string node
         * @param ***REMOVED***ASTNode***REMOVED*** node to check for matching errors.
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function removeWhitespaceError(node) ***REMOVED***
            const locStart = node.loc.start;
            const locEnd = node.loc.end;

            errors = errors.filter((***REMOVED*** loc: errorLoc ***REMOVED***) => ***REMOVED***
                if (errorLoc.line >= locStart.line && errorLoc.line <= locEnd.line) ***REMOVED***
                    if (errorLoc.column >= locStart.column && (errorLoc.column <= locEnd.column || errorLoc.line < locEnd.line)) ***REMOVED***
                        return false;
                    ***REMOVED***
                ***REMOVED***
                return true;
            ***REMOVED***);
        ***REMOVED***

        /**
         * Checks identifier or literal nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors
         * @param ***REMOVED***ASTNode***REMOVED*** node to check for matching errors.
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function removeInvalidNodeErrorsInIdentifierOrLiteral(node) ***REMOVED***
            const shouldCheckStrings = skipStrings && (typeof node.value === "string");
            const shouldCheckRegExps = skipRegExps && Boolean(node.regex);

            if (shouldCheckStrings || shouldCheckRegExps) ***REMOVED***

                // If we have irregular characters remove them from the errors list
                if (ALL_IRREGULARS.test(node.raw)) ***REMOVED***
                    removeWhitespaceError(node);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        /**
         * Checks template string literal nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors
         * @param ***REMOVED***ASTNode***REMOVED*** node to check for matching errors.
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function removeInvalidNodeErrorsInTemplateLiteral(node) ***REMOVED***
            if (typeof node.value.raw === "string") ***REMOVED***
                if (ALL_IRREGULARS.test(node.value.raw)) ***REMOVED***
                    removeWhitespaceError(node);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        /**
         * Checks comment nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors
         * @param ***REMOVED***ASTNode***REMOVED*** node to check for matching errors.
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function removeInvalidNodeErrorsInComment(node) ***REMOVED***
            if (ALL_IRREGULARS.test(node.value)) ***REMOVED***
                removeWhitespaceError(node);
            ***REMOVED***
        ***REMOVED***

        /**
         * Checks the program source for irregular whitespace
         * @param ***REMOVED***ASTNode***REMOVED*** node The program node
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function checkForIrregularWhitespace(node) ***REMOVED***
            const sourceLines = sourceCode.lines;

            sourceLines.forEach((sourceLine, lineIndex) => ***REMOVED***
                const lineNumber = lineIndex + 1;
                let match;

                while ((match = IRREGULAR_WHITESPACE.exec(sourceLine)) !== null) ***REMOVED***
                    const location = ***REMOVED***
                        line: lineNumber,
                        column: match.index
                    ***REMOVED***;

                    errors.push(***REMOVED*** node, message: "Irregular whitespace not allowed.", loc: location ***REMOVED***);
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Checks the program source for irregular line terminators
         * @param ***REMOVED***ASTNode***REMOVED*** node The program node
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function checkForIrregularLineTerminators(node) ***REMOVED***
            const source = sourceCode.getText(),
                sourceLines = sourceCode.lines,
                linebreaks = source.match(LINE_BREAK);
            let lastLineIndex = -1,
                match;

            while ((match = IRREGULAR_LINE_TERMINATORS.exec(source)) !== null) ***REMOVED***
                const lineIndex = linebreaks.indexOf(match[0], lastLineIndex + 1) || 0;
                const location = ***REMOVED***
                    line: lineIndex + 1,
                    column: sourceLines[lineIndex].length
                ***REMOVED***;

                errors.push(***REMOVED*** node, message: "Irregular whitespace not allowed.", loc: location ***REMOVED***);
                lastLineIndex = lineIndex;
            ***REMOVED***
        ***REMOVED***

        /**
         * A no-op function to act as placeholder for comment accumulation when the `skipComments` option is `false`.
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function noop() ***REMOVED******REMOVED***

        const nodes = ***REMOVED******REMOVED***;

        if (ALL_IRREGULARS.test(sourceCode.getText())) ***REMOVED***
            nodes.Program = function(node) ***REMOVED***

                /*
                 * As we can easily fire warnings for all white space issues with
                 * all the source its simpler to fire them here.
                 * This means we can check all the application code without having
                 * to worry about issues caused in the parser tokens.
                 * When writing this code also evaluating per node was missing out
                 * connecting tokens in some cases.
                 * We can later filter the errors when they are found to be not an
                 * issue in nodes we don't care about.
                 */
                checkForIrregularWhitespace(node);
                checkForIrregularLineTerminators(node);
            ***REMOVED***;

            nodes.Identifier = removeInvalidNodeErrorsInIdentifierOrLiteral;
            nodes.Literal = removeInvalidNodeErrorsInIdentifierOrLiteral;
            nodes.TemplateElement = skipTemplates ? removeInvalidNodeErrorsInTemplateLiteral : noop;
            nodes["Program:exit"] = function() ***REMOVED***
                if (skipComments) ***REMOVED***

                    // First strip errors occurring in comment nodes.
                    commentNodes.forEach(removeInvalidNodeErrorsInComment);
                ***REMOVED***

                // If we have any errors remaining report on them
                errors.forEach(error => context.report(error));
            ***REMOVED***;
        ***REMOVED*** else ***REMOVED***
            nodes.Program = noop;
        ***REMOVED***

        return nodes;
    ***REMOVED***
***REMOVED***;
