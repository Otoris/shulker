/**
 * @fileoverview Rule to flag no-unneeded-ternary
 * @author Gyandeep Singh
 */

"use strict";

const astUtils = require("./utils/ast-utils");

// Operators that always result in a boolean value
const BOOLEAN_OPERATORS = new Set(["==", "===", "!=", "!==", ">", ">=", "<", "<=", "in", "instanceof"]);
const OPERATOR_INVERSES = ***REMOVED***
    "==": "!=",
    "!=": "==",
    "===": "!==",
    "!==": "==="

    // Operators like < and >= are not true inverses, since both will return false with NaN.
***REMOVED***;
const OR_PRECEDENCE = astUtils.getPrecedence(***REMOVED*** type: "LogicalExpression", operator: "||" ***REMOVED***);

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow ternary operators when simpler alternatives exist",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-unneeded-ternary"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    defaultAssignment: ***REMOVED***
                        type: "boolean",
                        default: true
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ],

        fixable: "code"
    ***REMOVED***,

    create(context) ***REMOVED***
        const options = context.options[0] || ***REMOVED******REMOVED***;
        const defaultAssignment = options.defaultAssignment !== false;
        const sourceCode = context.getSourceCode();

        /**
         * Test if the node is a boolean literal
         * @param ***REMOVED***ASTNode***REMOVED*** node - The node to report.
         * @returns ***REMOVED***boolean***REMOVED*** True if the its a boolean literal
         * @private
         */
        function isBooleanLiteral(node) ***REMOVED***
            return node.type === "Literal" && typeof node.value === "boolean";
        ***REMOVED***

        /**
         * Creates an expression that represents the boolean inverse of the expression represented by the original node
         * @param ***REMOVED***ASTNode***REMOVED*** node A node representing an expression
         * @returns ***REMOVED***string***REMOVED*** A string representing an inverted expression
         */
        function invertExpression(node) ***REMOVED***
            if (node.type === "BinaryExpression" && Object.prototype.hasOwnProperty.call(OPERATOR_INVERSES, node.operator)) ***REMOVED***
                const operatorToken = sourceCode.getFirstTokenBetween(
                    node.left,
                    node.right,
                    token => token.value === node.operator
                );
                const text = sourceCode.getText();

                return text.slice(node.range[0],
                    operatorToken.range[0]) + OPERATOR_INVERSES[node.operator] + text.slice(operatorToken.range[1], node.range[1]);
            ***REMOVED***

            if (astUtils.getPrecedence(node) < astUtils.getPrecedence(***REMOVED*** type: "UnaryExpression" ***REMOVED***)) ***REMOVED***
                return `!($***REMOVED***astUtils.getParenthesisedText(sourceCode, node)***REMOVED***)`;
            ***REMOVED***
            return `!$***REMOVED***astUtils.getParenthesisedText(sourceCode, node)***REMOVED***`;
        ***REMOVED***

        /**
         * Tests if a given node always evaluates to a boolean value
         * @param ***REMOVED***ASTNode***REMOVED*** node - An expression node
         * @returns ***REMOVED***boolean***REMOVED*** True if it is determined that the node will always evaluate to a boolean value
         */
        function isBooleanExpression(node) ***REMOVED***
            return node.type === "BinaryExpression" && BOOLEAN_OPERATORS.has(node.operator) ||
                node.type === "UnaryExpression" && node.operator === "!";
        ***REMOVED***

        /**
         * Test if the node matches the pattern id ? id : expression
         * @param ***REMOVED***ASTNode***REMOVED*** node - The ConditionalExpression to check.
         * @returns ***REMOVED***boolean***REMOVED*** True if the pattern is matched, and false otherwise
         * @private
         */
        function matchesDefaultAssignment(node) ***REMOVED***
            return node.test.type === "Identifier" &&
                   node.consequent.type === "Identifier" &&
                   node.test.name === node.consequent.name;
        ***REMOVED***

        return ***REMOVED***

            ConditionalExpression(node) ***REMOVED***
                if (isBooleanLiteral(node.alternate) && isBooleanLiteral(node.consequent)) ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        loc: node.consequent.loc.start,
                        message: "Unnecessary use of boolean literals in conditional expression.",
                        fix(fixer) ***REMOVED***
                            if (node.consequent.value === node.alternate.value) ***REMOVED***

                                // Replace `foo ? true : true` with just `true`, but don't replace `foo() ? true : true`
                                return node.test.type === "Identifier" ? fixer.replaceText(node, node.consequent.value.toString()) : null;
                            ***REMOVED***
                            if (node.alternate.value) ***REMOVED***

                                // Replace `foo() ? false : true` with `!(foo())`
                                return fixer.replaceText(node, invertExpression(node.test));
                            ***REMOVED***

                            // Replace `foo ? true : false` with `foo` if `foo` is guaranteed to be a boolean, or `!!foo` otherwise.

                            return fixer.replaceText(node, isBooleanExpression(node.test) ? astUtils.getParenthesisedText(sourceCode, node.test) : `!$***REMOVED***invertExpression(node.test)***REMOVED***`);
                        ***REMOVED***
                    ***REMOVED***);
                ***REMOVED*** else if (!defaultAssignment && matchesDefaultAssignment(node)) ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        loc: node.consequent.loc.start,
                        message: "Unnecessary use of conditional expression for default assignment.",
                        fix: fixer => ***REMOVED***
                            const shouldParenthesizeAlternate = (
                                astUtils.getPrecedence(node.alternate) < OR_PRECEDENCE &&
                                !astUtils.isParenthesised(sourceCode, node.alternate)
                            );
                            const alternateText = shouldParenthesizeAlternate
                                ? `($***REMOVED***sourceCode.getText(node.alternate)***REMOVED***)`
                                : astUtils.getParenthesisedText(sourceCode, node.alternate);
                            const testText = astUtils.getParenthesisedText(sourceCode, node.test);

                            return fixer.replaceText(node, `$***REMOVED***testText***REMOVED*** || $***REMOVED***alternateText***REMOVED***`);
                        ***REMOVED***
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
