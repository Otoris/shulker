/**
 * @fileoverview Rule to disallow use of Object.prototype builtins on objects
 * @author Andrew Levine
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "problem",

        docs: ***REMOVED***
            description: "disallow calling some `Object.prototype` methods directly on objects",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-prototype-builtins"
        ***REMOVED***,

        schema: []
    ***REMOVED***,

    create(context) ***REMOVED***
        const DISALLOWED_PROPS = [
            "hasOwnProperty",
            "isPrototypeOf",
            "propertyIsEnumerable"
        ];

        /**
         * Reports if a disallowed property is used in a CallExpression
         * @param ***REMOVED***ASTNode***REMOVED*** node The CallExpression node.
         * @returns ***REMOVED***void***REMOVED***
         */
        function disallowBuiltIns(node) ***REMOVED***
            if (node.callee.type !== "MemberExpression" || node.callee.computed) ***REMOVED***
                return;
            ***REMOVED***
            const propName = node.callee.property.name;

            if (DISALLOWED_PROPS.indexOf(propName) > -1) ***REMOVED***
                context.report(***REMOVED***
                    message: "Do not access Object.prototype method '***REMOVED******REMOVED***prop***REMOVED******REMOVED***' from target object.",
                    loc: node.callee.property.loc.start,
                    data: ***REMOVED*** prop: propName ***REMOVED***,
                    node
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            CallExpression: disallowBuiltIns
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
