/**
 * @fileoverview A rule to disallow unnecessary `.call()` and `.apply()`.
 * @author Toru Nagashima
 */

"use strict";

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Checks whether or not a node is a `.call()`/`.apply()`.
 * @param ***REMOVED***ASTNode***REMOVED*** node - A CallExpression node to check.
 * @returns ***REMOVED***boolean***REMOVED*** Whether or not the node is a `.call()`/`.apply()`.
 */
function isCallOrNonVariadicApply(node) ***REMOVED***
    return (
        node.callee.type === "MemberExpression" &&
        node.callee.property.type === "Identifier" &&
        node.callee.computed === false &&
        (
            (node.callee.property.name === "call" && node.arguments.length >= 1) ||
            (node.callee.property.name === "apply" && node.arguments.length === 2 && node.arguments[1].type === "ArrayExpression")
        )
    );
***REMOVED***


/**
 * Checks whether or not `thisArg` is not changed by `.call()`/`.apply()`.
 * @param ***REMOVED***ASTNode|null***REMOVED*** expectedThis - The node that is the owner of the applied function.
 * @param ***REMOVED***ASTNode***REMOVED*** thisArg - The node that is given to the first argument of the `.call()`/`.apply()`.
 * @param ***REMOVED***SourceCode***REMOVED*** sourceCode - The ESLint source code object.
 * @returns ***REMOVED***boolean***REMOVED*** Whether or not `thisArg` is not changed by `.call()`/`.apply()`.
 */
function isValidThisArg(expectedThis, thisArg, sourceCode) ***REMOVED***
    if (!expectedThis) ***REMOVED***
        return astUtils.isNullOrUndefined(thisArg);
    ***REMOVED***
    return astUtils.equalTokens(expectedThis, thisArg, sourceCode);
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow unnecessary calls to `.call()` and `.apply()`",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-useless-call"
        ***REMOVED***,

        schema: []
    ***REMOVED***,

    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode();

        return ***REMOVED***
            CallExpression(node) ***REMOVED***
                if (!isCallOrNonVariadicApply(node)) ***REMOVED***
                    return;
                ***REMOVED***

                const applied = node.callee.object;
                const expectedThis = (applied.type === "MemberExpression") ? applied.object : null;
                const thisArg = node.arguments[0];

                if (isValidThisArg(expectedThis, thisArg, sourceCode)) ***REMOVED***
                    context.report(***REMOVED*** node, message: "unnecessary '.***REMOVED******REMOVED***name***REMOVED******REMOVED***()'.", data: ***REMOVED*** name: node.callee.property.name ***REMOVED*** ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
