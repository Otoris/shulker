/**
 * @fileoverview Rule to flag when initializing to undefined
 * @author Ilya Volodin
 */

"use strict";

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow initializing variables to `undefined`",
            category: "Variables",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-undef-init"
        ***REMOVED***,

        schema: [],
        fixable: "code"
    ***REMOVED***,

    create(context) ***REMOVED***

        const sourceCode = context.getSourceCode();

        return ***REMOVED***

            VariableDeclarator(node) ***REMOVED***
                const name = sourceCode.getText(node.id),
                    init = node.init && node.init.name,
                    scope = context.getScope(),
                    undefinedVar = astUtils.getVariableByName(scope, "undefined"),
                    shadowed = undefinedVar && undefinedVar.defs.length > 0;

                if (init === "undefined" && node.parent.kind !== "const" && !shadowed) ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        message: "It's not necessary to initialize '***REMOVED******REMOVED***name***REMOVED******REMOVED***' to undefined.",
                        data: ***REMOVED*** name ***REMOVED***,
                        fix(fixer) ***REMOVED***
                            if (node.parent.kind === "var") ***REMOVED***
                                return null;
                            ***REMOVED***

                            if (node.id.type === "ArrayPattern" || node.id.type === "ObjectPattern") ***REMOVED***

                                // Don't fix destructuring assignment to `undefined`.
                                return null;
                            ***REMOVED***
                            return fixer.removeRange([node.id.range[1], node.range[1]]);
                        ***REMOVED***
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
