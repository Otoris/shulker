/**
 * @fileoverview Validates newlines before and after dots
 * @author Greg Cochard
 */

"use strict";

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "layout",

        docs: ***REMOVED***
            description: "enforce consistent newlines before and after dots",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/dot-location"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                enum: ["object", "property"]
            ***REMOVED***
        ],

        fixable: "code",

        messages: ***REMOVED***
            expectedDotAfterObject: "Expected dot to be on same line as object.",
            expectedDotBeforeProperty: "Expected dot to be on same line as property."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***

        const config = context.options[0];

        // default to onObject if no preference is passed
        const onObject = config === "object" || !config;

        const sourceCode = context.getSourceCode();

        /**
         * Reports if the dot between object and property is on the correct loccation.
         * @param ***REMOVED***ASTNode***REMOVED*** obj The object owning the property.
         * @param ***REMOVED***ASTNode***REMOVED*** prop The property of the object.
         * @param ***REMOVED***ASTNode***REMOVED*** node The corresponding node of the token.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkDotLocation(obj, prop, node) ***REMOVED***
            const dot = sourceCode.getTokenBefore(prop);

            // `obj` expression can be parenthesized, but those paren tokens are not a part of the `obj` node.
            const tokenBeforeDot = sourceCode.getTokenBefore(dot);

            const textBeforeDot = sourceCode.getText().slice(tokenBeforeDot.range[1], dot.range[0]);
            const textAfterDot = sourceCode.getText().slice(dot.range[1], prop.range[0]);

            if (onObject) ***REMOVED***
                if (!astUtils.isTokenOnSameLine(tokenBeforeDot, dot)) ***REMOVED***
                    const neededTextAfterToken = astUtils.isDecimalIntegerNumericToken(tokenBeforeDot) ? " " : "";

                    context.report(***REMOVED***
                        node,
                        loc: dot.loc.start,
                        messageId: "expectedDotAfterObject",
                        fix: fixer => fixer.replaceTextRange([tokenBeforeDot.range[1], prop.range[0]], `$***REMOVED***neededTextAfterToken***REMOVED***.$***REMOVED***textBeforeDot***REMOVED***$***REMOVED***textAfterDot***REMOVED***`)
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED*** else if (!astUtils.isTokenOnSameLine(dot, prop)) ***REMOVED***
                context.report(***REMOVED***
                    node,
                    loc: dot.loc.start,
                    messageId: "expectedDotBeforeProperty",
                    fix: fixer => fixer.replaceTextRange([tokenBeforeDot.range[1], prop.range[0]], `$***REMOVED***textBeforeDot***REMOVED***$***REMOVED***textAfterDot***REMOVED***.`)
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        /**
         * Checks the spacing of the dot within a member expression.
         * @param ***REMOVED***ASTNode***REMOVED*** node The node to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkNode(node) ***REMOVED***
            if (!node.computed) ***REMOVED***
                checkDotLocation(node.object, node.property, node);
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            MemberExpression: checkNode
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
