/**
 * @fileoverview Enforces that a return statement is present in property getters.
 * @author Aladdin-ADD(hh_2013@foxmail.com)
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------
const TARGET_NODE_TYPE = /^(?:Arrow)?FunctionExpression$/u;

/**
 * Checks a given code path segment is reachable.
 *
 * @param ***REMOVED***CodePathSegment***REMOVED*** segment - A segment to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the segment is reachable.
 */
function isReachable(segment) ***REMOVED***
    return segment.reachable;
***REMOVED***

/**
 * Gets a readable location.
 *
 * - FunctionExpression -> the function name or `function` keyword.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** node - A function node to get.
 * @returns ***REMOVED***ASTNode|Token***REMOVED*** The node or the token of a location.
 */
function getId(node) ***REMOVED***
    return node.id || node;
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "problem",

        docs: ***REMOVED***
            description: "enforce `return` statements in getters",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/getter-return"
        ***REMOVED***,

        fixable: null,

        schema: [
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    allowImplicit: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ],

        messages: ***REMOVED***
            expected: "Expected to return a value in ***REMOVED******REMOVED***name***REMOVED******REMOVED***.",
            expectedAlways: "Expected ***REMOVED******REMOVED***name***REMOVED******REMOVED*** to always return a value."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***

        const options = context.options[0] || ***REMOVED*** allowImplicit: false ***REMOVED***;

        let funcInfo = ***REMOVED***
            upper: null,
            codePath: null,
            hasReturn: false,
            shouldCheck: false,
            node: null
        ***REMOVED***;

        /**
         * Checks whether or not the last code path segment is reachable.
         * Then reports this function if the segment is reachable.
         *
         * If the last code path segment is reachable, there are paths which are not
         * returned or thrown.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkLastSegment(node) ***REMOVED***
            if (funcInfo.shouldCheck &&
                funcInfo.codePath.currentSegments.some(isReachable)
            ) ***REMOVED***
                context.report(***REMOVED***
                    node,
                    loc: getId(node).loc.start,
                    messageId: funcInfo.hasReturn ? "expectedAlways" : "expected",
                    data: ***REMOVED***
                        name: astUtils.getFunctionNameWithKind(funcInfo.node)
                    ***REMOVED***
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        /**
         * Checks whether a node means a getter function.
         * @param ***REMOVED***ASTNode***REMOVED*** node - a node to check.
         * @returns ***REMOVED***boolean***REMOVED*** if node means a getter, return true; else return false.
         */
        function isGetter(node) ***REMOVED***
            const parent = node.parent;

            if (TARGET_NODE_TYPE.test(node.type) && node.body.type === "BlockStatement") ***REMOVED***
                if (parent.kind === "get") ***REMOVED***
                    return true;
                ***REMOVED***
                if (parent.type === "Property" && astUtils.getStaticPropertyName(parent) === "get" && parent.parent.type === "ObjectExpression") ***REMOVED***

                    // Object.defineProperty()
                    if (parent.parent.parent.type === "CallExpression" &&
                        astUtils.getStaticPropertyName(parent.parent.parent.callee) === "defineProperty") ***REMOVED***
                        return true;
                    ***REMOVED***

                    // Object.defineProperties()
                    if (parent.parent.parent.type === "Property" &&
                        parent.parent.parent.parent.type === "ObjectExpression" &&
                        parent.parent.parent.parent.parent.type === "CallExpression" &&
                        astUtils.getStaticPropertyName(parent.parent.parent.parent.parent.callee) === "defineProperties") ***REMOVED***
                        return true;
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
            return false;
        ***REMOVED***
        return ***REMOVED***

            // Stacks this function's information.
            onCodePathStart(codePath, node) ***REMOVED***
                funcInfo = ***REMOVED***
                    upper: funcInfo,
                    codePath,
                    hasReturn: false,
                    shouldCheck: isGetter(node),
                    node
                ***REMOVED***;
            ***REMOVED***,

            // Pops this function's information.
            onCodePathEnd() ***REMOVED***
                funcInfo = funcInfo.upper;
            ***REMOVED***,

            // Checks the return statement is valid.
            ReturnStatement(node) ***REMOVED***
                if (funcInfo.shouldCheck) ***REMOVED***
                    funcInfo.hasReturn = true;

                    // if allowImplicit: false, should also check node.argument
                    if (!options.allowImplicit && !node.argument) ***REMOVED***
                        context.report(***REMOVED***
                            node,
                            messageId: "expected",
                            data: ***REMOVED***
                                name: astUtils.getFunctionNameWithKind(funcInfo.node)
                            ***REMOVED***
                        ***REMOVED***);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***,

            // Reports a given function if the last path is reachable.
            "FunctionExpression:exit": checkLastSegment,
            "ArrowFunctionExpression:exit": checkLastSegment
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
