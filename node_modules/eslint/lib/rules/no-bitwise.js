/**
 * @fileoverview Rule to flag bitwise identifiers
 * @author Nicholas C. Zakas
 */

"use strict";

/*
 *
 * Set of bitwise operators.
 *
 */
const BITWISE_OPERATORS = [
    "^", "|", "&", "<<", ">>", ">>>",
    "^=", "|=", "&=", "<<=", ">>=", ">>>=",
    "~"
];

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow bitwise operators",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-bitwise"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    allow: ***REMOVED***
                        type: "array",
                        items: ***REMOVED***
                            enum: BITWISE_OPERATORS
                        ***REMOVED***,
                        uniqueItems: true
                    ***REMOVED***,
                    int32Hint: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ],

        messages: ***REMOVED***
            unexpected: "Unexpected use of '***REMOVED******REMOVED***operator***REMOVED******REMOVED***'."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const options = context.options[0] || ***REMOVED******REMOVED***;
        const allowed = options.allow || [];
        const int32Hint = options.int32Hint === true;

        /**
         * Reports an unexpected use of a bitwise operator.
         * @param   ***REMOVED***ASTNode***REMOVED*** node Node which contains the bitwise operator.
         * @returns ***REMOVED***void***REMOVED***
         */
        function report(node) ***REMOVED***
            context.report(***REMOVED*** node, messageId: "unexpected", data: ***REMOVED*** operator: node.operator ***REMOVED*** ***REMOVED***);
        ***REMOVED***

        /**
         * Checks if the given node has a bitwise operator.
         * @param   ***REMOVED***ASTNode***REMOVED*** node The node to check.
         * @returns ***REMOVED***boolean***REMOVED*** Whether or not the node has a bitwise operator.
         */
        function hasBitwiseOperator(node) ***REMOVED***
            return BITWISE_OPERATORS.indexOf(node.operator) !== -1;
        ***REMOVED***

        /**
         * Checks if exceptions were provided, e.g. `***REMOVED*** allow: ['~', '|'] ***REMOVED***`.
         * @param   ***REMOVED***ASTNode***REMOVED*** node The node to check.
         * @returns ***REMOVED***boolean***REMOVED*** Whether or not the node has a bitwise operator.
         */
        function allowedOperator(node) ***REMOVED***
            return allowed.indexOf(node.operator) !== -1;
        ***REMOVED***

        /**
         * Checks if the given bitwise operator is used for integer typecasting, i.e. "|0"
         * @param   ***REMOVED***ASTNode***REMOVED*** node The node to check.
         * @returns ***REMOVED***boolean***REMOVED*** whether the node is used in integer typecasting.
         */
        function isInt32Hint(node) ***REMOVED***
            return int32Hint && node.operator === "|" && node.right &&
              node.right.type === "Literal" && node.right.value === 0;
        ***REMOVED***

        /**
         * Report if the given node contains a bitwise operator.
         * @param   ***REMOVED***ASTNode***REMOVED*** node The node to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkNodeForBitwiseOperator(node) ***REMOVED***
            if (hasBitwiseOperator(node) && !allowedOperator(node) && !isInt32Hint(node)) ***REMOVED***
                report(node);
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            AssignmentExpression: checkNodeForBitwiseOperator,
            BinaryExpression: checkNodeForBitwiseOperator,
            UnaryExpression: checkNodeForBitwiseOperator
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
