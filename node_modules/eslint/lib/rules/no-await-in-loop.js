/**
 * @fileoverview Rule to disallow uses of await inside of loops.
 * @author Nat Mote (nmote)
 */
"use strict";

/**
 * Check whether it should stop traversing ancestors at the given node.
 * @param ***REMOVED***ASTNode***REMOVED*** node A node to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if it should stop traversing.
 */
function isBoundary(node) ***REMOVED***
    const t = node.type;

    return (
        t === "FunctionDeclaration" ||
        t === "FunctionExpression" ||
        t === "ArrowFunctionExpression" ||

        /*
         * Don't report the await expressions on for-await-of loop since it's
         * asynchronous iteration intentionally.
         */
        (t === "ForOfStatement" && node.await === true)
    );
***REMOVED***

/**
 * Check whether the given node is in loop.
 * @param ***REMOVED***ASTNode***REMOVED*** node A node to check.
 * @param ***REMOVED***ASTNode***REMOVED*** parent A parent node to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the node is in loop.
 */
function isLooped(node, parent) ***REMOVED***
    switch (parent.type) ***REMOVED***
        case "ForStatement":
            return (
                node === parent.test ||
                node === parent.update ||
                node === parent.body
            );

        case "ForOfStatement":
        case "ForInStatement":
            return node === parent.body;

        case "WhileStatement":
        case "DoWhileStatement":
            return node === parent.test || node === parent.body;

        default:
            return false;
    ***REMOVED***
***REMOVED***

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "problem",

        docs: ***REMOVED***
            description: "disallow `await` inside of loops",
            category: "Possible Errors",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-await-in-loop"
        ***REMOVED***,

        schema: [],

        messages: ***REMOVED***
            unexpectedAwait: "Unexpected `await` inside a loop."
        ***REMOVED***
    ***REMOVED***,
    create(context) ***REMOVED***

        /**
         * Validate an await expression.
         * @param ***REMOVED***ASTNode***REMOVED*** awaitNode An AwaitExpression or ForOfStatement node to validate.
         * @returns ***REMOVED***void***REMOVED***
         */
        function validate(awaitNode) ***REMOVED***
            if (awaitNode.type === "ForOfStatement" && !awaitNode.await) ***REMOVED***
                return;
            ***REMOVED***

            let node = awaitNode;
            let parent = node.parent;

            while (parent && !isBoundary(parent)) ***REMOVED***
                if (isLooped(node, parent)) ***REMOVED***
                    context.report(***REMOVED***
                        node: awaitNode,
                        messageId: "unexpectedAwait"
                    ***REMOVED***);
                    return;
                ***REMOVED***
                node = parent;
                parent = parent.parent;
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            AwaitExpression: validate,
            ForOfStatement: validate
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
