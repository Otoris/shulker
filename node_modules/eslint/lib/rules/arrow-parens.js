/**
 * @fileoverview Rule to require parens in arrow function arguments.
 * @author Jxck
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Get location should be reported by AST node.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** node AST Node.
 * @returns ***REMOVED***Location***REMOVED*** Location information.
 */
function getLocation(node) ***REMOVED***
    return ***REMOVED***
        start: node.params[0].loc.start,
        end: node.params[node.params.length - 1].loc.end
    ***REMOVED***;
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "layout",

        docs: ***REMOVED***
            description: "require parentheses around arrow function arguments",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/arrow-parens"
        ***REMOVED***,

        fixable: "code",

        schema: [
            ***REMOVED***
                enum: ["always", "as-needed"]
            ***REMOVED***,
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    requireForBlockBody: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ],

        messages: ***REMOVED***
            unexpectedParens: "Unexpected parentheses around single function argument.",
            expectedParens: "Expected parentheses around arrow function argument.",

            unexpectedParensInline: "Unexpected parentheses around single function argument having a body with no curly braces.",
            expectedParensBlock: "Expected parentheses around arrow function argument having a body with curly braces."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const asNeeded = context.options[0] === "as-needed";
        const requireForBlockBody = asNeeded && context.options[1] && context.options[1].requireForBlockBody === true;

        const sourceCode = context.getSourceCode();

        /**
         * Determines whether a arrow function argument end with `)`
         * @param ***REMOVED***ASTNode***REMOVED*** node The arrow function node.
         * @returns ***REMOVED***void***REMOVED***
         */
        function parens(node) ***REMOVED***
            const isAsync = node.async;
            const firstTokenOfParam = sourceCode.getFirstToken(node, isAsync ? 1 : 0);

            /**
             * Remove the parenthesis around a parameter
             * @param ***REMOVED***Fixer***REMOVED*** fixer Fixer
             * @returns ***REMOVED***string***REMOVED*** fixed parameter
             */
            function fixParamsWithParenthesis(fixer) ***REMOVED***
                const paramToken = sourceCode.getTokenAfter(firstTokenOfParam);

                /*
                 * ES8 allows Trailing commas in function parameter lists and calls
                 * https://github.com/eslint/eslint/issues/8834
                 */
                const closingParenToken = sourceCode.getTokenAfter(paramToken, astUtils.isClosingParenToken);
                const asyncToken = isAsync ? sourceCode.getTokenBefore(firstTokenOfParam) : null;
                const shouldAddSpaceForAsync = asyncToken && (asyncToken.range[1] === firstTokenOfParam.range[0]);

                return fixer.replaceTextRange([
                    firstTokenOfParam.range[0],
                    closingParenToken.range[1]
                ], `$***REMOVED***shouldAddSpaceForAsync ? " " : ""***REMOVED***$***REMOVED***paramToken.value***REMOVED***`);
            ***REMOVED***

            // "as-needed", ***REMOVED*** "requireForBlockBody": true ***REMOVED***: x => x
            if (
                requireForBlockBody &&
                node.params.length === 1 &&
                node.params[0].type === "Identifier" &&
                !node.params[0].typeAnnotation &&
                node.body.type !== "BlockStatement" &&
                !node.returnType
            ) ***REMOVED***
                if (astUtils.isOpeningParenToken(firstTokenOfParam)) ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        messageId: "unexpectedParensInline",
                        loc: getLocation(node),
                        fix: fixParamsWithParenthesis
                    ***REMOVED***);
                ***REMOVED***
                return;
            ***REMOVED***

            if (
                requireForBlockBody &&
                node.body.type === "BlockStatement"
            ) ***REMOVED***
                if (!astUtils.isOpeningParenToken(firstTokenOfParam)) ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        messageId: "expectedParensBlock",
                        loc: getLocation(node),
                        fix(fixer) ***REMOVED***
                            return fixer.replaceText(firstTokenOfParam, `($***REMOVED***firstTokenOfParam.value***REMOVED***)`);
                        ***REMOVED***
                    ***REMOVED***);
                ***REMOVED***
                return;
            ***REMOVED***

            // "as-needed": x => x
            if (asNeeded &&
                node.params.length === 1 &&
                node.params[0].type === "Identifier" &&
                !node.params[0].typeAnnotation &&
                !node.returnType
            ) ***REMOVED***
                if (astUtils.isOpeningParenToken(firstTokenOfParam)) ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        messageId: "unexpectedParens",
                        loc: getLocation(node),
                        fix: fixParamsWithParenthesis
                    ***REMOVED***);
                ***REMOVED***
                return;
            ***REMOVED***

            if (firstTokenOfParam.type === "Identifier") ***REMOVED***
                const after = sourceCode.getTokenAfter(firstTokenOfParam);

                // (x) => x
                if (after.value !== ")") ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        messageId: "expectedParens",
                        loc: getLocation(node),
                        fix(fixer) ***REMOVED***
                            return fixer.replaceText(firstTokenOfParam, `($***REMOVED***firstTokenOfParam.value***REMOVED***)`);
                        ***REMOVED***
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            ArrowFunctionExpression: parens
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
