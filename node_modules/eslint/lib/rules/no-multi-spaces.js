/**
 * @fileoverview Disallow use of multiple spaces.
 * @author Nicholas C. Zakas
 */

"use strict";

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "layout",

        docs: ***REMOVED***
            description: "disallow multiple spaces",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-multi-spaces"
        ***REMOVED***,

        fixable: "whitespace",

        schema: [
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    exceptions: ***REMOVED***
                        type: "object",
                        patternProperties: ***REMOVED***
                            "^([A-Z][a-z]*)+$": ***REMOVED***
                                type: "boolean"
                            ***REMOVED***
                        ***REMOVED***,
                        additionalProperties: false
                    ***REMOVED***,
                    ignoreEOLComments: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ]
    ***REMOVED***,

    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode();
        const options = context.options[0] || ***REMOVED******REMOVED***;
        const ignoreEOLComments = options.ignoreEOLComments;
        const exceptions = Object.assign(***REMOVED*** Property: true ***REMOVED***, options.exceptions);
        const hasExceptions = Object.keys(exceptions).filter(key => exceptions[key]).length > 0;

        /**
         * Formats value of given comment token for error message by truncating its length.
         * @param ***REMOVED***Token***REMOVED*** token comment token
         * @returns ***REMOVED***string***REMOVED*** formatted value
         * @private
         */
        function formatReportedCommentValue(token) ***REMOVED***
            const valueLines = token.value.split("\n");
            const value = valueLines[0];
            const formattedValue = `$***REMOVED***value.slice(0, 12)***REMOVED***...`;

            return valueLines.length === 1 && value.length <= 12 ? value : formattedValue;
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------

        return ***REMOVED***
            Program() ***REMOVED***
                sourceCode.tokensAndComments.forEach((leftToken, leftIndex, tokensAndComments) => ***REMOVED***
                    if (leftIndex === tokensAndComments.length - 1) ***REMOVED***
                        return;
                    ***REMOVED***
                    const rightToken = tokensAndComments[leftIndex + 1];

                    // Ignore tokens that don't have 2 spaces between them or are on different lines
                    if (
                        !sourceCode.text.slice(leftToken.range[1], rightToken.range[0]).includes("  ") ||
                        leftToken.loc.end.line < rightToken.loc.start.line
                    ) ***REMOVED***
                        return;
                    ***REMOVED***

                    // Ignore comments that are the last token on their line if `ignoreEOLComments` is active.
                    if (
                        ignoreEOLComments &&
                        astUtils.isCommentToken(rightToken) &&
                        (
                            leftIndex === tokensAndComments.length - 2 ||
                            rightToken.loc.end.line < tokensAndComments[leftIndex + 2].loc.start.line
                        )
                    ) ***REMOVED***
                        return;
                    ***REMOVED***

                    // Ignore tokens that are in a node in the "exceptions" object
                    if (hasExceptions) ***REMOVED***
                        const parentNode = sourceCode.getNodeByRangeIndex(rightToken.range[0] - 1);

                        if (parentNode && exceptions[parentNode.type]) ***REMOVED***
                            return;
                        ***REMOVED***
                    ***REMOVED***

                    let displayValue;

                    if (rightToken.type === "Block") ***REMOVED***
                        displayValue = `/*$***REMOVED***formatReportedCommentValue(rightToken)***REMOVED****/`;
                    ***REMOVED*** else if (rightToken.type === "Line") ***REMOVED***
                        displayValue = `//$***REMOVED***formatReportedCommentValue(rightToken)***REMOVED***`;
                    ***REMOVED*** else ***REMOVED***
                        displayValue = rightToken.value;
                    ***REMOVED***

                    context.report(***REMOVED***
                        node: rightToken,
                        loc: rightToken.loc.start,
                        message: "Multiple spaces found before '***REMOVED******REMOVED***displayValue***REMOVED******REMOVED***'.",
                        data: ***REMOVED*** displayValue ***REMOVED***,
                        fix: fixer => fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], " ")
                    ***REMOVED***);
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
