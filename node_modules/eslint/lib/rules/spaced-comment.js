/**
 * @fileoverview Source code for spaced-comments rule
 * @author Gyandeep Singh
 */
"use strict";

const lodash = require("lodash");
const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Escapes the control characters of a given string.
 * @param ***REMOVED***string***REMOVED*** s - A string to escape.
 * @returns ***REMOVED***string***REMOVED*** An escaped string.
 */
function escape(s) ***REMOVED***
    return `(?:$***REMOVED***lodash.escapeRegExp(s)***REMOVED***)`;
***REMOVED***

/**
 * Escapes the control characters of a given string.
 * And adds a repeat flag.
 * @param ***REMOVED***string***REMOVED*** s - A string to escape.
 * @returns ***REMOVED***string***REMOVED*** An escaped string.
 */
function escapeAndRepeat(s) ***REMOVED***
    return `$***REMOVED***escape(s)***REMOVED***+`;
***REMOVED***

/**
 * Parses `markers` option.
 * If markers don't include `"*"`, this adds `"*"` to allow JSDoc comments.
 * @param ***REMOVED***string[]***REMOVED*** [markers] - A marker list.
 * @returns ***REMOVED***string[]***REMOVED*** A marker list.
 */
function parseMarkersOption(markers) ***REMOVED***

    // `*` is a marker for JSDoc comments.
    if (markers.indexOf("*") === -1) ***REMOVED***
        return markers.concat("*");
    ***REMOVED***

    return markers;
***REMOVED***

/**
 * Creates string pattern for exceptions.
 * Generated pattern:
 *
 * 1. A space or an exception pattern sequence.
 *
 * @param ***REMOVED***string[]***REMOVED*** exceptions - An exception pattern list.
 * @returns ***REMOVED***string***REMOVED*** A regular expression string for exceptions.
 */
function createExceptionsPattern(exceptions) ***REMOVED***
    let pattern = "";

    /*
     * A space or an exception pattern sequence.
     * []                 ==> "\s"
     * ["-"]              ==> "(?:\s|\-+$)"
     * ["-", "="]         ==> "(?:\s|(?:\-+|=+)$)"
     * ["-", "=", "--=="] ==> "(?:\s|(?:\-+|=+|(?:\-\-==)+)$)" ==> https://jex.im/regulex/#!embed=false&flags=&re=(%3F%3A%5Cs%7C(%3F%3A%5C-%2B%7C%3D%2B%7C(%3F%3A%5C-%5C-%3D%3D)%2B)%24)
     */
    if (exceptions.length === 0) ***REMOVED***

        // a space.
        pattern += "\\s";
    ***REMOVED*** else ***REMOVED***

        // a space or...
        pattern += "(?:\\s|";

        if (exceptions.length === 1) ***REMOVED***

            // a sequence of the exception pattern.
            pattern += escapeAndRepeat(exceptions[0]);
        ***REMOVED*** else ***REMOVED***

            // a sequence of one of the exception patterns.
            pattern += "(?:";
            pattern += exceptions.map(escapeAndRepeat).join("|");
            pattern += ")";
        ***REMOVED***
        pattern += `(?:$|[$***REMOVED***Array.from(astUtils.LINEBREAKS).join("")***REMOVED***]))`;
    ***REMOVED***

    return pattern;
***REMOVED***

/**
 * Creates RegExp object for `always` mode.
 * Generated pattern for beginning of comment:
 *
 * 1. First, a marker or nothing.
 * 2. Next, a space or an exception pattern sequence.
 *
 * @param ***REMOVED***string[]***REMOVED*** markers - A marker list.
 * @param ***REMOVED***string[]***REMOVED*** exceptions - An exception pattern list.
 * @returns ***REMOVED***RegExp***REMOVED*** A RegExp object for the beginning of a comment in `always` mode.
 */
function createAlwaysStylePattern(markers, exceptions) ***REMOVED***
    let pattern = "^";

    /*
     * A marker or nothing.
     * ["*"]            ==> "\*?"
     * ["*", "!"]       ==> "(?:\*|!)?"
     * ["*", "/", "!<"] ==> "(?:\*|\/|(?:!<))?" ==> https://jex.im/regulex/#!embed=false&flags=&re=(%3F%3A%5C*%7C%5C%2F%7C(%3F%3A!%3C))%3F
     */
    if (markers.length === 1) ***REMOVED***

        // the marker.
        pattern += escape(markers[0]);
    ***REMOVED*** else ***REMOVED***

        // one of markers.
        pattern += "(?:";
        pattern += markers.map(escape).join("|");
        pattern += ")";
    ***REMOVED***

    pattern += "?"; // or nothing.
    pattern += createExceptionsPattern(exceptions);

    return new RegExp(pattern, "u");
***REMOVED***

/**
 * Creates RegExp object for `never` mode.
 * Generated pattern for beginning of comment:
 *
 * 1. First, a marker or nothing (captured).
 * 2. Next, a space or a tab.
 *
 * @param ***REMOVED***string[]***REMOVED*** markers - A marker list.
 * @returns ***REMOVED***RegExp***REMOVED*** A RegExp object for `never` mode.
 */
function createNeverStylePattern(markers) ***REMOVED***
    const pattern = `^($***REMOVED***markers.map(escape).join("|")***REMOVED***)?[ \t]+`;

    return new RegExp(pattern, "u");
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "enforce consistent spacing after the `//` or `/*` in a comment",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/spaced-comment"
        ***REMOVED***,

        fixable: "whitespace",

        schema: [
            ***REMOVED***
                enum: ["always", "never"]
            ***REMOVED***,
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    exceptions: ***REMOVED***
                        type: "array",
                        items: ***REMOVED***
                            type: "string"
                        ***REMOVED***
                    ***REMOVED***,
                    markers: ***REMOVED***
                        type: "array",
                        items: ***REMOVED***
                            type: "string"
                        ***REMOVED***
                    ***REMOVED***,
                    line: ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            exceptions: ***REMOVED***
                                type: "array",
                                items: ***REMOVED***
                                    type: "string"
                                ***REMOVED***
                            ***REMOVED***,
                            markers: ***REMOVED***
                                type: "array",
                                items: ***REMOVED***
                                    type: "string"
                                ***REMOVED***
                            ***REMOVED***
                        ***REMOVED***,
                        additionalProperties: false
                    ***REMOVED***,
                    block: ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            exceptions: ***REMOVED***
                                type: "array",
                                items: ***REMOVED***
                                    type: "string"
                                ***REMOVED***
                            ***REMOVED***,
                            markers: ***REMOVED***
                                type: "array",
                                items: ***REMOVED***
                                    type: "string"
                                ***REMOVED***
                            ***REMOVED***,
                            balanced: ***REMOVED***
                                type: "boolean",
                                default: false
                            ***REMOVED***
                        ***REMOVED***,
                        additionalProperties: false
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ]
    ***REMOVED***,

    create(context) ***REMOVED***

        const sourceCode = context.getSourceCode();

        // Unless the first option is never, require a space
        const requireSpace = context.options[0] !== "never";

        /*
         * Parse the second options.
         * If markers don't include `"*"`, it's added automatically for JSDoc
         * comments.
         */
        const config = context.options[1] || ***REMOVED******REMOVED***;
        const balanced = config.block && config.block.balanced;

        const styleRules = ["block", "line"].reduce((rule, type) => ***REMOVED***
            const markers = parseMarkersOption(config[type] && config[type].markers || config.markers || []);
            const exceptions = config[type] && config[type].exceptions || config.exceptions || [];
            const endNeverPattern = "[ \t]+$";

            // Create RegExp object for valid patterns.
            rule[type] = ***REMOVED***
                beginRegex: requireSpace ? createAlwaysStylePattern(markers, exceptions) : createNeverStylePattern(markers),
                endRegex: balanced && requireSpace ? new RegExp(`$***REMOVED***createExceptionsPattern(exceptions)***REMOVED***$`, "u") : new RegExp(endNeverPattern, "u"),
                hasExceptions: exceptions.length > 0,
                markers: new RegExp(`^($***REMOVED***markers.map(escape).join("|")***REMOVED***)`, "u")
            ***REMOVED***;

            return rule;
        ***REMOVED***, ***REMOVED******REMOVED***);

        /**
         * Reports a beginning spacing error with an appropriate message.
         * @param ***REMOVED***ASTNode***REMOVED*** node - A comment node to check.
         * @param ***REMOVED***string***REMOVED*** message - An error message to report.
         * @param ***REMOVED***Array***REMOVED*** match - An array of match results for markers.
         * @param ***REMOVED***string***REMOVED*** refChar - Character used for reference in the error message.
         * @returns ***REMOVED***void***REMOVED***
         */
        function reportBegin(node, message, match, refChar) ***REMOVED***
            const type = node.type.toLowerCase(),
                commentIdentifier = type === "block" ? "/*" : "//";

            context.report(***REMOVED***
                node,
                fix(fixer) ***REMOVED***
                    const start = node.range[0];
                    let end = start + 2;

                    if (requireSpace) ***REMOVED***
                        if (match) ***REMOVED***
                            end += match[0].length;
                        ***REMOVED***
                        return fixer.insertTextAfterRange([start, end], " ");
                    ***REMOVED***
                    end += match[0].length;
                    return fixer.replaceTextRange([start, end], commentIdentifier + (match[1] ? match[1] : ""));

                ***REMOVED***,
                message,
                data: ***REMOVED*** refChar ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Reports an ending spacing error with an appropriate message.
         * @param ***REMOVED***ASTNode***REMOVED*** node - A comment node to check.
         * @param ***REMOVED***string***REMOVED*** message - An error message to report.
         * @param ***REMOVED***string***REMOVED*** match - An array of the matched whitespace characters.
         * @returns ***REMOVED***void***REMOVED***
         */
        function reportEnd(node, message, match) ***REMOVED***
            context.report(***REMOVED***
                node,
                fix(fixer) ***REMOVED***
                    if (requireSpace) ***REMOVED***
                        return fixer.insertTextAfterRange([node.range[0], node.range[1] - 2], " ");
                    ***REMOVED***
                    const end = node.range[1] - 2,
                        start = end - match[0].length;

                    return fixer.replaceTextRange([start, end], "");

                ***REMOVED***,
                message
            ***REMOVED***);
        ***REMOVED***

        /**
         * Reports a given comment if it's invalid.
         * @param ***REMOVED***ASTNode***REMOVED*** node - a comment node to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkCommentForSpace(node) ***REMOVED***
            const type = node.type.toLowerCase(),
                rule = styleRules[type],
                commentIdentifier = type === "block" ? "/*" : "//";

            // Ignores empty comments.
            if (node.value.length === 0) ***REMOVED***
                return;
            ***REMOVED***

            const beginMatch = rule.beginRegex.exec(node.value);
            const endMatch = rule.endRegex.exec(node.value);

            // Checks.
            if (requireSpace) ***REMOVED***
                if (!beginMatch) ***REMOVED***
                    const hasMarker = rule.markers.exec(node.value);
                    const marker = hasMarker ? commentIdentifier + hasMarker[0] : commentIdentifier;

                    if (rule.hasExceptions) ***REMOVED***
                        reportBegin(node, "Expected exception block, space or tab after '***REMOVED******REMOVED***refChar***REMOVED******REMOVED***' in comment.", hasMarker, marker);
                    ***REMOVED*** else ***REMOVED***
                        reportBegin(node, "Expected space or tab after '***REMOVED******REMOVED***refChar***REMOVED******REMOVED***' in comment.", hasMarker, marker);
                    ***REMOVED***
                ***REMOVED***

                if (balanced && type === "block" && !endMatch) ***REMOVED***
                    reportEnd(node, "Expected space or tab before '*/' in comment.");
                ***REMOVED***
            ***REMOVED*** else ***REMOVED***
                if (beginMatch) ***REMOVED***
                    if (!beginMatch[1]) ***REMOVED***
                        reportBegin(node, "Unexpected space or tab after '***REMOVED******REMOVED***refChar***REMOVED******REMOVED***' in comment.", beginMatch, commentIdentifier);
                    ***REMOVED*** else ***REMOVED***
                        reportBegin(node, "Unexpected space or tab after marker (***REMOVED******REMOVED***refChar***REMOVED******REMOVED***) in comment.", beginMatch, beginMatch[1]);
                    ***REMOVED***
                ***REMOVED***

                if (balanced && type === "block" && endMatch) ***REMOVED***
                    reportEnd(node, "Unexpected space or tab before '*/' in comment.", endMatch);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            Program() ***REMOVED***
                const comments = sourceCode.getAllComments();

                comments.filter(token => token.type !== "Shebang").forEach(checkCommentForSpace);
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
