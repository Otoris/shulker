/**
 * @fileoverview Restrict usage of duplicate imports.
 * @author Simen Bekkhus
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/**
 * Returns the name of the module imported or re-exported.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** node - A node to get.
 * @returns ***REMOVED***string***REMOVED*** the name of the module, or empty string if no name.
 */
function getValue(node) ***REMOVED***
    if (node && node.source && node.source.value) ***REMOVED***
        return node.source.value.trim();
    ***REMOVED***

    return "";
***REMOVED***

/**
 * Checks if the name of the import or export exists in the given array, and reports if so.
 *
 * @param ***REMOVED***RuleContext***REMOVED*** context - The ESLint rule context object.
 * @param ***REMOVED***ASTNode***REMOVED*** node - A node to get.
 * @param ***REMOVED***string***REMOVED*** value - The name of the imported or exported module.
 * @param ***REMOVED***string[]***REMOVED*** array - The array containing other imports or exports in the file.
 * @param ***REMOVED***string***REMOVED*** messageId - A messageId to be reported after the name of the module
 *
 * @returns ***REMOVED***void***REMOVED*** No return value
 */
function checkAndReport(context, node, value, array, messageId) ***REMOVED***
    if (array.indexOf(value) !== -1) ***REMOVED***
        context.report(***REMOVED***
            node,
            messageId,
            data: ***REMOVED***
                module: value
            ***REMOVED***
        ***REMOVED***);
    ***REMOVED***
***REMOVED***

/**
 * @callback nodeCallback
 * @param ***REMOVED***ASTNode***REMOVED*** node - A node to handle.
 */

/**
 * Returns a function handling the imports of a given file
 *
 * @param ***REMOVED***RuleContext***REMOVED*** context - The ESLint rule context object.
 * @param ***REMOVED***boolean***REMOVED*** includeExports - Whether or not to check for exports in addition to imports.
 * @param ***REMOVED***string[]***REMOVED*** importsInFile - The array containing other imports in the file.
 * @param ***REMOVED***string[]***REMOVED*** exportsInFile - The array containing other exports in the file.
 *
 * @returns ***REMOVED***nodeCallback***REMOVED*** A function passed to ESLint to handle the statement.
 */
function handleImports(context, includeExports, importsInFile, exportsInFile) ***REMOVED***
    return function(node) ***REMOVED***
        const value = getValue(node);

        if (value) ***REMOVED***
            checkAndReport(context, node, value, importsInFile, "import");

            if (includeExports) ***REMOVED***
                checkAndReport(context, node, value, exportsInFile, "importAs");
            ***REMOVED***

            importsInFile.push(value);
        ***REMOVED***
    ***REMOVED***;
***REMOVED***

/**
 * Returns a function handling the exports of a given file
 *
 * @param ***REMOVED***RuleContext***REMOVED*** context - The ESLint rule context object.
 * @param ***REMOVED***string[]***REMOVED*** importsInFile - The array containing other imports in the file.
 * @param ***REMOVED***string[]***REMOVED*** exportsInFile - The array containing other exports in the file.
 *
 * @returns ***REMOVED***nodeCallback***REMOVED*** A function passed to ESLint to handle the statement.
 */
function handleExports(context, importsInFile, exportsInFile) ***REMOVED***
    return function(node) ***REMOVED***
        const value = getValue(node);

        if (value) ***REMOVED***
            checkAndReport(context, node, value, exportsInFile, "export");
            checkAndReport(context, node, value, importsInFile, "exportAs");

            exportsInFile.push(value);
        ***REMOVED***
    ***REMOVED***;
***REMOVED***

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "problem",

        docs: ***REMOVED***
            description: "disallow duplicate module imports",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-duplicate-imports"
        ***REMOVED***,

        schema: [***REMOVED***
            type: "object",
            properties: ***REMOVED***
                includeExports: ***REMOVED***
                    type: "boolean",
                    default: false
                ***REMOVED***
            ***REMOVED***,
            additionalProperties: false
        ***REMOVED***],
        messages: ***REMOVED***
            import: "'***REMOVED******REMOVED***module***REMOVED******REMOVED***' import is duplicated.",
            importAs: "'***REMOVED******REMOVED***module***REMOVED******REMOVED***' import is duplicated as export.",
            export: "'***REMOVED******REMOVED***module***REMOVED******REMOVED***' export is duplicated.",
            exportAs: "'***REMOVED******REMOVED***module***REMOVED******REMOVED***' export is duplicated as import."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const includeExports = (context.options[0] || ***REMOVED******REMOVED***).includeExports,
            importsInFile = [],
            exportsInFile = [];

        const handlers = ***REMOVED***
            ImportDeclaration: handleImports(context, includeExports, importsInFile, exportsInFile)
        ***REMOVED***;

        if (includeExports) ***REMOVED***
            handlers.ExportNamedDeclaration = handleExports(context, importsInFile, exportsInFile);
            handlers.ExportAllDeclaration = handleExports(context, importsInFile, exportsInFile);
        ***REMOVED***

        return handlers;
    ***REMOVED***
***REMOVED***;
