/**
 * @fileoverview Rule to enforce a maximum number of nested callbacks.
 * @author Ian Christian Myers
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "enforce a maximum depth that callbacks can be nested",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/max-nested-callbacks"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                oneOf: [
                    ***REMOVED***
                        type: "integer",
                        minimum: 0
                    ***REMOVED***,
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            maximum: ***REMOVED***
                                type: "integer",
                                minimum: 0
                            ***REMOVED***,
                            max: ***REMOVED***
                                type: "integer",
                                minimum: 0
                            ***REMOVED***
                        ***REMOVED***,
                        additionalProperties: false
                    ***REMOVED***
                ]
            ***REMOVED***
        ],
        messages: ***REMOVED***
            exceed: "Too many nested callbacks (***REMOVED******REMOVED***num***REMOVED******REMOVED***). Maximum allowed is ***REMOVED******REMOVED***max***REMOVED******REMOVED***."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***

        //--------------------------------------------------------------------------
        // Constants
        //--------------------------------------------------------------------------
        const option = context.options[0];
        let THRESHOLD = 10;

        if (
            typeof option === "object" &&
            (Object.prototype.hasOwnProperty.call(option, "maximum") || Object.prototype.hasOwnProperty.call(option, "max"))
        ) ***REMOVED***
            THRESHOLD = option.maximum || option.max;
        ***REMOVED*** else if (typeof option === "number") ***REMOVED***
            THRESHOLD = option;
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Helpers
        //--------------------------------------------------------------------------

        const callbackStack = [];

        /**
         * Checks a given function node for too many callbacks.
         * @param ***REMOVED***ASTNode***REMOVED*** node The node to check.
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function checkFunction(node) ***REMOVED***
            const parent = node.parent;

            if (parent.type === "CallExpression") ***REMOVED***
                callbackStack.push(node);
            ***REMOVED***

            if (callbackStack.length > THRESHOLD) ***REMOVED***
                const opts = ***REMOVED*** num: callbackStack.length, max: THRESHOLD ***REMOVED***;

                context.report(***REMOVED*** node, messageId: "exceed", data: opts ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        /**
         * Pops the call stack.
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function popStack() ***REMOVED***
            callbackStack.pop();
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Public API
        //--------------------------------------------------------------------------

        return ***REMOVED***
            ArrowFunctionExpression: checkFunction,
            "ArrowFunctionExpression:exit": popStack,

            FunctionExpression: checkFunction,
            "FunctionExpression:exit": popStack
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
