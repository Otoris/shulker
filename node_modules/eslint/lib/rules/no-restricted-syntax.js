/**
 * @fileoverview Rule to flag use of certain node types
 * @author Burak Yigit Kaya
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow specified syntax",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-restricted-syntax"
        ***REMOVED***,

        schema: ***REMOVED***
            type: "array",
            items: ***REMOVED***
                oneOf: [
                    ***REMOVED***
                        type: "string"
                    ***REMOVED***,
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            selector: ***REMOVED*** type: "string" ***REMOVED***,
                            message: ***REMOVED*** type: "string" ***REMOVED***
                        ***REMOVED***,
                        required: ["selector"],
                        additionalProperties: false
                    ***REMOVED***
                ]
            ***REMOVED***,
            uniqueItems: true,
            minItems: 0
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        return context.options.reduce((result, selectorOrObject) => ***REMOVED***
            const isStringFormat = (typeof selectorOrObject === "string");
            const hasCustomMessage = !isStringFormat && Boolean(selectorOrObject.message);

            const selector = isStringFormat ? selectorOrObject : selectorOrObject.selector;
            const message = hasCustomMessage ? selectorOrObject.message : "Using '***REMOVED******REMOVED***selector***REMOVED******REMOVED***' is not allowed.";

            return Object.assign(result, ***REMOVED***
                [selector](node) ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        message,
                        data: hasCustomMessage ? ***REMOVED******REMOVED*** : ***REMOVED*** selector ***REMOVED***
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***, ***REMOVED******REMOVED***);

    ***REMOVED***
***REMOVED***;
