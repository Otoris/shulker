/**
 * @fileoverview Rule to disallow empty functions.
 * @author Toru Nagashima
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

const ALLOW_OPTIONS = Object.freeze([
    "functions",
    "arrowFunctions",
    "generatorFunctions",
    "methods",
    "generatorMethods",
    "getters",
    "setters",
    "constructors"
]);

/**
 * Gets the kind of a given function node.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** node - A function node to get. This is one of
 *      an ArrowFunctionExpression, a FunctionDeclaration, or a
 *      FunctionExpression.
 * @returns ***REMOVED***string***REMOVED*** The kind of the function. This is one of "functions",
 *      "arrowFunctions", "generatorFunctions", "asyncFunctions", "methods",
 *      "generatorMethods", "asyncMethods", "getters", "setters", and
 *      "constructors".
 */
function getKind(node) ***REMOVED***
    const parent = node.parent;
    let kind = "";

    if (node.type === "ArrowFunctionExpression") ***REMOVED***
        return "arrowFunctions";
    ***REMOVED***

    // Detects main kind.
    if (parent.type === "Property") ***REMOVED***
        if (parent.kind === "get") ***REMOVED***
            return "getters";
        ***REMOVED***
        if (parent.kind === "set") ***REMOVED***
            return "setters";
        ***REMOVED***
        kind = parent.method ? "methods" : "functions";

    ***REMOVED*** else if (parent.type === "MethodDefinition") ***REMOVED***
        if (parent.kind === "get") ***REMOVED***
            return "getters";
        ***REMOVED***
        if (parent.kind === "set") ***REMOVED***
            return "setters";
        ***REMOVED***
        if (parent.kind === "constructor") ***REMOVED***
            return "constructors";
        ***REMOVED***
        kind = "methods";

    ***REMOVED*** else ***REMOVED***
        kind = "functions";
    ***REMOVED***

    // Detects prefix.
    let prefix = "";

    if (node.generator) ***REMOVED***
        prefix = "generator";
    ***REMOVED*** else if (node.async) ***REMOVED***
        prefix = "async";
    ***REMOVED*** else ***REMOVED***
        return kind;
    ***REMOVED***
    return prefix + kind[0].toUpperCase() + kind.slice(1);
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow empty functions",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-empty-function"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    allow: ***REMOVED***
                        type: "array",
                        items: ***REMOVED*** enum: ALLOW_OPTIONS ***REMOVED***,
                        uniqueItems: true
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ],

        messages: ***REMOVED***
            unexpected: "Unexpected empty ***REMOVED******REMOVED***name***REMOVED******REMOVED***."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const options = context.options[0] || ***REMOVED******REMOVED***;
        const allowed = options.allow || [];

        const sourceCode = context.getSourceCode();

        /**
         * Reports a given function node if the node matches the following patterns.
         *
         * - Not allowed by options.
         * - The body is empty.
         * - The body doesn't have any comments.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A function node to report. This is one of
         *      an ArrowFunctionExpression, a FunctionDeclaration, or a
         *      FunctionExpression.
         * @returns ***REMOVED***void***REMOVED***
         */
        function reportIfEmpty(node) ***REMOVED***
            const kind = getKind(node);
            const name = astUtils.getFunctionNameWithKind(node);
            const innerComments = sourceCode.getTokens(node.body, ***REMOVED***
                includeComments: true,
                filter: astUtils.isCommentToken
            ***REMOVED***);

            if (allowed.indexOf(kind) === -1 &&
                node.body.type === "BlockStatement" &&
                node.body.body.length === 0 &&
                innerComments.length === 0
            ) ***REMOVED***
                context.report(***REMOVED***
                    node,
                    loc: node.body.loc.start,
                    messageId: "unexpected",
                    data: ***REMOVED*** name ***REMOVED***
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            ArrowFunctionExpression: reportIfEmpty,
            FunctionDeclaration: reportIfEmpty,
            FunctionExpression: reportIfEmpty
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
