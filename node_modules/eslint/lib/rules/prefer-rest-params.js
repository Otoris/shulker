/**
 * @fileoverview Rule to
 * @author Toru Nagashima
 */

"use strict";

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Gets the variable object of `arguments` which is defined implicitly.
 * @param ***REMOVED***eslint-scope.Scope***REMOVED*** scope - A scope to get.
 * @returns ***REMOVED***eslint-scope.Variable***REMOVED*** The found variable object.
 */
function getVariableOfArguments(scope) ***REMOVED***
    const variables = scope.variables;

    for (let i = 0; i < variables.length; ++i) ***REMOVED***
        const variable = variables[i];

        if (variable.name === "arguments") ***REMOVED***

            /*
             * If there was a parameter which is named "arguments", the implicit "arguments" is not defined.
             * So does fast return with null.
             */
            return (variable.identifiers.length === 0) ? variable : null;
        ***REMOVED***
    ***REMOVED***

    /* istanbul ignore next : unreachable */
    return null;
***REMOVED***

/**
 * Checks if the given reference is not normal member access.
 *
 * - arguments         .... true    // not member access
 * - arguments[i]      .... true    // computed member access
 * - arguments[0]      .... true    // computed member access
 * - arguments.length  .... false   // normal member access
 *
 * @param ***REMOVED***eslint-scope.Reference***REMOVED*** reference - The reference to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the reference is not normal member access.
 */
function isNotNormalMemberAccess(reference) ***REMOVED***
    const id = reference.identifier;
    const parent = id.parent;

    return !(
        parent.type === "MemberExpression" &&
        parent.object === id &&
        !parent.computed
    );
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "require rest parameters instead of `arguments`",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/prefer-rest-params"
        ***REMOVED***,

        schema: []
    ***REMOVED***,

    create(context) ***REMOVED***

        /**
         * Reports a given reference.
         *
         * @param ***REMOVED***eslint-scope.Reference***REMOVED*** reference - A reference to report.
         * @returns ***REMOVED***void***REMOVED***
         */
        function report(reference) ***REMOVED***
            context.report(***REMOVED***
                node: reference.identifier,
                loc: reference.identifier.loc,
                message: "Use the rest parameters instead of 'arguments'."
            ***REMOVED***);
        ***REMOVED***

        /**
         * Reports references of the implicit `arguments` variable if exist.
         *
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkForArguments() ***REMOVED***
            const argumentsVar = getVariableOfArguments(context.getScope());

            if (argumentsVar) ***REMOVED***
                argumentsVar
                    .references
                    .filter(isNotNormalMemberAccess)
                    .forEach(report);
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            "FunctionDeclaration:exit": checkForArguments,
            "FunctionExpression:exit": checkForArguments
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
