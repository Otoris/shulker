/**
 * @fileoverview Rule that warns when identifier names that are
 * blacklisted in the configuration are used.
 * @author Keith Cirkel (http://keithcirkel.co.uk)
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow specified identifiers",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/id-blacklist"
        ***REMOVED***,

        schema: ***REMOVED***
            type: "array",
            items: ***REMOVED***
                type: "string"
            ***REMOVED***,
            uniqueItems: true
        ***REMOVED***,
        messages: ***REMOVED***
            blacklisted: "Identifier '***REMOVED******REMOVED***name***REMOVED******REMOVED***' is blacklisted."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***


        //--------------------------------------------------------------------------
        // Helpers
        //--------------------------------------------------------------------------

        const blacklist = context.options;


        /**
         * Checks if a string matches the provided pattern
         * @param ***REMOVED***string***REMOVED*** name The string to check.
         * @returns ***REMOVED***boolean***REMOVED*** if the string is a match
         * @private
         */
        function isInvalid(name) ***REMOVED***
            return blacklist.indexOf(name) !== -1;
        ***REMOVED***

        /**
         * Verifies if we should report an error or not based on the effective
         * parent node and the identifier name.
         * @param ***REMOVED***ASTNode***REMOVED*** effectiveParent The effective parent node of the node to be reported
         * @param ***REMOVED***string***REMOVED*** name The identifier name of the identifier node
         * @returns ***REMOVED***boolean***REMOVED*** whether an error should be reported or not
         */
        function shouldReport(effectiveParent, name) ***REMOVED***
            return effectiveParent.type !== "CallExpression" &&
                effectiveParent.type !== "NewExpression" &&
                isInvalid(name);
        ***REMOVED***

        /**
         * Reports an AST node as a rule violation.
         * @param ***REMOVED***ASTNode***REMOVED*** node The node to report.
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function report(node) ***REMOVED***
            context.report(***REMOVED***
                node,
                messageId: "blacklisted",
                data: ***REMOVED***
                    name: node.name
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        return ***REMOVED***

            Identifier(node) ***REMOVED***
                const name = node.name,
                    effectiveParent = (node.parent.type === "MemberExpression") ? node.parent.parent : node.parent;

                // MemberExpressions get special rules
                if (node.parent.type === "MemberExpression") ***REMOVED***

                    // Always check object names
                    if (node.parent.object.type === "Identifier" &&
                        node.parent.object.name === node.name) ***REMOVED***
                        if (isInvalid(name)) ***REMOVED***
                            report(node);
                        ***REMOVED***

                        // Report AssignmentExpressions only if they are the left side of the assignment
                    ***REMOVED*** else if (effectiveParent.type === "AssignmentExpression" &&
                        (effectiveParent.right.type !== "MemberExpression" ||
                        effectiveParent.left.type === "MemberExpression" &&
                        effectiveParent.left.property.name === node.name)) ***REMOVED***
                        if (isInvalid(name)) ***REMOVED***
                            report(node);
                        ***REMOVED***
                    ***REMOVED***

                // Properties have their own rules
                ***REMOVED*** else if (node.parent.type === "Property") ***REMOVED***

                    if (shouldReport(effectiveParent, name)) ***REMOVED***
                        report(node);
                    ***REMOVED***

                // Report anything that is a match and not a CallExpression
                ***REMOVED*** else if (shouldReport(effectiveParent, name)) ***REMOVED***
                    report(node);
                ***REMOVED***
            ***REMOVED***

        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
