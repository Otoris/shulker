/**
 * @fileoverview Rule to flag use of a leading/trailing decimal point in a numeric literal
 * @author James Allardice
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow leading or trailing decimal points in numeric literals",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-floating-decimal"
        ***REMOVED***,

        schema: [],
        fixable: "code",
        messages: ***REMOVED***
            leading: "A leading decimal point can be confused with a dot.",
            trailing: "A trailing decimal point can be confused with a dot."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode();

        return ***REMOVED***
            Literal(node) ***REMOVED***

                if (typeof node.value === "number") ***REMOVED***
                    if (node.raw.startsWith(".")) ***REMOVED***
                        context.report(***REMOVED***
                            node,
                            messageId: "leading",
                            fix(fixer) ***REMOVED***
                                const tokenBefore = sourceCode.getTokenBefore(node);
                                const needsSpaceBefore = tokenBefore &&
                                    tokenBefore.range[1] === node.range[0] &&
                                    !astUtils.canTokensBeAdjacent(tokenBefore, `0$***REMOVED***node.raw***REMOVED***`);

                                return fixer.insertTextBefore(node, needsSpaceBefore ? " 0" : "0");
                            ***REMOVED***
                        ***REMOVED***);
                    ***REMOVED***
                    if (node.raw.indexOf(".") === node.raw.length - 1) ***REMOVED***
                        context.report(***REMOVED***
                            node,
                            messageId: "trailing",
                            fix: fixer => fixer.insertTextAfter(node, "0")
                        ***REMOVED***);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
