/**
 * @fileoverview Rule to flag statements that use magic numbers (adapted from https://github.com/danielstjules/buddy.js)
 * @author Vincent Lemeunier
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow magic numbers",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-magic-numbers"
        ***REMOVED***,

        schema: [***REMOVED***
            type: "object",
            properties: ***REMOVED***
                detectObjects: ***REMOVED***
                    type: "boolean",
                    default: false
                ***REMOVED***,
                enforceConst: ***REMOVED***
                    type: "boolean",
                    default: false
                ***REMOVED***,
                ignore: ***REMOVED***
                    type: "array",
                    items: ***REMOVED***
                        type: "number"
                    ***REMOVED***,
                    uniqueItems: true
                ***REMOVED***,
                ignoreArrayIndexes: ***REMOVED***
                    type: "boolean",
                    default: false
                ***REMOVED***
            ***REMOVED***,
            additionalProperties: false
        ***REMOVED***],

        messages: ***REMOVED***
            useConst: "Number constants declarations must use 'const'.",
            noMagic: "No magic number: ***REMOVED******REMOVED***raw***REMOVED******REMOVED***."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const config = context.options[0] || ***REMOVED******REMOVED***,
            detectObjects = !!config.detectObjects,
            enforceConst = !!config.enforceConst,
            ignore = config.ignore || [],
            ignoreArrayIndexes = !!config.ignoreArrayIndexes;

        /**
         * Returns whether the node is number literal
         * @param ***REMOVED***Node***REMOVED*** node - the node literal being evaluated
         * @returns ***REMOVED***boolean***REMOVED*** true if the node is a number literal
         */
        function isNumber(node) ***REMOVED***
            return typeof node.value === "number";
        ***REMOVED***

        /**
         * Returns whether the number should be ignored
         * @param ***REMOVED***number***REMOVED*** num - the number
         * @returns ***REMOVED***boolean***REMOVED*** true if the number should be ignored
         */
        function shouldIgnoreNumber(num) ***REMOVED***
            return ignore.indexOf(num) !== -1;
        ***REMOVED***

        /**
         * Returns whether the number should be ignored when used as a radix within parseInt() or Number.parseInt()
         * @param ***REMOVED***ASTNode***REMOVED*** parent - the non-"UnaryExpression" parent
         * @param ***REMOVED***ASTNode***REMOVED*** node - the node literal being evaluated
         * @returns ***REMOVED***boolean***REMOVED*** true if the number should be ignored
         */
        function shouldIgnoreParseInt(parent, node) ***REMOVED***
            return parent.type === "CallExpression" && node === parent.arguments[1] &&
                (parent.callee.name === "parseInt" ||
                parent.callee.type === "MemberExpression" &&
                parent.callee.object.name === "Number" &&
                parent.callee.property.name === "parseInt");
        ***REMOVED***

        /**
         * Returns whether the number should be ignored when used to define a JSX prop
         * @param ***REMOVED***ASTNode***REMOVED*** parent - the non-"UnaryExpression" parent
         * @returns ***REMOVED***boolean***REMOVED*** true if the number should be ignored
         */
        function shouldIgnoreJSXNumbers(parent) ***REMOVED***
            return parent.type.indexOf("JSX") === 0;
        ***REMOVED***

        /**
         * Returns whether the number should be ignored when used as an array index with enabled 'ignoreArrayIndexes' option.
         * @param ***REMOVED***ASTNode***REMOVED*** parent - the non-"UnaryExpression" parent.
         * @returns ***REMOVED***boolean***REMOVED*** true if the number should be ignored
         */
        function shouldIgnoreArrayIndexes(parent) ***REMOVED***
            return parent.type === "MemberExpression" && ignoreArrayIndexes;
        ***REMOVED***

        return ***REMOVED***
            Literal(node) ***REMOVED***
                const okTypes = detectObjects ? [] : ["ObjectExpression", "Property", "AssignmentExpression"];

                if (!isNumber(node)) ***REMOVED***
                    return;
                ***REMOVED***

                let fullNumberNode;
                let parent;
                let value;
                let raw;

                // For negative magic numbers: update the value and parent node
                if (node.parent.type === "UnaryExpression" && node.parent.operator === "-") ***REMOVED***
                    fullNumberNode = node.parent;
                    parent = fullNumberNode.parent;
                    value = -node.value;
                    raw = `-$***REMOVED***node.raw***REMOVED***`;
                ***REMOVED*** else ***REMOVED***
                    fullNumberNode = node;
                    parent = node.parent;
                    value = node.value;
                    raw = node.raw;
                ***REMOVED***

                if (shouldIgnoreNumber(value) ||
                    shouldIgnoreParseInt(parent, fullNumberNode) ||
                    shouldIgnoreArrayIndexes(parent) ||
                    shouldIgnoreJSXNumbers(parent)) ***REMOVED***
                    return;
                ***REMOVED***

                if (parent.type === "VariableDeclarator") ***REMOVED***
                    if (enforceConst && parent.parent.kind !== "const") ***REMOVED***
                        context.report(***REMOVED***
                            node: fullNumberNode,
                            messageId: "useConst"
                        ***REMOVED***);
                    ***REMOVED***
                ***REMOVED*** else if (
                    okTypes.indexOf(parent.type) === -1 ||
                    (parent.type === "AssignmentExpression" && parent.left.type === "Identifier")
                ) ***REMOVED***
                    context.report(***REMOVED***
                        node: fullNumberNode,
                        messageId: "noMagic",
                        data: ***REMOVED***
                            raw
                        ***REMOVED***
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
