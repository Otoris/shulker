/**
 * @fileoverview Rule to flag use of parseInt without a radix argument
 * @author James Allardice
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

const MODE_ALWAYS = "always",
    MODE_AS_NEEDED = "as-needed";

/**
 * Checks whether a given variable is shadowed or not.
 *
 * @param ***REMOVED***eslint-scope.Variable***REMOVED*** variable - A variable to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the variable is shadowed.
 */
function isShadowed(variable) ***REMOVED***
    return variable.defs.length >= 1;
***REMOVED***

/**
 * Checks whether a given node is a MemberExpression of `parseInt` method or not.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** node - A node to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the node is a MemberExpression of `parseInt`
 *      method.
 */
function isParseIntMethod(node) ***REMOVED***
    return (
        node.type === "MemberExpression" &&
        !node.computed &&
        node.property.type === "Identifier" &&
        node.property.name === "parseInt"
    );
***REMOVED***

/**
 * Checks whether a given node is a valid value of radix or not.
 *
 * The following values are invalid.
 *
 * - A literal except numbers.
 * - undefined.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** radix - A node of radix to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the node is valid.
 */
function isValidRadix(radix) ***REMOVED***
    return !(
        (radix.type === "Literal" && typeof radix.value !== "number") ||
        (radix.type === "Identifier" && radix.name === "undefined")
    );
***REMOVED***

/**
 * Checks whether a given node is a default value of radix or not.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** radix - A node of radix to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the node is the literal node of `10`.
 */
function isDefaultRadix(radix) ***REMOVED***
    return radix.type === "Literal" && radix.value === 10;
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "enforce the consistent use of the radix argument when using `parseInt()`",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/radix"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                enum: ["always", "as-needed"]
            ***REMOVED***
        ]
    ***REMOVED***,

    create(context) ***REMOVED***
        const mode = context.options[0] || MODE_ALWAYS;

        /**
         * Checks the arguments of a given CallExpression node and reports it if it
         * offends this rule.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A CallExpression node to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkArguments(node) ***REMOVED***
            const args = node.arguments;

            switch (args.length) ***REMOVED***
                case 0:
                    context.report(***REMOVED***
                        node,
                        message: "Missing parameters."
                    ***REMOVED***);
                    break;

                case 1:
                    if (mode === MODE_ALWAYS) ***REMOVED***
                        context.report(***REMOVED***
                            node,
                            message: "Missing radix parameter."
                        ***REMOVED***);
                    ***REMOVED***
                    break;

                default:
                    if (mode === MODE_AS_NEEDED && isDefaultRadix(args[1])) ***REMOVED***
                        context.report(***REMOVED***
                            node,
                            message: "Redundant radix parameter."
                        ***REMOVED***);
                    ***REMOVED*** else if (!isValidRadix(args[1])) ***REMOVED***
                        context.report(***REMOVED***
                            node,
                            message: "Invalid radix parameter."
                        ***REMOVED***);
                    ***REMOVED***
                    break;
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            "Program:exit"() ***REMOVED***
                const scope = context.getScope();
                let variable;

                // Check `parseInt()`
                variable = astUtils.getVariableByName(scope, "parseInt");
                if (!isShadowed(variable)) ***REMOVED***
                    variable.references.forEach(reference => ***REMOVED***
                        const node = reference.identifier;

                        if (astUtils.isCallee(node)) ***REMOVED***
                            checkArguments(node.parent);
                        ***REMOVED***
                    ***REMOVED***);
                ***REMOVED***

                // Check `Number.parseInt()`
                variable = astUtils.getVariableByName(scope, "Number");
                if (!isShadowed(variable)) ***REMOVED***
                    variable.references.forEach(reference => ***REMOVED***
                        const node = reference.identifier.parent;

                        if (isParseIntMethod(node) && astUtils.isCallee(node)) ***REMOVED***
                            checkArguments(node.parent);
                        ***REMOVED***
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
