/**
 * @fileoverview Disallow reassignment of function parameters.
 * @author Nat Burns
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

const stopNodePattern = /(?:Statement|Declaration|Function(?:Expression)?|Program)$/u;

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow reassigning `function` parameters",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-param-reassign"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                oneOf: [
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            props: ***REMOVED***
                                enum: [false]
                            ***REMOVED***
                        ***REMOVED***,
                        additionalProperties: false
                    ***REMOVED***,
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            props: ***REMOVED***
                                enum: [true]
                            ***REMOVED***,
                            ignorePropertyModificationsFor: ***REMOVED***
                                type: "array",
                                items: ***REMOVED***
                                    type: "string"
                                ***REMOVED***,
                                uniqueItems: true
                            ***REMOVED***
                        ***REMOVED***,
                        additionalProperties: false
                    ***REMOVED***
                ]
            ***REMOVED***
        ]
    ***REMOVED***,

    create(context) ***REMOVED***
        const props = context.options[0] && context.options[0].props;
        const ignoredPropertyAssignmentsFor = context.options[0] && context.options[0].ignorePropertyModificationsFor || [];

        /**
         * Checks whether or not the reference modifies properties of its variable.
         * @param ***REMOVED***Reference***REMOVED*** reference - A reference to check.
         * @returns ***REMOVED***boolean***REMOVED*** Whether or not the reference modifies properties of its variable.
         */
        function isModifyingProp(reference) ***REMOVED***
            let node = reference.identifier;
            let parent = node.parent;

            while (parent && (!stopNodePattern.test(parent.type) ||
                    parent.type === "ForInStatement" || parent.type === "ForOfStatement")) ***REMOVED***
                switch (parent.type) ***REMOVED***

                    // e.g. foo.a = 0;
                    case "AssignmentExpression":
                        return parent.left === node;

                    // e.g. ++foo.a;
                    case "UpdateExpression":
                        return true;

                    // e.g. delete foo.a;
                    case "UnaryExpression":
                        if (parent.operator === "delete") ***REMOVED***
                            return true;
                        ***REMOVED***
                        break;

                    // e.g. for (foo.a in b) ***REMOVED******REMOVED***
                    case "ForInStatement":
                    case "ForOfStatement":
                        if (parent.left === node) ***REMOVED***
                            return true;
                        ***REMOVED***

                        // this is a stop node for parent.right and parent.body
                        return false;

                    // EXCLUDES: e.g. cache.get(foo.a).b = 0;
                    case "CallExpression":
                        if (parent.callee !== node) ***REMOVED***
                            return false;
                        ***REMOVED***
                        break;

                    // EXCLUDES: e.g. cache[foo.a] = 0;
                    case "MemberExpression":
                        if (parent.property === node) ***REMOVED***
                            return false;
                        ***REMOVED***
                        break;

                    // EXCLUDES: e.g. (***REMOVED*** [foo]: a ***REMOVED***) = bar;
                    case "Property":
                        if (parent.key === node) ***REMOVED***
                            return false;
                        ***REMOVED***

                        break;

                    // EXCLUDES: e.g. (foo ? a : b).c = bar;
                    case "ConditionalExpression":
                        if (parent.test === node) ***REMOVED***
                            return false;
                        ***REMOVED***

                        break;

                    // no default
                ***REMOVED***

                node = parent;
                parent = node.parent;
            ***REMOVED***

            return false;
        ***REMOVED***

        /**
         * Reports a reference if is non initializer and writable.
         * @param ***REMOVED***Reference***REMOVED*** reference - A reference to check.
         * @param ***REMOVED***int***REMOVED*** index - The index of the reference in the references.
         * @param ***REMOVED***Reference[]***REMOVED*** references - The array that the reference belongs to.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkReference(reference, index, references) ***REMOVED***
            const identifier = reference.identifier;

            if (identifier &&
                !reference.init &&

                /*
                 * Destructuring assignments can have multiple default value,
                 * so possibly there are multiple writeable references for the same identifier.
                 */
                (index === 0 || references[index - 1].identifier !== identifier)
            ) ***REMOVED***
                if (reference.isWrite()) ***REMOVED***
                    context.report(***REMOVED*** node: identifier, message: "Assignment to function parameter '***REMOVED******REMOVED***name***REMOVED******REMOVED***'.", data: ***REMOVED*** name: identifier.name ***REMOVED*** ***REMOVED***);
                ***REMOVED*** else if (props && isModifyingProp(reference) && ignoredPropertyAssignmentsFor.indexOf(identifier.name) === -1) ***REMOVED***
                    context.report(***REMOVED*** node: identifier, message: "Assignment to property of function parameter '***REMOVED******REMOVED***name***REMOVED******REMOVED***'.", data: ***REMOVED*** name: identifier.name ***REMOVED*** ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        /**
         * Finds and reports references that are non initializer and writable.
         * @param ***REMOVED***Variable***REMOVED*** variable - A variable to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkVariable(variable) ***REMOVED***
            if (variable.defs[0].type === "Parameter") ***REMOVED***
                variable.references.forEach(checkReference);
            ***REMOVED***
        ***REMOVED***

        /**
         * Checks parameters of a given function node.
         * @param ***REMOVED***ASTNode***REMOVED*** node - A function node to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkForFunction(node) ***REMOVED***
            context.getDeclaredVariables(node).forEach(checkVariable);
        ***REMOVED***

        return ***REMOVED***

            // `:exit` is needed for the `node.parent` property of identifier nodes.
            "FunctionDeclaration:exit": checkForFunction,
            "FunctionExpression:exit": checkForFunction,
            "ArrowFunctionExpression:exit": checkForFunction
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
