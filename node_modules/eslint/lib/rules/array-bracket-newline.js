/**
 * @fileoverview Rule to enforce linebreaks after open and before close array brackets
 * @author Jan Peer St√∂cklmair <https://github.com/JPeer264>
 */

"use strict";

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "layout",

        docs: ***REMOVED***
            description: "enforce linebreaks after opening and before closing array brackets",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/array-bracket-newline"
        ***REMOVED***,

        fixable: "whitespace",

        schema: [
            ***REMOVED***
                oneOf: [
                    ***REMOVED***
                        enum: ["always", "never", "consistent"]
                    ***REMOVED***,
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            multiline: ***REMOVED***
                                type: "boolean"
                            ***REMOVED***,
                            minItems: ***REMOVED***
                                type: ["integer", "null"],
                                minimum: 0
                            ***REMOVED***
                        ***REMOVED***,
                        additionalProperties: false
                    ***REMOVED***
                ]
            ***REMOVED***
        ],

        messages: ***REMOVED***
            unexpectedOpeningLinebreak: "There should be no linebreak after '['.",
            unexpectedClosingLinebreak: "There should be no linebreak before ']'.",
            missingOpeningLinebreak: "A linebreak is required after '['.",
            missingClosingLinebreak: "A linebreak is required before ']'."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode();


        //----------------------------------------------------------------------
        // Helpers
        //----------------------------------------------------------------------

        /**
         * Normalizes a given option value.
         *
         * @param ***REMOVED***string|Object|undefined***REMOVED*** option - An option value to parse.
         * @returns ***REMOVED******REMOVED***multiline: boolean, minItems: number***REMOVED******REMOVED*** Normalized option object.
         */
        function normalizeOptionValue(option) ***REMOVED***
            let consistent = false;
            let multiline = false;
            let minItems = 0;

            if (option) ***REMOVED***
                if (option === "consistent") ***REMOVED***
                    consistent = true;
                    minItems = Number.POSITIVE_INFINITY;
                ***REMOVED*** else if (option === "always" || option.minItems === 0) ***REMOVED***
                    minItems = 0;
                ***REMOVED*** else if (option === "never") ***REMOVED***
                    minItems = Number.POSITIVE_INFINITY;
                ***REMOVED*** else ***REMOVED***
                    multiline = Boolean(option.multiline);
                    minItems = option.minItems || Number.POSITIVE_INFINITY;
                ***REMOVED***
            ***REMOVED*** else ***REMOVED***
                consistent = false;
                multiline = true;
                minItems = Number.POSITIVE_INFINITY;
            ***REMOVED***

            return ***REMOVED*** consistent, multiline, minItems ***REMOVED***;
        ***REMOVED***

        /**
         * Normalizes a given option value.
         *
         * @param ***REMOVED***string|Object|undefined***REMOVED*** options - An option value to parse.
         * @returns ***REMOVED******REMOVED***ArrayExpression: ***REMOVED***multiline: boolean, minItems: number***REMOVED***, ArrayPattern: ***REMOVED***multiline: boolean, minItems: number***REMOVED******REMOVED******REMOVED*** Normalized option object.
         */
        function normalizeOptions(options) ***REMOVED***
            const value = normalizeOptionValue(options);

            return ***REMOVED*** ArrayExpression: value, ArrayPattern: value ***REMOVED***;
        ***REMOVED***

        /**
         * Reports that there shouldn't be a linebreak after the first token
         * @param ***REMOVED***ASTNode***REMOVED*** node - The node to report in the event of an error.
         * @param ***REMOVED***Token***REMOVED*** token - The token to use for the report.
         * @returns ***REMOVED***void***REMOVED***
         */
        function reportNoBeginningLinebreak(node, token) ***REMOVED***
            context.report(***REMOVED***
                node,
                loc: token.loc,
                messageId: "unexpectedOpeningLinebreak",
                fix(fixer) ***REMOVED***
                    const nextToken = sourceCode.getTokenAfter(token, ***REMOVED*** includeComments: true ***REMOVED***);

                    if (astUtils.isCommentToken(nextToken)) ***REMOVED***
                        return null;
                    ***REMOVED***

                    return fixer.removeRange([token.range[1], nextToken.range[0]]);
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Reports that there shouldn't be a linebreak before the last token
         * @param ***REMOVED***ASTNode***REMOVED*** node - The node to report in the event of an error.
         * @param ***REMOVED***Token***REMOVED*** token - The token to use for the report.
         * @returns ***REMOVED***void***REMOVED***
         */
        function reportNoEndingLinebreak(node, token) ***REMOVED***
            context.report(***REMOVED***
                node,
                loc: token.loc,
                messageId: "unexpectedClosingLinebreak",
                fix(fixer) ***REMOVED***
                    const previousToken = sourceCode.getTokenBefore(token, ***REMOVED*** includeComments: true ***REMOVED***);

                    if (astUtils.isCommentToken(previousToken)) ***REMOVED***
                        return null;
                    ***REMOVED***

                    return fixer.removeRange([previousToken.range[1], token.range[0]]);
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Reports that there should be a linebreak after the first token
         * @param ***REMOVED***ASTNode***REMOVED*** node - The node to report in the event of an error.
         * @param ***REMOVED***Token***REMOVED*** token - The token to use for the report.
         * @returns ***REMOVED***void***REMOVED***
         */
        function reportRequiredBeginningLinebreak(node, token) ***REMOVED***
            context.report(***REMOVED***
                node,
                loc: token.loc,
                messageId: "missingOpeningLinebreak",
                fix(fixer) ***REMOVED***
                    return fixer.insertTextAfter(token, "\n");
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Reports that there should be a linebreak before the last token
         * @param ***REMOVED***ASTNode***REMOVED*** node - The node to report in the event of an error.
         * @param ***REMOVED***Token***REMOVED*** token - The token to use for the report.
         * @returns ***REMOVED***void***REMOVED***
         */
        function reportRequiredEndingLinebreak(node, token) ***REMOVED***
            context.report(***REMOVED***
                node,
                loc: token.loc,
                messageId: "missingClosingLinebreak",
                fix(fixer) ***REMOVED***
                    return fixer.insertTextBefore(token, "\n");
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Reports a given node if it violated this rule.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to check. This is an ArrayExpression node or an ArrayPattern node.
         * @returns ***REMOVED***void***REMOVED***
         */
        function check(node) ***REMOVED***
            const elements = node.elements;
            const normalizedOptions = normalizeOptions(context.options[0]);
            const options = normalizedOptions[node.type];
            const openBracket = sourceCode.getFirstToken(node);
            const closeBracket = sourceCode.getLastToken(node);
            const firstIncComment = sourceCode.getTokenAfter(openBracket, ***REMOVED*** includeComments: true ***REMOVED***);
            const lastIncComment = sourceCode.getTokenBefore(closeBracket, ***REMOVED*** includeComments: true ***REMOVED***);
            const first = sourceCode.getTokenAfter(openBracket);
            const last = sourceCode.getTokenBefore(closeBracket);

            const needsLinebreaks = (
                elements.length >= options.minItems ||
                (
                    options.multiline &&
                    elements.length > 0 &&
                    firstIncComment.loc.start.line !== lastIncComment.loc.end.line
                ) ||
                (
                    elements.length === 0 &&
                    firstIncComment.type === "Block" &&
                    firstIncComment.loc.start.line !== lastIncComment.loc.end.line &&
                    firstIncComment === lastIncComment
                ) ||
                (
                    options.consistent &&
                    firstIncComment.loc.start.line !== openBracket.loc.end.line
                )
            );

            /*
             * Use tokens or comments to check multiline or not.
             * But use only tokens to check whether linebreaks are needed.
             * This allows:
             *     var arr = [ // eslint-disable-line foo
             *         'a'
             *     ]
             */

            if (needsLinebreaks) ***REMOVED***
                if (astUtils.isTokenOnSameLine(openBracket, first)) ***REMOVED***
                    reportRequiredBeginningLinebreak(node, openBracket);
                ***REMOVED***
                if (astUtils.isTokenOnSameLine(last, closeBracket)) ***REMOVED***
                    reportRequiredEndingLinebreak(node, closeBracket);
                ***REMOVED***
            ***REMOVED*** else ***REMOVED***
                if (!astUtils.isTokenOnSameLine(openBracket, first)) ***REMOVED***
                    reportNoBeginningLinebreak(node, openBracket);
                ***REMOVED***
                if (!astUtils.isTokenOnSameLine(last, closeBracket)) ***REMOVED***
                    reportNoEndingLinebreak(node, closeBracket);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------

        return ***REMOVED***
            ArrayPattern: check,
            ArrayExpression: check
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
