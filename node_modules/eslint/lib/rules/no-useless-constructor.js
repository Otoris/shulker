/**
 * @fileoverview Rule to flag the use of redundant constructors in classes.
 * @author Alberto Rodr√≠guez
 */
"use strict";

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Checks whether a given array of statements is a single call of `super`.
 *
 * @param ***REMOVED***ASTNode[]***REMOVED*** body - An array of statements to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the body is a single call of `super`.
 */
function isSingleSuperCall(body) ***REMOVED***
    return (
        body.length === 1 &&
        body[0].type === "ExpressionStatement" &&
        body[0].expression.type === "CallExpression" &&
        body[0].expression.callee.type === "Super"
    );
***REMOVED***

/**
 * Checks whether a given node is a pattern which doesn't have any side effects.
 * Default parameters and Destructuring parameters can have side effects.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** node - A pattern node.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the node doesn't have any side effects.
 */
function isSimple(node) ***REMOVED***
    return node.type === "Identifier" || node.type === "RestElement";
***REMOVED***

/**
 * Checks whether a given array of expressions is `...arguments` or not.
 * `super(...arguments)` passes all arguments through.
 *
 * @param ***REMOVED***ASTNode[]***REMOVED*** superArgs - An array of expressions to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the superArgs is `...arguments`.
 */
function isSpreadArguments(superArgs) ***REMOVED***
    return (
        superArgs.length === 1 &&
        superArgs[0].type === "SpreadElement" &&
        superArgs[0].argument.type === "Identifier" &&
        superArgs[0].argument.name === "arguments"
    );
***REMOVED***

/**
 * Checks whether given 2 nodes are identifiers which have the same name or not.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** ctorParam - A node to check.
 * @param ***REMOVED***ASTNode***REMOVED*** superArg - A node to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the nodes are identifiers which have the same
 *      name.
 */
function isValidIdentifierPair(ctorParam, superArg) ***REMOVED***
    return (
        ctorParam.type === "Identifier" &&
        superArg.type === "Identifier" &&
        ctorParam.name === superArg.name
    );
***REMOVED***

/**
 * Checks whether given 2 nodes are a rest/spread pair which has the same values.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** ctorParam - A node to check.
 * @param ***REMOVED***ASTNode***REMOVED*** superArg - A node to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the nodes are a rest/spread pair which has the
 *      same values.
 */
function isValidRestSpreadPair(ctorParam, superArg) ***REMOVED***
    return (
        ctorParam.type === "RestElement" &&
        superArg.type === "SpreadElement" &&
        isValidIdentifierPair(ctorParam.argument, superArg.argument)
    );
***REMOVED***

/**
 * Checks whether given 2 nodes have the same value or not.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** ctorParam - A node to check.
 * @param ***REMOVED***ASTNode***REMOVED*** superArg - A node to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the nodes have the same value or not.
 */
function isValidPair(ctorParam, superArg) ***REMOVED***
    return (
        isValidIdentifierPair(ctorParam, superArg) ||
        isValidRestSpreadPair(ctorParam, superArg)
    );
***REMOVED***

/**
 * Checks whether the parameters of a constructor and the arguments of `super()`
 * have the same values or not.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** ctorParams - The parameters of a constructor to check.
 * @param ***REMOVED***ASTNode***REMOVED*** superArgs - The arguments of `super()` to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if those have the same values.
 */
function isPassingThrough(ctorParams, superArgs) ***REMOVED***
    if (ctorParams.length !== superArgs.length) ***REMOVED***
        return false;
    ***REMOVED***

    for (let i = 0; i < ctorParams.length; ++i) ***REMOVED***
        if (!isValidPair(ctorParams[i], superArgs[i])) ***REMOVED***
            return false;
        ***REMOVED***
    ***REMOVED***

    return true;
***REMOVED***

/**
 * Checks whether the constructor body is a redundant super call.
 *
 * @param ***REMOVED***Array***REMOVED*** body - constructor body content.
 * @param ***REMOVED***Array***REMOVED*** ctorParams - The params to check against super call.
 * @returns ***REMOVED***boolean***REMOVED*** true if the construtor body is redundant
 */
function isRedundantSuperCall(body, ctorParams) ***REMOVED***
    return (
        isSingleSuperCall(body) &&
        ctorParams.every(isSimple) &&
        (
            isSpreadArguments(body[0].expression.arguments) ||
            isPassingThrough(ctorParams, body[0].expression.arguments)
        )
    );
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow unnecessary constructors",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-useless-constructor"
        ***REMOVED***,

        schema: []
    ***REMOVED***,

    create(context) ***REMOVED***

        /**
         * Checks whether a node is a redundant constructor
         * @param ***REMOVED***ASTNode***REMOVED*** node - node to check
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkForConstructor(node) ***REMOVED***
            if (node.kind !== "constructor") ***REMOVED***
                return;
            ***REMOVED***

            const body = node.value.body.body;
            const ctorParams = node.value.params;
            const superClass = node.parent.parent.superClass;

            if (superClass ? isRedundantSuperCall(body, ctorParams) : (body.length === 0)) ***REMOVED***
                context.report(***REMOVED***
                    node,
                    message: "Useless constructor."
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            MethodDefinition: checkForConstructor
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
