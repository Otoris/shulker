/**
 * @fileoverview Rule to disallow certain object properties
 * @author Will Klein & Eli White
 */

"use strict";

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow certain properties on certain objects",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-restricted-properties"
        ***REMOVED***,

        schema: ***REMOVED***
            type: "array",
            items: ***REMOVED***
                anyOf: [ // `object` and `property` are both optional, but at least one of them must be provided.
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            object: ***REMOVED***
                                type: "string"
                            ***REMOVED***,
                            property: ***REMOVED***
                                type: "string"
                            ***REMOVED***,
                            message: ***REMOVED***
                                type: "string"
                            ***REMOVED***
                        ***REMOVED***,
                        additionalProperties: false,
                        required: ["object"]
                    ***REMOVED***,
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            object: ***REMOVED***
                                type: "string"
                            ***REMOVED***,
                            property: ***REMOVED***
                                type: "string"
                            ***REMOVED***,
                            message: ***REMOVED***
                                type: "string"
                            ***REMOVED***
                        ***REMOVED***,
                        additionalProperties: false,
                        required: ["property"]
                    ***REMOVED***
                ]
            ***REMOVED***,
            uniqueItems: true
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const restrictedCalls = context.options;

        if (restrictedCalls.length === 0) ***REMOVED***
            return ***REMOVED******REMOVED***;
        ***REMOVED***

        const restrictedProperties = new Map();
        const globallyRestrictedObjects = new Map();
        const globallyRestrictedProperties = new Map();

        restrictedCalls.forEach(option => ***REMOVED***
            const objectName = option.object;
            const propertyName = option.property;

            if (typeof objectName === "undefined") ***REMOVED***
                globallyRestrictedProperties.set(propertyName, ***REMOVED*** message: option.message ***REMOVED***);
            ***REMOVED*** else if (typeof propertyName === "undefined") ***REMOVED***
                globallyRestrictedObjects.set(objectName, ***REMOVED*** message: option.message ***REMOVED***);
            ***REMOVED*** else ***REMOVED***
                if (!restrictedProperties.has(objectName)) ***REMOVED***
                    restrictedProperties.set(objectName, new Map());
                ***REMOVED***

                restrictedProperties.get(objectName).set(propertyName, ***REMOVED***
                    message: option.message
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***);

        /**
         * Checks to see whether a property access is restricted, and reports it if so.
         * @param ***REMOVED***ASTNode***REMOVED*** node The node to report
         * @param ***REMOVED***string***REMOVED*** objectName The name of the object
         * @param ***REMOVED***string***REMOVED*** propertyName The name of the property
         * @returns ***REMOVED***undefined***REMOVED***
         */
        function checkPropertyAccess(node, objectName, propertyName) ***REMOVED***
            if (propertyName === null) ***REMOVED***
                return;
            ***REMOVED***
            const matchedObject = restrictedProperties.get(objectName);
            const matchedObjectProperty = matchedObject ? matchedObject.get(propertyName) : globallyRestrictedObjects.get(objectName);
            const globalMatchedProperty = globallyRestrictedProperties.get(propertyName);

            if (matchedObjectProperty) ***REMOVED***
                const message = matchedObjectProperty.message ? ` $***REMOVED***matchedObjectProperty.message***REMOVED***` : "";

                context.report(***REMOVED***
                    node,
                    // eslint-disable-next-line eslint-plugin/report-message-format
                    message: "'***REMOVED******REMOVED***objectName***REMOVED******REMOVED***.***REMOVED******REMOVED***propertyName***REMOVED******REMOVED***' is restricted from being used.***REMOVED******REMOVED***message***REMOVED******REMOVED***",
                    data: ***REMOVED***
                        objectName,
                        propertyName,
                        message
                    ***REMOVED***
                ***REMOVED***);
            ***REMOVED*** else if (globalMatchedProperty) ***REMOVED***
                const message = globalMatchedProperty.message ? ` $***REMOVED***globalMatchedProperty.message***REMOVED***` : "";

                context.report(***REMOVED***
                    node,
                    // eslint-disable-next-line eslint-plugin/report-message-format
                    message: "'***REMOVED******REMOVED***propertyName***REMOVED******REMOVED***' is restricted from being used.***REMOVED******REMOVED***message***REMOVED******REMOVED***",
                    data: ***REMOVED***
                        propertyName,
                        message
                    ***REMOVED***
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        /**
         * Checks property accesses in a destructuring assignment expression, e.g. `var foo; (***REMOVED***foo***REMOVED*** = bar);`
         * @param ***REMOVED***ASTNode***REMOVED*** node An AssignmentExpression or AssignmentPattern node
         * @returns ***REMOVED***undefined***REMOVED***
         */
        function checkDestructuringAssignment(node) ***REMOVED***
            if (node.right.type === "Identifier") ***REMOVED***
                const objectName = node.right.name;

                if (node.left.type === "ObjectPattern") ***REMOVED***
                    node.left.properties.forEach(property => ***REMOVED***
                        checkPropertyAccess(node.left, objectName, astUtils.getStaticPropertyName(property));
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            MemberExpression(node) ***REMOVED***
                checkPropertyAccess(node, node.object && node.object.name, astUtils.getStaticPropertyName(node));
            ***REMOVED***,
            VariableDeclarator(node) ***REMOVED***
                if (node.init && node.init.type === "Identifier") ***REMOVED***
                    const objectName = node.init.name;

                    if (node.id.type === "ObjectPattern") ***REMOVED***
                        node.id.properties.forEach(property => ***REMOVED***
                            checkPropertyAccess(node.id, objectName, astUtils.getStaticPropertyName(property));
                        ***REMOVED***);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***,
            AssignmentExpression: checkDestructuringAssignment,
            AssignmentPattern: checkDestructuringAssignment
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
