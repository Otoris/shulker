/**
 * @fileoverview Rule to enforce requiring named capture groups in regular expression.
 * @author Pig Fang <https://github.com/g-plane>
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ***REMOVED***
    CALL,
    CONSTRUCT,
    ReferenceTracker,
    getStringIfConstant
***REMOVED*** = require("eslint-utils");
const regexpp = require("regexpp");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

const parser = new regexpp.RegExpParser();

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "enforce using named capture group in regular expression",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/prefer-named-capture-group"
        ***REMOVED***,

        schema: [],

        messages: ***REMOVED***
            required: "Capture group '***REMOVED******REMOVED***group***REMOVED******REMOVED***' should be converted to a named or non-capturing group."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***

        /**
         * Function to check regular expression.
         *
         * @param ***REMOVED***string***REMOVED*** regex The regular expression to be check.
         * @param ***REMOVED***ASTNode***REMOVED*** node AST node which contains regular expression.
         * @param ***REMOVED***boolean***REMOVED*** uFlag Flag indicates whether unicode mode is enabled or not.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkRegex(regex, node, uFlag) ***REMOVED***
            let ast;

            try ***REMOVED***
                ast = parser.parsePattern(regex, 0, regex.length, uFlag);
            ***REMOVED*** catch (_) ***REMOVED***

                // ignore regex syntax errors
                return;
            ***REMOVED***

            regexpp.visitRegExpAST(ast, ***REMOVED***
                onCapturingGroupEnter(group) ***REMOVED***
                    if (!group.name) ***REMOVED***
                        const locNode = node.type === "Literal" ? node : node.arguments[0];

                        context.report(***REMOVED***
                            node,
                            messageId: "required",
                            loc: ***REMOVED***
                                start: ***REMOVED***
                                    line: locNode.loc.start.line,
                                    column: locNode.loc.start.column + group.start + 1
                                ***REMOVED***,
                                end: ***REMOVED***
                                    line: locNode.loc.start.line,
                                    column: locNode.loc.start.column + group.end + 1
                                ***REMOVED***
                            ***REMOVED***,
                            data: ***REMOVED***
                                group: group.raw
                            ***REMOVED***
                        ***REMOVED***);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        return ***REMOVED***
            Literal(node) ***REMOVED***
                if (node.regex) ***REMOVED***
                    checkRegex(node.regex.pattern, node, node.regex.flags.includes("u"));
                ***REMOVED***
            ***REMOVED***,
            Program() ***REMOVED***
                const scope = context.getScope();
                const tracker = new ReferenceTracker(scope);
                const traceMap = ***REMOVED***
                    RegExp: ***REMOVED***
                        [CALL]: true,
                        [CONSTRUCT]: true
                    ***REMOVED***
                ***REMOVED***;

                for (const ***REMOVED*** node ***REMOVED*** of tracker.iterateGlobalReferences(traceMap)) ***REMOVED***
                    const regex = getStringIfConstant(node.arguments[0]);
                    const flags = getStringIfConstant(node.arguments[1]);

                    if (regex) ***REMOVED***
                        checkRegex(regex, node, flags && flags.includes("u"));
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
