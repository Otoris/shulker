/**
 * @fileoverview A rule to disallow modifying variables that are declared using `const`
 * @author Toru Nagashima
 */

"use strict";

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "problem",

        docs: ***REMOVED***
            description: "disallow reassigning `const` variables",
            category: "ECMAScript 6",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-const-assign"
        ***REMOVED***,

        schema: [],

        messages: ***REMOVED***
            const: "'***REMOVED******REMOVED***name***REMOVED******REMOVED***' is constant."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***

        /**
         * Finds and reports references that are non initializer and writable.
         * @param ***REMOVED***Variable***REMOVED*** variable - A variable to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkVariable(variable) ***REMOVED***
            astUtils.getModifyingReferences(variable.references).forEach(reference => ***REMOVED***
                context.report(***REMOVED*** node: reference.identifier, messageId: "const", data: ***REMOVED*** name: reference.identifier.name ***REMOVED*** ***REMOVED***);
            ***REMOVED***);
        ***REMOVED***

        return ***REMOVED***
            VariableDeclaration(node) ***REMOVED***
                if (node.kind === "const") ***REMOVED***
                    context.getDeclaredVariables(node).forEach(checkVariable);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
