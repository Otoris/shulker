/**
 * @fileoverview A rule to suggest using of the spread operator instead of `.apply()`.
 * @author Toru Nagashima
 */

"use strict";

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Checks whether or not a node is a `.apply()` for variadic.
 * @param ***REMOVED***ASTNode***REMOVED*** node - A CallExpression node to check.
 * @returns ***REMOVED***boolean***REMOVED*** Whether or not the node is a `.apply()` for variadic.
 */
function isVariadicApplyCalling(node) ***REMOVED***
    return (
        node.callee.type === "MemberExpression" &&
        node.callee.property.type === "Identifier" &&
        node.callee.property.name === "apply" &&
        node.callee.computed === false &&
        node.arguments.length === 2 &&
        node.arguments[1].type !== "ArrayExpression" &&
        node.arguments[1].type !== "SpreadElement"
    );
***REMOVED***


/**
 * Checks whether or not `thisArg` is not changed by `.apply()`.
 * @param ***REMOVED***ASTNode|null***REMOVED*** expectedThis - The node that is the owner of the applied function.
 * @param ***REMOVED***ASTNode***REMOVED*** thisArg - The node that is given to the first argument of the `.apply()`.
 * @param ***REMOVED***RuleContext***REMOVED*** context - The ESLint rule context object.
 * @returns ***REMOVED***boolean***REMOVED*** Whether or not `thisArg` is not changed by `.apply()`.
 */
function isValidThisArg(expectedThis, thisArg, context) ***REMOVED***
    if (!expectedThis) ***REMOVED***
        return astUtils.isNullOrUndefined(thisArg);
    ***REMOVED***
    return astUtils.equalTokens(expectedThis, thisArg, context);
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "require spread operators instead of `.apply()`",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/prefer-spread"
        ***REMOVED***,

        schema: [],
        fixable: null
    ***REMOVED***,

    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode();

        return ***REMOVED***
            CallExpression(node) ***REMOVED***
                if (!isVariadicApplyCalling(node)) ***REMOVED***
                    return;
                ***REMOVED***

                const applied = node.callee.object;
                const expectedThis = (applied.type === "MemberExpression") ? applied.object : null;
                const thisArg = node.arguments[0];

                if (isValidThisArg(expectedThis, thisArg, sourceCode)) ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        message: "Use the spread operator instead of '.apply()'."
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
