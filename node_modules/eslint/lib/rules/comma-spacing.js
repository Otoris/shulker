/**
 * @fileoverview Comma spacing - validates spacing before and after comma
 * @author Vignesh Anand aka vegetableman.
 */
"use strict";

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "layout",

        docs: ***REMOVED***
            description: "enforce consistent spacing before and after commas",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/comma-spacing"
        ***REMOVED***,

        fixable: "whitespace",

        schema: [
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    before: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***,
                    after: ***REMOVED***
                        type: "boolean",
                        default: true
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ],

        messages: ***REMOVED***
            missing: "A space is required ***REMOVED******REMOVED***loc***REMOVED******REMOVED*** ','.",
            unexpected: "There should be no space ***REMOVED******REMOVED***loc***REMOVED******REMOVED*** ','."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***

        const sourceCode = context.getSourceCode();
        const tokensAndComments = sourceCode.tokensAndComments;

        const options = ***REMOVED***
            before: context.options[0] ? context.options[0].before : false,
            after: context.options[0] ? context.options[0].after : true
        ***REMOVED***;

        //--------------------------------------------------------------------------
        // Helpers
        //--------------------------------------------------------------------------

        // list of comma tokens to ignore for the check of leading whitespace
        const commaTokensToIgnore = [];

        /**
         * Reports a spacing error with an appropriate message.
         * @param ***REMOVED***ASTNode***REMOVED*** node The binary expression node to report.
         * @param ***REMOVED***string***REMOVED*** loc Is the error "before" or "after" the comma?
         * @param ***REMOVED***ASTNode***REMOVED*** otherNode The node at the left or right of `node`
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function report(node, loc, otherNode) ***REMOVED***
            context.report(***REMOVED***
                node,
                fix(fixer) ***REMOVED***
                    if (options[loc]) ***REMOVED***
                        if (loc === "before") ***REMOVED***
                            return fixer.insertTextBefore(node, " ");
                        ***REMOVED***
                        return fixer.insertTextAfter(node, " ");

                    ***REMOVED***
                    let start, end;
                    const newText = "";

                    if (loc === "before") ***REMOVED***
                        start = otherNode.range[1];
                        end = node.range[0];
                    ***REMOVED*** else ***REMOVED***
                        start = node.range[1];
                        end = otherNode.range[0];
                    ***REMOVED***

                    return fixer.replaceTextRange([start, end], newText);

                ***REMOVED***,
                messageId: options[loc] ? "missing" : "unexpected",
                data: ***REMOVED***
                    loc
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Validates the spacing around a comma token.
         * @param ***REMOVED***Object***REMOVED*** tokens - The tokens to be validated.
         * @param ***REMOVED***Token***REMOVED*** tokens.comma The token representing the comma.
         * @param ***REMOVED***Token***REMOVED*** [tokens.left] The last token before the comma.
         * @param ***REMOVED***Token***REMOVED*** [tokens.right] The first token after the comma.
         * @param ***REMOVED***Token|ASTNode***REMOVED*** reportItem The item to use when reporting an error.
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function validateCommaItemSpacing(tokens, reportItem) ***REMOVED***
            if (tokens.left && astUtils.isTokenOnSameLine(tokens.left, tokens.comma) &&
                    (options.before !== sourceCode.isSpaceBetweenTokens(tokens.left, tokens.comma))
            ) ***REMOVED***
                report(reportItem, "before", tokens.left);
            ***REMOVED***

            if (tokens.right && astUtils.isClosingParenToken(tokens.right)) ***REMOVED***
                return;
            ***REMOVED***

            if (tokens.right && !options.after && tokens.right.type === "Line") ***REMOVED***
                return;
            ***REMOVED***

            if (tokens.right && astUtils.isTokenOnSameLine(tokens.comma, tokens.right) &&
                    (options.after !== sourceCode.isSpaceBetweenTokens(tokens.comma, tokens.right))
            ) ***REMOVED***
                report(reportItem, "after", tokens.right);
            ***REMOVED***
        ***REMOVED***

        /**
         * Adds null elements of the given ArrayExpression or ArrayPattern node to the ignore list.
         * @param ***REMOVED***ASTNode***REMOVED*** node An ArrayExpression or ArrayPattern node.
         * @returns ***REMOVED***void***REMOVED***
         */
        function addNullElementsToIgnoreList(node) ***REMOVED***
            let previousToken = sourceCode.getFirstToken(node);

            node.elements.forEach(element => ***REMOVED***
                let token;

                if (element === null) ***REMOVED***
                    token = sourceCode.getTokenAfter(previousToken);

                    if (astUtils.isCommaToken(token)) ***REMOVED***
                        commaTokensToIgnore.push(token);
                    ***REMOVED***
                ***REMOVED*** else ***REMOVED***
                    token = sourceCode.getTokenAfter(element);
                ***REMOVED***

                previousToken = token;
            ***REMOVED***);
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------

        return ***REMOVED***
            "Program:exit"() ***REMOVED***
                tokensAndComments.forEach((token, i) => ***REMOVED***

                    if (!astUtils.isCommaToken(token)) ***REMOVED***
                        return;
                    ***REMOVED***

                    if (token && token.type === "JSXText") ***REMOVED***
                        return;
                    ***REMOVED***

                    const previousToken = tokensAndComments[i - 1];
                    const nextToken = tokensAndComments[i + 1];

                    validateCommaItemSpacing(***REMOVED***
                        comma: token,
                        left: astUtils.isCommaToken(previousToken) || commaTokensToIgnore.indexOf(token) > -1 ? null : previousToken,
                        right: astUtils.isCommaToken(nextToken) ? null : nextToken
                    ***REMOVED***, token);
                ***REMOVED***);
            ***REMOVED***,
            ArrayExpression: addNullElementsToIgnoreList,
            ArrayPattern: addNullElementsToIgnoreList

        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
