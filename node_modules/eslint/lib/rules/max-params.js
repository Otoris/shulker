/**
 * @fileoverview Rule to flag when a function has too many parameters
 * @author Ilya Volodin
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const lodash = require("lodash");

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "enforce a maximum number of parameters in function definitions",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/max-params"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                oneOf: [
                    ***REMOVED***
                        type: "integer",
                        minimum: 0
                    ***REMOVED***,
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            maximum: ***REMOVED***
                                type: "integer",
                                minimum: 0
                            ***REMOVED***,
                            max: ***REMOVED***
                                type: "integer",
                                minimum: 0
                            ***REMOVED***
                        ***REMOVED***,
                        additionalProperties: false
                    ***REMOVED***
                ]
            ***REMOVED***
        ],
        messages: ***REMOVED***
            exceed: "***REMOVED******REMOVED***name***REMOVED******REMOVED*** has too many parameters (***REMOVED******REMOVED***count***REMOVED******REMOVED***). Maximum allowed is ***REMOVED******REMOVED***max***REMOVED******REMOVED***."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode();
        const option = context.options[0];
        let numParams = 3;

        if (
            typeof option === "object" &&
            (Object.prototype.hasOwnProperty.call(option, "maximum") || Object.prototype.hasOwnProperty.call(option, "max"))
        ) ***REMOVED***
            numParams = option.maximum || option.max;
        ***REMOVED***
        if (typeof option === "number") ***REMOVED***
            numParams = option;
        ***REMOVED***

        /**
         * Checks a function to see if it has too many parameters.
         * @param ***REMOVED***ASTNode***REMOVED*** node The node to check.
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function checkFunction(node) ***REMOVED***
            if (node.params.length > numParams) ***REMOVED***
                context.report(***REMOVED***
                    loc: astUtils.getFunctionHeadLoc(node, sourceCode),
                    node,
                    messageId: "exceed",
                    data: ***REMOVED***
                        name: lodash.upperFirst(astUtils.getFunctionNameWithKind(node)),
                        count: node.params.length,
                        max: numParams
                    ***REMOVED***
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            FunctionDeclaration: checkFunction,
            ArrowFunctionExpression: checkFunction,
            FunctionExpression: checkFunction
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
