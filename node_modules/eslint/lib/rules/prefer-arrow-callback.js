/**
 * @fileoverview A rule to suggest using arrow functions as callbacks.
 * @author Toru Nagashima
 */

"use strict";

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Checks whether or not a given variable is a function name.
 * @param ***REMOVED***eslint-scope.Variable***REMOVED*** variable - A variable to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the variable is a function name.
 */
function isFunctionName(variable) ***REMOVED***
    return variable && variable.defs[0].type === "FunctionName";
***REMOVED***

/**
 * Checks whether or not a given MetaProperty node equals to a given value.
 * @param ***REMOVED***ASTNode***REMOVED*** node - A MetaProperty node to check.
 * @param ***REMOVED***string***REMOVED*** metaName - The name of `MetaProperty.meta`.
 * @param ***REMOVED***string***REMOVED*** propertyName - The name of `MetaProperty.property`.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the node is the specific value.
 */
function checkMetaProperty(node, metaName, propertyName) ***REMOVED***
    return node.meta.name === metaName && node.property.name === propertyName;
***REMOVED***

/**
 * Gets the variable object of `arguments` which is defined implicitly.
 * @param ***REMOVED***eslint-scope.Scope***REMOVED*** scope - A scope to get.
 * @returns ***REMOVED***eslint-scope.Variable***REMOVED*** The found variable object.
 */
function getVariableOfArguments(scope) ***REMOVED***
    const variables = scope.variables;

    for (let i = 0; i < variables.length; ++i) ***REMOVED***
        const variable = variables[i];

        if (variable.name === "arguments") ***REMOVED***

            /*
             * If there was a parameter which is named "arguments", the
             * implicit "arguments" is not defined.
             * So does fast return with null.
             */
            return (variable.identifiers.length === 0) ? variable : null;
        ***REMOVED***
    ***REMOVED***

    /* istanbul ignore next */
    return null;
***REMOVED***

/**
 * Checkes whether or not a given node is a callback.
 * @param ***REMOVED***ASTNode***REMOVED*** node - A node to check.
 * @returns ***REMOVED***Object***REMOVED***
 *   ***REMOVED***boolean***REMOVED*** retv.isCallback - `true` if the node is a callback.
 *   ***REMOVED***boolean***REMOVED*** retv.isLexicalThis - `true` if the node is with `.bind(this)`.
 */
function getCallbackInfo(node) ***REMOVED***
    const retv = ***REMOVED*** isCallback: false, isLexicalThis: false ***REMOVED***;
    let currentNode = node;
    let parent = node.parent;

    while (currentNode) ***REMOVED***
        switch (parent.type) ***REMOVED***

            // Checks parents recursively.

            case "LogicalExpression":
            case "ConditionalExpression":
                break;

            // Checks whether the parent node is `.bind(this)` call.
            case "MemberExpression":
                if (parent.object === currentNode &&
                    !parent.property.computed &&
                    parent.property.type === "Identifier" &&
                    parent.property.name === "bind" &&
                    parent.parent.type === "CallExpression" &&
                    parent.parent.callee === parent
                ) ***REMOVED***
                    retv.isLexicalThis = (
                        parent.parent.arguments.length === 1 &&
                        parent.parent.arguments[0].type === "ThisExpression"
                    );
                    parent = parent.parent;
                ***REMOVED*** else ***REMOVED***
                    return retv;
                ***REMOVED***
                break;

            // Checks whether the node is a callback.
            case "CallExpression":
            case "NewExpression":
                if (parent.callee !== currentNode) ***REMOVED***
                    retv.isCallback = true;
                ***REMOVED***
                return retv;

            default:
                return retv;
        ***REMOVED***

        currentNode = parent;
        parent = parent.parent;
    ***REMOVED***

    /* istanbul ignore next */
    throw new Error("unreachable");
***REMOVED***

/**
 * Checks whether a simple list of parameters contains any duplicates. This does not handle complex
 * parameter lists (e.g. with destructuring), since complex parameter lists are a SyntaxError with duplicate
 * parameter names anyway. Instead, it always returns `false` for complex parameter lists.
 * @param ***REMOVED***ASTNode[]***REMOVED*** paramsList The list of parameters for a function
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the list of parameters contains any duplicates
 */
function hasDuplicateParams(paramsList) ***REMOVED***
    return paramsList.every(param => param.type === "Identifier") && paramsList.length !== new Set(paramsList.map(param => param.name)).size;
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "require using arrow functions for callbacks",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/prefer-arrow-callback"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    allowNamedFunctions: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***,
                    allowUnboundThis: ***REMOVED***
                        type: "boolean",
                        default: true
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ],

        fixable: "code"
    ***REMOVED***,

    create(context) ***REMOVED***
        const options = context.options[0] || ***REMOVED******REMOVED***;

        const allowUnboundThis = options.allowUnboundThis !== false; // default to true
        const allowNamedFunctions = options.allowNamedFunctions;
        const sourceCode = context.getSourceCode();

        /*
         * ***REMOVED***Array<***REMOVED***this: boolean, super: boolean, meta: boolean***REMOVED***>***REMOVED***
         * - this - A flag which shows there are one or more ThisExpression.
         * - super - A flag which shows there are one or more Super.
         * - meta - A flag which shows there are one or more MethProperty.
         */
        let stack = [];

        /**
         * Pushes new function scope with all `false` flags.
         * @returns ***REMOVED***void***REMOVED***
         */
        function enterScope() ***REMOVED***
            stack.push(***REMOVED*** this: false, super: false, meta: false ***REMOVED***);
        ***REMOVED***

        /**
         * Pops a function scope from the stack.
         * @returns ***REMOVED******REMOVED***this: boolean, super: boolean, meta: boolean***REMOVED******REMOVED*** The information of the last scope.
         */
        function exitScope() ***REMOVED***
            return stack.pop();
        ***REMOVED***

        return ***REMOVED***

            // Reset internal state.
            Program() ***REMOVED***
                stack = [];
            ***REMOVED***,

            // If there are below, it cannot replace with arrow functions merely.
            ThisExpression() ***REMOVED***
                const info = stack[stack.length - 1];

                if (info) ***REMOVED***
                    info.this = true;
                ***REMOVED***
            ***REMOVED***,

            Super() ***REMOVED***
                const info = stack[stack.length - 1];

                if (info) ***REMOVED***
                    info.super = true;
                ***REMOVED***
            ***REMOVED***,

            MetaProperty(node) ***REMOVED***
                const info = stack[stack.length - 1];

                if (info && checkMetaProperty(node, "new", "target")) ***REMOVED***
                    info.meta = true;
                ***REMOVED***
            ***REMOVED***,

            // To skip nested scopes.
            FunctionDeclaration: enterScope,
            "FunctionDeclaration:exit": exitScope,

            // Main.
            FunctionExpression: enterScope,
            "FunctionExpression:exit"(node) ***REMOVED***
                const scopeInfo = exitScope();

                // Skip named function expressions
                if (allowNamedFunctions && node.id && node.id.name) ***REMOVED***
                    return;
                ***REMOVED***

                // Skip generators.
                if (node.generator) ***REMOVED***
                    return;
                ***REMOVED***

                // Skip recursive functions.
                const nameVar = context.getDeclaredVariables(node)[0];

                if (isFunctionName(nameVar) && nameVar.references.length > 0) ***REMOVED***
                    return;
                ***REMOVED***

                // Skip if it's using arguments.
                const variable = getVariableOfArguments(context.getScope());

                if (variable && variable.references.length > 0) ***REMOVED***
                    return;
                ***REMOVED***

                // Reports if it's a callback which can replace with arrows.
                const callbackInfo = getCallbackInfo(node);

                if (callbackInfo.isCallback &&
                    (!allowUnboundThis || !scopeInfo.this || callbackInfo.isLexicalThis) &&
                    !scopeInfo.super &&
                    !scopeInfo.meta
                ) ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        message: "Unexpected function expression.",
                        fix(fixer) ***REMOVED***
                            if ((!callbackInfo.isLexicalThis && scopeInfo.this) || hasDuplicateParams(node.params)) ***REMOVED***

                                /*
                                 * If the callback function does not have .bind(this) and contains a reference to `this`, there
                                 * is no way to determine what `this` should be, so don't perform any fixes.
                                 * If the callback function has duplicates in its list of parameters (possible in sloppy mode),
                                 * don't replace it with an arrow function, because this is a SyntaxError with arrow functions.
                                 */
                                return null;
                            ***REMOVED***

                            const paramsLeftParen = node.params.length ? sourceCode.getTokenBefore(node.params[0]) : sourceCode.getTokenBefore(node.body, 1);
                            const paramsRightParen = sourceCode.getTokenBefore(node.body);
                            const asyncKeyword = node.async ? "async " : "";
                            const paramsFullText = sourceCode.text.slice(paramsLeftParen.range[0], paramsRightParen.range[1]);
                            const arrowFunctionText = `$***REMOVED***asyncKeyword***REMOVED***$***REMOVED***paramsFullText***REMOVED*** => $***REMOVED***sourceCode.getText(node.body)***REMOVED***`;

                            /*
                             * If the callback function has `.bind(this)`, replace it with an arrow function and remove the binding.
                             * Otherwise, just replace the arrow function itself.
                             */
                            const replacedNode = callbackInfo.isLexicalThis ? node.parent.parent : node;

                            /*
                             * If the replaced node is part of a BinaryExpression, LogicalExpression, or MemberExpression, then
                             * the arrow function needs to be parenthesized, because `foo || () => ***REMOVED******REMOVED***` is invalid syntax even
                             * though `foo || function() ***REMOVED******REMOVED***` is valid.
                             */
                            const needsParens = replacedNode.parent.type !== "CallExpression" && replacedNode.parent.type !== "ConditionalExpression";
                            const replacementText = needsParens ? `($***REMOVED***arrowFunctionText***REMOVED***)` : arrowFunctionText;

                            return fixer.replaceText(replacedNode, replacementText);
                        ***REMOVED***
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
