/**
 * @fileoverview Disallow Labeled Statements
 * @author Nicholas C. Zakas
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow labeled statements",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-labels"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    allowLoop: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***,
                    allowSwitch: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ]
    ***REMOVED***,

    create(context) ***REMOVED***
        const options = context.options[0];
        const allowLoop = options && options.allowLoop;
        const allowSwitch = options && options.allowSwitch;
        let scopeInfo = null;

        /**
         * Gets the kind of a given node.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to get.
         * @returns ***REMOVED***string***REMOVED*** The kind of the node.
         */
        function getBodyKind(node) ***REMOVED***
            if (astUtils.isLoop(node)) ***REMOVED***
                return "loop";
            ***REMOVED***
            if (node.type === "SwitchStatement") ***REMOVED***
                return "switch";
            ***REMOVED***
            return "other";
        ***REMOVED***

        /**
         * Checks whether the label of a given kind is allowed or not.
         *
         * @param ***REMOVED***string***REMOVED*** kind - A kind to check.
         * @returns ***REMOVED***boolean***REMOVED*** `true` if the kind is allowed.
         */
        function isAllowed(kind) ***REMOVED***
            switch (kind) ***REMOVED***
                case "loop": return allowLoop;
                case "switch": return allowSwitch;
                default: return false;
            ***REMOVED***
        ***REMOVED***

        /**
         * Checks whether a given name is a label of a loop or not.
         *
         * @param ***REMOVED***string***REMOVED*** label - A name of a label to check.
         * @returns ***REMOVED***boolean***REMOVED*** `true` if the name is a label of a loop.
         */
        function getKind(label) ***REMOVED***
            let info = scopeInfo;

            while (info) ***REMOVED***
                if (info.label === label) ***REMOVED***
                    return info.kind;
                ***REMOVED***
                info = info.upper;
            ***REMOVED***

            /* istanbul ignore next: syntax error */
            return "other";
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------

        return ***REMOVED***
            LabeledStatement(node) ***REMOVED***
                scopeInfo = ***REMOVED***
                    label: node.label.name,
                    kind: getBodyKind(node.body),
                    upper: scopeInfo
                ***REMOVED***;
            ***REMOVED***,

            "LabeledStatement:exit"(node) ***REMOVED***
                if (!isAllowed(scopeInfo.kind)) ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        message: "Unexpected labeled statement."
                    ***REMOVED***);
                ***REMOVED***

                scopeInfo = scopeInfo.upper;
            ***REMOVED***,

            BreakStatement(node) ***REMOVED***
                if (node.label && !isAllowed(getKind(node.label.name))) ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        message: "Unexpected label in break statement."
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***,

            ContinueStatement(node) ***REMOVED***
                if (node.label && !isAllowed(getKind(node.label.name))) ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        message: "Unexpected label in continue statement."
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
