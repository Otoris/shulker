/**
 * @fileoverview Rule to disallow async functions which have no `await` expression.
 * @author Toru Nagashima
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Capitalize the 1st letter of the given text.
 *
 * @param ***REMOVED***string***REMOVED*** text - The text to capitalize.
 * @returns ***REMOVED***string***REMOVED*** The text that the 1st letter was capitalized.
 */
function capitalizeFirstLetter(text) ***REMOVED***
    return text[0].toUpperCase() + text.slice(1);
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow async functions which have no `await` expression",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/require-await"
        ***REMOVED***,

        schema: []
    ***REMOVED***,

    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode();
        let scopeInfo = null;

        /**
         * Push the scope info object to the stack.
         *
         * @returns ***REMOVED***void***REMOVED***
         */
        function enterFunction() ***REMOVED***
            scopeInfo = ***REMOVED***
                upper: scopeInfo,
                hasAwait: false
            ***REMOVED***;
        ***REMOVED***

        /**
         * Pop the top scope info object from the stack.
         * Also, it reports the function if needed.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - The node to report.
         * @returns ***REMOVED***void***REMOVED***
         */
        function exitFunction(node) ***REMOVED***
            if (node.async && !scopeInfo.hasAwait && !astUtils.isEmptyFunction(node)) ***REMOVED***
                context.report(***REMOVED***
                    node,
                    loc: astUtils.getFunctionHeadLoc(node, sourceCode),
                    message: "***REMOVED******REMOVED***name***REMOVED******REMOVED*** has no 'await' expression.",
                    data: ***REMOVED***
                        name: capitalizeFirstLetter(
                            astUtils.getFunctionNameWithKind(node)
                        )
                    ***REMOVED***
                ***REMOVED***);
            ***REMOVED***

            scopeInfo = scopeInfo.upper;
        ***REMOVED***

        return ***REMOVED***
            FunctionDeclaration: enterFunction,
            FunctionExpression: enterFunction,
            ArrowFunctionExpression: enterFunction,
            "FunctionDeclaration:exit": exitFunction,
            "FunctionExpression:exit": exitFunction,
            "ArrowFunctionExpression:exit": exitFunction,

            AwaitExpression() ***REMOVED***
                scopeInfo.hasAwait = true;
            ***REMOVED***,
            ForOfStatement(node) ***REMOVED***
                if (node.await) ***REMOVED***
                    scopeInfo.hasAwait = true;
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
