/**
 * @fileoverview Require spaces around infix operators
 * @author Michael Ficarra
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "layout",

        docs: ***REMOVED***
            description: "require spacing around infix operators",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/space-infix-ops"
        ***REMOVED***,

        fixable: "whitespace",

        schema: [
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    int32Hint: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ]
    ***REMOVED***,

    create(context) ***REMOVED***
        const int32Hint = context.options[0] ? context.options[0].int32Hint === true : false;
        const sourceCode = context.getSourceCode();

        /**
         * Returns the first token which violates the rule
         * @param ***REMOVED***ASTNode***REMOVED*** left - The left node of the main node
         * @param ***REMOVED***ASTNode***REMOVED*** right - The right node of the main node
         * @param ***REMOVED***string***REMOVED*** op - The operator of the main node
         * @returns ***REMOVED***Object***REMOVED*** The violator token or null
         * @private
         */
        function getFirstNonSpacedToken(left, right, op) ***REMOVED***
            const operator = sourceCode.getFirstTokenBetween(left, right, token => token.value === op);
            const prev = sourceCode.getTokenBefore(operator);
            const next = sourceCode.getTokenAfter(operator);

            if (!sourceCode.isSpaceBetweenTokens(prev, operator) || !sourceCode.isSpaceBetweenTokens(operator, next)) ***REMOVED***
                return operator;
            ***REMOVED***

            return null;
        ***REMOVED***

        /**
         * Reports an AST node as a rule violation
         * @param ***REMOVED***ASTNode***REMOVED*** mainNode - The node to report
         * @param ***REMOVED***Object***REMOVED*** culpritToken - The token which has a problem
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function report(mainNode, culpritToken) ***REMOVED***
            context.report(***REMOVED***
                node: mainNode,
                loc: culpritToken.loc.start,
                message: "Operator '***REMOVED******REMOVED***operator***REMOVED******REMOVED***' must be spaced.",
                data: ***REMOVED***
                    operator: culpritToken.value
                ***REMOVED***,
                fix(fixer) ***REMOVED***
                    const previousToken = sourceCode.getTokenBefore(culpritToken);
                    const afterToken = sourceCode.getTokenAfter(culpritToken);
                    let fixString = "";

                    if (culpritToken.range[0] - previousToken.range[1] === 0) ***REMOVED***
                        fixString = " ";
                    ***REMOVED***

                    fixString += culpritToken.value;

                    if (afterToken.range[0] - culpritToken.range[1] === 0) ***REMOVED***
                        fixString += " ";
                    ***REMOVED***

                    return fixer.replaceText(culpritToken, fixString);
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Check if the node is binary then report
         * @param ***REMOVED***ASTNode***REMOVED*** node node to evaluate
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function checkBinary(node) ***REMOVED***
            const leftNode = (node.left.typeAnnotation) ? node.left.typeAnnotation : node.left;
            const rightNode = node.right;

            // search for = in AssignmentPattern nodes
            const operator = node.operator || "=";

            const nonSpacedNode = getFirstNonSpacedToken(leftNode, rightNode, operator);

            if (nonSpacedNode) ***REMOVED***
                if (!(int32Hint && sourceCode.getText(node).endsWith("|0"))) ***REMOVED***
                    report(node, nonSpacedNode);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        /**
         * Check if the node is conditional
         * @param ***REMOVED***ASTNode***REMOVED*** node node to evaluate
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function checkConditional(node) ***REMOVED***
            const nonSpacedConsequesntNode = getFirstNonSpacedToken(node.test, node.consequent, "?");
            const nonSpacedAlternateNode = getFirstNonSpacedToken(node.consequent, node.alternate, ":");

            if (nonSpacedConsequesntNode) ***REMOVED***
                report(node, nonSpacedConsequesntNode);
            ***REMOVED*** else if (nonSpacedAlternateNode) ***REMOVED***
                report(node, nonSpacedAlternateNode);
            ***REMOVED***
        ***REMOVED***

        /**
         * Check if the node is a variable
         * @param ***REMOVED***ASTNode***REMOVED*** node node to evaluate
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function checkVar(node) ***REMOVED***
            const leftNode = (node.id.typeAnnotation) ? node.id.typeAnnotation : node.id;
            const rightNode = node.init;

            if (rightNode) ***REMOVED***
                const nonSpacedNode = getFirstNonSpacedToken(leftNode, rightNode, "=");

                if (nonSpacedNode) ***REMOVED***
                    report(node, nonSpacedNode);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            AssignmentExpression: checkBinary,
            AssignmentPattern: checkBinary,
            BinaryExpression: checkBinary,
            LogicalExpression: checkBinary,
            ConditionalExpression: checkConditional,
            VariableDeclarator: checkVar
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
