/**
 * @fileoverview Rule to disallow mixed binary operators.
 * @author Toru Nagashima
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils.js");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

const ARITHMETIC_OPERATORS = ["+", "-", "*", "/", "%", "**"];
const BITWISE_OPERATORS = ["&", "|", "^", "~", "<<", ">>", ">>>"];
const COMPARISON_OPERATORS = ["==", "!=", "===", "!==", ">", ">=", "<", "<="];
const LOGICAL_OPERATORS = ["&&", "||"];
const RELATIONAL_OPERATORS = ["in", "instanceof"];
const TERNARY_OPERATOR = ["?:"];
const ALL_OPERATORS = [].concat(
    ARITHMETIC_OPERATORS,
    BITWISE_OPERATORS,
    COMPARISON_OPERATORS,
    LOGICAL_OPERATORS,
    RELATIONAL_OPERATORS,
    TERNARY_OPERATOR
);
const DEFAULT_GROUPS = [
    ARITHMETIC_OPERATORS,
    BITWISE_OPERATORS,
    COMPARISON_OPERATORS,
    LOGICAL_OPERATORS,
    RELATIONAL_OPERATORS
];
const TARGET_NODE_TYPE = /^(?:Binary|Logical|Conditional)Expression$/u;

/**
 * Normalizes options.
 *
 * @param ***REMOVED***Object|undefined***REMOVED*** options - A options object to normalize.
 * @returns ***REMOVED***Object***REMOVED*** Normalized option object.
 */
function normalizeOptions(options = ***REMOVED******REMOVED***) ***REMOVED***
    const hasGroups = options.groups && options.groups.length > 0;
    const groups = hasGroups ? options.groups : DEFAULT_GROUPS;
    const allowSamePrecedence = options.allowSamePrecedence !== false;

    return ***REMOVED***
        groups,
        allowSamePrecedence
    ***REMOVED***;
***REMOVED***

/**
 * Checks whether any group which includes both given operator exists or not.
 *
 * @param ***REMOVED***Array.<string[]>***REMOVED*** groups - A list of groups to check.
 * @param ***REMOVED***string***REMOVED*** left - An operator.
 * @param ***REMOVED***string***REMOVED*** right - Another operator.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if such group existed.
 */
function includesBothInAGroup(groups, left, right) ***REMOVED***
    return groups.some(group => group.indexOf(left) !== -1 && group.indexOf(right) !== -1);
***REMOVED***

/**
 * Checks whether the given node is a conditional expression and returns the test node else the left node.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** node - A node which can be a BinaryExpression or a LogicalExpression node.
 * This parent node can be BinaryExpression, LogicalExpression
 *      , or a ConditionalExpression node
 * @returns ***REMOVED***ASTNode***REMOVED*** node the appropriate node(left or test).
 */
function getChildNode(node) ***REMOVED***
    return node.type === "ConditionalExpression" ? node.test : node.left;
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow mixed binary operators",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-mixed-operators"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    groups: ***REMOVED***
                        type: "array",
                        items: ***REMOVED***
                            type: "array",
                            items: ***REMOVED*** enum: ALL_OPERATORS ***REMOVED***,
                            minItems: 2,
                            uniqueItems: true
                        ***REMOVED***,
                        uniqueItems: true
                    ***REMOVED***,
                    allowSamePrecedence: ***REMOVED***
                        type: "boolean",
                        default: true
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ]
    ***REMOVED***,

    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode();
        const options = normalizeOptions(context.options[0]);

        /**
         * Checks whether a given node should be ignored by options or not.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to check. This is a BinaryExpression
         *      node or a LogicalExpression node. This parent node is one of
         *      them, too.
         * @returns ***REMOVED***boolean***REMOVED*** `true` if the node should be ignored.
         */
        function shouldIgnore(node) ***REMOVED***
            const a = node;
            const b = node.parent;

            return (
                !includesBothInAGroup(options.groups, a.operator, b.type === "ConditionalExpression" ? "?:" : b.operator) ||
                (
                    options.allowSamePrecedence &&
                    astUtils.getPrecedence(a) === astUtils.getPrecedence(b)
                )
            );
        ***REMOVED***

        /**
         * Checks whether the operator of a given node is mixed with parent
         * node's operator or not.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to check. This is a BinaryExpression
         *      node or a LogicalExpression node. This parent node is one of
         *      them, too.
         * @returns ***REMOVED***boolean***REMOVED*** `true` if the node was mixed.
         */
        function isMixedWithParent(node) ***REMOVED***

            return (
                node.operator !== node.parent.operator &&
                !astUtils.isParenthesised(sourceCode, node)
            );
        ***REMOVED***

        /**
         * Checks whether the operator of a given node is mixed with a
         * conditional expression.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to check. This is a conditional
         *      expression node
         * @returns ***REMOVED***boolean***REMOVED*** `true` if the node was mixed.
         */
        function isMixedWithConditionalParent(node) ***REMOVED***
            return !astUtils.isParenthesised(sourceCode, node) && !astUtils.isParenthesised(sourceCode, node.test);
        ***REMOVED***

        /**
         * Gets the operator token of a given node.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to check. This is a BinaryExpression
         *      node or a LogicalExpression node.
         * @returns ***REMOVED***Token***REMOVED*** The operator token of the node.
         */
        function getOperatorToken(node) ***REMOVED***
            return sourceCode.getTokenAfter(getChildNode(node), astUtils.isNotClosingParenToken);
        ***REMOVED***

        /**
         * Reports both the operator of a given node and the operator of the
         * parent node.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to check. This is a BinaryExpression
         *      node or a LogicalExpression node. This parent node is one of
         *      them, too.
         * @returns ***REMOVED***void***REMOVED***
         */
        function reportBothOperators(node) ***REMOVED***
            const parent = node.parent;
            const left = (getChildNode(parent) === node) ? node : parent;
            const right = (getChildNode(parent) !== node) ? node : parent;
            const message =
                "Unexpected mix of '***REMOVED******REMOVED***leftOperator***REMOVED******REMOVED***' and '***REMOVED******REMOVED***rightOperator***REMOVED******REMOVED***'.";
            const data = ***REMOVED***
                leftOperator: left.operator || "?:",
                rightOperator: right.operator || "?:"
            ***REMOVED***;

            context.report(***REMOVED***
                node: left,
                loc: getOperatorToken(left).loc.start,
                message,
                data
            ***REMOVED***);
            context.report(***REMOVED***
                node: right,
                loc: getOperatorToken(right).loc.start,
                message,
                data
            ***REMOVED***);
        ***REMOVED***

        /**
         * Checks between the operator of this node and the operator of the
         * parent node.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function check(node) ***REMOVED***
            if (TARGET_NODE_TYPE.test(node.parent.type)) ***REMOVED***
                if (node.parent.type === "ConditionalExpression" && !shouldIgnore(node) && isMixedWithConditionalParent(node.parent)) ***REMOVED***
                    reportBothOperators(node);
                ***REMOVED*** else ***REMOVED***
                    if (TARGET_NODE_TYPE.test(node.parent.type) &&
                        isMixedWithParent(node) &&
                        !shouldIgnore(node)
                    ) ***REMOVED***
                        reportBothOperators(node);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***

        ***REMOVED***

        return ***REMOVED***
            BinaryExpression: check,
            LogicalExpression: check

        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
