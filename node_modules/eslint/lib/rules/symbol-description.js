/**
 * @fileoverview Rule to enforce description with the `Symbol` object
 * @author Jarek Rencz
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------


module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "require symbol descriptions",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/symbol-description"
        ***REMOVED***,
        fixable: null,
        schema: [],
        messages: ***REMOVED***
            expected: "Expected Symbol to have a description."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***

        /**
         * Reports if node does not conform the rule in case rule is set to
         * report missing description
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A CallExpression node to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkArgument(node) ***REMOVED***
            if (node.arguments.length === 0) ***REMOVED***
                context.report(***REMOVED***
                    node,
                    messageId: "expected"
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            "Program:exit"() ***REMOVED***
                const scope = context.getScope();
                const variable = astUtils.getVariableByName(scope, "Symbol");

                if (variable && variable.defs.length === 0) ***REMOVED***
                    variable.references.forEach(reference => ***REMOVED***
                        const node = reference.identifier;

                        if (astUtils.isCallee(node)) ***REMOVED***
                            checkArgument(node.parent);
                        ***REMOVED***
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
