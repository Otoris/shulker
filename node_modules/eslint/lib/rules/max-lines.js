/**
 * @fileoverview enforce a maximum file length
 * @author Alberto Rodr√≠guez
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const lodash = require("lodash");
const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "enforce a maximum number of lines per file",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/max-lines"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                oneOf: [
                    ***REMOVED***
                        type: "integer",
                        minimum: 0
                    ***REMOVED***,
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            max: ***REMOVED***
                                type: "integer",
                                minimum: 0
                            ***REMOVED***,
                            skipComments: ***REMOVED***
                                type: "boolean"
                            ***REMOVED***,
                            skipBlankLines: ***REMOVED***
                                type: "boolean"
                            ***REMOVED***
                        ***REMOVED***,
                        additionalProperties: false
                    ***REMOVED***
                ]
            ***REMOVED***
        ],
        messages: ***REMOVED***
            exceed: "File has too many lines (***REMOVED******REMOVED***actual***REMOVED******REMOVED***). Maximum allowed is ***REMOVED******REMOVED***max***REMOVED******REMOVED***."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const option = context.options[0];
        let max = 300;

        if (typeof option === "object" && Object.prototype.hasOwnProperty.call(option, "max")) ***REMOVED***
            max = option.max;
        ***REMOVED*** else if (typeof option === "number") ***REMOVED***
            max = option;
        ***REMOVED***

        const skipComments = option && option.skipComments;
        const skipBlankLines = option && option.skipBlankLines;

        const sourceCode = context.getSourceCode();

        /**
         * Returns whether or not a token is a comment node type
         * @param ***REMOVED***Token***REMOVED*** token The token to check
         * @returns ***REMOVED***boolean***REMOVED*** True if the token is a comment node
         */
        function isCommentNodeType(token) ***REMOVED***
            return token && (token.type === "Block" || token.type === "Line");
        ***REMOVED***

        /**
         * Returns the line numbers of a comment that don't have any code on the same line
         * @param ***REMOVED***Node***REMOVED*** comment The comment node to check
         * @returns ***REMOVED***number[]***REMOVED*** The line numbers
         */
        function getLinesWithoutCode(comment) ***REMOVED***
            let start = comment.loc.start.line;
            let end = comment.loc.end.line;

            let token;

            token = comment;
            do ***REMOVED***
                token = sourceCode.getTokenBefore(token, ***REMOVED*** includeComments: true ***REMOVED***);
            ***REMOVED*** while (isCommentNodeType(token));

            if (token && astUtils.isTokenOnSameLine(token, comment)) ***REMOVED***
                start += 1;
            ***REMOVED***

            token = comment;
            do ***REMOVED***
                token = sourceCode.getTokenAfter(token, ***REMOVED*** includeComments: true ***REMOVED***);
            ***REMOVED*** while (isCommentNodeType(token));

            if (token && astUtils.isTokenOnSameLine(comment, token)) ***REMOVED***
                end -= 1;
            ***REMOVED***

            if (start <= end) ***REMOVED***
                return lodash.range(start, end + 1);
            ***REMOVED***
            return [];
        ***REMOVED***

        return ***REMOVED***
            "Program:exit"() ***REMOVED***
                let lines = sourceCode.lines.map((text, i) => (***REMOVED*** lineNumber: i + 1, text ***REMOVED***));

                if (skipBlankLines) ***REMOVED***
                    lines = lines.filter(l => l.text.trim() !== "");
                ***REMOVED***

                if (skipComments) ***REMOVED***
                    const comments = sourceCode.getAllComments();

                    const commentLines = lodash.flatten(comments.map(comment => getLinesWithoutCode(comment)));

                    lines = lines.filter(l => !lodash.includes(commentLines, l.lineNumber));
                ***REMOVED***

                if (lines.length > max) ***REMOVED***
                    context.report(***REMOVED***
                        loc: ***REMOVED*** line: 1, column: 0 ***REMOVED***,
                        messageId: "exceed",
                        data: ***REMOVED***
                            max,
                            actual: lines.length
                        ***REMOVED***
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
