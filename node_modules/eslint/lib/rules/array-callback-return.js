/**
 * @fileoverview Rule to enforce return statements in callbacks of array's methods
 * @author Toru Nagashima
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const lodash = require("lodash");

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

const TARGET_NODE_TYPE = /^(?:Arrow)?FunctionExpression$/u;
const TARGET_METHODS = /^(?:every|filter|find(?:Index)?|map|reduce(?:Right)?|some|sort)$/u;

/**
 * Checks a given code path segment is reachable.
 *
 * @param ***REMOVED***CodePathSegment***REMOVED*** segment - A segment to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the segment is reachable.
 */
function isReachable(segment) ***REMOVED***
    return segment.reachable;
***REMOVED***

/**
 * Gets a readable location.
 *
 * - FunctionExpression -> the function name or `function` keyword.
 * - ArrowFunctionExpression -> `=>` token.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** node - A function node to get.
 * @param ***REMOVED***SourceCode***REMOVED*** sourceCode - A source code to get tokens.
 * @returns ***REMOVED***ASTNode|Token***REMOVED*** The node or the token of a location.
 */
function getLocation(node, sourceCode) ***REMOVED***
    if (node.type === "ArrowFunctionExpression") ***REMOVED***
        return sourceCode.getTokenBefore(node.body);
    ***REMOVED***
    return node.id || node;
***REMOVED***

/**
 * Checks a given node is a MemberExpression node which has the specified name's
 * property.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** node - A node to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the node is a MemberExpression node which has
 *      the specified name's property
 */
function isTargetMethod(node) ***REMOVED***
    return (
        node.type === "MemberExpression" &&
        TARGET_METHODS.test(astUtils.getStaticPropertyName(node) || "")
    );
***REMOVED***

/**
 * Checks whether or not a given node is a function expression which is the
 * callback of an array method.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** node - A node to check. This is one of
 *      FunctionExpression or ArrowFunctionExpression.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the node is the callback of an array method.
 */
function isCallbackOfArrayMethod(node) ***REMOVED***
    let currentNode = node;

    while (currentNode) ***REMOVED***
        const parent = currentNode.parent;

        switch (parent.type) ***REMOVED***

            /*
             * Looks up the destination. e.g.,
             * foo.every(nativeFoo || function foo() ***REMOVED*** ... ***REMOVED***);
             */
            case "LogicalExpression":
            case "ConditionalExpression":
                currentNode = parent;
                break;

            /*
             * If the upper function is IIFE, checks the destination of the return value.
             * e.g.
             *   foo.every((function() ***REMOVED***
             *     // setup...
             *     return function callback() ***REMOVED*** ... ***REMOVED***;
             *   ***REMOVED***)());
             */
            case "ReturnStatement": ***REMOVED***
                const func = astUtils.getUpperFunction(parent);

                if (func === null || !astUtils.isCallee(func)) ***REMOVED***
                    return false;
                ***REMOVED***
                currentNode = func.parent;
                break;
            ***REMOVED***

            /*
             * e.g.
             *   Array.from([], function() ***REMOVED******REMOVED***);
             *   list.every(function() ***REMOVED******REMOVED***);
             */
            case "CallExpression":
                if (astUtils.isArrayFromMethod(parent.callee)) ***REMOVED***
                    return (
                        parent.arguments.length >= 2 &&
                        parent.arguments[1] === currentNode
                    );
                ***REMOVED***
                if (isTargetMethod(parent.callee)) ***REMOVED***
                    return (
                        parent.arguments.length >= 1 &&
                        parent.arguments[0] === currentNode
                    );
                ***REMOVED***
                return false;

            // Otherwise this node is not target.
            default:
                return false;
        ***REMOVED***
    ***REMOVED***

    /* istanbul ignore next: unreachable */
    return false;
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "problem",

        docs: ***REMOVED***
            description: "enforce `return` statements in callbacks of array methods",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/array-callback-return"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    allowImplicit: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ],

        messages: ***REMOVED***
            expectedAtEnd: "Expected to return a value at the end of ***REMOVED******REMOVED***name***REMOVED******REMOVED***.",
            expectedInside: "Expected to return a value in ***REMOVED******REMOVED***name***REMOVED******REMOVED***.",
            expectedReturnValue: "***REMOVED******REMOVED***name***REMOVED******REMOVED*** expected a return value."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***

        const options = context.options[0] || ***REMOVED*** allowImplicit: false ***REMOVED***;

        let funcInfo = ***REMOVED***
            upper: null,
            codePath: null,
            hasReturn: false,
            shouldCheck: false,
            node: null
        ***REMOVED***;

        /**
         * Checks whether or not the last code path segment is reachable.
         * Then reports this function if the segment is reachable.
         *
         * If the last code path segment is reachable, there are paths which are not
         * returned or thrown.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkLastSegment(node) ***REMOVED***
            if (funcInfo.shouldCheck &&
                funcInfo.codePath.currentSegments.some(isReachable)
            ) ***REMOVED***
                context.report(***REMOVED***
                    node,
                    loc: getLocation(node, context.getSourceCode()).loc.start,
                    messageId: funcInfo.hasReturn
                        ? "expectedAtEnd"
                        : "expectedInside",
                    data: ***REMOVED***
                        name: astUtils.getFunctionNameWithKind(funcInfo.node)
                    ***REMOVED***
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***

            // Stacks this function's information.
            onCodePathStart(codePath, node) ***REMOVED***
                funcInfo = ***REMOVED***
                    upper: funcInfo,
                    codePath,
                    hasReturn: false,
                    shouldCheck:
                        TARGET_NODE_TYPE.test(node.type) &&
                        node.body.type === "BlockStatement" &&
                        isCallbackOfArrayMethod(node) &&
                        !node.async &&
                        !node.generator,
                    node
                ***REMOVED***;
            ***REMOVED***,

            // Pops this function's information.
            onCodePathEnd() ***REMOVED***
                funcInfo = funcInfo.upper;
            ***REMOVED***,

            // Checks the return statement is valid.
            ReturnStatement(node) ***REMOVED***
                if (funcInfo.shouldCheck) ***REMOVED***
                    funcInfo.hasReturn = true;

                    // if allowImplicit: false, should also check node.argument
                    if (!options.allowImplicit && !node.argument) ***REMOVED***
                        context.report(***REMOVED***
                            node,
                            messageId: "expectedReturnValue",
                            data: ***REMOVED***
                                name: lodash.upperFirst(astUtils.getFunctionNameWithKind(funcInfo.node))
                            ***REMOVED***
                        ***REMOVED***);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***,

            // Reports a given function if the last path is reachable.
            "FunctionExpression:exit": checkLastSegment,
            "ArrowFunctionExpression:exit": checkLastSegment
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
