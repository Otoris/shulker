/**
 * @fileoverview Disallow renaming import, export, and destructured assignments to the same name.
 * @author Kai Cataldo
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow renaming import, export, and destructured assignments to the same name",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-useless-rename"
        ***REMOVED***,

        fixable: "code",

        schema: [
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    ignoreDestructuring: ***REMOVED*** type: "boolean", default: false ***REMOVED***,
                    ignoreImport: ***REMOVED*** type: "boolean", default: false ***REMOVED***,
                    ignoreExport: ***REMOVED*** type: "boolean", default: false ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ]
    ***REMOVED***,

    create(context) ***REMOVED***
        const options = context.options[0] || ***REMOVED******REMOVED***,
            ignoreDestructuring = options.ignoreDestructuring === true,
            ignoreImport = options.ignoreImport === true,
            ignoreExport = options.ignoreExport === true;

        //--------------------------------------------------------------------------
        // Helpers
        //--------------------------------------------------------------------------

        /**
         * Reports error for unnecessarily renamed assignments
         * @param ***REMOVED***ASTNode***REMOVED*** node - node to report
         * @param ***REMOVED***ASTNode***REMOVED*** initial - node with initial name value
         * @param ***REMOVED***ASTNode***REMOVED*** result - node with new name value
         * @param ***REMOVED***string***REMOVED*** type - the type of the offending node
         * @returns ***REMOVED***void***REMOVED***
         */
        function reportError(node, initial, result, type) ***REMOVED***
            const name = initial.type === "Identifier" ? initial.name : initial.value;

            return context.report(***REMOVED***
                node,
                message: "***REMOVED******REMOVED***type***REMOVED******REMOVED*** ***REMOVED******REMOVED***name***REMOVED******REMOVED*** unnecessarily renamed.",
                data: ***REMOVED***
                    name,
                    type
                ***REMOVED***,
                fix(fixer) ***REMOVED***
                    return fixer.replaceTextRange([
                        initial.range[0],
                        result.range[1]
                    ], name);
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Checks whether a destructured assignment is unnecessarily renamed
         * @param ***REMOVED***ASTNode***REMOVED*** node - node to check
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkDestructured(node) ***REMOVED***
            if (ignoreDestructuring) ***REMOVED***
                return;
            ***REMOVED***

            const properties = node.properties;

            for (let i = 0; i < properties.length; i++) ***REMOVED***
                if (properties[i].shorthand) ***REMOVED***
                    continue;
                ***REMOVED***

                /**
                 * If an ObjectPattern property is computed, we have no idea
                 * if a rename is useless or not. If an ObjectPattern property
                 * lacks a key, it is likely an ExperimentalRestProperty and
                 * so there is no "renaming" occurring here.
                 */
                if (properties[i].computed || !properties[i].key) ***REMOVED***
                    continue;
                ***REMOVED***

                if (properties[i].key.type === "Identifier" && properties[i].key.name === properties[i].value.name ||
                        properties[i].key.type === "Literal" && properties[i].key.value === properties[i].value.name) ***REMOVED***
                    reportError(properties[i], properties[i].key, properties[i].value, "Destructuring assignment");
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        /**
         * Checks whether an import is unnecessarily renamed
         * @param ***REMOVED***ASTNode***REMOVED*** node - node to check
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkImport(node) ***REMOVED***
            if (ignoreImport) ***REMOVED***
                return;
            ***REMOVED***

            if (node.imported.name === node.local.name &&
                    node.imported.range[0] !== node.local.range[0]) ***REMOVED***
                reportError(node, node.imported, node.local, "Import");
            ***REMOVED***
        ***REMOVED***

        /**
         * Checks whether an export is unnecessarily renamed
         * @param ***REMOVED***ASTNode***REMOVED*** node - node to check
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkExport(node) ***REMOVED***
            if (ignoreExport) ***REMOVED***
                return;
            ***REMOVED***

            if (node.local.name === node.exported.name &&
                    node.local.range[0] !== node.exported.range[0]) ***REMOVED***
                reportError(node, node.local, node.exported, "Export");
            ***REMOVED***

        ***REMOVED***

        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------

        return ***REMOVED***
            ObjectPattern: checkDestructured,
            ImportSpecifier: checkImport,
            ExportSpecifier: checkExport
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
