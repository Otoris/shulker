/**
 * @fileoverview Restrict usage of specified globals.
 * @author BenoÃ®t Zugmeyer
 */
"use strict";

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

const DEFAULT_MESSAGE_TEMPLATE = "Unexpected use of '***REMOVED******REMOVED***name***REMOVED******REMOVED***'.",
    CUSTOM_MESSAGE_TEMPLATE = "Unexpected use of '***REMOVED******REMOVED***name***REMOVED******REMOVED***'. ***REMOVED******REMOVED***customMessage***REMOVED******REMOVED***";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow specified global variables",
            category: "Variables",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-restricted-globals"
        ***REMOVED***,

        schema: ***REMOVED***
            type: "array",
            items: ***REMOVED***
                oneOf: [
                    ***REMOVED***
                        type: "string"
                    ***REMOVED***,
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            name: ***REMOVED*** type: "string" ***REMOVED***,
                            message: ***REMOVED*** type: "string" ***REMOVED***
                        ***REMOVED***,
                        required: ["name"],
                        additionalProperties: false
                    ***REMOVED***
                ]
            ***REMOVED***,
            uniqueItems: true,
            minItems: 0
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***

        // If no globals are restricted, we don't need to do anything
        if (context.options.length === 0) ***REMOVED***
            return ***REMOVED******REMOVED***;
        ***REMOVED***

        const restrictedGlobalMessages = context.options.reduce((memo, option) => ***REMOVED***
            if (typeof option === "string") ***REMOVED***
                memo[option] = null;
            ***REMOVED*** else ***REMOVED***
                memo[option.name] = option.message;
            ***REMOVED***

            return memo;
        ***REMOVED***, ***REMOVED******REMOVED***);

        /**
         * Report a variable to be used as a restricted global.
         * @param ***REMOVED***Reference***REMOVED*** reference the variable reference
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function reportReference(reference) ***REMOVED***
            const name = reference.identifier.name,
                customMessage = restrictedGlobalMessages[name],
                message = customMessage
                    ? CUSTOM_MESSAGE_TEMPLATE
                    : DEFAULT_MESSAGE_TEMPLATE;

            context.report(***REMOVED***
                node: reference.identifier,
                message,
                data: ***REMOVED***
                    name,
                    customMessage
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Check if the given name is a restricted global name.
         * @param ***REMOVED***string***REMOVED*** name name of a variable
         * @returns ***REMOVED***boolean***REMOVED*** whether the variable is a restricted global or not
         * @private
         */
        function isRestricted(name) ***REMOVED***
            return Object.prototype.hasOwnProperty.call(restrictedGlobalMessages, name);
        ***REMOVED***

        return ***REMOVED***
            Program() ***REMOVED***
                const scope = context.getScope();

                // Report variables declared elsewhere (ex: variables defined as "global" by eslint)
                scope.variables.forEach(variable => ***REMOVED***
                    if (!variable.defs.length && isRestricted(variable.name)) ***REMOVED***
                        variable.references.forEach(reportReference);
                    ***REMOVED***
                ***REMOVED***);

                // Report variables not declared at all
                scope.through.forEach(reference => ***REMOVED***
                    if (isRestricted(reference.identifier.name)) ***REMOVED***
                        reportReference(reference);
                    ***REMOVED***
                ***REMOVED***);

            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
