/**
 * @fileoverview Rule to disallow assignments where both sides are exactly the same
 * @author Toru Nagashima
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

const SPACES = /\s+/gu;

/**
 * Checks whether the property of 2 given member expression nodes are the same
 * property or not.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** left - A member expression node to check.
 * @param ***REMOVED***ASTNode***REMOVED*** right - Another member expression node to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the member expressions have the same property.
 */
function isSameProperty(left, right) ***REMOVED***
    if (left.property.type === "Identifier" &&
        left.property.type === right.property.type &&
        left.property.name === right.property.name &&
        left.computed === right.computed
    ) ***REMOVED***
        return true;
    ***REMOVED***

    const lname = astUtils.getStaticPropertyName(left);
    const rname = astUtils.getStaticPropertyName(right);

    return lname !== null && lname === rname;
***REMOVED***

/**
 * Checks whether 2 given member expression nodes are the reference to the same
 * property or not.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** left - A member expression node to check.
 * @param ***REMOVED***ASTNode***REMOVED*** right - Another member expression node to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the member expressions are the reference to the
 *  same property or not.
 */
function isSameMember(left, right) ***REMOVED***
    if (!isSameProperty(left, right)) ***REMOVED***
        return false;
    ***REMOVED***

    const lobj = left.object;
    const robj = right.object;

    if (lobj.type !== robj.type) ***REMOVED***
        return false;
    ***REMOVED***
    if (lobj.type === "MemberExpression") ***REMOVED***
        return isSameMember(lobj, robj);
    ***REMOVED***
    return lobj.type === "Identifier" && lobj.name === robj.name;
***REMOVED***

/**
 * Traverses 2 Pattern nodes in parallel, then reports self-assignments.
 *
 * @param ***REMOVED***ASTNode|null***REMOVED*** left - A left node to traverse. This is a Pattern or
 *      a Property.
 * @param ***REMOVED***ASTNode|null***REMOVED*** right - A right node to traverse. This is a Pattern or
 *      a Property.
 * @param ***REMOVED***boolean***REMOVED*** props - The flag to check member expressions as well.
 * @param ***REMOVED***Function***REMOVED*** report - A callback function to report.
 * @returns ***REMOVED***void***REMOVED***
 */
function eachSelfAssignment(left, right, props, report) ***REMOVED***
    if (!left || !right) ***REMOVED***

        // do nothing
    ***REMOVED*** else if (
        left.type === "Identifier" &&
        right.type === "Identifier" &&
        left.name === right.name
    ) ***REMOVED***
        report(right);
    ***REMOVED*** else if (
        left.type === "ArrayPattern" &&
        right.type === "ArrayExpression"
    ) ***REMOVED***
        const end = Math.min(left.elements.length, right.elements.length);

        for (let i = 0; i < end; ++i) ***REMOVED***
            const leftElement = left.elements[i];
            const rightElement = right.elements[i];

            // Avoid cases such as [...a] = [...a, 1]
            if (
                leftElement &&
                leftElement.type === "RestElement" &&
                i < right.elements.length - 1
            ) ***REMOVED***
                break;
            ***REMOVED***

            eachSelfAssignment(leftElement, rightElement, props, report);

            // After a spread element, those indices are unknown.
            if (rightElement && rightElement.type === "SpreadElement") ***REMOVED***
                break;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED*** else if (
        left.type === "RestElement" &&
        right.type === "SpreadElement"
    ) ***REMOVED***
        eachSelfAssignment(left.argument, right.argument, props, report);
    ***REMOVED*** else if (
        left.type === "ObjectPattern" &&
        right.type === "ObjectExpression" &&
        right.properties.length >= 1
    ) ***REMOVED***

        /*
         * Gets the index of the last spread property.
         * It's possible to overwrite properties followed by it.
         */
        let startJ = 0;

        for (let i = right.properties.length - 1; i >= 0; --i) ***REMOVED***
            const propType = right.properties[i].type;

            if (propType === "SpreadElement" || propType === "ExperimentalSpreadProperty") ***REMOVED***
                startJ = i + 1;
                break;
            ***REMOVED***
        ***REMOVED***

        for (let i = 0; i < left.properties.length; ++i) ***REMOVED***
            for (let j = startJ; j < right.properties.length; ++j) ***REMOVED***
                eachSelfAssignment(
                    left.properties[i],
                    right.properties[j],
                    props,
                    report
                );
            ***REMOVED***
        ***REMOVED***
    ***REMOVED*** else if (
        left.type === "Property" &&
        right.type === "Property" &&
        right.kind === "init" &&
        !right.method
    ) ***REMOVED***
        const leftName = astUtils.getStaticPropertyName(left);

        if (leftName !== null && leftName === astUtils.getStaticPropertyName(right)) ***REMOVED***
            eachSelfAssignment(left.value, right.value, props, report);
        ***REMOVED***
    ***REMOVED*** else if (
        props &&
        left.type === "MemberExpression" &&
        right.type === "MemberExpression" &&
        isSameMember(left, right)
    ) ***REMOVED***
        report(right);
    ***REMOVED***
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "problem",

        docs: ***REMOVED***
            description: "disallow assignments where both sides are exactly the same",
            category: "Best Practices",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-self-assign"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    props: ***REMOVED***
                        type: "boolean",
                        default: true
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ]
    ***REMOVED***,

    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode();
        const [***REMOVED*** props = true ***REMOVED*** = ***REMOVED******REMOVED***] = context.options;

        /**
         * Reports a given node as self assignments.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to report. This is an Identifier node.
         * @returns ***REMOVED***void***REMOVED***
         */
        function report(node) ***REMOVED***
            context.report(***REMOVED***
                node,
                message: "'***REMOVED******REMOVED***name***REMOVED******REMOVED***' is assigned to itself.",
                data: ***REMOVED***
                    name: sourceCode.getText(node).replace(SPACES, "")
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        return ***REMOVED***
            AssignmentExpression(node) ***REMOVED***
                if (node.operator === "=") ***REMOVED***
                    eachSelfAssignment(node.left, node.right, props, report);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
