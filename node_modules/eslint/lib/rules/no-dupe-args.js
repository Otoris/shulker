/**
 * @fileoverview Rule to flag duplicate arguments
 * @author Jamund Ferguson
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "problem",

        docs: ***REMOVED***
            description: "disallow duplicate arguments in `function` definitions",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-dupe-args"
        ***REMOVED***,

        schema: [],

        messages: ***REMOVED***
            unexpected: "Duplicate param '***REMOVED******REMOVED***name***REMOVED******REMOVED***'."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***

        //--------------------------------------------------------------------------
        // Helpers
        //--------------------------------------------------------------------------

        /**
         * Checks whether or not a given definition is a parameter's.
         * @param ***REMOVED***eslint-scope.DefEntry***REMOVED*** def - A definition to check.
         * @returns ***REMOVED***boolean***REMOVED*** `true` if the definition is a parameter's.
         */
        function isParameter(def) ***REMOVED***
            return def.type === "Parameter";
        ***REMOVED***

        /**
         * Determines if a given node has duplicate parameters.
         * @param ***REMOVED***ASTNode***REMOVED*** node The node to check.
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function checkParams(node) ***REMOVED***
            const variables = context.getDeclaredVariables(node);

            for (let i = 0; i < variables.length; ++i) ***REMOVED***
                const variable = variables[i];

                // Checks and reports duplications.
                const defs = variable.defs.filter(isParameter);

                if (defs.length >= 2) ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        messageId: "unexpected",
                        data: ***REMOVED*** name: variable.name ***REMOVED***
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Public API
        //--------------------------------------------------------------------------

        return ***REMOVED***
            FunctionDeclaration: checkParams,
            FunctionExpression: checkParams
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
