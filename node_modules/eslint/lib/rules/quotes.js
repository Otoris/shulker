/**
 * @fileoverview A rule to choose between single and double quote marks
 * @author Matt DuVall <http://www.mattduvall.com/>, Brandon Payton
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const QUOTE_SETTINGS = ***REMOVED***
    double: ***REMOVED***
        quote: "\"",
        alternateQuote: "'",
        description: "doublequote"
    ***REMOVED***,
    single: ***REMOVED***
        quote: "'",
        alternateQuote: "\"",
        description: "singlequote"
    ***REMOVED***,
    backtick: ***REMOVED***
        quote: "`",
        alternateQuote: "\"",
        description: "backtick"
    ***REMOVED***
***REMOVED***;

// An unescaped newline is a newline preceded by an even number of backslashes.
const UNESCAPED_LINEBREAK_PATTERN = new RegExp(String.raw`(^|[^\\])(\\\\)*[$***REMOVED***Array.from(astUtils.LINEBREAKS).join("")***REMOVED***]`, "u");

/**
 * Switches quoting of javascript string between ' " and `
 * escaping and unescaping as necessary.
 * Only escaping of the minimal set of characters is changed.
 * Note: escaping of newlines when switching from backtick to other quotes is not handled.
 * @param ***REMOVED***string***REMOVED*** str - A string to convert.
 * @returns ***REMOVED***string***REMOVED*** The string with changed quotes.
 * @private
 */
QUOTE_SETTINGS.double.convert =
QUOTE_SETTINGS.single.convert =
QUOTE_SETTINGS.backtick.convert = function(str) ***REMOVED***
    const newQuote = this.quote;
    const oldQuote = str[0];

    if (newQuote === oldQuote) ***REMOVED***
        return str;
    ***REMOVED***
    return newQuote + str.slice(1, -1).replace(/\\(\$\***REMOVED***|\r\n?|\n|.)|["'`]|\$\***REMOVED***|(\r\n?|\n)/gu, (match, escaped, newline) => ***REMOVED***
        if (escaped === oldQuote || oldQuote === "`" && escaped === "$***REMOVED***") ***REMOVED***
            return escaped; // unescape
        ***REMOVED***
        if (match === newQuote || newQuote === "`" && match === "$***REMOVED***") ***REMOVED***
            return `\\$***REMOVED***match***REMOVED***`; // escape
        ***REMOVED***
        if (newline && oldQuote === "`") ***REMOVED***
            return "\\n"; // escape newlines
        ***REMOVED***
        return match;
    ***REMOVED***) + newQuote;
***REMOVED***;

const AVOID_ESCAPE = "avoid-escape";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "layout",

        docs: ***REMOVED***
            description: "enforce the consistent use of either backticks, double, or single quotes",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/quotes"
        ***REMOVED***,

        fixable: "code",

        schema: [
            ***REMOVED***
                enum: ["single", "double", "backtick"]
            ***REMOVED***,
            ***REMOVED***
                anyOf: [
                    ***REMOVED***
                        enum: ["avoid-escape"]
                    ***REMOVED***,
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            avoidEscape: ***REMOVED***
                                type: "boolean"
                            ***REMOVED***,
                            allowTemplateLiterals: ***REMOVED***
                                type: "boolean"
                            ***REMOVED***
                        ***REMOVED***,
                        additionalProperties: false
                    ***REMOVED***
                ]
            ***REMOVED***
        ]
    ***REMOVED***,

    create(context) ***REMOVED***

        const quoteOption = context.options[0],
            settings = QUOTE_SETTINGS[quoteOption || "double"],
            options = context.options[1],
            allowTemplateLiterals = options && options.allowTemplateLiterals === true,
            sourceCode = context.getSourceCode();
        let avoidEscape = options && options.avoidEscape === true;

        // deprecated
        if (options === AVOID_ESCAPE) ***REMOVED***
            avoidEscape = true;
        ***REMOVED***

        /**
         * Determines if a given node is part of JSX syntax.
         *
         * This function returns `true` in the following cases:
         *
         * - `<div className="foo"></div>` ... If the literal is an attribute value, the parent of the literal is `JSXAttribute`.
         * - `<div>foo</div>` ... If the literal is a text content, the parent of the literal is `JSXElement`.
         * - `<>foo</>` ... If the literal is a text content, the parent of the literal is `JSXFragment`.
         *
         * In particular, this function returns `false` in the following cases:
         *
         * - `<div className=***REMOVED***"foo"***REMOVED***></div>`
         * - `<div>***REMOVED***"foo"***REMOVED***</div>`
         *
         * In both cases, inside of the braces is handled as normal JavaScript.
         * The braces are `JSXExpressionContainer` nodes.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node The Literal node to check.
         * @returns ***REMOVED***boolean***REMOVED*** True if the node is a part of JSX, false if not.
         * @private
         */
        function isJSXLiteral(node) ***REMOVED***
            return node.parent.type === "JSXAttribute" || node.parent.type === "JSXElement" || node.parent.type === "JSXFragment";
        ***REMOVED***

        /**
         * Checks whether or not a given node is a directive.
         * The directive is a `ExpressionStatement` which has only a string literal.
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to check.
         * @returns ***REMOVED***boolean***REMOVED*** Whether or not the node is a directive.
         * @private
         */
        function isDirective(node) ***REMOVED***
            return (
                node.type === "ExpressionStatement" &&
                node.expression.type === "Literal" &&
                typeof node.expression.value === "string"
            );
        ***REMOVED***

        /**
         * Checks whether or not a given node is a part of directive prologues.
         * See also: http://www.ecma-international.org/ecma-262/6.0/#sec-directive-prologues-and-the-use-strict-directive
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to check.
         * @returns ***REMOVED***boolean***REMOVED*** Whether or not the node is a part of directive prologues.
         * @private
         */
        function isPartOfDirectivePrologue(node) ***REMOVED***
            const block = node.parent.parent;

            if (block.type !== "Program" && (block.type !== "BlockStatement" || !astUtils.isFunction(block.parent))) ***REMOVED***
                return false;
            ***REMOVED***

            // Check the node is at a prologue.
            for (let i = 0; i < block.body.length; ++i) ***REMOVED***
                const statement = block.body[i];

                if (statement === node.parent) ***REMOVED***
                    return true;
                ***REMOVED***
                if (!isDirective(statement)) ***REMOVED***
                    break;
                ***REMOVED***
            ***REMOVED***

            return false;
        ***REMOVED***

        /**
         * Checks whether or not a given node is allowed as non backtick.
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to check.
         * @returns ***REMOVED***boolean***REMOVED*** Whether or not the node is allowed as non backtick.
         * @private
         */
        function isAllowedAsNonBacktick(node) ***REMOVED***
            const parent = node.parent;

            switch (parent.type) ***REMOVED***

                // Directive Prologues.
                case "ExpressionStatement":
                    return isPartOfDirectivePrologue(node);

                // LiteralPropertyName.
                case "Property":
                case "MethodDefinition":
                    return parent.key === node && !parent.computed;

                // ModuleSpecifier.
                case "ImportDeclaration":
                case "ExportNamedDeclaration":
                case "ExportAllDeclaration":
                    return parent.source === node;

                // Others don't allow.
                default:
                    return false;
            ***REMOVED***
        ***REMOVED***

        /**
         * Checks whether or not a given TemplateLiteral node is actually using any of the special features provided by template literal strings.
         * @param ***REMOVED***ASTNode***REMOVED*** node - A TemplateLiteral node to check.
         * @returns ***REMOVED***boolean***REMOVED*** Whether or not the TemplateLiteral node is using any of the special features provided by template literal strings.
         * @private
         */
        function isUsingFeatureOfTemplateLiteral(node) ***REMOVED***
            const hasTag = node.parent.type === "TaggedTemplateExpression" && node === node.parent.quasi;

            if (hasTag) ***REMOVED***
                return true;
            ***REMOVED***

            const hasStringInterpolation = node.expressions.length > 0;

            if (hasStringInterpolation) ***REMOVED***
                return true;
            ***REMOVED***

            const isMultilineString = node.quasis.length >= 1 && UNESCAPED_LINEBREAK_PATTERN.test(node.quasis[0].value.raw);

            if (isMultilineString) ***REMOVED***
                return true;
            ***REMOVED***

            return false;
        ***REMOVED***

        return ***REMOVED***

            Literal(node) ***REMOVED***
                const val = node.value,
                    rawVal = node.raw;

                if (settings && typeof val === "string") ***REMOVED***
                    let isValid = (quoteOption === "backtick" && isAllowedAsNonBacktick(node)) ||
                        isJSXLiteral(node) ||
                        astUtils.isSurroundedBy(rawVal, settings.quote);

                    if (!isValid && avoidEscape) ***REMOVED***
                        isValid = astUtils.isSurroundedBy(rawVal, settings.alternateQuote) && rawVal.indexOf(settings.quote) >= 0;
                    ***REMOVED***

                    if (!isValid) ***REMOVED***
                        context.report(***REMOVED***
                            node,
                            message: "Strings must use ***REMOVED******REMOVED***description***REMOVED******REMOVED***.",
                            data: ***REMOVED***
                                description: settings.description
                            ***REMOVED***,
                            fix(fixer) ***REMOVED***
                                if (quoteOption === "backtick" && astUtils.hasOctalEscapeSequence(rawVal)) ***REMOVED***

                                    // An octal escape sequence in a template literal would produce syntax error, even in non-strict mode.
                                    return null;
                                ***REMOVED***

                                return fixer.replaceText(node, settings.convert(node.raw));
                            ***REMOVED***
                        ***REMOVED***);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***,

            TemplateLiteral(node) ***REMOVED***

                // Don't throw an error if backticks are expected or a template literal feature is in use.
                if (
                    allowTemplateLiterals ||
                    quoteOption === "backtick" ||
                    isUsingFeatureOfTemplateLiteral(node)
                ) ***REMOVED***
                    return;
                ***REMOVED***

                context.report(***REMOVED***
                    node,
                    message: "Strings must use ***REMOVED******REMOVED***description***REMOVED******REMOVED***.",
                    data: ***REMOVED***
                        description: settings.description
                    ***REMOVED***,
                    fix(fixer) ***REMOVED***
                        if (isPartOfDirectivePrologue(node)) ***REMOVED***

                            /*
                             * TemplateLiterals in a directive prologue aren't actually directives, but if they're
                             * in the directive prologue, then fixing them might turn them into directives and change
                             * the behavior of the code.
                             */
                            return null;
                        ***REMOVED***
                        return fixer.replaceText(node, settings.convert(sourceCode.getText(node)));
                    ***REMOVED***
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
