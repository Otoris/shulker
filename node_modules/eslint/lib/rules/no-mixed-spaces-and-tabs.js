/**
 * @fileoverview Disallow mixed spaces and tabs for indentation
 * @author Jary Niebur
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "layout",

        docs: ***REMOVED***
            description: "disallow mixed spaces and tabs for indentation",
            category: "Stylistic Issues",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-mixed-spaces-and-tabs"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                enum: ["smart-tabs", true, false]
            ***REMOVED***
        ]
    ***REMOVED***,

    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode();

        let smartTabs;
        const ignoredLocs = [];

        switch (context.options[0]) ***REMOVED***
            case true: // Support old syntax, maybe add deprecation warning here
            case "smart-tabs":
                smartTabs = true;
                break;
            default:
                smartTabs = false;
        ***REMOVED***

        /**
         * Determines if a given line and column are before a location.
         * @param ***REMOVED***Location***REMOVED*** loc The location object from an AST node.
         * @param ***REMOVED***int***REMOVED*** line The line to check.
         * @param ***REMOVED***int***REMOVED*** column The column to check.
         * @returns ***REMOVED***boolean***REMOVED*** True if the line and column are before the location, false if not.
         * @private
         */
        function beforeLoc(loc, line, column) ***REMOVED***
            if (line < loc.start.line) ***REMOVED***
                return true;
            ***REMOVED***
            return line === loc.start.line && column < loc.start.column;
        ***REMOVED***

        /**
         * Determines if a given line and column are after a location.
         * @param ***REMOVED***Location***REMOVED*** loc The location object from an AST node.
         * @param ***REMOVED***int***REMOVED*** line The line to check.
         * @param ***REMOVED***int***REMOVED*** column The column to check.
         * @returns ***REMOVED***boolean***REMOVED*** True if the line and column are after the location, false if not.
         * @private
         */
        function afterLoc(loc, line, column) ***REMOVED***
            if (line > loc.end.line) ***REMOVED***
                return true;
            ***REMOVED***
            return line === loc.end.line && column > loc.end.column;
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------

        return ***REMOVED***

            TemplateElement(node) ***REMOVED***
                ignoredLocs.push(node.loc);
            ***REMOVED***,

            "Program:exit"(node) ***REMOVED***

                /*
                 * At least one space followed by a tab
                 * or the reverse before non-tab/-space
                 * characters begin.
                 */
                let regex = /^(?=[\t ]*(\t | \t))/u;
                const lines = sourceCode.lines,
                    comments = sourceCode.getAllComments();

                comments.forEach(comment => ***REMOVED***
                    ignoredLocs.push(comment.loc);
                ***REMOVED***);

                ignoredLocs.sort((first, second) => ***REMOVED***
                    if (beforeLoc(first, second.start.line, second.start.column)) ***REMOVED***
                        return 1;
                    ***REMOVED***

                    if (beforeLoc(second, first.start.line, second.start.column)) ***REMOVED***
                        return -1;
                    ***REMOVED***

                    return 0;
                ***REMOVED***);

                if (smartTabs) ***REMOVED***

                    /*
                     * At least one space followed by a tab
                     * before non-tab/-space characters begin.
                     */
                    regex = /^(?=[\t ]* \t)/u;
                ***REMOVED***

                lines.forEach((line, i) => ***REMOVED***
                    const match = regex.exec(line);

                    if (match) ***REMOVED***
                        const lineNumber = i + 1,
                            column = match.index + 1;

                        for (let j = 0; j < ignoredLocs.length; j++) ***REMOVED***
                            if (beforeLoc(ignoredLocs[j], lineNumber, column)) ***REMOVED***
                                continue;
                            ***REMOVED***
                            if (afterLoc(ignoredLocs[j], lineNumber, column)) ***REMOVED***
                                continue;
                            ***REMOVED***

                            return;
                        ***REMOVED***

                        context.report(***REMOVED*** node, loc: ***REMOVED*** line: lineNumber, column ***REMOVED***, message: "Mixed spaces and tabs." ***REMOVED***);
                    ***REMOVED***
                ***REMOVED***);
            ***REMOVED***

        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
