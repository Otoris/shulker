/**
 * @fileoverview Rule for disallowing require() outside of the top-level module context
 * @author Jamund Ferguson
 */

"use strict";

const ACCEPTABLE_PARENTS = [
    "AssignmentExpression",
    "VariableDeclarator",
    "MemberExpression",
    "ExpressionStatement",
    "CallExpression",
    "ConditionalExpression",
    "Program",
    "VariableDeclaration"
];

/**
 * Finds the eslint-scope reference in the given scope.
 * @param ***REMOVED***Object***REMOVED*** scope The scope to search.
 * @param ***REMOVED***ASTNode***REMOVED*** node The identifier node.
 * @returns ***REMOVED***Reference|null***REMOVED*** Returns the found reference or null if none were found.
 */
function findReference(scope, node) ***REMOVED***
    const references = scope.references.filter(reference => reference.identifier.range[0] === node.range[0] &&
            reference.identifier.range[1] === node.range[1]);

    /* istanbul ignore else: correctly returns null */
    if (references.length === 1) ***REMOVED***
        return references[0];
    ***REMOVED***
    return null;

***REMOVED***

/**
 * Checks if the given identifier node is shadowed in the given scope.
 * @param ***REMOVED***Object***REMOVED*** scope The current scope.
 * @param ***REMOVED***ASTNode***REMOVED*** node The identifier node to check.
 * @returns ***REMOVED***boolean***REMOVED*** Whether or not the name is shadowed.
 */
function isShadowed(scope, node) ***REMOVED***
    const reference = findReference(scope, node);

    return reference && reference.resolved && reference.resolved.defs.length > 0;
***REMOVED***

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "require `require()` calls to be placed at top-level module scope",
            category: "Node.js and CommonJS",
            recommended: false,
            url: "https://eslint.org/docs/rules/global-require"
        ***REMOVED***,

        schema: [],
        messages: ***REMOVED***
            unexpected: "Unexpected require()."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        return ***REMOVED***
            CallExpression(node) ***REMOVED***
                const currentScope = context.getScope();

                if (node.callee.name === "require" && !isShadowed(currentScope, node.callee)) ***REMOVED***
                    const isGoodRequire = context.getAncestors().every(parent => ACCEPTABLE_PARENTS.indexOf(parent.type) > -1);

                    if (!isGoodRequire) ***REMOVED***
                        context.report(***REMOVED*** node, messageId: "unexpected" ***REMOVED***);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
