/**
 * @fileoverview Disallows or enforces spaces inside of object literals.
 * @author Jamund Ferguson
 */
"use strict";

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "layout",

        docs: ***REMOVED***
            description: "enforce consistent spacing inside braces",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/object-curly-spacing"
        ***REMOVED***,

        fixable: "whitespace",

        schema: [
            ***REMOVED***
                enum: ["always", "never"]
            ***REMOVED***,
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    arraysInObjects: ***REMOVED***
                        type: "boolean"
                    ***REMOVED***,
                    objectsInObjects: ***REMOVED***
                        type: "boolean"
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ]
    ***REMOVED***,

    create(context) ***REMOVED***
        const spaced = context.options[0] === "always",
            sourceCode = context.getSourceCode();

        /**
         * Determines whether an option is set, relative to the spacing option.
         * If spaced is "always", then check whether option is set to false.
         * If spaced is "never", then check whether option is set to true.
         * @param ***REMOVED***Object***REMOVED*** option - The option to exclude.
         * @returns ***REMOVED***boolean***REMOVED*** Whether or not the property is excluded.
         */
        function isOptionSet(option) ***REMOVED***
            return context.options[1] ? context.options[1][option] === !spaced : false;
        ***REMOVED***

        const options = ***REMOVED***
            spaced,
            arraysInObjectsException: isOptionSet("arraysInObjects"),
            objectsInObjectsException: isOptionSet("objectsInObjects")
        ***REMOVED***;

        //--------------------------------------------------------------------------
        // Helpers
        //--------------------------------------------------------------------------

        /**
         * Reports that there shouldn't be a space after the first token
         * @param ***REMOVED***ASTNode***REMOVED*** node - The node to report in the event of an error.
         * @param ***REMOVED***Token***REMOVED*** token - The token to use for the report.
         * @returns ***REMOVED***void***REMOVED***
         */
        function reportNoBeginningSpace(node, token) ***REMOVED***
            context.report(***REMOVED***
                node,
                loc: token.loc.start,
                message: "There should be no space after '***REMOVED******REMOVED***token***REMOVED******REMOVED***'.",
                data: ***REMOVED***
                    token: token.value
                ***REMOVED***,
                fix(fixer) ***REMOVED***
                    const nextToken = context.getSourceCode().getTokenAfter(token, ***REMOVED*** includeComments: true ***REMOVED***);

                    return fixer.removeRange([token.range[1], nextToken.range[0]]);
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Reports that there shouldn't be a space before the last token
         * @param ***REMOVED***ASTNode***REMOVED*** node - The node to report in the event of an error.
         * @param ***REMOVED***Token***REMOVED*** token - The token to use for the report.
         * @returns ***REMOVED***void***REMOVED***
         */
        function reportNoEndingSpace(node, token) ***REMOVED***
            context.report(***REMOVED***
                node,
                loc: token.loc.start,
                message: "There should be no space before '***REMOVED******REMOVED***token***REMOVED******REMOVED***'.",
                data: ***REMOVED***
                    token: token.value
                ***REMOVED***,
                fix(fixer) ***REMOVED***
                    const previousToken = context.getSourceCode().getTokenBefore(token, ***REMOVED*** includeComments: true ***REMOVED***);

                    return fixer.removeRange([previousToken.range[1], token.range[0]]);
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Reports that there should be a space after the first token
         * @param ***REMOVED***ASTNode***REMOVED*** node - The node to report in the event of an error.
         * @param ***REMOVED***Token***REMOVED*** token - The token to use for the report.
         * @returns ***REMOVED***void***REMOVED***
         */
        function reportRequiredBeginningSpace(node, token) ***REMOVED***
            context.report(***REMOVED***
                node,
                loc: token.loc.start,
                message: "A space is required after '***REMOVED******REMOVED***token***REMOVED******REMOVED***'.",
                data: ***REMOVED***
                    token: token.value
                ***REMOVED***,
                fix(fixer) ***REMOVED***
                    return fixer.insertTextAfter(token, " ");
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Reports that there should be a space before the last token
         * @param ***REMOVED***ASTNode***REMOVED*** node - The node to report in the event of an error.
         * @param ***REMOVED***Token***REMOVED*** token - The token to use for the report.
         * @returns ***REMOVED***void***REMOVED***
         */
        function reportRequiredEndingSpace(node, token) ***REMOVED***
            context.report(***REMOVED***
                node,
                loc: token.loc.start,
                message: "A space is required before '***REMOVED******REMOVED***token***REMOVED******REMOVED***'.",
                data: ***REMOVED***
                    token: token.value
                ***REMOVED***,
                fix(fixer) ***REMOVED***
                    return fixer.insertTextBefore(token, " ");
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Determines if spacing in curly braces is valid.
         * @param ***REMOVED***ASTNode***REMOVED*** node The AST node to check.
         * @param ***REMOVED***Token***REMOVED*** first The first token to check (should be the opening brace)
         * @param ***REMOVED***Token***REMOVED*** second The second token to check (should be first after the opening brace)
         * @param ***REMOVED***Token***REMOVED*** penultimate The penultimate token to check (should be last before closing brace)
         * @param ***REMOVED***Token***REMOVED*** last The last token to check (should be closing brace)
         * @returns ***REMOVED***void***REMOVED***
         */
        function validateBraceSpacing(node, first, second, penultimate, last) ***REMOVED***
            if (astUtils.isTokenOnSameLine(first, second)) ***REMOVED***
                const firstSpaced = sourceCode.isSpaceBetweenTokens(first, second);

                if (options.spaced && !firstSpaced) ***REMOVED***
                    reportRequiredBeginningSpace(node, first);
                ***REMOVED***
                if (!options.spaced && firstSpaced && second.type !== "Line") ***REMOVED***
                    reportNoBeginningSpace(node, first);
                ***REMOVED***
            ***REMOVED***

            if (astUtils.isTokenOnSameLine(penultimate, last)) ***REMOVED***
                const shouldCheckPenultimate = (
                    options.arraysInObjectsException && astUtils.isClosingBracketToken(penultimate) ||
                    options.objectsInObjectsException && astUtils.isClosingBraceToken(penultimate)
                );
                const penultimateType = shouldCheckPenultimate && sourceCode.getNodeByRangeIndex(penultimate.range[0]).type;

                const closingCurlyBraceMustBeSpaced = (
                    options.arraysInObjectsException && penultimateType === "ArrayExpression" ||
                    options.objectsInObjectsException && (penultimateType === "ObjectExpression" || penultimateType === "ObjectPattern")
                ) ? !options.spaced : options.spaced;

                const lastSpaced = sourceCode.isSpaceBetweenTokens(penultimate, last);

                if (closingCurlyBraceMustBeSpaced && !lastSpaced) ***REMOVED***
                    reportRequiredEndingSpace(node, last);
                ***REMOVED***
                if (!closingCurlyBraceMustBeSpaced && lastSpaced) ***REMOVED***
                    reportNoEndingSpace(node, last);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        /**
         * Gets '***REMOVED***' token of an object node.
         *
         * Because the last token of object patterns might be a type annotation,
         * this traverses tokens preceded by the last property, then returns the
         * first '***REMOVED***' token.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - The node to get. This node is an
         *      ObjectExpression or an ObjectPattern. And this node has one or
         *      more properties.
         * @returns ***REMOVED***Token***REMOVED*** '***REMOVED***' token.
         */
        function getClosingBraceOfObject(node) ***REMOVED***
            const lastProperty = node.properties[node.properties.length - 1];

            return sourceCode.getTokenAfter(lastProperty, astUtils.isClosingBraceToken);
        ***REMOVED***

        /**
         * Reports a given object node if spacing in curly braces is invalid.
         * @param ***REMOVED***ASTNode***REMOVED*** node - An ObjectExpression or ObjectPattern node to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkForObject(node) ***REMOVED***
            if (node.properties.length === 0) ***REMOVED***
                return;
            ***REMOVED***

            const first = sourceCode.getFirstToken(node),
                last = getClosingBraceOfObject(node),
                second = sourceCode.getTokenAfter(first, ***REMOVED*** includeComments: true ***REMOVED***),
                penultimate = sourceCode.getTokenBefore(last, ***REMOVED*** includeComments: true ***REMOVED***);

            validateBraceSpacing(node, first, second, penultimate, last);
        ***REMOVED***

        /**
         * Reports a given import node if spacing in curly braces is invalid.
         * @param ***REMOVED***ASTNode***REMOVED*** node - An ImportDeclaration node to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkForImport(node) ***REMOVED***
            if (node.specifiers.length === 0) ***REMOVED***
                return;
            ***REMOVED***

            let firstSpecifier = node.specifiers[0];
            const lastSpecifier = node.specifiers[node.specifiers.length - 1];

            if (lastSpecifier.type !== "ImportSpecifier") ***REMOVED***
                return;
            ***REMOVED***
            if (firstSpecifier.type !== "ImportSpecifier") ***REMOVED***
                firstSpecifier = node.specifiers[1];
            ***REMOVED***

            const first = sourceCode.getTokenBefore(firstSpecifier),
                last = sourceCode.getTokenAfter(lastSpecifier, astUtils.isNotCommaToken),
                second = sourceCode.getTokenAfter(first, ***REMOVED*** includeComments: true ***REMOVED***),
                penultimate = sourceCode.getTokenBefore(last, ***REMOVED*** includeComments: true ***REMOVED***);

            validateBraceSpacing(node, first, second, penultimate, last);
        ***REMOVED***

        /**
         * Reports a given export node if spacing in curly braces is invalid.
         * @param ***REMOVED***ASTNode***REMOVED*** node - An ExportNamedDeclaration node to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkForExport(node) ***REMOVED***
            if (node.specifiers.length === 0) ***REMOVED***
                return;
            ***REMOVED***

            const firstSpecifier = node.specifiers[0],
                lastSpecifier = node.specifiers[node.specifiers.length - 1],
                first = sourceCode.getTokenBefore(firstSpecifier),
                last = sourceCode.getTokenAfter(lastSpecifier, astUtils.isNotCommaToken),
                second = sourceCode.getTokenAfter(first, ***REMOVED*** includeComments: true ***REMOVED***),
                penultimate = sourceCode.getTokenBefore(last, ***REMOVED*** includeComments: true ***REMOVED***);

            validateBraceSpacing(node, first, second, penultimate, last);
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------

        return ***REMOVED***

            // var ***REMOVED***x***REMOVED*** = y;
            ObjectPattern: checkForObject,

            // var y = ***REMOVED***x: 'y'***REMOVED***
            ObjectExpression: checkForObject,

            // import ***REMOVED***y***REMOVED*** from 'x';
            ImportDeclaration: checkForImport,

            // export ***REMOVED***name***REMOVED*** from 'yo';
            ExportNamedDeclaration: checkForExport
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
