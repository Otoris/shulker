/**
 * @fileoverview Rule to enforce the position of line comments
 * @author Alberto RodrÃ­guez
 */
"use strict";

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "layout",

        docs: ***REMOVED***
            description: "enforce position of line comments",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/line-comment-position"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                oneOf: [
                    ***REMOVED***
                        enum: ["above", "beside"]
                    ***REMOVED***,
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            position: ***REMOVED***
                                enum: ["above", "beside"]
                            ***REMOVED***,
                            ignorePattern: ***REMOVED***
                                type: "string"
                            ***REMOVED***,
                            applyDefaultPatterns: ***REMOVED***
                                type: "boolean"
                            ***REMOVED***,
                            applyDefaultIgnorePatterns: ***REMOVED***
                                type: "boolean"
                            ***REMOVED***
                        ***REMOVED***,
                        additionalProperties: false
                    ***REMOVED***
                ]
            ***REMOVED***
        ],
        messages: ***REMOVED***
            above: "Expected comment to be above code.",
            beside: "Expected comment to be beside code."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const options = context.options[0];

        let above,
            ignorePattern,
            applyDefaultIgnorePatterns = true;

        if (!options || typeof options === "string") ***REMOVED***
            above = !options || options === "above";

        ***REMOVED*** else ***REMOVED***
            above = !options.position || options.position === "above";
            ignorePattern = options.ignorePattern;

            if (Object.prototype.hasOwnProperty.call(options, "applyDefaultIgnorePatterns")) ***REMOVED***
                applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns;
            ***REMOVED*** else ***REMOVED***
                applyDefaultIgnorePatterns = options.applyDefaultPatterns !== false;
            ***REMOVED***
        ***REMOVED***

        const defaultIgnoreRegExp = astUtils.COMMENTS_IGNORE_PATTERN;
        const fallThroughRegExp = /^\s*falls?\s?through/u;
        const customIgnoreRegExp = new RegExp(ignorePattern, "u");
        const sourceCode = context.getSourceCode();

        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------

        return ***REMOVED***
            Program() ***REMOVED***
                const comments = sourceCode.getAllComments();

                comments.filter(token => token.type === "Line").forEach(node => ***REMOVED***
                    if (applyDefaultIgnorePatterns && (defaultIgnoreRegExp.test(node.value) || fallThroughRegExp.test(node.value))) ***REMOVED***
                        return;
                    ***REMOVED***

                    if (ignorePattern && customIgnoreRegExp.test(node.value)) ***REMOVED***
                        return;
                    ***REMOVED***

                    const previous = sourceCode.getTokenBefore(node, ***REMOVED*** includeComments: true ***REMOVED***);
                    const isOnSameLine = previous && previous.loc.end.line === node.loc.start.line;

                    if (above) ***REMOVED***
                        if (isOnSameLine) ***REMOVED***
                            context.report(***REMOVED***
                                node,
                                messageId: "above"
                            ***REMOVED***);
                        ***REMOVED***
                    ***REMOVED*** else ***REMOVED***
                        if (!isOnSameLine) ***REMOVED***
                            context.report(***REMOVED***
                                node,
                                messageId: "beside"
                            ***REMOVED***);
                        ***REMOVED***
                    ***REMOVED***
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
