/**
 * @fileoverview enforce "for" loop update clause moving the counter in the right direction.(for-direction)
 * @author Aladdin-ADD<hh_2013@foxmail.com>
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "problem",

        docs: ***REMOVED***
            description: "enforce \"for\" loop update clause moving the counter in the right direction.",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/for-direction"
        ***REMOVED***,

        fixable: null,
        schema: [],

        messages: ***REMOVED***
            incorrectDirection: "The update clause in this loop moves the variable in the wrong direction."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***

        /**
         * report an error.
         * @param ***REMOVED***ASTNode***REMOVED*** node the node to report.
         * @returns ***REMOVED***void***REMOVED***
         */
        function report(node) ***REMOVED***
            context.report(***REMOVED***
                node,
                messageId: "incorrectDirection"
            ***REMOVED***);
        ***REMOVED***

        /**
         * check the right side of the assignment
         * @param ***REMOVED***ASTNode***REMOVED*** update UpdateExpression to check
         * @param ***REMOVED***int***REMOVED*** dir expected direction that could either be turned around or invalidated
         * @returns ***REMOVED***int***REMOVED*** return dir, the negated dir or zero if it's not clear for identifiers
         */
        function getRightDirection(update, dir) ***REMOVED***
            if (update.right.type === "UnaryExpression") ***REMOVED***
                if (update.right.operator === "-") ***REMOVED***
                    return -dir;
                ***REMOVED***
            ***REMOVED*** else if (update.right.type === "Identifier") ***REMOVED***
                return 0;
            ***REMOVED***
            return dir;
        ***REMOVED***

        /**
         * check UpdateExpression add/sub the counter
         * @param ***REMOVED***ASTNode***REMOVED*** update UpdateExpression to check
         * @param ***REMOVED***string***REMOVED*** counter variable name to check
         * @returns ***REMOVED***int***REMOVED*** if add return 1, if sub return -1, if nochange, return 0
         */
        function getUpdateDirection(update, counter) ***REMOVED***
            if (update.argument.type === "Identifier" && update.argument.name === counter) ***REMOVED***
                if (update.operator === "++") ***REMOVED***
                    return 1;
                ***REMOVED***
                if (update.operator === "--") ***REMOVED***
                    return -1;
                ***REMOVED***
            ***REMOVED***
            return 0;
        ***REMOVED***

        /**
         * check AssignmentExpression add/sub the counter
         * @param ***REMOVED***ASTNode***REMOVED*** update AssignmentExpression to check
         * @param ***REMOVED***string***REMOVED*** counter variable name to check
         * @returns ***REMOVED***int***REMOVED*** if add return 1, if sub return -1, if nochange, return 0
         */
        function getAssignmentDirection(update, counter) ***REMOVED***
            if (update.left.name === counter) ***REMOVED***
                if (update.operator === "+=") ***REMOVED***
                    return getRightDirection(update, 1);
                ***REMOVED***
                if (update.operator === "-=") ***REMOVED***
                    return getRightDirection(update, -1);
                ***REMOVED***
            ***REMOVED***
            return 0;
        ***REMOVED***
        return ***REMOVED***
            ForStatement(node) ***REMOVED***

                if (node.test && node.test.type === "BinaryExpression" && node.test.left.type === "Identifier" && node.update) ***REMOVED***
                    const counter = node.test.left.name;
                    const operator = node.test.operator;
                    const update = node.update;

                    let wrongDirection;

                    if (operator === "<" || operator === "<=") ***REMOVED***
                        wrongDirection = -1;
                    ***REMOVED*** else if (operator === ">" || operator === ">=") ***REMOVED***
                        wrongDirection = 1;
                    ***REMOVED*** else ***REMOVED***
                        return;
                    ***REMOVED***

                    if (update.type === "UpdateExpression") ***REMOVED***
                        if (getUpdateDirection(update, counter) === wrongDirection) ***REMOVED***
                            report(node);
                        ***REMOVED***
                    ***REMOVED*** else if (update.type === "AssignmentExpression" && getAssignmentDirection(update, counter) === wrongDirection) ***REMOVED***
                        report(node);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
