/**
 * @fileoverview Rule to enforce declarations in program or function body root.
 * @author Brandon Mills
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "problem",

        docs: ***REMOVED***
            description: "disallow variable or `function` declarations in nested blocks",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-inner-declarations"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                enum: ["functions", "both"]
            ***REMOVED***
        ]
    ***REMOVED***,

    create(context) ***REMOVED***

        /**
         * Find the nearest Program or Function ancestor node.
         * @returns ***REMOVED***Object***REMOVED*** Ancestor's type and distance from node.
         */
        function nearestBody() ***REMOVED***
            const ancestors = context.getAncestors();
            let ancestor = ancestors.pop(),
                generation = 1;

            while (ancestor && ["Program", "FunctionDeclaration",
                "FunctionExpression", "ArrowFunctionExpression"
            ].indexOf(ancestor.type) < 0) ***REMOVED***
                generation += 1;
                ancestor = ancestors.pop();
            ***REMOVED***

            return ***REMOVED***

                // Type of containing ancestor
                type: ancestor.type,

                // Separation between ancestor and node
                distance: generation
            ***REMOVED***;
        ***REMOVED***

        /**
         * Ensure that a given node is at a program or function body's root.
         * @param ***REMOVED***ASTNode***REMOVED*** node Declaration node to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function check(node) ***REMOVED***
            const body = nearestBody(),
                valid = ((body.type === "Program" && body.distance === 1) ||
                    body.distance === 2);

            if (!valid) ***REMOVED***
                context.report(***REMOVED***
                    node,
                    message: "Move ***REMOVED******REMOVED***type***REMOVED******REMOVED*** declaration to ***REMOVED******REMOVED***body***REMOVED******REMOVED*** root.",
                    data: ***REMOVED***
                        type: (node.type === "FunctionDeclaration" ? "function" : "variable"),
                        body: (body.type === "Program" ? "program" : "function body")
                    ***REMOVED***
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***

            FunctionDeclaration: check,
            VariableDeclaration(node) ***REMOVED***
                if (context.options[0] === "both" && node.kind === "var") ***REMOVED***
                    check(node);
                ***REMOVED***
            ***REMOVED***

        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
