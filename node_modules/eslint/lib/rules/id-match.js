/**
 * @fileoverview Rule to flag non-matching identifiers
 * @author Matthieu Larcher
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "require identifiers to match a specified regular expression",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/id-match"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                type: "string"
            ***REMOVED***,
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    properties: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***,
                    onlyDeclarations: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***,
                    ignoreDestructuring: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
        ],
        messages: ***REMOVED***
            notMatch: "Identifier '***REMOVED******REMOVED***name***REMOVED******REMOVED***' does not match the pattern '***REMOVED******REMOVED***pattern***REMOVED******REMOVED***'."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***

        //--------------------------------------------------------------------------
        // Options
        //--------------------------------------------------------------------------
        const pattern = context.options[0] || "^.+$",
            regexp = new RegExp(pattern, "u");

        const options = context.options[1] || ***REMOVED******REMOVED***,
            properties = !!options.properties,
            onlyDeclarations = !!options.onlyDeclarations,
            ignoreDestructuring = !!options.ignoreDestructuring;

        //--------------------------------------------------------------------------
        // Helpers
        //--------------------------------------------------------------------------

        // contains reported nodes to avoid reporting twice on destructuring with shorthand notation
        const reported = new Map();
        const ALLOWED_PARENT_TYPES = new Set(["CallExpression", "NewExpression"]);
        const DECLARATION_TYPES = new Set(["FunctionDeclaration", "VariableDeclarator"]);
        const IMPORT_TYPES = new Set(["ImportSpecifier", "ImportNamespaceSpecifier", "ImportDefaultSpecifier"]);

        /**
         * Checks if a string matches the provided pattern
         * @param ***REMOVED***string***REMOVED*** name The string to check.
         * @returns ***REMOVED***boolean***REMOVED*** if the string is a match
         * @private
         */
        function isInvalid(name) ***REMOVED***
            return !regexp.test(name);
        ***REMOVED***

        /**
         * Checks if a parent of a node is an ObjectPattern.
         * @param ***REMOVED***ASTNode***REMOVED*** node The node to check.
         * @returns ***REMOVED***boolean***REMOVED*** if the node is inside an ObjectPattern
         * @private
         */
        function isInsideObjectPattern(node) ***REMOVED***
            let ***REMOVED*** parent ***REMOVED*** = node;

            while (parent) ***REMOVED***
                if (parent.type === "ObjectPattern") ***REMOVED***
                    return true;
                ***REMOVED***

                parent = parent.parent;
            ***REMOVED***

            return false;
        ***REMOVED***

        /**
         * Verifies if we should report an error or not based on the effective
         * parent node and the identifier name.
         * @param ***REMOVED***ASTNode***REMOVED*** effectiveParent The effective parent node of the node to be reported
         * @param ***REMOVED***string***REMOVED*** name The identifier name of the identifier node
         * @returns ***REMOVED***boolean***REMOVED*** whether an error should be reported or not
         */
        function shouldReport(effectiveParent, name) ***REMOVED***
            return (!onlyDeclarations || DECLARATION_TYPES.has(effectiveParent.type)) &&
                !ALLOWED_PARENT_TYPES.has(effectiveParent.type) && isInvalid(name);
        ***REMOVED***

        /**
         * Reports an AST node as a rule violation.
         * @param ***REMOVED***ASTNode***REMOVED*** node The node to report.
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function report(node) ***REMOVED***
            if (!reported.has(node)) ***REMOVED***
                context.report(***REMOVED***
                    node,
                    messageId: "notMatch",
                    data: ***REMOVED***
                        name: node.name,
                        pattern
                    ***REMOVED***
                ***REMOVED***);
                reported.set(node, true);
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***

            Identifier(node) ***REMOVED***
                const name = node.name,
                    parent = node.parent,
                    effectiveParent = (parent.type === "MemberExpression") ? parent.parent : parent;

                if (parent.type === "MemberExpression") ***REMOVED***

                    if (!properties) ***REMOVED***
                        return;
                    ***REMOVED***

                    // Always check object names
                    if (parent.object.type === "Identifier" &&
                        parent.object.name === name) ***REMOVED***
                        if (isInvalid(name)) ***REMOVED***
                            report(node);
                        ***REMOVED***

                    // Report AssignmentExpressions left side's assigned variable id
                    ***REMOVED*** else if (effectiveParent.type === "AssignmentExpression" &&
                        effectiveParent.left.type === "MemberExpression" &&
                        effectiveParent.left.property.name === node.name) ***REMOVED***
                        if (isInvalid(name)) ***REMOVED***
                            report(node);
                        ***REMOVED***

                    // Report AssignmentExpressions only if they are the left side of the assignment
                    ***REMOVED*** else if (effectiveParent.type === "AssignmentExpression" && effectiveParent.right.type !== "MemberExpression") ***REMOVED***
                        if (isInvalid(name)) ***REMOVED***
                            report(node);
                        ***REMOVED***
                    ***REMOVED***

                /*
                 * Properties have their own rules, and
                 * AssignmentPattern nodes can be treated like Properties:
                 * e.g.: const ***REMOVED*** no_camelcased = false ***REMOVED*** = bar;
                 */
                ***REMOVED*** else if (parent.type === "Property" || parent.type === "AssignmentPattern") ***REMOVED***

                    if (parent.parent && parent.parent.type === "ObjectPattern") ***REMOVED***
                        if (parent.shorthand && parent.value.left && isInvalid(name)) ***REMOVED***

                            report(node);
                        ***REMOVED***

                        const assignmentKeyEqualsValue = parent.key.name === parent.value.name;

                        // prevent checking righthand side of destructured object
                        if (!assignmentKeyEqualsValue && parent.key === node) ***REMOVED***
                            return;
                        ***REMOVED***

                        const valueIsInvalid = parent.value.name && isInvalid(name);

                        // ignore destructuring if the option is set, unless a new identifier is created
                        if (valueIsInvalid && !(assignmentKeyEqualsValue && ignoreDestructuring)) ***REMOVED***
                            report(node);
                        ***REMOVED***
                    ***REMOVED***

                    // never check properties or always ignore destructuring
                    if (!properties || (ignoreDestructuring && isInsideObjectPattern(node))) ***REMOVED***
                        return;
                    ***REMOVED***

                    // don't check right hand side of AssignmentExpression to prevent duplicate warnings
                    if (parent.right !== node && shouldReport(effectiveParent, name)) ***REMOVED***
                        report(node);
                    ***REMOVED***

                // Check if it's an import specifier
                ***REMOVED*** else if (IMPORT_TYPES.has(parent.type)) ***REMOVED***

                    // Report only if the local imported identifier is invalid
                    if (parent.local && parent.local.name === node.name && isInvalid(name)) ***REMOVED***
                        report(node);
                    ***REMOVED***

                // Report anything that is invalid that isn't a CallExpression
                ***REMOVED*** else if (shouldReport(effectiveParent, name)) ***REMOVED***
                    report(node);
                ***REMOVED***
            ***REMOVED***

        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
