/**
 * @fileoverview Rule to flag declared but unused variables
 * @author Ilya Volodin
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "problem",

        docs: ***REMOVED***
            description: "disallow unused variables",
            category: "Variables",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-unused-vars"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                oneOf: [
                    ***REMOVED***
                        enum: ["all", "local"]
                    ***REMOVED***,
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            vars: ***REMOVED***
                                enum: ["all", "local"]
                            ***REMOVED***,
                            varsIgnorePattern: ***REMOVED***
                                type: "string"
                            ***REMOVED***,
                            args: ***REMOVED***
                                enum: ["all", "after-used", "none"]
                            ***REMOVED***,
                            ignoreRestSiblings: ***REMOVED***
                                type: "boolean"
                            ***REMOVED***,
                            argsIgnorePattern: ***REMOVED***
                                type: "string"
                            ***REMOVED***,
                            caughtErrors: ***REMOVED***
                                enum: ["all", "none"]
                            ***REMOVED***,
                            caughtErrorsIgnorePattern: ***REMOVED***
                                type: "string"
                            ***REMOVED***
                        ***REMOVED***
                    ***REMOVED***
                ]
            ***REMOVED***
        ]
    ***REMOVED***,

    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode();

        const REST_PROPERTY_TYPE = /^(?:RestElement|(?:Experimental)?RestProperty)$/u;

        const config = ***REMOVED***
            vars: "all",
            args: "after-used",
            ignoreRestSiblings: false,
            caughtErrors: "none"
        ***REMOVED***;

        const firstOption = context.options[0];

        if (firstOption) ***REMOVED***
            if (typeof firstOption === "string") ***REMOVED***
                config.vars = firstOption;
            ***REMOVED*** else ***REMOVED***
                config.vars = firstOption.vars || config.vars;
                config.args = firstOption.args || config.args;
                config.ignoreRestSiblings = firstOption.ignoreRestSiblings || config.ignoreRestSiblings;
                config.caughtErrors = firstOption.caughtErrors || config.caughtErrors;

                if (firstOption.varsIgnorePattern) ***REMOVED***
                    config.varsIgnorePattern = new RegExp(firstOption.varsIgnorePattern, "u");
                ***REMOVED***

                if (firstOption.argsIgnorePattern) ***REMOVED***
                    config.argsIgnorePattern = new RegExp(firstOption.argsIgnorePattern, "u");
                ***REMOVED***

                if (firstOption.caughtErrorsIgnorePattern) ***REMOVED***
                    config.caughtErrorsIgnorePattern = new RegExp(firstOption.caughtErrorsIgnorePattern, "u");
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        /**
         * Generate the warning message about the variable being
         * defined and unused, including the ignore pattern if configured.
         * @param ***REMOVED***Variable***REMOVED*** unusedVar - eslint-scope variable object.
         * @returns ***REMOVED***string***REMOVED*** The warning message to be used with this unused variable.
         */
        function getDefinedMessage(unusedVar) ***REMOVED***
            const defType = unusedVar.defs && unusedVar.defs[0] && unusedVar.defs[0].type;
            let type;
            let pattern;

            if (defType === "CatchClause" && config.caughtErrorsIgnorePattern) ***REMOVED***
                type = "args";
                pattern = config.caughtErrorsIgnorePattern.toString();
            ***REMOVED*** else if (defType === "Parameter" && config.argsIgnorePattern) ***REMOVED***
                type = "args";
                pattern = config.argsIgnorePattern.toString();
            ***REMOVED*** else if (defType !== "Parameter" && config.varsIgnorePattern) ***REMOVED***
                type = "vars";
                pattern = config.varsIgnorePattern.toString();
            ***REMOVED***

            const additional = type ? ` Allowed unused $***REMOVED***type***REMOVED*** must match $***REMOVED***pattern***REMOVED***.` : "";

            return `'***REMOVED******REMOVED***name***REMOVED******REMOVED***' is defined but never used.$***REMOVED***additional***REMOVED***`;
        ***REMOVED***

        /**
         * Generate the warning message about the variable being
         * assigned and unused, including the ignore pattern if configured.
         * @returns ***REMOVED***string***REMOVED*** The warning message to be used with this unused variable.
         */
        function getAssignedMessage() ***REMOVED***
            const additional = config.varsIgnorePattern ? ` Allowed unused vars must match $***REMOVED***config.varsIgnorePattern.toString()***REMOVED***.` : "";

            return `'***REMOVED******REMOVED***name***REMOVED******REMOVED***' is assigned a value but never used.$***REMOVED***additional***REMOVED***`;
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Helpers
        //--------------------------------------------------------------------------

        const STATEMENT_TYPE = /(?:Statement|Declaration)$/u;

        /**
         * Determines if a given variable is being exported from a module.
         * @param ***REMOVED***Variable***REMOVED*** variable - eslint-scope variable object.
         * @returns ***REMOVED***boolean***REMOVED*** True if the variable is exported, false if not.
         * @private
         */
        function isExported(variable) ***REMOVED***

            const definition = variable.defs[0];

            if (definition) ***REMOVED***

                let node = definition.node;

                if (node.type === "VariableDeclarator") ***REMOVED***
                    node = node.parent;
                ***REMOVED*** else if (definition.type === "Parameter") ***REMOVED***
                    return false;
                ***REMOVED***

                return node.parent.type.indexOf("Export") === 0;
            ***REMOVED***
            return false;

        ***REMOVED***

        /**
         * Determines if a variable has a sibling rest property
         * @param ***REMOVED***Variable***REMOVED*** variable - eslint-scope variable object.
         * @returns ***REMOVED***boolean***REMOVED*** True if the variable is exported, false if not.
         * @private
         */
        function hasRestSpreadSibling(variable) ***REMOVED***
            if (config.ignoreRestSiblings) ***REMOVED***
                return variable.defs.some(def => ***REMOVED***
                    const propertyNode = def.name.parent;
                    const patternNode = propertyNode.parent;

                    return (
                        propertyNode.type === "Property" &&
                        patternNode.type === "ObjectPattern" &&
                        REST_PROPERTY_TYPE.test(patternNode.properties[patternNode.properties.length - 1].type)
                    );
                ***REMOVED***);
            ***REMOVED***

            return false;
        ***REMOVED***

        /**
         * Determines if a reference is a read operation.
         * @param ***REMOVED***Reference***REMOVED*** ref - An eslint-scope Reference
         * @returns ***REMOVED***boolean***REMOVED*** whether the given reference represents a read operation
         * @private
         */
        function isReadRef(ref) ***REMOVED***
            return ref.isRead();
        ***REMOVED***

        /**
         * Determine if an identifier is referencing an enclosing function name.
         * @param ***REMOVED***Reference***REMOVED*** ref - The reference to check.
         * @param ***REMOVED***ASTNode[]***REMOVED*** nodes - The candidate function nodes.
         * @returns ***REMOVED***boolean***REMOVED*** True if it's a self-reference, false if not.
         * @private
         */
        function isSelfReference(ref, nodes) ***REMOVED***
            let scope = ref.from;

            while (scope) ***REMOVED***
                if (nodes.indexOf(scope.block) >= 0) ***REMOVED***
                    return true;
                ***REMOVED***

                scope = scope.upper;
            ***REMOVED***

            return false;
        ***REMOVED***

        /**
         * Gets a list of function definitions for a specified variable.
         * @param ***REMOVED***Variable***REMOVED*** variable - eslint-scope variable object.
         * @returns ***REMOVED***ASTNode[]***REMOVED*** Function nodes.
         * @private
         */
        function getFunctionDefinitions(variable) ***REMOVED***
            const functionDefinitions = [];

            variable.defs.forEach(def => ***REMOVED***
                const ***REMOVED*** type, node ***REMOVED*** = def;

                // FunctionDeclarations
                if (type === "FunctionName") ***REMOVED***
                    functionDefinitions.push(node);
                ***REMOVED***

                // FunctionExpressions
                if (type === "Variable" && node.init &&
                    (node.init.type === "FunctionExpression" || node.init.type === "ArrowFunctionExpression")) ***REMOVED***
                    functionDefinitions.push(node.init);
                ***REMOVED***
            ***REMOVED***);
            return functionDefinitions;
        ***REMOVED***

        /**
         * Checks the position of given nodes.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** inner - A node which is expected as inside.
         * @param ***REMOVED***ASTNode***REMOVED*** outer - A node which is expected as outside.
         * @returns ***REMOVED***boolean***REMOVED*** `true` if the `inner` node exists in the `outer` node.
         * @private
         */
        function isInside(inner, outer) ***REMOVED***
            return (
                inner.range[0] >= outer.range[0] &&
                inner.range[1] <= outer.range[1]
            );
        ***REMOVED***

        /**
         * If a given reference is left-hand side of an assignment, this gets
         * the right-hand side node of the assignment.
         *
         * In the following cases, this returns null.
         *
         * - The reference is not the LHS of an assignment expression.
         * - The reference is inside of a loop.
         * - The reference is inside of a function scope which is different from
         *   the declaration.
         *
         * @param ***REMOVED***eslint-scope.Reference***REMOVED*** ref - A reference to check.
         * @param ***REMOVED***ASTNode***REMOVED*** prevRhsNode - The previous RHS node.
         * @returns ***REMOVED***ASTNode|null***REMOVED*** The RHS node or null.
         * @private
         */
        function getRhsNode(ref, prevRhsNode) ***REMOVED***
            const id = ref.identifier;
            const parent = id.parent;
            const granpa = parent.parent;
            const refScope = ref.from.variableScope;
            const varScope = ref.resolved.scope.variableScope;
            const canBeUsedLater = refScope !== varScope || astUtils.isInLoop(id);

            /*
             * Inherits the previous node if this reference is in the node.
             * This is for `a = a + a`-like code.
             */
            if (prevRhsNode && isInside(id, prevRhsNode)) ***REMOVED***
                return prevRhsNode;
            ***REMOVED***

            if (parent.type === "AssignmentExpression" &&
                granpa.type === "ExpressionStatement" &&
                id === parent.left &&
                !canBeUsedLater
            ) ***REMOVED***
                return parent.right;
            ***REMOVED***
            return null;
        ***REMOVED***

        /**
         * Checks whether a given function node is stored to somewhere or not.
         * If the function node is stored, the function can be used later.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** funcNode - A function node to check.
         * @param ***REMOVED***ASTNode***REMOVED*** rhsNode - The RHS node of the previous assignment.
         * @returns ***REMOVED***boolean***REMOVED*** `true` if under the following conditions:
         *      - the funcNode is assigned to a variable.
         *      - the funcNode is bound as an argument of a function call.
         *      - the function is bound to a property and the object satisfies above conditions.
         * @private
         */
        function isStorableFunction(funcNode, rhsNode) ***REMOVED***
            let node = funcNode;
            let parent = funcNode.parent;

            while (parent && isInside(parent, rhsNode)) ***REMOVED***
                switch (parent.type) ***REMOVED***
                    case "SequenceExpression":
                        if (parent.expressions[parent.expressions.length - 1] !== node) ***REMOVED***
                            return false;
                        ***REMOVED***
                        break;

                    case "CallExpression":
                    case "NewExpression":
                        return parent.callee !== node;

                    case "AssignmentExpression":
                    case "TaggedTemplateExpression":
                    case "YieldExpression":
                        return true;

                    default:
                        if (STATEMENT_TYPE.test(parent.type)) ***REMOVED***

                            /*
                             * If it encountered statements, this is a complex pattern.
                             * Since analyzeing complex patterns is hard, this returns `true` to avoid false positive.
                             */
                            return true;
                        ***REMOVED***
                ***REMOVED***

                node = parent;
                parent = parent.parent;
            ***REMOVED***

            return false;
        ***REMOVED***

        /**
         * Checks whether a given Identifier node exists inside of a function node which can be used later.
         *
         * "can be used later" means:
         * - the function is assigned to a variable.
         * - the function is bound to a property and the object can be used later.
         * - the function is bound as an argument of a function call.
         *
         * If a reference exists in a function which can be used later, the reference is read when the function is called.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** id - An Identifier node to check.
         * @param ***REMOVED***ASTNode***REMOVED*** rhsNode - The RHS node of the previous assignment.
         * @returns ***REMOVED***boolean***REMOVED*** `true` if the `id` node exists inside of a function node which can be used later.
         * @private
         */
        function isInsideOfStorableFunction(id, rhsNode) ***REMOVED***
            const funcNode = astUtils.getUpperFunction(id);

            return (
                funcNode &&
                isInside(funcNode, rhsNode) &&
                isStorableFunction(funcNode, rhsNode)
            );
        ***REMOVED***

        /**
         * Checks whether a given reference is a read to update itself or not.
         *
         * @param ***REMOVED***eslint-scope.Reference***REMOVED*** ref - A reference to check.
         * @param ***REMOVED***ASTNode***REMOVED*** rhsNode - The RHS node of the previous assignment.
         * @returns ***REMOVED***boolean***REMOVED*** The reference is a read to update itself.
         * @private
         */
        function isReadForItself(ref, rhsNode) ***REMOVED***
            const id = ref.identifier;
            const parent = id.parent;
            const granpa = parent.parent;

            return ref.isRead() && (

                // self update. e.g. `a += 1`, `a++`
                (// in RHS of an assignment for itself. e.g. `a = a + 1`
                    ((
                        parent.type === "AssignmentExpression" &&
                    granpa.type === "ExpressionStatement" &&
                    parent.left === id
                    ) ||
                (
                    parent.type === "UpdateExpression" &&
                    granpa.type === "ExpressionStatement"
                ) || rhsNode &&
                isInside(id, rhsNode) &&
                !isInsideOfStorableFunction(id, rhsNode)))
            );
        ***REMOVED***

        /**
         * Determine if an identifier is used either in for-in loops.
         *
         * @param ***REMOVED***Reference***REMOVED*** ref - The reference to check.
         * @returns ***REMOVED***boolean***REMOVED*** whether reference is used in the for-in loops
         * @private
         */
        function isForInRef(ref) ***REMOVED***
            let target = ref.identifier.parent;


            // "for (var ...) ***REMOVED*** return; ***REMOVED***"
            if (target.type === "VariableDeclarator") ***REMOVED***
                target = target.parent.parent;
            ***REMOVED***

            if (target.type !== "ForInStatement") ***REMOVED***
                return false;
            ***REMOVED***

            // "for (...) ***REMOVED*** return; ***REMOVED***"
            if (target.body.type === "BlockStatement") ***REMOVED***
                target = target.body.body[0];

            // "for (...) return;"
            ***REMOVED*** else ***REMOVED***
                target = target.body;
            ***REMOVED***

            // For empty loop body
            if (!target) ***REMOVED***
                return false;
            ***REMOVED***

            return target.type === "ReturnStatement";
        ***REMOVED***

        /**
         * Determines if the variable is used.
         * @param ***REMOVED***Variable***REMOVED*** variable - The variable to check.
         * @returns ***REMOVED***boolean***REMOVED*** True if the variable is used
         * @private
         */
        function isUsedVariable(variable) ***REMOVED***
            const functionNodes = getFunctionDefinitions(variable),
                isFunctionDefinition = functionNodes.length > 0;
            let rhsNode = null;

            return variable.references.some(ref => ***REMOVED***
                if (isForInRef(ref)) ***REMOVED***
                    return true;
                ***REMOVED***

                const forItself = isReadForItself(ref, rhsNode);

                rhsNode = getRhsNode(ref, rhsNode);

                return (
                    isReadRef(ref) &&
                    !forItself &&
                    !(isFunctionDefinition && isSelfReference(ref, functionNodes))
                );
            ***REMOVED***);
        ***REMOVED***

        /**
         * Checks whether the given variable is after the last used parameter.
         *
         * @param ***REMOVED***eslint-scope.Variable***REMOVED*** variable - The variable to check.
         * @returns ***REMOVED***boolean***REMOVED*** `true` if the variable is defined after the last
         * used parameter.
         */
        function isAfterLastUsedArg(variable) ***REMOVED***
            const def = variable.defs[0];
            const params = context.getDeclaredVariables(def.node);
            const posteriorParams = params.slice(params.indexOf(variable) + 1);

            // If any used parameters occur after this parameter, do not report.
            return !posteriorParams.some(v => v.references.length > 0 || v.eslintUsed);
        ***REMOVED***

        /**
         * Gets an array of variables without read references.
         * @param ***REMOVED***Scope***REMOVED*** scope - an eslint-scope Scope object.
         * @param ***REMOVED***Variable[]***REMOVED*** unusedVars - an array that saving result.
         * @returns ***REMOVED***Variable[]***REMOVED*** unused variables of the scope and descendant scopes.
         * @private
         */
        function collectUnusedVariables(scope, unusedVars) ***REMOVED***
            const variables = scope.variables;
            const childScopes = scope.childScopes;
            let i, l;

            if (scope.type !== "global" || config.vars === "all") ***REMOVED***
                for (i = 0, l = variables.length; i < l; ++i) ***REMOVED***
                    const variable = variables[i];

                    // skip a variable of class itself name in the class scope
                    if (scope.type === "class" && scope.block.id === variable.identifiers[0]) ***REMOVED***
                        continue;
                    ***REMOVED***

                    // skip function expression names and variables marked with markVariableAsUsed()
                    if (scope.functionExpressionScope || variable.eslintUsed) ***REMOVED***
                        continue;
                    ***REMOVED***

                    // skip implicit "arguments" variable
                    if (scope.type === "function" && variable.name === "arguments" && variable.identifiers.length === 0) ***REMOVED***
                        continue;
                    ***REMOVED***

                    // explicit global variables don't have definitions.
                    const def = variable.defs[0];

                    if (def) ***REMOVED***
                        const type = def.type;

                        // skip catch variables
                        if (type === "CatchClause") ***REMOVED***
                            if (config.caughtErrors === "none") ***REMOVED***
                                continue;
                            ***REMOVED***

                            // skip ignored parameters
                            if (config.caughtErrorsIgnorePattern && config.caughtErrorsIgnorePattern.test(def.name.name)) ***REMOVED***
                                continue;
                            ***REMOVED***
                        ***REMOVED***

                        if (type === "Parameter") ***REMOVED***

                            // skip any setter argument
                            if ((def.node.parent.type === "Property" || def.node.parent.type === "MethodDefinition") && def.node.parent.kind === "set") ***REMOVED***
                                continue;
                            ***REMOVED***

                            // if "args" option is "none", skip any parameter
                            if (config.args === "none") ***REMOVED***
                                continue;
                            ***REMOVED***

                            // skip ignored parameters
                            if (config.argsIgnorePattern && config.argsIgnorePattern.test(def.name.name)) ***REMOVED***
                                continue;
                            ***REMOVED***

                            // if "args" option is "after-used", skip used variables
                            if (config.args === "after-used" && astUtils.isFunction(def.name.parent) && !isAfterLastUsedArg(variable)) ***REMOVED***
                                continue;
                            ***REMOVED***
                        ***REMOVED*** else ***REMOVED***

                            // skip ignored variables
                            if (config.varsIgnorePattern && config.varsIgnorePattern.test(def.name.name)) ***REMOVED***
                                continue;
                            ***REMOVED***
                        ***REMOVED***
                    ***REMOVED***

                    if (!isUsedVariable(variable) && !isExported(variable) && !hasRestSpreadSibling(variable)) ***REMOVED***
                        unusedVars.push(variable);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***

            for (i = 0, l = childScopes.length; i < l; ++i) ***REMOVED***
                collectUnusedVariables(childScopes[i], unusedVars);
            ***REMOVED***

            return unusedVars;
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------

        return ***REMOVED***
            "Program:exit"(programNode) ***REMOVED***
                const unusedVars = collectUnusedVariables(context.getScope(), []);

                for (let i = 0, l = unusedVars.length; i < l; ++i) ***REMOVED***
                    const unusedVar = unusedVars[i];

                    // Report the first declaration.
                    if (unusedVar.defs.length > 0) ***REMOVED***
                        context.report(***REMOVED***
                            node: unusedVar.identifiers[0],
                            message: unusedVar.references.some(ref => ref.isWrite())
                                ? getAssignedMessage()
                                : getDefinedMessage(unusedVar),
                            data: unusedVar
                        ***REMOVED***);

                    // If there are no regular declaration, report the first `/*globals*/` comment directive.
                    ***REMOVED*** else if (unusedVar.eslintExplicitGlobalComments) ***REMOVED***
                        const directiveComment = unusedVar.eslintExplicitGlobalComments[0];

                        context.report(***REMOVED***
                            node: programNode,
                            loc: astUtils.getNameLocationInGlobalDirectiveComment(sourceCode, directiveComment, unusedVar.name),
                            message: getDefinedMessage(unusedVar),
                            data: unusedVar
                        ***REMOVED***);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
