/**
 * @fileoverview Rule to flag unnecessary bind calls
 * @author Bence DÃ¡nyi <bence@danyi.me>
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

const SIDE_EFFECT_FREE_NODE_TYPES = new Set(["Literal", "Identifier", "ThisExpression", "FunctionExpression"]);

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow unnecessary calls to `.bind()`",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-extra-bind"
        ***REMOVED***,

        schema: [],
        fixable: "code",

        messages: ***REMOVED***
            unexpected: "The function binding is unnecessary."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        let scopeInfo = null;

        /**
         * Checks if a node is free of side effects.
         *
         * This check is stricter than it needs to be, in order to keep the implementation simple.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node A node to check.
         * @returns ***REMOVED***boolean***REMOVED*** True if the node is known to be side-effect free, false otherwise.
         */
        function isSideEffectFree(node) ***REMOVED***
            return SIDE_EFFECT_FREE_NODE_TYPES.has(node.type);
        ***REMOVED***

        /**
         * Reports a given function node.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to report. This is a FunctionExpression or
         *      an ArrowFunctionExpression.
         * @returns ***REMOVED***void***REMOVED***
         */
        function report(node) ***REMOVED***
            context.report(***REMOVED***
                node: node.parent.parent,
                messageId: "unexpected",
                loc: node.parent.property.loc.start,
                fix(fixer) ***REMOVED***
                    if (node.parent.parent.arguments.length && !isSideEffectFree(node.parent.parent.arguments[0])) ***REMOVED***
                        return null;
                    ***REMOVED***

                    const firstTokenToRemove = context.getSourceCode()
                        .getFirstTokenBetween(node.parent.object, node.parent.property, astUtils.isNotClosingParenToken);

                    return fixer.removeRange([firstTokenToRemove.range[0], node.parent.parent.range[1]]);
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Checks whether or not a given function node is the callee of `.bind()`
         * method.
         *
         * e.g. `(function() ***REMOVED******REMOVED***.bind(foo))`
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to report. This is a FunctionExpression or
         *      an ArrowFunctionExpression.
         * @returns ***REMOVED***boolean***REMOVED*** `true` if the node is the callee of `.bind()` method.
         */
        function isCalleeOfBindMethod(node) ***REMOVED***
            const parent = node.parent;
            const grandparent = parent.parent;

            return (
                grandparent &&
                grandparent.type === "CallExpression" &&
                grandparent.callee === parent &&
                grandparent.arguments.length === 1 &&
                grandparent.arguments[0].type !== "SpreadElement" &&
                parent.type === "MemberExpression" &&
                parent.object === node &&
                astUtils.getStaticPropertyName(parent) === "bind"
            );
        ***REMOVED***

        /**
         * Adds a scope information object to the stack.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to add. This node is a FunctionExpression
         *      or a FunctionDeclaration node.
         * @returns ***REMOVED***void***REMOVED***
         */
        function enterFunction(node) ***REMOVED***
            scopeInfo = ***REMOVED***
                isBound: isCalleeOfBindMethod(node),
                thisFound: false,
                upper: scopeInfo
            ***REMOVED***;
        ***REMOVED***

        /**
         * Removes the scope information object from the top of the stack.
         * At the same time, this reports the function node if the function has
         * `.bind()` and the `this` keywords found.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to remove. This node is a
         *      FunctionExpression or a FunctionDeclaration node.
         * @returns ***REMOVED***void***REMOVED***
         */
        function exitFunction(node) ***REMOVED***
            if (scopeInfo.isBound && !scopeInfo.thisFound) ***REMOVED***
                report(node);
            ***REMOVED***

            scopeInfo = scopeInfo.upper;
        ***REMOVED***

        /**
         * Reports a given arrow function if the function is callee of `.bind()`
         * method.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to report. This node is an
         *      ArrowFunctionExpression.
         * @returns ***REMOVED***void***REMOVED***
         */
        function exitArrowFunction(node) ***REMOVED***
            if (isCalleeOfBindMethod(node)) ***REMOVED***
                report(node);
            ***REMOVED***
        ***REMOVED***

        /**
         * Set the mark as the `this` keyword was found in this scope.
         *
         * @returns ***REMOVED***void***REMOVED***
         */
        function markAsThisFound() ***REMOVED***
            if (scopeInfo) ***REMOVED***
                scopeInfo.thisFound = true;
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            "ArrowFunctionExpression:exit": exitArrowFunction,
            FunctionDeclaration: enterFunction,
            "FunctionDeclaration:exit": exitFunction,
            FunctionExpression: enterFunction,
            "FunctionExpression:exit": exitFunction,
            ThisExpression: markAsThisFound
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
