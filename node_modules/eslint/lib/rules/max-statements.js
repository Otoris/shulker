/**
 * @fileoverview A rule to set the maximum number of statements in a function.
 * @author Ian Christian Myers
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const lodash = require("lodash");

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "enforce a maximum number of statements allowed in function blocks",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/max-statements"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                oneOf: [
                    ***REMOVED***
                        type: "integer",
                        minimum: 0
                    ***REMOVED***,
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            maximum: ***REMOVED***
                                type: "integer",
                                minimum: 0
                            ***REMOVED***,
                            max: ***REMOVED***
                                type: "integer",
                                minimum: 0
                            ***REMOVED***
                        ***REMOVED***,
                        additionalProperties: false
                    ***REMOVED***
                ]
            ***REMOVED***,
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    ignoreTopLevelFunctions: ***REMOVED***
                        type: "boolean"
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ],
        messages: ***REMOVED***
            exceed: "***REMOVED******REMOVED***name***REMOVED******REMOVED*** has too many statements (***REMOVED******REMOVED***count***REMOVED******REMOVED***). Maximum allowed is ***REMOVED******REMOVED***max***REMOVED******REMOVED***."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***

        //--------------------------------------------------------------------------
        // Helpers
        //--------------------------------------------------------------------------

        const functionStack = [],
            option = context.options[0],
            ignoreTopLevelFunctions = context.options[1] && context.options[1].ignoreTopLevelFunctions || false,
            topLevelFunctions = [];
        let maxStatements = 10;

        if (
            typeof option === "object" &&
            (Object.prototype.hasOwnProperty.call(option, "maximum") || Object.prototype.hasOwnProperty.call(option, "max"))
        ) ***REMOVED***
            maxStatements = option.maximum || option.max;
        ***REMOVED*** else if (typeof option === "number") ***REMOVED***
            maxStatements = option;
        ***REMOVED***

        /**
         * Reports a node if it has too many statements
         * @param ***REMOVED***ASTNode***REMOVED*** node node to evaluate
         * @param ***REMOVED***int***REMOVED*** count Number of statements in node
         * @param ***REMOVED***int***REMOVED*** max Maximum number of statements allowed
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function reportIfTooManyStatements(node, count, max) ***REMOVED***
            if (count > max) ***REMOVED***
                const name = lodash.upperFirst(astUtils.getFunctionNameWithKind(node));

                context.report(***REMOVED***
                    node,
                    messageId: "exceed",
                    data: ***REMOVED*** name, count, max ***REMOVED***
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        /**
         * When parsing a new function, store it in our function stack
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function startFunction() ***REMOVED***
            functionStack.push(0);
        ***REMOVED***

        /**
         * Evaluate the node at the end of function
         * @param ***REMOVED***ASTNode***REMOVED*** node node to evaluate
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function endFunction(node) ***REMOVED***
            const count = functionStack.pop();

            if (ignoreTopLevelFunctions && functionStack.length === 0) ***REMOVED***
                topLevelFunctions.push(***REMOVED*** node, count ***REMOVED***);
            ***REMOVED*** else ***REMOVED***
                reportIfTooManyStatements(node, count, maxStatements);
            ***REMOVED***
        ***REMOVED***

        /**
         * Increment the count of the functions
         * @param ***REMOVED***ASTNode***REMOVED*** node node to evaluate
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function countStatements(node) ***REMOVED***
            functionStack[functionStack.length - 1] += node.body.length;
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Public API
        //--------------------------------------------------------------------------

        return ***REMOVED***
            FunctionDeclaration: startFunction,
            FunctionExpression: startFunction,
            ArrowFunctionExpression: startFunction,

            BlockStatement: countStatements,

            "FunctionDeclaration:exit": endFunction,
            "FunctionExpression:exit": endFunction,
            "ArrowFunctionExpression:exit": endFunction,

            "Program:exit"() ***REMOVED***
                if (topLevelFunctions.length === 1) ***REMOVED***
                    return;
                ***REMOVED***

                topLevelFunctions.forEach(element => ***REMOVED***
                    const count = element.count;
                    const node = element.node;

                    reportIfTooManyStatements(node, count, maxStatements);
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
