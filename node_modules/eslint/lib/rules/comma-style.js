/**
 * @fileoverview Comma style - enforces comma styles of two types: last and first
 * @author Vignesh Anand aka vegetableman
 */

"use strict";

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "layout",

        docs: ***REMOVED***
            description: "enforce consistent comma style",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/comma-style"
        ***REMOVED***,

        fixable: "code",

        schema: [
            ***REMOVED***
                enum: ["first", "last"]
            ***REMOVED***,
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    exceptions: ***REMOVED***
                        type: "object",
                        additionalProperties: ***REMOVED***
                            type: "boolean"
                        ***REMOVED***
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ],

        messages: ***REMOVED***
            unexpectedLineBeforeAndAfterComma: "Bad line breaking before and after ','.",
            expectedCommaFirst: "',' should be placed first.",
            expectedCommaLast: "',' should be placed last."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const style = context.options[0] || "last",
            sourceCode = context.getSourceCode();
        const exceptions = ***REMOVED***
            ArrayPattern: true,
            ArrowFunctionExpression: true,
            CallExpression: true,
            FunctionDeclaration: true,
            FunctionExpression: true,
            ImportDeclaration: true,
            ObjectPattern: true,
            NewExpression: true
        ***REMOVED***;

        if (context.options.length === 2 && Object.prototype.hasOwnProperty.call(context.options[1], "exceptions")) ***REMOVED***
            const keys = Object.keys(context.options[1].exceptions);

            for (let i = 0; i < keys.length; i++) ***REMOVED***
                exceptions[keys[i]] = context.options[1].exceptions[keys[i]];
            ***REMOVED***
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Helpers
        //--------------------------------------------------------------------------

        /**
         * Modified text based on the style
         * @param ***REMOVED***string***REMOVED*** styleType Style type
         * @param ***REMOVED***string***REMOVED*** text Source code text
         * @returns ***REMOVED***string***REMOVED*** modified text
         * @private
         */
        function getReplacedText(styleType, text) ***REMOVED***
            switch (styleType) ***REMOVED***
                case "between":
                    return `,$***REMOVED***text.replace(astUtils.LINEBREAK_MATCHER, "")***REMOVED***`;

                case "first":
                    return `$***REMOVED***text***REMOVED***,`;

                case "last":
                    return `,$***REMOVED***text***REMOVED***`;

                default:
                    return "";
            ***REMOVED***
        ***REMOVED***

        /**
         * Determines the fixer function for a given style.
         * @param ***REMOVED***string***REMOVED*** styleType comma style
         * @param ***REMOVED***ASTNode***REMOVED*** previousItemToken The token to check.
         * @param ***REMOVED***ASTNode***REMOVED*** commaToken The token to check.
         * @param ***REMOVED***ASTNode***REMOVED*** currentItemToken The token to check.
         * @returns ***REMOVED***Function***REMOVED*** Fixer function
         * @private
         */
        function getFixerFunction(styleType, previousItemToken, commaToken, currentItemToken) ***REMOVED***
            const text =
                sourceCode.text.slice(previousItemToken.range[1], commaToken.range[0]) +
                sourceCode.text.slice(commaToken.range[1], currentItemToken.range[0]);
            const range = [previousItemToken.range[1], currentItemToken.range[0]];

            return function(fixer) ***REMOVED***
                return fixer.replaceTextRange(range, getReplacedText(styleType, text));
            ***REMOVED***;
        ***REMOVED***

        /**
         * Validates the spacing around single items in lists.
         * @param ***REMOVED***Token***REMOVED*** previousItemToken The last token from the previous item.
         * @param ***REMOVED***Token***REMOVED*** commaToken The token representing the comma.
         * @param ***REMOVED***Token***REMOVED*** currentItemToken The first token of the current item.
         * @param ***REMOVED***Token***REMOVED*** reportItem The item to use when reporting an error.
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function validateCommaItemSpacing(previousItemToken, commaToken, currentItemToken, reportItem) ***REMOVED***

            // if single line
            if (astUtils.isTokenOnSameLine(commaToken, currentItemToken) &&
                    astUtils.isTokenOnSameLine(previousItemToken, commaToken)) ***REMOVED***

                // do nothing.

            ***REMOVED*** else if (!astUtils.isTokenOnSameLine(commaToken, currentItemToken) &&
                    !astUtils.isTokenOnSameLine(previousItemToken, commaToken)) ***REMOVED***

                const comment = sourceCode.getCommentsAfter(commaToken)[0];
                const styleType = comment && comment.type === "Block" && astUtils.isTokenOnSameLine(commaToken, comment)
                    ? style
                    : "between";

                // lone comma
                context.report(***REMOVED***
                    node: reportItem,
                    loc: ***REMOVED***
                        line: commaToken.loc.end.line,
                        column: commaToken.loc.start.column
                    ***REMOVED***,
                    messageId: "unexpectedLineBeforeAndAfterComma",
                    fix: getFixerFunction(styleType, previousItemToken, commaToken, currentItemToken)
                ***REMOVED***);

            ***REMOVED*** else if (style === "first" && !astUtils.isTokenOnSameLine(commaToken, currentItemToken)) ***REMOVED***

                context.report(***REMOVED***
                    node: reportItem,
                    messageId: "expectedCommaFirst",
                    fix: getFixerFunction(style, previousItemToken, commaToken, currentItemToken)
                ***REMOVED***);

            ***REMOVED*** else if (style === "last" && astUtils.isTokenOnSameLine(commaToken, currentItemToken)) ***REMOVED***

                context.report(***REMOVED***
                    node: reportItem,
                    loc: ***REMOVED***
                        line: commaToken.loc.end.line,
                        column: commaToken.loc.end.column
                    ***REMOVED***,
                    messageId: "expectedCommaLast",
                    fix: getFixerFunction(style, previousItemToken, commaToken, currentItemToken)
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        /**
         * Checks the comma placement with regards to a declaration/property/element
         * @param ***REMOVED***ASTNode***REMOVED*** node The binary expression node to check
         * @param ***REMOVED***string***REMOVED*** property The property of the node containing child nodes.
         * @private
         * @returns ***REMOVED***void***REMOVED***
         */
        function validateComma(node, property) ***REMOVED***
            const items = node[property],
                arrayLiteral = (node.type === "ArrayExpression" || node.type === "ArrayPattern");

            if (items.length > 1 || arrayLiteral) ***REMOVED***

                // seed as opening [
                let previousItemToken = sourceCode.getFirstToken(node);

                items.forEach(item => ***REMOVED***
                    const commaToken = item ? sourceCode.getTokenBefore(item) : previousItemToken,
                        currentItemToken = item ? sourceCode.getFirstToken(item) : sourceCode.getTokenAfter(commaToken),
                        reportItem = item || currentItemToken;

                    /*
                     * This works by comparing three token locations:
                     * - previousItemToken is the last token of the previous item
                     * - commaToken is the location of the comma before the current item
                     * - currentItemToken is the first token of the current item
                     *
                     * These values get switched around if item is undefined.
                     * previousItemToken will refer to the last token not belonging
                     * to the current item, which could be a comma or an opening
                     * square bracket. currentItemToken could be a comma.
                     *
                     * All comparisons are done based on these tokens directly, so
                     * they are always valid regardless of an undefined item.
                     */
                    if (astUtils.isCommaToken(commaToken)) ***REMOVED***
                        validateCommaItemSpacing(previousItemToken, commaToken,
                            currentItemToken, reportItem);
                    ***REMOVED***

                    if (item) ***REMOVED***
                        const tokenAfterItem = sourceCode.getTokenAfter(item, astUtils.isNotClosingParenToken);

                        previousItemToken = tokenAfterItem
                            ? sourceCode.getTokenBefore(tokenAfterItem)
                            : sourceCode.ast.tokens[sourceCode.ast.tokens.length - 1];
                    ***REMOVED***
                ***REMOVED***);

                /*
                 * Special case for array literals that have empty last items, such
                 * as [ 1, 2, ]. These arrays only have two items show up in the
                 * AST, so we need to look at the token to verify that there's no
                 * dangling comma.
                 */
                if (arrayLiteral) ***REMOVED***

                    const lastToken = sourceCode.getLastToken(node),
                        nextToLastToken = sourceCode.getTokenBefore(lastToken);

                    if (astUtils.isCommaToken(nextToLastToken)) ***REMOVED***
                        validateCommaItemSpacing(
                            sourceCode.getTokenBefore(nextToLastToken),
                            nextToLastToken,
                            lastToken,
                            lastToken
                        );
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------

        const nodes = ***REMOVED******REMOVED***;

        if (!exceptions.VariableDeclaration) ***REMOVED***
            nodes.VariableDeclaration = function(node) ***REMOVED***
                validateComma(node, "declarations");
            ***REMOVED***;
        ***REMOVED***
        if (!exceptions.ObjectExpression) ***REMOVED***
            nodes.ObjectExpression = function(node) ***REMOVED***
                validateComma(node, "properties");
            ***REMOVED***;
        ***REMOVED***
        if (!exceptions.ObjectPattern) ***REMOVED***
            nodes.ObjectPattern = function(node) ***REMOVED***
                validateComma(node, "properties");
            ***REMOVED***;
        ***REMOVED***
        if (!exceptions.ArrayExpression) ***REMOVED***
            nodes.ArrayExpression = function(node) ***REMOVED***
                validateComma(node, "elements");
            ***REMOVED***;
        ***REMOVED***
        if (!exceptions.ArrayPattern) ***REMOVED***
            nodes.ArrayPattern = function(node) ***REMOVED***
                validateComma(node, "elements");
            ***REMOVED***;
        ***REMOVED***
        if (!exceptions.FunctionDeclaration) ***REMOVED***
            nodes.FunctionDeclaration = function(node) ***REMOVED***
                validateComma(node, "params");
            ***REMOVED***;
        ***REMOVED***
        if (!exceptions.FunctionExpression) ***REMOVED***
            nodes.FunctionExpression = function(node) ***REMOVED***
                validateComma(node, "params");
            ***REMOVED***;
        ***REMOVED***
        if (!exceptions.ArrowFunctionExpression) ***REMOVED***
            nodes.ArrowFunctionExpression = function(node) ***REMOVED***
                validateComma(node, "params");
            ***REMOVED***;
        ***REMOVED***
        if (!exceptions.CallExpression) ***REMOVED***
            nodes.CallExpression = function(node) ***REMOVED***
                validateComma(node, "arguments");
            ***REMOVED***;
        ***REMOVED***
        if (!exceptions.ImportDeclaration) ***REMOVED***
            nodes.ImportDeclaration = function(node) ***REMOVED***
                validateComma(node, "specifiers");
            ***REMOVED***;
        ***REMOVED***
        if (!exceptions.NewExpression) ***REMOVED***
            nodes.NewExpression = function(node) ***REMOVED***
                validateComma(node, "arguments");
            ***REMOVED***;
        ***REMOVED***

        return nodes;
    ***REMOVED***
***REMOVED***;
