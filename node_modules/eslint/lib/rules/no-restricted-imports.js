/**
 * @fileoverview Restrict usage of specified node imports.
 * @author Guy Ellis
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

const ignore = require("ignore");

const arrayOfStrings = ***REMOVED***
    type: "array",
    items: ***REMOVED*** type: "string" ***REMOVED***,
    uniqueItems: true
***REMOVED***;

const arrayOfStringsOrObjects = ***REMOVED***
    type: "array",
    items: ***REMOVED***
        anyOf: [
            ***REMOVED*** type: "string" ***REMOVED***,
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    name: ***REMOVED*** type: "string" ***REMOVED***,
                    message: ***REMOVED***
                        type: "string",
                        minLength: 1
                    ***REMOVED***,
                    importNames: ***REMOVED***
                        type: "array",
                        items: ***REMOVED***
                            type: "string"
                        ***REMOVED***
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false,
                required: ["name"]
            ***REMOVED***
        ]
    ***REMOVED***,
    uniqueItems: true
***REMOVED***;

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow specified modules when loaded by `import`",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-restricted-imports"
        ***REMOVED***,

        messages: ***REMOVED***
            path: "'***REMOVED******REMOVED***importSource***REMOVED******REMOVED***' import is restricted from being used.",
            // eslint-disable-next-line eslint-plugin/report-message-format
            pathWithCustomMessage: "'***REMOVED******REMOVED***importSource***REMOVED******REMOVED***' import is restricted from being used. ***REMOVED******REMOVED***customMessage***REMOVED******REMOVED***",

            patterns: "'***REMOVED******REMOVED***importSource***REMOVED******REMOVED***' import is restricted from being used by a pattern.",

            everything: "* import is invalid because '***REMOVED******REMOVED***importNames***REMOVED******REMOVED***' from '***REMOVED******REMOVED***importSource***REMOVED******REMOVED***' is restricted.",
            // eslint-disable-next-line eslint-plugin/report-message-format
            everythingWithCustomMessage: "* import is invalid because '***REMOVED******REMOVED***importNames***REMOVED******REMOVED***' from '***REMOVED******REMOVED***importSource***REMOVED******REMOVED***' is restricted. ***REMOVED******REMOVED***customMessage***REMOVED******REMOVED***"
        ***REMOVED***,

        schema: ***REMOVED***
            anyOf: [
                arrayOfStringsOrObjects,
                ***REMOVED***
                    type: "array",
                    items: ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            paths: arrayOfStringsOrObjects,
                            patterns: arrayOfStrings
                        ***REMOVED***,
                        additionalProperties: false
                    ***REMOVED***,
                    additionalItems: false
                ***REMOVED***
            ]
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const options = Array.isArray(context.options) ? context.options : [];
        const isPathAndPatternsObject =
            typeof options[0] === "object" &&
            (Object.prototype.hasOwnProperty.call(options[0], "paths") || Object.prototype.hasOwnProperty.call(options[0], "patterns"));

        const restrictedPaths = (isPathAndPatternsObject ? options[0].paths : context.options) || [];
        const restrictedPatterns = (isPathAndPatternsObject ? options[0].patterns : []) || [];

        const restrictedPathMessages = restrictedPaths.reduce((memo, importSource) => ***REMOVED***
            if (typeof importSource === "string") ***REMOVED***
                memo[importSource] = ***REMOVED*** message: null ***REMOVED***;
            ***REMOVED*** else ***REMOVED***
                memo[importSource.name] = ***REMOVED***
                    message: importSource.message,
                    importNames: importSource.importNames
                ***REMOVED***;
            ***REMOVED***
            return memo;
        ***REMOVED***, ***REMOVED******REMOVED***);

        // if no imports are restricted we don"t need to check
        if (Object.keys(restrictedPaths).length === 0 && restrictedPatterns.length === 0) ***REMOVED***
            return ***REMOVED******REMOVED***;
        ***REMOVED***

        const restrictedPatternsMatcher = ignore().add(restrictedPatterns);

        /**
         * Checks to see if "*" is being used to import everything.
         * @param ***REMOVED***Set.<string>***REMOVED*** importNames - Set of import names that are being imported
         * @returns ***REMOVED***boolean***REMOVED*** whether everything is imported or not
         */
        function isEverythingImported(importNames) ***REMOVED***
            return importNames.has("*");
        ***REMOVED***

        /**
         * Report a restricted path.
         * @param ***REMOVED***node***REMOVED*** node representing the restricted path reference
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function reportPath(node) ***REMOVED***
            const importSource = node.source.value.trim();
            const customMessage = restrictedPathMessages[importSource] && restrictedPathMessages[importSource].message;

            context.report(***REMOVED***
                node,
                messageId: customMessage ? "pathWithCustomMessage" : "path",
                data: ***REMOVED***
                    importSource,
                    customMessage
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Report a restricted path specifically for patterns.
         * @param ***REMOVED***node***REMOVED*** node - representing the restricted path reference
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function reportPathForPatterns(node) ***REMOVED***
            const importSource = node.source.value.trim();

            context.report(***REMOVED***
                node,
                messageId: "patterns",
                data: ***REMOVED***
                    importSource
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Report a restricted path specifically when using the '*' import.
         * @param ***REMOVED***string***REMOVED*** importSource - path of the import
         * @param ***REMOVED***node***REMOVED*** node - representing the restricted path reference
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function reportPathForEverythingImported(importSource, node) ***REMOVED***
            const importNames = restrictedPathMessages[importSource].importNames;
            const customMessage = restrictedPathMessages[importSource] && restrictedPathMessages[importSource].message;

            context.report(***REMOVED***
                node,
                messageId: customMessage ? "everythingWithCustomMessage" : "everything",
                data: ***REMOVED***
                    importSource,
                    importNames,
                    customMessage
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Check if the given importSource is restricted because '*' is being imported.
         * @param ***REMOVED***string***REMOVED*** importSource - path of the import
         * @param ***REMOVED***Set.<string>***REMOVED*** importNames - Set of import names that are being imported
         * @returns ***REMOVED***boolean***REMOVED*** whether the path is restricted
         * @private
         */
        function isRestrictedForEverythingImported(importSource, importNames) ***REMOVED***
            return Object.prototype.hasOwnProperty.call(restrictedPathMessages, importSource) &&
                restrictedPathMessages[importSource].importNames &&
                isEverythingImported(importNames);
        ***REMOVED***

        /**
         * Check if the given importNames are restricted given a list of restrictedImportNames.
         * @param ***REMOVED***Set.<string>***REMOVED*** importNames - Set of import names that are being imported
         * @param ***REMOVED***string[]***REMOVED*** restrictedImportNames - array of import names that are restricted for this import
         * @returns ***REMOVED***boolean***REMOVED*** whether the objectName is restricted
         * @private
         */
        function isRestrictedObject(importNames, restrictedImportNames) ***REMOVED***
            return restrictedImportNames.some(restrictedObjectName => (
                importNames.has(restrictedObjectName)
            ));
        ***REMOVED***

        /**
         * Check if the given importSource is a restricted path.
         * @param ***REMOVED***string***REMOVED*** importSource - path of the import
         * @param ***REMOVED***Set.<string>***REMOVED*** importNames - Set of import names that are being imported
         * @returns ***REMOVED***boolean***REMOVED*** whether the variable is a restricted path or not
         * @private
         */
        function isRestrictedPath(importSource, importNames) ***REMOVED***
            let isRestricted = false;

            if (Object.prototype.hasOwnProperty.call(restrictedPathMessages, importSource)) ***REMOVED***
                if (restrictedPathMessages[importSource].importNames) ***REMOVED***
                    isRestricted = isRestrictedObject(importNames, restrictedPathMessages[importSource].importNames);
                ***REMOVED*** else ***REMOVED***
                    isRestricted = true;
                ***REMOVED***
            ***REMOVED***

            return isRestricted;
        ***REMOVED***

        /**
         * Check if the given importSource is restricted by a pattern.
         * @param ***REMOVED***string***REMOVED*** importSource - path of the import
         * @returns ***REMOVED***boolean***REMOVED*** whether the variable is a restricted pattern or not
         * @private
         */
        function isRestrictedPattern(importSource) ***REMOVED***
            return restrictedPatterns.length > 0 && restrictedPatternsMatcher.ignores(importSource);
        ***REMOVED***

        /**
         * Checks a node to see if any problems should be reported.
         * @param ***REMOVED***ASTNode***REMOVED*** node The node to check.
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function checkNode(node) ***REMOVED***
            const importSource = node.source.value.trim();
            const importNames = node.specifiers ? node.specifiers.reduce((set, specifier) => ***REMOVED***
                if (specifier.type === "ImportDefaultSpecifier") ***REMOVED***
                    set.add("default");
                ***REMOVED*** else if (specifier.type === "ImportNamespaceSpecifier") ***REMOVED***
                    set.add("*");
                ***REMOVED*** else if (specifier.imported) ***REMOVED***
                    set.add(specifier.imported.name);
                ***REMOVED*** else if (specifier.local) ***REMOVED***
                    set.add(specifier.local.name);
                ***REMOVED***
                return set;
            ***REMOVED***, new Set()) : new Set();

            if (isRestrictedForEverythingImported(importSource, importNames)) ***REMOVED***
                reportPathForEverythingImported(importSource, node);
            ***REMOVED***

            if (isRestrictedPath(importSource, importNames)) ***REMOVED***
                reportPath(node);
            ***REMOVED***
            if (isRestrictedPattern(importSource)) ***REMOVED***
                reportPathForPatterns(node);
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            ImportDeclaration: checkNode,
            ExportNamedDeclaration(node) ***REMOVED***
                if (node.source) ***REMOVED***
                    checkNode(node);
                ***REMOVED***
            ***REMOVED***,
            ExportAllDeclaration: checkNode
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
