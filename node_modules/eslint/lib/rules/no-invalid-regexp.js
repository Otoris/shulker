/**
 * @fileoverview Validate strings passed to the RegExp constructor
 * @author Michael Ficarra
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const RegExpValidator = require("regexpp").RegExpValidator;
const validator = new RegExpValidator(***REMOVED*** ecmaVersion: 2018 ***REMOVED***);
const validFlags = /[gimuys]/gu;
const undefined1 = void 0;

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "problem",

        docs: ***REMOVED***
            description: "disallow invalid regular expression strings in `RegExp` constructors",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-invalid-regexp"
        ***REMOVED***,

        schema: [***REMOVED***
            type: "object",
            properties: ***REMOVED***
                allowConstructorFlags: ***REMOVED***
                    type: "array",
                    items: ***REMOVED***
                        type: "string"
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***,
            additionalProperties: false
        ***REMOVED***]
    ***REMOVED***,

    create(context) ***REMOVED***

        const options = context.options[0];
        let allowedFlags = null;

        if (options && options.allowConstructorFlags) ***REMOVED***
            const temp = options.allowConstructorFlags.join("").replace(validFlags, "");

            if (temp) ***REMOVED***
                allowedFlags = new RegExp(`[$***REMOVED***temp***REMOVED***]`, "giu");
            ***REMOVED***
        ***REMOVED***

        /**
         * Check if node is a string
         * @param ***REMOVED***ASTNode***REMOVED*** node node to evaluate
         * @returns ***REMOVED***boolean***REMOVED*** True if its a string
         * @private
         */
        function isString(node) ***REMOVED***
            return node && node.type === "Literal" && typeof node.value === "string";
        ***REMOVED***

        /**
         * Check syntax error in a given pattern.
         * @param ***REMOVED***string***REMOVED*** pattern The RegExp pattern to validate.
         * @param ***REMOVED***boolean***REMOVED*** uFlag The Unicode flag.
         * @returns ***REMOVED***string|null***REMOVED*** The syntax error.
         */
        function validateRegExpPattern(pattern, uFlag) ***REMOVED***
            try ***REMOVED***
                validator.validatePattern(pattern, undefined1, undefined1, uFlag);
                return null;
            ***REMOVED*** catch (err) ***REMOVED***
                return err.message;
            ***REMOVED***
        ***REMOVED***

        /**
         * Check syntax error in a given flags.
         * @param ***REMOVED***string***REMOVED*** flags The RegExp flags to validate.
         * @returns ***REMOVED***string|null***REMOVED*** The syntax error.
         */
        function validateRegExpFlags(flags) ***REMOVED***
            try ***REMOVED***
                validator.validateFlags(flags);
                return null;
            ***REMOVED*** catch (err) ***REMOVED***
                return `Invalid flags supplied to RegExp constructor '$***REMOVED***flags***REMOVED***'`;
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            "CallExpression, NewExpression"(node) ***REMOVED***
                if (node.callee.type !== "Identifier" || node.callee.name !== "RegExp" || !isString(node.arguments[0])) ***REMOVED***
                    return;
                ***REMOVED***
                const pattern = node.arguments[0].value;
                let flags = isString(node.arguments[1]) ? node.arguments[1].value : "";

                if (allowedFlags) ***REMOVED***
                    flags = flags.replace(allowedFlags, "");
                ***REMOVED***

                // If flags are unknown, check both are errored or not.
                const message = validateRegExpFlags(flags) || (
                    flags
                        ? validateRegExpPattern(pattern, flags.indexOf("u") !== -1)
                        : validateRegExpPattern(pattern, true) && validateRegExpPattern(pattern, false)
                );

                if (message) ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        message: "***REMOVED******REMOVED***message***REMOVED******REMOVED***.",
                        data: ***REMOVED*** message ***REMOVED***
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
