/**
 * @fileoverview Rule to flag use of function declaration identifiers as variables.
 * @author Ian Christian Myers
 */

"use strict";

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "problem",

        docs: ***REMOVED***
            description: "disallow reassigning `function` declarations",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-func-assign"
        ***REMOVED***,

        schema: []
    ***REMOVED***,

    create(context) ***REMOVED***

        /**
         * Reports a reference if is non initializer and writable.
         * @param ***REMOVED***References***REMOVED*** references - Collection of reference to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkReference(references) ***REMOVED***
            astUtils.getModifyingReferences(references).forEach(reference => ***REMOVED***
                context.report(***REMOVED*** node: reference.identifier, message: "'***REMOVED******REMOVED***name***REMOVED******REMOVED***' is a function.", data: ***REMOVED*** name: reference.identifier.name ***REMOVED*** ***REMOVED***);
            ***REMOVED***);
        ***REMOVED***

        /**
         * Finds and reports references that are non initializer and writable.
         * @param ***REMOVED***Variable***REMOVED*** variable - A variable to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkVariable(variable) ***REMOVED***
            if (variable.defs[0].type === "FunctionName") ***REMOVED***
                checkReference(variable.references);
            ***REMOVED***
        ***REMOVED***

        /**
         * Checks parameters of a given function node.
         * @param ***REMOVED***ASTNode***REMOVED*** node - A function node to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkForFunction(node) ***REMOVED***
            context.getDeclaredVariables(node).forEach(checkVariable);
        ***REMOVED***

        return ***REMOVED***
            FunctionDeclaration: checkForFunction,
            FunctionExpression: checkForFunction
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
