/**
 * @fileoverview Rule to flag statements that use != and == instead of !== and ===
 * @author Nicholas C. Zakas
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "require the use of `===` and `!==`",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/eqeqeq"
        ***REMOVED***,

        schema: ***REMOVED***
            anyOf: [
                ***REMOVED***
                    type: "array",
                    items: [
                        ***REMOVED***
                            enum: ["always"]
                        ***REMOVED***,
                        ***REMOVED***
                            type: "object",
                            properties: ***REMOVED***
                                null: ***REMOVED***
                                    enum: ["always", "never", "ignore"]
                                ***REMOVED***
                            ***REMOVED***,
                            additionalProperties: false
                        ***REMOVED***
                    ],
                    additionalItems: false
                ***REMOVED***,
                ***REMOVED***
                    type: "array",
                    items: [
                        ***REMOVED***
                            enum: ["smart", "allow-null"]
                        ***REMOVED***
                    ],
                    additionalItems: false
                ***REMOVED***
            ]
        ***REMOVED***,

        fixable: "code",

        messages: ***REMOVED***
            unexpected: "Expected '***REMOVED******REMOVED***expectedOperator***REMOVED******REMOVED***' and instead saw '***REMOVED******REMOVED***actualOperator***REMOVED******REMOVED***'."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const config = context.options[0] || "always";
        const options = context.options[1] || ***REMOVED******REMOVED***;
        const sourceCode = context.getSourceCode();

        const nullOption = (config === "always")
            ? options.null || "always"
            : "ignore";
        const enforceRuleForNull = (nullOption === "always");
        const enforceInverseRuleForNull = (nullOption === "never");

        /**
         * Checks if an expression is a typeof expression
         * @param  ***REMOVED***ASTNode***REMOVED*** node The node to check
         * @returns ***REMOVED***boolean***REMOVED*** if the node is a typeof expression
         */
        function isTypeOf(node) ***REMOVED***
            return node.type === "UnaryExpression" && node.operator === "typeof";
        ***REMOVED***

        /**
         * Checks if either operand of a binary expression is a typeof operation
         * @param ***REMOVED***ASTNode***REMOVED*** node The node to check
         * @returns ***REMOVED***boolean***REMOVED*** if one of the operands is typeof
         * @private
         */
        function isTypeOfBinary(node) ***REMOVED***
            return isTypeOf(node.left) || isTypeOf(node.right);
        ***REMOVED***

        /**
         * Checks if operands are literals of the same type (via typeof)
         * @param ***REMOVED***ASTNode***REMOVED*** node The node to check
         * @returns ***REMOVED***boolean***REMOVED*** if operands are of same type
         * @private
         */
        function areLiteralsAndSameType(node) ***REMOVED***
            return node.left.type === "Literal" && node.right.type === "Literal" &&
                    typeof node.left.value === typeof node.right.value;
        ***REMOVED***

        /**
         * Checks if one of the operands is a literal null
         * @param ***REMOVED***ASTNode***REMOVED*** node The node to check
         * @returns ***REMOVED***boolean***REMOVED*** if operands are null
         * @private
         */
        function isNullCheck(node) ***REMOVED***
            return astUtils.isNullLiteral(node.right) || astUtils.isNullLiteral(node.left);
        ***REMOVED***

        /**
         * Reports a message for this rule.
         * @param ***REMOVED***ASTNode***REMOVED*** node The binary expression node that was checked
         * @param ***REMOVED***string***REMOVED*** expectedOperator The operator that was expected (either '==', '!=', '===', or '!==')
         * @returns ***REMOVED***void***REMOVED***
         * @private
         */
        function report(node, expectedOperator) ***REMOVED***
            const operatorToken = sourceCode.getFirstTokenBetween(
                node.left,
                node.right,
                token => token.value === node.operator
            );

            context.report(***REMOVED***
                node,
                loc: operatorToken.loc,
                messageId: "unexpected",
                data: ***REMOVED*** expectedOperator, actualOperator: node.operator ***REMOVED***,
                fix(fixer) ***REMOVED***

                    // If the comparison is a `typeof` comparison or both sides are literals with the same type, then it's safe to fix.
                    if (isTypeOfBinary(node) || areLiteralsAndSameType(node)) ***REMOVED***
                        return fixer.replaceText(operatorToken, expectedOperator);
                    ***REMOVED***
                    return null;
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        return ***REMOVED***
            BinaryExpression(node) ***REMOVED***
                const isNull = isNullCheck(node);

                if (node.operator !== "==" && node.operator !== "!=") ***REMOVED***
                    if (enforceInverseRuleForNull && isNull) ***REMOVED***
                        report(node, node.operator.slice(0, -1));
                    ***REMOVED***
                    return;
                ***REMOVED***

                if (config === "smart" && (isTypeOfBinary(node) ||
                        areLiteralsAndSameType(node) || isNull)) ***REMOVED***
                    return;
                ***REMOVED***

                if (!enforceRuleForNull && isNull) ***REMOVED***
                    return;
                ***REMOVED***

                report(node, `$***REMOVED***node.operator***REMOVED***=`);
            ***REMOVED***
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
