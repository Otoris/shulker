/**
 * @fileoverview Rule to disallow unnecessary labels
 * @author Toru Nagashima
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow unnecessary labels",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-extra-label"
        ***REMOVED***,

        schema: [],
        fixable: "code",

        messages: ***REMOVED***
            unexpected: "This label '***REMOVED******REMOVED***name***REMOVED******REMOVED***' is unnecessary."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode();
        let scopeInfo = null;

        /**
         * Creates a new scope with a breakable statement.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to create. This is a BreakableStatement.
         * @returns ***REMOVED***void***REMOVED***
         */
        function enterBreakableStatement(node) ***REMOVED***
            scopeInfo = ***REMOVED***
                label: node.parent.type === "LabeledStatement" ? node.parent.label : null,
                breakable: true,
                upper: scopeInfo
            ***REMOVED***;
        ***REMOVED***

        /**
         * Removes the top scope of the stack.
         *
         * @returns ***REMOVED***void***REMOVED***
         */
        function exitBreakableStatement() ***REMOVED***
            scopeInfo = scopeInfo.upper;
        ***REMOVED***

        /**
         * Creates a new scope with a labeled statement.
         *
         * This ignores it if the body is a breakable statement.
         * In this case it's handled in the `enterBreakableStatement` function.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to create. This is a LabeledStatement.
         * @returns ***REMOVED***void***REMOVED***
         */
        function enterLabeledStatement(node) ***REMOVED***
            if (!astUtils.isBreakableStatement(node.body)) ***REMOVED***
                scopeInfo = ***REMOVED***
                    label: node.label,
                    breakable: false,
                    upper: scopeInfo
                ***REMOVED***;
            ***REMOVED***
        ***REMOVED***

        /**
         * Removes the top scope of the stack.
         *
         * This ignores it if the body is a breakable statement.
         * In this case it's handled in the `exitBreakableStatement` function.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node. This is a LabeledStatement.
         * @returns ***REMOVED***void***REMOVED***
         */
        function exitLabeledStatement(node) ***REMOVED***
            if (!astUtils.isBreakableStatement(node.body)) ***REMOVED***
                scopeInfo = scopeInfo.upper;
            ***REMOVED***
        ***REMOVED***

        /**
         * Reports a given control node if it's unnecessary.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node. This is a BreakStatement or a
         *      ContinueStatement.
         * @returns ***REMOVED***void***REMOVED***
         */
        function reportIfUnnecessary(node) ***REMOVED***
            if (!node.label) ***REMOVED***
                return;
            ***REMOVED***

            const labelNode = node.label;

            for (let info = scopeInfo; info !== null; info = info.upper) ***REMOVED***
                if (info.breakable || info.label && info.label.name === labelNode.name) ***REMOVED***
                    if (info.breakable && info.label && info.label.name === labelNode.name) ***REMOVED***
                        context.report(***REMOVED***
                            node: labelNode,
                            messageId: "unexpected",
                            data: labelNode,
                            fix: fixer => fixer.removeRange([sourceCode.getFirstToken(node).range[1], labelNode.range[1]])
                        ***REMOVED***);
                    ***REMOVED***
                    return;
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        return ***REMOVED***
            WhileStatement: enterBreakableStatement,
            "WhileStatement:exit": exitBreakableStatement,
            DoWhileStatement: enterBreakableStatement,
            "DoWhileStatement:exit": exitBreakableStatement,
            ForStatement: enterBreakableStatement,
            "ForStatement:exit": exitBreakableStatement,
            ForInStatement: enterBreakableStatement,
            "ForInStatement:exit": exitBreakableStatement,
            ForOfStatement: enterBreakableStatement,
            "ForOfStatement:exit": exitBreakableStatement,
            SwitchStatement: enterBreakableStatement,
            "SwitchStatement:exit": exitBreakableStatement,
            LabeledStatement: enterLabeledStatement,
            "LabeledStatement:exit": exitLabeledStatement,
            BreakStatement: reportIfUnnecessary,
            ContinueStatement: reportIfUnnecessary
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
