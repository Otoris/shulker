/**
 * @fileoverview Rule to check for implicit global variables and functions.
 * @author Joshua Peek
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow variable and `function` declarations in the global scope",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-implicit-globals"
        ***REMOVED***,

        schema: []
    ***REMOVED***,

    create(context) ***REMOVED***
        return ***REMOVED***
            Program() ***REMOVED***
                const scope = context.getScope();

                scope.variables.forEach(variable => ***REMOVED***
                    if (variable.writeable) ***REMOVED***
                        return;
                    ***REMOVED***

                    variable.defs.forEach(def => ***REMOVED***
                        if (def.type === "FunctionName" || (def.type === "Variable" && def.parent.kind === "var")) ***REMOVED***
                            context.report(***REMOVED*** node: def.node, message: "Implicit global variable, assign as global property instead." ***REMOVED***);
                        ***REMOVED***
                    ***REMOVED***);
                ***REMOVED***);

                scope.implicit.variables.forEach(variable => ***REMOVED***
                    const scopeVariable = scope.set.get(variable.name);

                    if (scopeVariable && scopeVariable.writeable) ***REMOVED***
                        return;
                    ***REMOVED***

                    variable.defs.forEach(def => ***REMOVED***
                        context.report(***REMOVED*** node: def.node, message: "Implicit global variable, assign as global property instead." ***REMOVED***);
                    ***REMOVED***);
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
