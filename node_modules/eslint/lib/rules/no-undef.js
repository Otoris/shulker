/**
 * @fileoverview Rule to flag references to undeclared variables.
 * @author Mark Macdonald
 */
"use strict";

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Checks if the given node is the argument of a typeof operator.
 * @param ***REMOVED***ASTNode***REMOVED*** node The AST node being checked.
 * @returns ***REMOVED***boolean***REMOVED*** Whether or not the node is the argument of a typeof operator.
 */
function hasTypeOfOperator(node) ***REMOVED***
    const parent = node.parent;

    return parent.type === "UnaryExpression" && parent.operator === "typeof";
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "problem",

        docs: ***REMOVED***
            description: "disallow the use of undeclared variables unless mentioned in `/*global */` comments",
            category: "Variables",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-undef"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    typeof: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ],
        messages: ***REMOVED***
            undef: "'***REMOVED******REMOVED***name***REMOVED******REMOVED***' is not defined."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const options = context.options[0];
        const considerTypeOf = options && options.typeof === true || false;

        return ***REMOVED***
            "Program:exit"(/* node */) ***REMOVED***
                const globalScope = context.getScope();

                globalScope.through.forEach(ref => ***REMOVED***
                    const identifier = ref.identifier;

                    if (!considerTypeOf && hasTypeOfOperator(identifier)) ***REMOVED***
                        return;
                    ***REMOVED***

                    context.report(***REMOVED***
                        node: identifier,
                        messageId: "undef",
                        data: identifier
                    ***REMOVED***);
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
