/**
 * @fileoverview Rule to require sorting of import declarations
 * @author Christian Schuller
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "enforce sorted import declarations within modules",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/sort-imports"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    ignoreCase: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***,
                    memberSyntaxSortOrder: ***REMOVED***
                        type: "array",
                        items: ***REMOVED***
                            enum: ["none", "all", "multiple", "single"]
                        ***REMOVED***,
                        uniqueItems: true,
                        minItems: 4,
                        maxItems: 4
                    ***REMOVED***,
                    ignoreDeclarationSort: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***,
                    ignoreMemberSort: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ],

        fixable: "code"
    ***REMOVED***,

    create(context) ***REMOVED***

        const configuration = context.options[0] || ***REMOVED******REMOVED***,
            ignoreCase = configuration.ignoreCase || false,
            ignoreDeclarationSort = configuration.ignoreDeclarationSort || false,
            ignoreMemberSort = configuration.ignoreMemberSort || false,
            memberSyntaxSortOrder = configuration.memberSyntaxSortOrder || ["none", "all", "multiple", "single"],
            sourceCode = context.getSourceCode();
        let previousDeclaration = null;

        /**
         * Gets the used member syntax style.
         *
         * import "my-module.js" --> none
         * import * as myModule from "my-module.js" --> all
         * import ***REMOVED***myMember***REMOVED*** from "my-module.js" --> single
         * import ***REMOVED***foo, bar***REMOVED*** from  "my-module.js" --> multiple
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - the ImportDeclaration node.
         * @returns ***REMOVED***string***REMOVED*** used member parameter style, ["all", "multiple", "single"]
         */
        function usedMemberSyntax(node) ***REMOVED***
            if (node.specifiers.length === 0) ***REMOVED***
                return "none";
            ***REMOVED***
            if (node.specifiers[0].type === "ImportNamespaceSpecifier") ***REMOVED***
                return "all";
            ***REMOVED***
            if (node.specifiers.length === 1) ***REMOVED***
                return "single";
            ***REMOVED***
            return "multiple";

        ***REMOVED***

        /**
         * Gets the group by member parameter index for given declaration.
         * @param ***REMOVED***ASTNode***REMOVED*** node - the ImportDeclaration node.
         * @returns ***REMOVED***number***REMOVED*** the declaration group by member index.
         */
        function getMemberParameterGroupIndex(node) ***REMOVED***
            return memberSyntaxSortOrder.indexOf(usedMemberSyntax(node));
        ***REMOVED***

        /**
         * Gets the local name of the first imported module.
         * @param ***REMOVED***ASTNode***REMOVED*** node - the ImportDeclaration node.
         * @returns ***REMOVED***?string***REMOVED*** the local name of the first imported module.
         */
        function getFirstLocalMemberName(node) ***REMOVED***
            if (node.specifiers[0]) ***REMOVED***
                return node.specifiers[0].local.name;
            ***REMOVED***
            return null;

        ***REMOVED***

        return ***REMOVED***
            ImportDeclaration(node) ***REMOVED***
                if (!ignoreDeclarationSort) ***REMOVED***
                    if (previousDeclaration) ***REMOVED***
                        const currentMemberSyntaxGroupIndex = getMemberParameterGroupIndex(node),
                            previousMemberSyntaxGroupIndex = getMemberParameterGroupIndex(previousDeclaration);
                        let currentLocalMemberName = getFirstLocalMemberName(node),
                            previousLocalMemberName = getFirstLocalMemberName(previousDeclaration);

                        if (ignoreCase) ***REMOVED***
                            previousLocalMemberName = previousLocalMemberName && previousLocalMemberName.toLowerCase();
                            currentLocalMemberName = currentLocalMemberName && currentLocalMemberName.toLowerCase();
                        ***REMOVED***

                        /*
                         * When the current declaration uses a different member syntax,
                         * then check if the ordering is correct.
                         * Otherwise, make a default string compare (like rule sort-vars to be consistent) of the first used local member name.
                         */
                        if (currentMemberSyntaxGroupIndex !== previousMemberSyntaxGroupIndex) ***REMOVED***
                            if (currentMemberSyntaxGroupIndex < previousMemberSyntaxGroupIndex) ***REMOVED***
                                context.report(***REMOVED***
                                    node,
                                    message: "Expected '***REMOVED******REMOVED***syntaxA***REMOVED******REMOVED***' syntax before '***REMOVED******REMOVED***syntaxB***REMOVED******REMOVED***' syntax.",
                                    data: ***REMOVED***
                                        syntaxA: memberSyntaxSortOrder[currentMemberSyntaxGroupIndex],
                                        syntaxB: memberSyntaxSortOrder[previousMemberSyntaxGroupIndex]
                                    ***REMOVED***
                                ***REMOVED***);
                            ***REMOVED***
                        ***REMOVED*** else ***REMOVED***
                            if (previousLocalMemberName &&
                                currentLocalMemberName &&
                                currentLocalMemberName < previousLocalMemberName
                            ) ***REMOVED***
                                context.report(***REMOVED***
                                    node,
                                    message: "Imports should be sorted alphabetically."
                                ***REMOVED***);
                            ***REMOVED***
                        ***REMOVED***
                    ***REMOVED***

                    previousDeclaration = node;
                ***REMOVED***

                if (!ignoreMemberSort) ***REMOVED***
                    const importSpecifiers = node.specifiers.filter(specifier => specifier.type === "ImportSpecifier");
                    const getSortableName = ignoreCase ? specifier => specifier.local.name.toLowerCase() : specifier => specifier.local.name;
                    const firstUnsortedIndex = importSpecifiers.map(getSortableName).findIndex((name, index, array) => array[index - 1] > name);

                    if (firstUnsortedIndex !== -1) ***REMOVED***
                        context.report(***REMOVED***
                            node: importSpecifiers[firstUnsortedIndex],
                            message: "Member '***REMOVED******REMOVED***memberName***REMOVED******REMOVED***' of the import declaration should be sorted alphabetically.",
                            data: ***REMOVED*** memberName: importSpecifiers[firstUnsortedIndex].local.name ***REMOVED***,
                            fix(fixer) ***REMOVED***
                                if (importSpecifiers.some(specifier =>
                                    sourceCode.getCommentsBefore(specifier).length || sourceCode.getCommentsAfter(specifier).length)) ***REMOVED***

                                    // If there are comments in the ImportSpecifier list, don't rearrange the specifiers.
                                    return null;
                                ***REMOVED***

                                return fixer.replaceTextRange(
                                    [importSpecifiers[0].range[0], importSpecifiers[importSpecifiers.length - 1].range[1]],
                                    importSpecifiers

                                        // Clone the importSpecifiers array to avoid mutating it
                                        .slice()

                                        // Sort the array into the desired order
                                        .sort((specifierA, specifierB) => ***REMOVED***
                                            const aName = getSortableName(specifierA);
                                            const bName = getSortableName(specifierB);

                                            return aName > bName ? 1 : -1;
                                        ***REMOVED***)

                                        // Build a string out of the sorted list of import specifiers and the text between the originals
                                        .reduce((sourceText, specifier, index) => ***REMOVED***
                                            const textAfterSpecifier = index === importSpecifiers.length - 1
                                                ? ""
                                                : sourceCode.getText().slice(importSpecifiers[index].range[1], importSpecifiers[index + 1].range[0]);

                                            return sourceText + sourceCode.getText(specifier) + textAfterSpecifier;
                                        ***REMOVED***, "")
                                );
                            ***REMOVED***
                        ***REMOVED***);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
