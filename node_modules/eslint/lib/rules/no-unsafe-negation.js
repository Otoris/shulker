/**
 * @fileoverview Rule to disallow negating the left operand of relational operators
 * @author Toru Nagashima
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Checks whether the given operator is a relational operator or not.
 *
 * @param ***REMOVED***string***REMOVED*** op - The operator type to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the operator is a relational operator.
 */
function isRelationalOperator(op) ***REMOVED***
    return op === "in" || op === "instanceof";
***REMOVED***

/**
 * Checks whether the given node is a logical negation expression or not.
 *
 * @param ***REMOVED***ASTNode***REMOVED*** node - The node to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the node is a logical negation expression.
 */
function isNegation(node) ***REMOVED***
    return node.type === "UnaryExpression" && node.operator === "!";
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "problem",

        docs: ***REMOVED***
            description: "disallow negating the left operand of relational operators",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-unsafe-negation"
        ***REMOVED***,

        schema: [],
        fixable: null,
        messages: ***REMOVED***
            unexpected: "Unexpected negating the left operand of '***REMOVED******REMOVED***operator***REMOVED******REMOVED***' operator."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode();

        return ***REMOVED***
            BinaryExpression(node) ***REMOVED***
                if (isRelationalOperator(node.operator) &&
                    isNegation(node.left) &&
                    !astUtils.isParenthesised(sourceCode, node.left)
                ) ***REMOVED***
                    context.report(***REMOVED***
                        node,
                        loc: node.left.loc,
                        messageId: "unexpected",
                        data: ***REMOVED*** operator: node.operator ***REMOVED***
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
