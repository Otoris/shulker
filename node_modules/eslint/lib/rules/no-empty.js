/**
 * @fileoverview Rule to flag use of an empty block statement
 * @author Nicholas C. Zakas
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "suggestion",

        docs: ***REMOVED***
            description: "disallow empty block statements",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-empty"
        ***REMOVED***,

        schema: [
            ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    allowEmptyCatch: ***REMOVED***
                        type: "boolean",
                        default: false
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ],

        messages: ***REMOVED***
            unexpected: "Empty ***REMOVED******REMOVED***type***REMOVED******REMOVED*** statement."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const options = context.options[0] || ***REMOVED******REMOVED***,
            allowEmptyCatch = options.allowEmptyCatch || false;

        const sourceCode = context.getSourceCode();

        return ***REMOVED***
            BlockStatement(node) ***REMOVED***

                // if the body is not empty, we can just return immediately
                if (node.body.length !== 0) ***REMOVED***
                    return;
                ***REMOVED***

                // a function is generally allowed to be empty
                if (astUtils.isFunction(node.parent)) ***REMOVED***
                    return;
                ***REMOVED***

                if (allowEmptyCatch && node.parent.type === "CatchClause") ***REMOVED***
                    return;
                ***REMOVED***

                // any other block is only allowed to be empty, if it contains a comment
                if (sourceCode.getCommentsInside(node).length > 0) ***REMOVED***
                    return;
                ***REMOVED***

                context.report(***REMOVED*** node, messageId: "unexpected", data: ***REMOVED*** type: "block" ***REMOVED*** ***REMOVED***);
            ***REMOVED***,

            SwitchStatement(node) ***REMOVED***

                if (typeof node.cases === "undefined" || node.cases.length === 0) ***REMOVED***
                    context.report(***REMOVED*** node, messageId: "unexpected", data: ***REMOVED*** type: "switch" ***REMOVED*** ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
