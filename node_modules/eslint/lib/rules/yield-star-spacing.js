/**
 * @fileoverview Rule to check the spacing around the * in yield* expressions.
 * @author Bryan Smith
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "layout",

        docs: ***REMOVED***
            description: "require or disallow spacing around the `*` in `yield*` expressions",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/yield-star-spacing"
        ***REMOVED***,

        fixable: "whitespace",

        schema: [
            ***REMOVED***
                oneOf: [
                    ***REMOVED***
                        enum: ["before", "after", "both", "neither"]
                    ***REMOVED***,
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            before: ***REMOVED*** type: "boolean" ***REMOVED***,
                            after: ***REMOVED*** type: "boolean" ***REMOVED***
                        ***REMOVED***,
                        additionalProperties: false
                    ***REMOVED***
                ]
            ***REMOVED***
        ],
        messages: ***REMOVED***
            missingBefore: "Missing space before *.",
            missingAfter: "Missing space after *.",
            unexpectedBefore: "Unexpected space before *.",
            unexpectedAfter: "Unexpected space after *."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode();

        const mode = (function(option) ***REMOVED***
            if (!option || typeof option === "string") ***REMOVED***
                return ***REMOVED***
                    before: ***REMOVED*** before: true, after: false ***REMOVED***,
                    after: ***REMOVED*** before: false, after: true ***REMOVED***,
                    both: ***REMOVED*** before: true, after: true ***REMOVED***,
                    neither: ***REMOVED*** before: false, after: false ***REMOVED***
                ***REMOVED***[option || "after"];
            ***REMOVED***
            return option;
        ***REMOVED***(context.options[0]));

        /**
         * Checks the spacing between two tokens before or after the star token.
         * @param ***REMOVED***string***REMOVED*** side Either "before" or "after".
         * @param ***REMOVED***Token***REMOVED*** leftToken `function` keyword token if side is "before", or
         *     star token if side is "after".
         * @param ***REMOVED***Token***REMOVED*** rightToken Star token if side is "before", or identifier
         *     token if side is "after".
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkSpacing(side, leftToken, rightToken) ***REMOVED***
            if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken) !== mode[side]) ***REMOVED***
                const after = leftToken.value === "*";
                const spaceRequired = mode[side];
                const node = after ? leftToken : rightToken;
                let messageId = "";

                if (spaceRequired) ***REMOVED***
                    messageId = side === "before" ? "missingBefore" : "missingAfter";
                ***REMOVED*** else ***REMOVED***
                    messageId = side === "before" ? "unexpectedBefore" : "unexpectedAfter";
                ***REMOVED***

                context.report(***REMOVED***
                    node,
                    messageId,
                    fix(fixer) ***REMOVED***
                        if (spaceRequired) ***REMOVED***
                            if (after) ***REMOVED***
                                return fixer.insertTextAfter(node, " ");
                            ***REMOVED***
                            return fixer.insertTextBefore(node, " ");
                        ***REMOVED***
                        return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);
                    ***REMOVED***
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        /**
         * Enforces the spacing around the star if node is a yield* expression.
         * @param ***REMOVED***ASTNode***REMOVED*** node A yield expression node.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkExpression(node) ***REMOVED***
            if (!node.delegate) ***REMOVED***
                return;
            ***REMOVED***

            const tokens = sourceCode.getFirstTokens(node, 3);
            const yieldToken = tokens[0];
            const starToken = tokens[1];
            const nextToken = tokens[2];

            checkSpacing("before", yieldToken, starToken);
            checkSpacing("after", starToken, nextToken);
        ***REMOVED***

        return ***REMOVED***
            YieldExpression: checkExpression
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
