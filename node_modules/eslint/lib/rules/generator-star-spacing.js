/**
 * @fileoverview Rule to check the spacing around the * in generator functions.
 * @author Jamund Ferguson
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

const OVERRIDE_SCHEMA = ***REMOVED***
    oneOf: [
        ***REMOVED***
            enum: ["before", "after", "both", "neither"]
        ***REMOVED***,
        ***REMOVED***
            type: "object",
            properties: ***REMOVED***
                before: ***REMOVED*** type: "boolean" ***REMOVED***,
                after: ***REMOVED*** type: "boolean" ***REMOVED***
            ***REMOVED***,
            additionalProperties: false
        ***REMOVED***
    ]
***REMOVED***;

module.exports = ***REMOVED***
    meta: ***REMOVED***
        type: "layout",

        docs: ***REMOVED***
            description: "enforce consistent spacing around `*` operators in generator functions",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/generator-star-spacing"
        ***REMOVED***,

        fixable: "whitespace",

        schema: [
            ***REMOVED***
                oneOf: [
                    ***REMOVED***
                        enum: ["before", "after", "both", "neither"]
                    ***REMOVED***,
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            before: ***REMOVED*** type: "boolean" ***REMOVED***,
                            after: ***REMOVED*** type: "boolean" ***REMOVED***,
                            named: OVERRIDE_SCHEMA,
                            anonymous: OVERRIDE_SCHEMA,
                            method: OVERRIDE_SCHEMA
                        ***REMOVED***,
                        additionalProperties: false
                    ***REMOVED***
                ]
            ***REMOVED***
        ],

        messages: ***REMOVED***
            missingBefore: "Missing space before *.",
            missingAfter: "Missing space after *.",
            unexpectedBefore: "Unexpected space before *.",
            unexpectedAfter: "Unexpected space after *."
        ***REMOVED***
    ***REMOVED***,

    create(context) ***REMOVED***

        const optionDefinitions = ***REMOVED***
            before: ***REMOVED*** before: true, after: false ***REMOVED***,
            after: ***REMOVED*** before: false, after: true ***REMOVED***,
            both: ***REMOVED*** before: true, after: true ***REMOVED***,
            neither: ***REMOVED*** before: false, after: false ***REMOVED***
        ***REMOVED***;

        /**
         * Returns resolved option definitions based on an option and defaults
         *
         * @param ***REMOVED***any***REMOVED*** option - The option object or string value
         * @param ***REMOVED***Object***REMOVED*** defaults - The defaults to use if options are not present
         * @returns ***REMOVED***Object***REMOVED*** the resolved object definition
         */
        function optionToDefinition(option, defaults) ***REMOVED***
            if (!option) ***REMOVED***
                return defaults;
            ***REMOVED***

            return typeof option === "string"
                ? optionDefinitions[option]
                : Object.assign(***REMOVED******REMOVED***, defaults, option);
        ***REMOVED***

        const modes = (function(option) ***REMOVED***
            const defaults = optionToDefinition(option, optionDefinitions.before);

            return ***REMOVED***
                named: optionToDefinition(option.named, defaults),
                anonymous: optionToDefinition(option.anonymous, defaults),
                method: optionToDefinition(option.method, defaults)
            ***REMOVED***;
        ***REMOVED***(context.options[0] || ***REMOVED******REMOVED***));

        const sourceCode = context.getSourceCode();

        /**
         * Checks if the given token is a star token or not.
         *
         * @param ***REMOVED***Token***REMOVED*** token - The token to check.
         * @returns ***REMOVED***boolean***REMOVED*** `true` if the token is a star token.
         */
        function isStarToken(token) ***REMOVED***
            return token.value === "*" && token.type === "Punctuator";
        ***REMOVED***

        /**
         * Gets the generator star token of the given function node.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - The function node to get.
         * @returns ***REMOVED***Token***REMOVED*** Found star token.
         */
        function getStarToken(node) ***REMOVED***
            return sourceCode.getFirstToken(
                (node.parent.method || node.parent.type === "MethodDefinition") ? node.parent : node,
                isStarToken
            );
        ***REMOVED***

        /**
         * capitalize a given string.
         * @param ***REMOVED***string***REMOVED*** str the given string.
         * @returns ***REMOVED***string***REMOVED*** the capitalized string.
         */
        function capitalize(str) ***REMOVED***
            return str[0].toUpperCase() + str.slice(1);
        ***REMOVED***

        /**
         * Checks the spacing between two tokens before or after the star token.
         *
         * @param ***REMOVED***string***REMOVED*** kind Either "named", "anonymous", or "method"
         * @param ***REMOVED***string***REMOVED*** side Either "before" or "after".
         * @param ***REMOVED***Token***REMOVED*** leftToken `function` keyword token if side is "before", or
         *     star token if side is "after".
         * @param ***REMOVED***Token***REMOVED*** rightToken Star token if side is "before", or identifier
         *     token if side is "after".
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkSpacing(kind, side, leftToken, rightToken) ***REMOVED***
            if (!!(rightToken.range[0] - leftToken.range[1]) !== modes[kind][side]) ***REMOVED***
                const after = leftToken.value === "*";
                const spaceRequired = modes[kind][side];
                const node = after ? leftToken : rightToken;
                const messageId = `$***REMOVED***spaceRequired ? "missing" : "unexpected"***REMOVED***$***REMOVED***capitalize(side)***REMOVED***`;

                context.report(***REMOVED***
                    node,
                    messageId,
                    fix(fixer) ***REMOVED***
                        if (spaceRequired) ***REMOVED***
                            if (after) ***REMOVED***
                                return fixer.insertTextAfter(node, " ");
                            ***REMOVED***
                            return fixer.insertTextBefore(node, " ");
                        ***REMOVED***
                        return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);
                    ***REMOVED***
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        /**
         * Enforces the spacing around the star if node is a generator function.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node A function expression or declaration node.
         * @returns ***REMOVED***void***REMOVED***
         */
        function checkFunction(node) ***REMOVED***
            if (!node.generator) ***REMOVED***
                return;
            ***REMOVED***

            const starToken = getStarToken(node);
            const prevToken = sourceCode.getTokenBefore(starToken);
            const nextToken = sourceCode.getTokenAfter(starToken);

            let kind = "named";

            if (node.parent.type === "MethodDefinition" || (node.parent.type === "Property" && node.parent.method)) ***REMOVED***
                kind = "method";
            ***REMOVED*** else if (!node.id) ***REMOVED***
                kind = "anonymous";
            ***REMOVED***

            // Only check before when preceded by `function`|`static` keyword
            if (!(kind === "method" && starToken === sourceCode.getFirstToken(node.parent))) ***REMOVED***
                checkSpacing(kind, "before", prevToken, starToken);
            ***REMOVED***

            checkSpacing(kind, "after", starToken, nextToken);
        ***REMOVED***

        return ***REMOVED***
            FunctionDeclaration: checkFunction,
            FunctionExpression: checkFunction
        ***REMOVED***;

    ***REMOVED***
***REMOVED***;
