declare module "https" ***REMOVED***
    import * as tls from "tls";
    import * as events from "events";
    import * as http from "http";
    import ***REMOVED*** URL ***REMOVED*** from "url";

    type ServerOptions = tls.SecureContextOptions & tls.TlsOptions & http.ServerOptions;

    type RequestOptions = http.RequestOptions & tls.SecureContextOptions & ***REMOVED***
        rejectUnauthorized?: boolean; // Defaults to true
        servername?: string; // SNI TLS Extension
    ***REMOVED***;

    interface AgentOptions extends http.AgentOptions, tls.ConnectionOptions ***REMOVED***
        rejectUnauthorized?: boolean;
        maxCachedSessions?: number;
    ***REMOVED***

    class Agent extends http.Agent ***REMOVED***
        constructor(options?: AgentOptions);
        options: AgentOptions;
    ***REMOVED***

    interface Server extends http.HttpBase ***REMOVED******REMOVED***
    class Server extends tls.Server ***REMOVED***
        constructor(requestListener?: http.RequestListener);
        constructor(options: ServerOptions, requestListener?: http.RequestListener);
    ***REMOVED***

    function createServer(requestListener?: http.RequestListener): Server;
    function createServer(options: ServerOptions, requestListener?: http.RequestListener): Server;
    function request(options: RequestOptions | string | URL, callback?: (res: http.IncomingMessage) => void): http.ClientRequest;
    function request(url: string | URL, options: RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest;
    function get(options: RequestOptions | string | URL, callback?: (res: http.IncomingMessage) => void): http.ClientRequest;
    function get(url: string | URL, options: RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest;
    let globalAgent: Agent;
***REMOVED***
