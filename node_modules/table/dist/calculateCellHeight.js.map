***REMOVED***"version":3,"sources":["../src/calculateCellHeight.js"],"names":["value","columnWidth","useWrapWord","TypeError","Number","isInteger","Error","length"],"mappings":";;;;;;;;;AACA;;;;AAEA;;;;;;6BAMgBA,K,EAAOC,W,EAAaC,WAAW,GAAG,K,KAAU;AAC1D,MAAI,CAAC,wBAAWF,KAAX,CAAL,EAAwB;AACtB,UAAM,IAAIG,SAAJ,CAAc,yBAAd,CAAN;AACD;;AAED,MAAI,CAACC,MAAM,CAACC,SAAP,CAAiBJ,WAAjB,CAAL,EAAoC;AAClC,UAAM,IAAIE,SAAJ,CAAc,kCAAd,CAAN;AACD;;AAED,MAAIF,WAAW,GAAG,CAAlB,EAAqB;AACnB,UAAM,IAAIK,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,SAAO,uBAASN,KAAT,EAAgBC,WAAhB,EAA6BC,WAA7B,EAA0CK,MAAjD;AACD,C","sourcesContent":["import _ from 'lodash';\nimport wrapCell from './wrapCell';\n\n/**\n * @param ***REMOVED***string***REMOVED*** value\n * @param ***REMOVED***number***REMOVED*** columnWidth\n * @param ***REMOVED***boolean***REMOVED*** useWrapWord\n * @returns ***REMOVED***number***REMOVED***\n */\nexport default (value, columnWidth, useWrapWord = false) => ***REMOVED***\n  if (!_.isString(value)) ***REMOVED***\n    throw new TypeError('Value must be a string.');\n  ***REMOVED***\n\n  if (!Number.isInteger(columnWidth)) ***REMOVED***\n    throw new TypeError('Column width must be an integer.');\n  ***REMOVED***\n\n  if (columnWidth < 1) ***REMOVED***\n    throw new Error('Column width must be greater than 0.');\n  ***REMOVED***\n\n  return wrapCell(value, columnWidth, useWrapWord).length;\n***REMOVED***;\n"],"file":"calculateCellHeight.js"***REMOVED***