"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
***REMOVED***);
exports.default = void 0;

var _mapValues2 = _interopRequireDefault(require("lodash/mapValues"));

var _values2 = _interopRequireDefault(require("lodash/values"));

var _trimEnd2 = _interopRequireDefault(require("lodash/trimEnd"));

var _makeStreamConfig = _interopRequireDefault(require("./makeStreamConfig"));

var _drawRow = _interopRequireDefault(require("./drawRow"));

var _drawBorder = require("./drawBorder");

var _stringifyTableData = _interopRequireDefault(require("./stringifyTableData"));

var _truncateTableData = _interopRequireDefault(require("./truncateTableData"));

var _mapDataUsingRowHeightIndex = _interopRequireDefault(require("./mapDataUsingRowHeightIndex"));

var _alignTableData = _interopRequireDefault(require("./alignTableData"));

var _padTableData = _interopRequireDefault(require("./padTableData"));

var _calculateRowHeightIndex = _interopRequireDefault(require("./calculateRowHeightIndex"));

function _interopRequireDefault(obj) ***REMOVED*** return obj && obj.__esModule ? obj : ***REMOVED*** default: obj ***REMOVED***; ***REMOVED***

/**
 * @param ***REMOVED***Array***REMOVED*** data
 * @param ***REMOVED***Object***REMOVED*** config
 * @returns ***REMOVED***Array***REMOVED***
 */
const prepareData = (data, config) => ***REMOVED***
  let rows;
  rows = (0, _stringifyTableData.default)(data);
  rows = (0, _truncateTableData.default)(data, config);
  const rowHeightIndex = (0, _calculateRowHeightIndex.default)(rows, config);
  rows = (0, _mapDataUsingRowHeightIndex.default)(rows, rowHeightIndex, config);
  rows = (0, _alignTableData.default)(rows, config);
  rows = (0, _padTableData.default)(rows, config);
  return rows;
***REMOVED***;
/**
 * @param ***REMOVED***string[]***REMOVED*** row
 * @param ***REMOVED***number[]***REMOVED*** columnWidthIndex
 * @param ***REMOVED***Object***REMOVED*** config
 * @returns ***REMOVED***undefined***REMOVED***
 */


const create = (row, columnWidthIndex, config) => ***REMOVED***
  const rows = prepareData([row], config);
  const body = rows.map(literalRow => ***REMOVED***
    return (0, _drawRow.default)(literalRow, config.border);
  ***REMOVED***).join('');
  let output;
  output = '';
  output += (0, _drawBorder.drawBorderTop)(columnWidthIndex, config.border);
  output += body;
  output += (0, _drawBorder.drawBorderBottom)(columnWidthIndex, config.border);
  output = (0, _trimEnd2.default)(output);
  process.stdout.write(output);
***REMOVED***;
/**
 * @param ***REMOVED***string[]***REMOVED*** row
 * @param ***REMOVED***number[]***REMOVED*** columnWidthIndex
 * @param ***REMOVED***Object***REMOVED*** config
 * @returns ***REMOVED***undefined***REMOVED***
 */


const append = (row, columnWidthIndex, config) => ***REMOVED***
  const rows = prepareData([row], config);
  const body = rows.map(literalRow => ***REMOVED***
    return (0, _drawRow.default)(literalRow, config.border);
  ***REMOVED***).join('');
  let output = '';
  const bottom = (0, _drawBorder.drawBorderBottom)(columnWidthIndex, config.border);

  if (bottom !== '\n') ***REMOVED***
    output = '\r\u001B[K';
  ***REMOVED***

  output += (0, _drawBorder.drawBorderJoin)(columnWidthIndex, config.border);
  output += body;
  output += bottom;
  output = (0, _trimEnd2.default)(output);
  process.stdout.write(output);
***REMOVED***;
/**
 * @param ***REMOVED***Object***REMOVED*** userConfig
 * @returns ***REMOVED***Object***REMOVED***
 */


const createStream = (userConfig = ***REMOVED******REMOVED***) => ***REMOVED***
  const config = (0, _makeStreamConfig.default)(userConfig); // @todo Use 'Object.values' when Node.js v6 support is dropped.

  const columnWidthIndex = (0, _values2.default)((0, _mapValues2.default)(config.columns, column => ***REMOVED***
    return column.width + column.paddingLeft + column.paddingRight;
  ***REMOVED***));
  let empty;
  empty = true;
  return ***REMOVED***
    /**
     * @param ***REMOVED***string[]***REMOVED*** row
     * @returns ***REMOVED***undefined***REMOVED***
     */
    write: row => ***REMOVED***
      if (row.length !== config.columnCount) ***REMOVED***
        throw new Error('Row cell count does not match the config.columnCount.');
      ***REMOVED***

      if (empty) ***REMOVED***
        empty = false;
        return create(row, columnWidthIndex, config);
      ***REMOVED*** else ***REMOVED***
        return append(row, columnWidthIndex, config);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***;
***REMOVED***;

var _default = createStream;
exports.default = _default;
//# sourceMappingURL=createStream.js.map