import _ from 'lodash';
import makeStreamConfig from './makeStreamConfig';
import drawRow from './drawRow';
import ***REMOVED***
  drawBorderBottom,
  drawBorderJoin,
  drawBorderTop
***REMOVED*** from './drawBorder';
import stringifyTableData from './stringifyTableData';
import truncateTableData from './truncateTableData';
import mapDataUsingRowHeightIndex from './mapDataUsingRowHeightIndex';
import alignTableData from './alignTableData';
import padTableData from './padTableData';
import calculateRowHeightIndex from './calculateRowHeightIndex';

/**
 * @param ***REMOVED***Array***REMOVED*** data
 * @param ***REMOVED***Object***REMOVED*** config
 * @returns ***REMOVED***Array***REMOVED***
 */
const prepareData = (data, config) => ***REMOVED***
  let rows;

  rows = stringifyTableData(data);

  rows = truncateTableData(data, config);

  const rowHeightIndex = calculateRowHeightIndex(rows, config);

  rows = mapDataUsingRowHeightIndex(rows, rowHeightIndex, config);
  rows = alignTableData(rows, config);
  rows = padTableData(rows, config);

  return rows;
***REMOVED***;

/**
 * @param ***REMOVED***string[]***REMOVED*** row
 * @param ***REMOVED***number[]***REMOVED*** columnWidthIndex
 * @param ***REMOVED***Object***REMOVED*** config
 * @returns ***REMOVED***undefined***REMOVED***
 */
const create = (row, columnWidthIndex, config) => ***REMOVED***
  const rows = prepareData([row], config);

  const body = rows.map((literalRow) => ***REMOVED***
    return drawRow(literalRow, config.border);
  ***REMOVED***).join('');

  let output;

  output = '';

  output += drawBorderTop(columnWidthIndex, config.border);
  output += body;
  output += drawBorderBottom(columnWidthIndex, config.border);

  output = _.trimEnd(output);

  process.stdout.write(output);
***REMOVED***;

/**
 * @param ***REMOVED***string[]***REMOVED*** row
 * @param ***REMOVED***number[]***REMOVED*** columnWidthIndex
 * @param ***REMOVED***Object***REMOVED*** config
 * @returns ***REMOVED***undefined***REMOVED***
 */
const append = (row, columnWidthIndex, config) => ***REMOVED***
  const rows = prepareData([row], config);

  const body = rows.map((literalRow) => ***REMOVED***
    return drawRow(literalRow, config.border);
  ***REMOVED***).join('');

  let output = '';
  const bottom = drawBorderBottom(columnWidthIndex, config.border);

  if (bottom !== '\n') ***REMOVED***
    output = '\r\u001B[K';
  ***REMOVED***

  output += drawBorderJoin(columnWidthIndex, config.border);
  output += body;
  output += bottom;

  output = _.trimEnd(output);

  process.stdout.write(output);
***REMOVED***;

/**
 * @param ***REMOVED***Object***REMOVED*** userConfig
 * @returns ***REMOVED***Object***REMOVED***
 */
export default (userConfig = ***REMOVED******REMOVED***) => ***REMOVED***
  const config = makeStreamConfig(userConfig);

  // @todo Use 'Object.values' when Node.js v6 support is dropped.
  const columnWidthIndex = _.values(_.mapValues(config.columns, (column) => ***REMOVED***
    return column.width + column.paddingLeft + column.paddingRight;
  ***REMOVED***));

  let empty;

  empty = true;

  return ***REMOVED***
    /**
     * @param ***REMOVED***string[]***REMOVED*** row
     * @returns ***REMOVED***undefined***REMOVED***
     */
    write: (row) => ***REMOVED***
      if (row.length !== config.columnCount) ***REMOVED***
        throw new Error('Row cell count does not match the config.columnCount.');
      ***REMOVED***

      if (empty) ***REMOVED***
        empty = false;

        return create(row, columnWidthIndex, config);
      ***REMOVED*** else ***REMOVED***
        return append(row, columnWidthIndex, config);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***;
***REMOVED***;
