'use strict';
var equal = require('ajv/lib/compile/equal');
var validate = (function() ***REMOVED***
  var pattern0 = new RegExp('^[0-9]+$');
  var refVal = [];
  var refVal1 = (function() ***REMOVED***
    var pattern0 = new RegExp('^[0-9]+$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) ***REMOVED***
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) ***REMOVED***
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) ***REMOVED***
          var isAdditional0 = !(false || validate.schema.properties.hasOwnProperty(key0));
          if (isAdditional0) ***REMOVED***
            valid1 = false;
            var err = ***REMOVED***
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: ***REMOVED***
                additionalProperty: '' + key0 + ''
              ***REMOVED***,
              message: 'should NOT have additional properties'
            ***REMOVED***;
            if (vErrors === null) vErrors = [err];
            else vErrors.push(err);
            errors++;
          ***REMOVED***
        ***REMOVED***
        if (data.topBody !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (!refVal2(data.topBody, (dataPath || '') + '.topBody', data, 'topBody', rootData)) ***REMOVED***
            if (vErrors === null) vErrors = refVal2.errors;
            else vErrors = vErrors.concat(refVal2.errors);
            errors = vErrors.length;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.topJoin !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (!refVal[2](data.topJoin, (dataPath || '') + '.topJoin', data, 'topJoin', rootData)) ***REMOVED***
            if (vErrors === null) vErrors = refVal[2].errors;
            else vErrors = vErrors.concat(refVal[2].errors);
            errors = vErrors.length;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.topLeft !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (!refVal[2](data.topLeft, (dataPath || '') + '.topLeft', data, 'topLeft', rootData)) ***REMOVED***
            if (vErrors === null) vErrors = refVal[2].errors;
            else vErrors = vErrors.concat(refVal[2].errors);
            errors = vErrors.length;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.topRight !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (!refVal[2](data.topRight, (dataPath || '') + '.topRight', data, 'topRight', rootData)) ***REMOVED***
            if (vErrors === null) vErrors = refVal[2].errors;
            else vErrors = vErrors.concat(refVal[2].errors);
            errors = vErrors.length;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.bottomBody !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (!refVal[2](data.bottomBody, (dataPath || '') + '.bottomBody', data, 'bottomBody', rootData)) ***REMOVED***
            if (vErrors === null) vErrors = refVal[2].errors;
            else vErrors = vErrors.concat(refVal[2].errors);
            errors = vErrors.length;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.bottomJoin !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (!refVal[2](data.bottomJoin, (dataPath || '') + '.bottomJoin', data, 'bottomJoin', rootData)) ***REMOVED***
            if (vErrors === null) vErrors = refVal[2].errors;
            else vErrors = vErrors.concat(refVal[2].errors);
            errors = vErrors.length;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.bottomLeft !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (!refVal[2](data.bottomLeft, (dataPath || '') + '.bottomLeft', data, 'bottomLeft', rootData)) ***REMOVED***
            if (vErrors === null) vErrors = refVal[2].errors;
            else vErrors = vErrors.concat(refVal[2].errors);
            errors = vErrors.length;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.bottomRight !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (!refVal[2](data.bottomRight, (dataPath || '') + '.bottomRight', data, 'bottomRight', rootData)) ***REMOVED***
            if (vErrors === null) vErrors = refVal[2].errors;
            else vErrors = vErrors.concat(refVal[2].errors);
            errors = vErrors.length;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.bodyLeft !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (!refVal[2](data.bodyLeft, (dataPath || '') + '.bodyLeft', data, 'bodyLeft', rootData)) ***REMOVED***
            if (vErrors === null) vErrors = refVal[2].errors;
            else vErrors = vErrors.concat(refVal[2].errors);
            errors = vErrors.length;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.bodyRight !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (!refVal[2](data.bodyRight, (dataPath || '') + '.bodyRight', data, 'bodyRight', rootData)) ***REMOVED***
            if (vErrors === null) vErrors = refVal[2].errors;
            else vErrors = vErrors.concat(refVal[2].errors);
            errors = vErrors.length;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.bodyJoin !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (!refVal[2](data.bodyJoin, (dataPath || '') + '.bodyJoin', data, 'bodyJoin', rootData)) ***REMOVED***
            if (vErrors === null) vErrors = refVal[2].errors;
            else vErrors = vErrors.concat(refVal[2].errors);
            errors = vErrors.length;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.joinBody !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (!refVal[2](data.joinBody, (dataPath || '') + '.joinBody', data, 'joinBody', rootData)) ***REMOVED***
            if (vErrors === null) vErrors = refVal[2].errors;
            else vErrors = vErrors.concat(refVal[2].errors);
            errors = vErrors.length;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.joinLeft !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (!refVal[2](data.joinLeft, (dataPath || '') + '.joinLeft', data, 'joinLeft', rootData)) ***REMOVED***
            if (vErrors === null) vErrors = refVal[2].errors;
            else vErrors = vErrors.concat(refVal[2].errors);
            errors = vErrors.length;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.joinRight !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (!refVal[2](data.joinRight, (dataPath || '') + '.joinRight', data, 'joinRight', rootData)) ***REMOVED***
            if (vErrors === null) vErrors = refVal[2].errors;
            else vErrors = vErrors.concat(refVal[2].errors);
            errors = vErrors.length;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.joinJoin !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (!refVal[2](data.joinJoin, (dataPath || '') + '.joinJoin', data, 'joinJoin', rootData)) ***REMOVED***
            if (vErrors === null) vErrors = refVal[2].errors;
            else vErrors = vErrors.concat(refVal[2].errors);
            errors = vErrors.length;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        var err = ***REMOVED***
          keyword: 'type',
          dataPath: (dataPath || '') + "",
          schemaPath: '#/type',
          params: ***REMOVED***
            type: 'object'
          ***REMOVED***,
          message: 'should be object'
        ***REMOVED***;
        if (vErrors === null) vErrors = [err];
        else vErrors.push(err);
        errors++;
      ***REMOVED***
      validate.errors = vErrors;
      return errors === 0;
    ***REMOVED***;
  ***REMOVED***)();
  refVal1.schema = ***REMOVED***
    "type": "object",
    "properties": ***REMOVED***
      "topBody": ***REMOVED***
        "$ref": "#/definitions/border"
      ***REMOVED***,
      "topJoin": ***REMOVED***
        "$ref": "#/definitions/border"
      ***REMOVED***,
      "topLeft": ***REMOVED***
        "$ref": "#/definitions/border"
      ***REMOVED***,
      "topRight": ***REMOVED***
        "$ref": "#/definitions/border"
      ***REMOVED***,
      "bottomBody": ***REMOVED***
        "$ref": "#/definitions/border"
      ***REMOVED***,
      "bottomJoin": ***REMOVED***
        "$ref": "#/definitions/border"
      ***REMOVED***,
      "bottomLeft": ***REMOVED***
        "$ref": "#/definitions/border"
      ***REMOVED***,
      "bottomRight": ***REMOVED***
        "$ref": "#/definitions/border"
      ***REMOVED***,
      "bodyLeft": ***REMOVED***
        "$ref": "#/definitions/border"
      ***REMOVED***,
      "bodyRight": ***REMOVED***
        "$ref": "#/definitions/border"
      ***REMOVED***,
      "bodyJoin": ***REMOVED***
        "$ref": "#/definitions/border"
      ***REMOVED***,
      "joinBody": ***REMOVED***
        "$ref": "#/definitions/border"
      ***REMOVED***,
      "joinLeft": ***REMOVED***
        "$ref": "#/definitions/border"
      ***REMOVED***,
      "joinRight": ***REMOVED***
        "$ref": "#/definitions/border"
      ***REMOVED***,
      "joinJoin": ***REMOVED***
        "$ref": "#/definitions/border"
      ***REMOVED***
    ***REMOVED***,
    "additionalProperties": false
  ***REMOVED***;
  refVal1.errors = null;
  refVal[1] = refVal1;
  var refVal2 = (function() ***REMOVED***
    var pattern0 = new RegExp('^[0-9]+$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) ***REMOVED***
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (typeof data !== "string") ***REMOVED***
        var err = ***REMOVED***
          keyword: 'type',
          dataPath: (dataPath || '') + "",
          schemaPath: '#/type',
          params: ***REMOVED***
            type: 'string'
          ***REMOVED***,
          message: 'should be string'
        ***REMOVED***;
        if (vErrors === null) vErrors = [err];
        else vErrors.push(err);
        errors++;
      ***REMOVED***
      validate.errors = vErrors;
      return errors === 0;
    ***REMOVED***;
  ***REMOVED***)();
  refVal2.schema = ***REMOVED***
    "type": "string"
  ***REMOVED***;
  refVal2.errors = null;
  refVal[2] = refVal2;
  var refVal3 = (function() ***REMOVED***
    var pattern0 = new RegExp('^[0-9]+$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) ***REMOVED***
      'use strict';
      var vErrors = null;
      var errors = 0;
      if (rootData === undefined) rootData = data;
      if ((data && typeof data === "object" && !Array.isArray(data))) ***REMOVED***
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) ***REMOVED***
          var isAdditional0 = !(false || pattern0.test(key0));
          if (isAdditional0) ***REMOVED***
            valid1 = false;
            var err = ***REMOVED***
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: ***REMOVED***
                additionalProperty: '' + key0 + ''
              ***REMOVED***,
              message: 'should NOT have additional properties'
            ***REMOVED***;
            if (vErrors === null) vErrors = [err];
            else vErrors.push(err);
            errors++;
          ***REMOVED***
        ***REMOVED***
        for (var key0 in data) ***REMOVED***
          if (pattern0.test(key0)) ***REMOVED***
            var errs_1 = errors;
            if (!refVal4(data[key0], (dataPath || '') + '[\'' + key0 + '\']', data, key0, rootData)) ***REMOVED***
              if (vErrors === null) vErrors = refVal4.errors;
              else vErrors = vErrors.concat(refVal4.errors);
              errors = vErrors.length;
            ***REMOVED***
            var valid1 = errors === errs_1;
          ***REMOVED***
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        var err = ***REMOVED***
          keyword: 'type',
          dataPath: (dataPath || '') + "",
          schemaPath: '#/type',
          params: ***REMOVED***
            type: 'object'
          ***REMOVED***,
          message: 'should be object'
        ***REMOVED***;
        if (vErrors === null) vErrors = [err];
        else vErrors.push(err);
        errors++;
      ***REMOVED***
      validate.errors = vErrors;
      return errors === 0;
    ***REMOVED***;
  ***REMOVED***)();
  refVal3.schema = ***REMOVED***
    "type": "object",
    "patternProperties": ***REMOVED***
      "^[0-9]+$": ***REMOVED***
        "$ref": "#/definitions/column"
      ***REMOVED***
    ***REMOVED***,
    "additionalProperties": false
  ***REMOVED***;
  refVal3.errors = null;
  refVal[3] = refVal3;
  var refVal4 = (function() ***REMOVED***
    var pattern0 = new RegExp('^[0-9]+$');
    return function validate(data, dataPath, parentData, parentDataProperty, rootData) ***REMOVED***
      'use strict';
      var vErrors = null;
      var errors = 0;
      if ((data && typeof data === "object" && !Array.isArray(data))) ***REMOVED***
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) ***REMOVED***
          var isAdditional0 = !(false || key0 == 'alignment' || key0 == 'width' || key0 == 'wrapWord' || key0 == 'truncate' || key0 == 'paddingLeft' || key0 == 'paddingRight');
          if (isAdditional0) ***REMOVED***
            valid1 = false;
            var err = ***REMOVED***
              keyword: 'additionalProperties',
              dataPath: (dataPath || '') + "",
              schemaPath: '#/additionalProperties',
              params: ***REMOVED***
                additionalProperty: '' + key0 + ''
              ***REMOVED***,
              message: 'should NOT have additional properties'
            ***REMOVED***;
            if (vErrors === null) vErrors = [err];
            else vErrors.push(err);
            errors++;
          ***REMOVED***
        ***REMOVED***
        var data1 = data.alignment;
        if (data1 !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (typeof data1 !== "string") ***REMOVED***
            var err = ***REMOVED***
              keyword: 'type',
              dataPath: (dataPath || '') + '.alignment',
              schemaPath: '#/properties/alignment/type',
              params: ***REMOVED***
                type: 'string'
              ***REMOVED***,
              message: 'should be string'
            ***REMOVED***;
            if (vErrors === null) vErrors = [err];
            else vErrors.push(err);
            errors++;
          ***REMOVED***
          var schema1 = validate.schema.properties.alignment.enum;
          var valid1;
          valid1 = false;
          for (var i1 = 0; i1 < schema1.length; i1++)
            if (equal(data1, schema1[i1])) ***REMOVED***
              valid1 = true;
              break;
            ***REMOVED*** if (!valid1) ***REMOVED***
            var err = ***REMOVED***
              keyword: 'enum',
              dataPath: (dataPath || '') + '.alignment',
              schemaPath: '#/properties/alignment/enum',
              params: ***REMOVED***
                allowedValues: schema1
              ***REMOVED***,
              message: 'should be equal to one of the allowed values'
            ***REMOVED***;
            if (vErrors === null) vErrors = [err];
            else vErrors.push(err);
            errors++;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.width !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (typeof data.width !== "number") ***REMOVED***
            var err = ***REMOVED***
              keyword: 'type',
              dataPath: (dataPath || '') + '.width',
              schemaPath: '#/properties/width/type',
              params: ***REMOVED***
                type: 'number'
              ***REMOVED***,
              message: 'should be number'
            ***REMOVED***;
            if (vErrors === null) vErrors = [err];
            else vErrors.push(err);
            errors++;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.wrapWord !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (typeof data.wrapWord !== "boolean") ***REMOVED***
            var err = ***REMOVED***
              keyword: 'type',
              dataPath: (dataPath || '') + '.wrapWord',
              schemaPath: '#/properties/wrapWord/type',
              params: ***REMOVED***
                type: 'boolean'
              ***REMOVED***,
              message: 'should be boolean'
            ***REMOVED***;
            if (vErrors === null) vErrors = [err];
            else vErrors.push(err);
            errors++;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.truncate !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (typeof data.truncate !== "number") ***REMOVED***
            var err = ***REMOVED***
              keyword: 'type',
              dataPath: (dataPath || '') + '.truncate',
              schemaPath: '#/properties/truncate/type',
              params: ***REMOVED***
                type: 'number'
              ***REMOVED***,
              message: 'should be number'
            ***REMOVED***;
            if (vErrors === null) vErrors = [err];
            else vErrors.push(err);
            errors++;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.paddingLeft !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (typeof data.paddingLeft !== "number") ***REMOVED***
            var err = ***REMOVED***
              keyword: 'type',
              dataPath: (dataPath || '') + '.paddingLeft',
              schemaPath: '#/properties/paddingLeft/type',
              params: ***REMOVED***
                type: 'number'
              ***REMOVED***,
              message: 'should be number'
            ***REMOVED***;
            if (vErrors === null) vErrors = [err];
            else vErrors.push(err);
            errors++;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
        if (data.paddingRight !== undefined) ***REMOVED***
          var errs_1 = errors;
          if (typeof data.paddingRight !== "number") ***REMOVED***
            var err = ***REMOVED***
              keyword: 'type',
              dataPath: (dataPath || '') + '.paddingRight',
              schemaPath: '#/properties/paddingRight/type',
              params: ***REMOVED***
                type: 'number'
              ***REMOVED***,
              message: 'should be number'
            ***REMOVED***;
            if (vErrors === null) vErrors = [err];
            else vErrors.push(err);
            errors++;
          ***REMOVED***
          var valid1 = errors === errs_1;
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        var err = ***REMOVED***
          keyword: 'type',
          dataPath: (dataPath || '') + "",
          schemaPath: '#/type',
          params: ***REMOVED***
            type: 'object'
          ***REMOVED***,
          message: 'should be object'
        ***REMOVED***;
        if (vErrors === null) vErrors = [err];
        else vErrors.push(err);
        errors++;
      ***REMOVED***
      validate.errors = vErrors;
      return errors === 0;
    ***REMOVED***;
  ***REMOVED***)();
  refVal4.schema = ***REMOVED***
    "type": "object",
    "properties": ***REMOVED***
      "alignment": ***REMOVED***
        "type": "string",
        "enum": ["left", "right", "center"]
      ***REMOVED***,
      "width": ***REMOVED***
        "type": "number"
      ***REMOVED***,
      "wrapWord": ***REMOVED***
        "type": "boolean"
      ***REMOVED***,
      "truncate": ***REMOVED***
        "type": "number"
      ***REMOVED***,
      "paddingLeft": ***REMOVED***
        "type": "number"
      ***REMOVED***,
      "paddingRight": ***REMOVED***
        "type": "number"
      ***REMOVED***
    ***REMOVED***,
    "additionalProperties": false
  ***REMOVED***;
  refVal4.errors = null;
  refVal[4] = refVal4;
  return function validate(data, dataPath, parentData, parentDataProperty, rootData) ***REMOVED***
    'use strict'; /*# sourceURL=streamConfig.json */
    var vErrors = null;
    var errors = 0;
    if (rootData === undefined) rootData = data;
    if ((data && typeof data === "object" && !Array.isArray(data))) ***REMOVED***
      var errs__0 = errors;
      var valid1 = true;
      for (var key0 in data) ***REMOVED***
        var isAdditional0 = !(false || key0 == 'border' || key0 == 'columns' || key0 == 'columnDefault' || key0 == 'columnCount');
        if (isAdditional0) ***REMOVED***
          valid1 = false;
          var err = ***REMOVED***
            keyword: 'additionalProperties',
            dataPath: (dataPath || '') + "",
            schemaPath: '#/additionalProperties',
            params: ***REMOVED***
              additionalProperty: '' + key0 + ''
            ***REMOVED***,
            message: 'should NOT have additional properties'
          ***REMOVED***;
          if (vErrors === null) vErrors = [err];
          else vErrors.push(err);
          errors++;
        ***REMOVED***
      ***REMOVED***
      if (data.border !== undefined) ***REMOVED***
        var errs_1 = errors;
        if (!refVal1(data.border, (dataPath || '') + '.border', data, 'border', rootData)) ***REMOVED***
          if (vErrors === null) vErrors = refVal1.errors;
          else vErrors = vErrors.concat(refVal1.errors);
          errors = vErrors.length;
        ***REMOVED***
        var valid1 = errors === errs_1;
      ***REMOVED***
      if (data.columns !== undefined) ***REMOVED***
        var errs_1 = errors;
        if (!refVal3(data.columns, (dataPath || '') + '.columns', data, 'columns', rootData)) ***REMOVED***
          if (vErrors === null) vErrors = refVal3.errors;
          else vErrors = vErrors.concat(refVal3.errors);
          errors = vErrors.length;
        ***REMOVED***
        var valid1 = errors === errs_1;
      ***REMOVED***
      if (data.columnDefault !== undefined) ***REMOVED***
        var errs_1 = errors;
        if (!refVal[4](data.columnDefault, (dataPath || '') + '.columnDefault', data, 'columnDefault', rootData)) ***REMOVED***
          if (vErrors === null) vErrors = refVal[4].errors;
          else vErrors = vErrors.concat(refVal[4].errors);
          errors = vErrors.length;
        ***REMOVED***
        var valid1 = errors === errs_1;
      ***REMOVED***
      if (data.columnCount !== undefined) ***REMOVED***
        var errs_1 = errors;
        if (typeof data.columnCount !== "number") ***REMOVED***
          var err = ***REMOVED***
            keyword: 'type',
            dataPath: (dataPath || '') + '.columnCount',
            schemaPath: '#/properties/columnCount/type',
            params: ***REMOVED***
              type: 'number'
            ***REMOVED***,
            message: 'should be number'
          ***REMOVED***;
          if (vErrors === null) vErrors = [err];
          else vErrors.push(err);
          errors++;
        ***REMOVED***
        var valid1 = errors === errs_1;
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      var err = ***REMOVED***
        keyword: 'type',
        dataPath: (dataPath || '') + "",
        schemaPath: '#/type',
        params: ***REMOVED***
          type: 'object'
        ***REMOVED***,
        message: 'should be object'
      ***REMOVED***;
      if (vErrors === null) vErrors = [err];
      else vErrors.push(err);
      errors++;
    ***REMOVED***
    validate.errors = vErrors;
    return errors === 0;
  ***REMOVED***;
***REMOVED***)();
validate.schema = ***REMOVED***
  "$id": "streamConfig.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": ***REMOVED***
    "border": ***REMOVED***
      "$ref": "#/definitions/borders"
    ***REMOVED***,
    "columns": ***REMOVED***
      "$ref": "#/definitions/columns"
    ***REMOVED***,
    "columnDefault": ***REMOVED***
      "$ref": "#/definitions/column"
    ***REMOVED***,
    "columnCount": ***REMOVED***
      "type": "number"
    ***REMOVED***
  ***REMOVED***,
  "additionalProperties": false,
  "definitions": ***REMOVED***
    "columns": ***REMOVED***
      "type": "object",
      "patternProperties": ***REMOVED***
        "^[0-9]+$": ***REMOVED***
          "$ref": "#/definitions/column"
        ***REMOVED***
      ***REMOVED***,
      "additionalProperties": false
    ***REMOVED***,
    "column": ***REMOVED***
      "type": "object",
      "properties": ***REMOVED***
        "alignment": ***REMOVED***
          "type": "string",
          "enum": ["left", "right", "center"]
        ***REMOVED***,
        "width": ***REMOVED***
          "type": "number"
        ***REMOVED***,
        "wrapWord": ***REMOVED***
          "type": "boolean"
        ***REMOVED***,
        "truncate": ***REMOVED***
          "type": "number"
        ***REMOVED***,
        "paddingLeft": ***REMOVED***
          "type": "number"
        ***REMOVED***,
        "paddingRight": ***REMOVED***
          "type": "number"
        ***REMOVED***
      ***REMOVED***,
      "additionalProperties": false
    ***REMOVED***,
    "borders": ***REMOVED***
      "type": "object",
      "properties": ***REMOVED***
        "topBody": ***REMOVED***
          "$ref": "#/definitions/border"
        ***REMOVED***,
        "topJoin": ***REMOVED***
          "$ref": "#/definitions/border"
        ***REMOVED***,
        "topLeft": ***REMOVED***
          "$ref": "#/definitions/border"
        ***REMOVED***,
        "topRight": ***REMOVED***
          "$ref": "#/definitions/border"
        ***REMOVED***,
        "bottomBody": ***REMOVED***
          "$ref": "#/definitions/border"
        ***REMOVED***,
        "bottomJoin": ***REMOVED***
          "$ref": "#/definitions/border"
        ***REMOVED***,
        "bottomLeft": ***REMOVED***
          "$ref": "#/definitions/border"
        ***REMOVED***,
        "bottomRight": ***REMOVED***
          "$ref": "#/definitions/border"
        ***REMOVED***,
        "bodyLeft": ***REMOVED***
          "$ref": "#/definitions/border"
        ***REMOVED***,
        "bodyRight": ***REMOVED***
          "$ref": "#/definitions/border"
        ***REMOVED***,
        "bodyJoin": ***REMOVED***
          "$ref": "#/definitions/border"
        ***REMOVED***,
        "joinBody": ***REMOVED***
          "$ref": "#/definitions/border"
        ***REMOVED***,
        "joinLeft": ***REMOVED***
          "$ref": "#/definitions/border"
        ***REMOVED***,
        "joinRight": ***REMOVED***
          "$ref": "#/definitions/border"
        ***REMOVED***,
        "joinJoin": ***REMOVED***
          "$ref": "#/definitions/border"
        ***REMOVED***
      ***REMOVED***,
      "additionalProperties": false
    ***REMOVED***,
    "border": ***REMOVED***
      "type": "string"
    ***REMOVED***
  ***REMOVED***
***REMOVED***;
validate.errors = null;
module.exports = validate;