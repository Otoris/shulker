const EventEmitter = require('events').EventEmitter;
const ChildProcess = require('child_process');

/**
 * A spawned FFMPEG process
 */
class FfmpegProcess extends EventEmitter ***REMOVED***
  constructor(ffmpegTranscoder, options) ***REMOVED***
    super();
    /**
     * The ffmpeg process
     * @type ***REMOVED***ChildProcess***REMOVED***
     */
    this.process = ChildProcess.spawn(ffmpegTranscoder.command, options.ffmpegArguments);
    /**
     * The FFMPEG transcoder that created this process
     * @type ***REMOVED***FfmpegTranscoder***REMOVED***
     */
    this.transcoder = ffmpegTranscoder;
    /**
     * The input media
     * @type ***REMOVED***?ReadableStream|string***REMOVED***
     */
    this.inputMedia = options.media;

    if (typeof this.inputMedia !== 'string') ***REMOVED***
      try ***REMOVED***
        this.connectStream(this.inputMedia);
      ***REMOVED*** catch (e) ***REMOVED***
        this.emit('error', e, 'instantiation');
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      this.attachErrorHandlers();
    ***REMOVED***

    this.on('error', this.kill.bind(this));
    this.once('end', this.kill.bind(this));
  ***REMOVED***

  /**
   * The ffmpeg output stream
   * @type ***REMOVED***?ReadableStream***REMOVED***
   */
  get output() ***REMOVED***
    return this.process ? this.process.stdout : null;
  ***REMOVED***

  attachErrorHandlers() ***REMOVED***
    this.process.stdin.on('error', e => ***REMOVED***
      // if not killed
      if (this.process) ***REMOVED***
        this.emit('error', e, 'ffmpegProcess.stdin');
      ***REMOVED***
    ***REMOVED***);
    this.process.stdout.on('error', e => ***REMOVED***
      // if not killed
      if (this.process) ***REMOVED***
        this.emit('error', e, 'ffmpegProcess.stdout');
      ***REMOVED***
    ***REMOVED***);
    this.process.on('error', e => this.emit('error', e, 'ffmpegProcess'));
    this.process.stdout.on('end', () => this.emit('end'));
  ***REMOVED***

  /**
   * Connects an input stream to the ffmpeg process
   * @param ***REMOVED***ReadableStream***REMOVED*** inputMedia the stream to pass to ffmpeg
   * @returns ***REMOVED***ReadableStream***REMOVED*** the ffmpeg output stream
   */
  connectStream(inputMedia) ***REMOVED***
    if (!this.process) throw new Error('No FFMPEG process available');
    this.inputMedia = inputMedia;
    this.inputMedia.pipe(this.process.stdin, ***REMOVED*** end: false ***REMOVED***);

    inputMedia.on('error', e => this.emit('error', e, 'inputstream', inputMedia));

    this.attachErrorHandlers();

    return this.process.stdout;
  ***REMOVED***

  /**
   * Kills the ffmpeg process
   */
  kill() ***REMOVED***
    if (!this.process) return;
    if (this.inputMedia && this.inputMedia.unpipe) ***REMOVED***
      this.inputMedia.unpipe(this.process.stdin);
    ***REMOVED***
    this.process.kill('SIGKILL');
    this.process = null;
  ***REMOVED***
***REMOVED***

module.exports = FfmpegProcess;
