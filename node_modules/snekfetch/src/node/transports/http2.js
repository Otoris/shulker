const http = require('http');
const Stream = require('stream');
const EventEmitter = require('events');
const http2 = (() => ***REMOVED***
  try ***REMOVED***
    const h2 = require('http2');
    if (!h2.constants)
      throw new Error('DAMN_YOU_NPM_HTTP2');
    return h2;
  ***REMOVED*** catch (err) ***REMOVED***
    return ***REMOVED***
      constants: ***REMOVED******REMOVED***,
      connect: () => ***REMOVED***
        throw new Error('Please run node with --expose-http2 to use the http2 request transport');
      ***REMOVED***,
    ***REMOVED***;
  ***REMOVED***
***REMOVED***)();

const ***REMOVED***
  HTTP2_HEADER_PATH,
  HTTP2_HEADER_METHOD,
  HTTP2_HEADER_STATUS,
***REMOVED*** = http2.constants;

class Http2Request extends EventEmitter ***REMOVED***
  constructor(options) ***REMOVED***
    super();
    this.options = options;
    this._headers = ***REMOVED***
      [HTTP2_HEADER_PATH]: options.pathname,
      [HTTP2_HEADER_METHOD]: options.method.toUpperCase(),
    ***REMOVED***;
  ***REMOVED***

  setHeader(name, value) ***REMOVED***
    this._headers[name.toLowerCase()] = value;
  ***REMOVED***

  getHeader(name) ***REMOVED***
    return this._headers[name];
  ***REMOVED***

  getHeaders() ***REMOVED***
    return this._headers;
  ***REMOVED***

  get path() ***REMOVED***
    return this._headers[HTTP2_HEADER_PATH];
  ***REMOVED***

  set path(path) ***REMOVED***
    this._headers[HTTP2_HEADER_PATH] = path;
  ***REMOVED***

  end(data) ***REMOVED***
    const options = this.options;
    const client = http2.connect(`$***REMOVED***options.protocol***REMOVED***//$***REMOVED***options.hostname***REMOVED***`);
    const req = client.request(this._headers);
    const stream = new Stream.PassThrough();

    client.once('error', (e) => this.emit('error', e));
    client.once('frameError', (e) => this.emit('error', e));

    req.once('error', (e) => this.emit('error', e));

    req.once('response', (headers) => ***REMOVED***
      stream.headers = headers;
      stream.statusCode = headers[HTTP2_HEADER_STATUS];
      stream.status = http.STATUS_CODES[stream.statusCode];

      this.emit('response', stream);
      this.response = stream;

      req.on('data', (chunk) => ***REMOVED***
        if (!stream.push(chunk))
          req.pause();
      ***REMOVED***);

      req.once('end', () => ***REMOVED***
        stream.push(null);
        client.destroy();
      ***REMOVED***);

      stream.once('error', (err) => ***REMOVED***
        stream.statusCode = 400;
        stream.status = err.message;
      ***REMOVED***);
    ***REMOVED***);

    req.end(data);

    return req;
  ***REMOVED***
***REMOVED***


function request(options) ***REMOVED***
  return new Http2Request(options);
***REMOVED***

module.exports = ***REMOVED*** request ***REMOVED***;
