/**
 * @jest-environment node
 */

const fs = require('fs');
const ***REMOVED*** Snekfetch ***REMOVED*** = require('../interop');

const resolve = (x) => require.resolve(x);

test('node/file get', () => ***REMOVED***
  const original = fs.readFileSync(resolve('../../package.json')).toString();
  return Snekfetch.get(`file://$***REMOVED***resolve('../../package.json')***REMOVED***`)
    .then((res) => ***REMOVED***
      expect(res.text).toBe(original);
    ***REMOVED***);
***REMOVED***);

test('node/file post', () => ***REMOVED***
  const content = 'wow this is a\n\ntest!!';
  const file = './test_file_post.txt';
  return Snekfetch.post(`file://$***REMOVED***file***REMOVED***`)
    .send(content)
    .then(() => Snekfetch.get(`file://$***REMOVED***file***REMOVED***`))
    .then((res) => ***REMOVED***
      expect(res.text).toBe(content);
    ***REMOVED***)
    .then(() => ***REMOVED***
      fs.unlinkSync(file);
    ***REMOVED***);
***REMOVED***);

test('node/file delete', () => ***REMOVED***
  const file = './test_file_delete.txt';
  fs.closeSync(fs.openSync(file, 'w'));
  expect(fs.existsSync(file)).toBe(true);
  return Snekfetch.delete(`file://$***REMOVED***file***REMOVED***`)
    .then(() => ***REMOVED***
      expect(fs.existsSync(file)).toBe(false);
    ***REMOVED***);
***REMOVED***);


test('node/file invalid method', () => ***REMOVED***
  expect(() => ***REMOVED***
    Snekfetch.options('file:///dev/urandom');
  ***REMOVED***).toThrow(/Invalid request method for file:/);
***REMOVED***);
