const ***REMOVED*** Snekfetch, TestRoot ***REMOVED*** = require('./interop');

const server = require('./server');

function makeTestObj(***REMOVED*** unicode = true, numbers = false ***REMOVED*** = ***REMOVED******REMOVED***) ***REMOVED***
  const test = ***REMOVED***
    Hello: 'world',
    Test: numbers ? 1337 : '1337',
  ***REMOVED***;
  if (unicode)
    test.Unicode = '( ͡° ͜ʖ ͡°)';
  return ***REMOVED***
    test,
    check: (obj) => ***REMOVED***
      expect(obj).not.toBeUndefined();
      expect(obj.Hello).toBe(test.Hello);
      expect(obj.Test).toBe(test.Test);
      if (unicode)
        expect(obj.Unicode).toBe(test.Unicode);
    ***REMOVED***,
  ***REMOVED***;
***REMOVED***

test('should return a promise', () => ***REMOVED***
  expect(Snekfetch.get(`$***REMOVED***TestRoot***REMOVED***/get`).end())
    .toBeInstanceOf(Promise);
***REMOVED***);

test('should reject with error on network failure', () => ***REMOVED***
  const invalid = 'http://localhost:0/';
  /* https://gc.gy/❥ȗ.png
   return expect(Snekfetch.get(invalid).end())
    .rejects.toBeInstanceOf(Error);*/
  return Snekfetch.get(invalid).catch((err) => ***REMOVED***
    expect(err.name).toMatch(/(Fetch)?Error/);
  ***REMOVED***);
***REMOVED***);

test('should resolve on success', () =>
  Snekfetch.get(`$***REMOVED***TestRoot***REMOVED***/get`).then((res) => ***REMOVED***
    expect(res.status).toBe(200);
    expect(res.ok).toBe(true);
    expect(res).toHaveProperty('text');
    expect(res).toHaveProperty('body');
  ***REMOVED***)
);

test('end should work', () =>
  Snekfetch.get(`$***REMOVED***TestRoot***REMOVED***/get`).end((err, res) => ***REMOVED***
    expect(err).toBe(null);
    expect(res.body).not.toBeUndefined();
  ***REMOVED***)
);

test('should reject if response is not between 200 and 300', () =>
  Snekfetch.get(`$***REMOVED***TestRoot***REMOVED***/404`).catch((err) => ***REMOVED***
    expect(err.status).toBe(404);
    expect(err.ok).toBe(false);
  ***REMOVED***)
);

test('unzipping works', () =>
  Snekfetch.get(`$***REMOVED***TestRoot***REMOVED***/gzip`)
    .then((res) => ***REMOVED***
      expect(res.body).not.toBeUndefined();
      expect(res.body.gzipped).toBe(true);
    ***REMOVED***)
);

test('query should work', () => ***REMOVED***
  const ***REMOVED*** test, check ***REMOVED*** = makeTestObj();
  Promise.all([
    Snekfetch.get(`$***REMOVED***TestRoot***REMOVED***/get?inline=true`)
      .query(test).end(),
    Snekfetch.get(`$***REMOVED***TestRoot***REMOVED***/get?inline=true`, ***REMOVED*** query: test ***REMOVED***)
      .end(),
  ])
    .then((ress) => ***REMOVED***
      for (const res of ress) ***REMOVED***
        const ***REMOVED*** args ***REMOVED*** = res.body;
        check(args);
        expect(args.inline).toBe('true');
      ***REMOVED***
    ***REMOVED***);
***REMOVED***);

test('headers should work', () => ***REMOVED***
  const ***REMOVED*** test, check ***REMOVED*** = makeTestObj(***REMOVED*** unicode: false ***REMOVED***);
  return Promise.all([
    Snekfetch.get(`$***REMOVED***TestRoot***REMOVED***/get`)
      .set(test).end(),
    Snekfetch.get(`$***REMOVED***TestRoot***REMOVED***/get`, ***REMOVED*** headers: test ***REMOVED***)
      .end(),
  ])
    .then((ress) => ***REMOVED***
      for (const res of ress)
        check(res.body.headers);
    ***REMOVED***);
***REMOVED***);

test('attach should work', () => ***REMOVED***
  const ***REMOVED*** test, check ***REMOVED*** = makeTestObj();
  return Snekfetch.post(`$***REMOVED***TestRoot***REMOVED***/post`)
    .attach(test)
    .then((res) => check(res.body.form));
***REMOVED***);

test('send should work with json', () => ***REMOVED***
  const ***REMOVED*** test, check ***REMOVED*** = makeTestObj(***REMOVED*** numbers: true ***REMOVED***);
  return Promise.all([
    Snekfetch.post(`$***REMOVED***TestRoot***REMOVED***/post`)
      .send(test).end(),
    Snekfetch.post(`$***REMOVED***TestRoot***REMOVED***/post`, ***REMOVED*** data: test ***REMOVED***)
      .end(),
  ])
    .then((ress) => ***REMOVED***
      for (const res of ress)
        check(res.body.json);
    ***REMOVED***);
***REMOVED***);

test('send should work with urlencoded', () => ***REMOVED***
  const ***REMOVED*** test, check ***REMOVED*** = makeTestObj();
  return Snekfetch.post(`$***REMOVED***TestRoot***REMOVED***/post`)
    .set('content-type', 'application/x-www-form-urlencoded')
    .send(test)
    .then((res) => check(res.body.form));
***REMOVED***);

test('invalid json is just text', () =>
  Snekfetch.get(`http://localhost:$***REMOVED***server.port***REMOVED***/invalid-json`)
    .then((res) => ***REMOVED***
      expect(res.body).toBe('***REMOVED*** "a": 1');
    ***REMOVED***)
);

test('x-www-form-urlencoded response body', () =>
  Snekfetch.get(`http://localhost:$***REMOVED***server.port***REMOVED***/form-urlencoded`)
    .then((res) => ***REMOVED***
      const ***REMOVED*** body ***REMOVED*** = res;
      expect(body.test).toBe('1');
      expect(body.hello).toBe('world');
    ***REMOVED***)
);

test('redirects', () =>
  Snekfetch.get(`$***REMOVED***TestRoot***REMOVED***/redirect/1`)
    .then((res) => ***REMOVED***
      expect(res.body).not.toBeUndefined();
      expect(res.body.url).toBe(`$***REMOVED***TestRoot***REMOVED***/get`);
    ***REMOVED***)
);
