'use strict';

var callBound = require('../helpers/callBound');
var forEach = require('../helpers/forEach');
var OwnPropertyKeys = require('../helpers/OwnPropertyKeys');

var $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');

var IsArray = require('./IsArray');
var IsPropertyKey = require('./IsPropertyKey');
var Type = require('./Type');

// https://www.ecma-international.org/ecma-262/9.0/#sec-copydataproperties

module.exports = function CopyDataProperties(target, source, excludedItems) ***REMOVED***
	if (Type(target) !== 'Object') ***REMOVED***
		throw new TypeError('Assertion failed: "target" must be an Object');
	***REMOVED***

	if (!IsArray(excludedItems)) ***REMOVED***
		throw new TypeError('Assertion failed: "excludedItems" must be a List of Property Keys');
	***REMOVED***
	for (var i = 0; i < excludedItems.length; i += 1) ***REMOVED***
		if (!IsPropertyKey(excludedItems[i])) ***REMOVED***
			throw new TypeError('Assertion failed: "excludedItems" must be a List of Property Keys');
		***REMOVED***
	***REMOVED***

	if (typeof source === 'undefined' || source === null) ***REMOVED***
		return target;
	***REMOVED***

	var ES = this;

	var fromObj = ES.ToObject(source);

	var sourceKeys = OwnPropertyKeys(fromObj);
	forEach(sourceKeys, function (nextKey) ***REMOVED***
		var excluded = false;

		forEach(excludedItems, function (e) ***REMOVED***
			if (ES.SameValue(e, nextKey) === true) ***REMOVED***
				excluded = true;
			***REMOVED***
		***REMOVED***);

		var enumerable = $isEnumerable(fromObj, nextKey) || (
		// this is to handle string keys being non-enumerable in older engines
			typeof source === 'string'
            && nextKey >= 0
            && ES.IsInteger(ES.ToNumber(nextKey))
		);
		if (excluded === false && enumerable) ***REMOVED***
			var propValue = ES.Get(fromObj, nextKey);
			ES.CreateDataProperty(target, nextKey, propValue);
		***REMOVED***
	***REMOVED***);

	return target;
***REMOVED***;
