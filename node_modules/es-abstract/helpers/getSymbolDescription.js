'use strict';

var GetIntrinsic = require('../GetIntrinsic');

var callBound = require('./callBound');

var $SyntaxError = GetIntrinsic('%SyntaxError%');
var symToStr = callBound('Symbol.prototype.toString', true);

var getInferredName = require('./getInferredName');

module.exports = function getSymbolDescription(symbol) ***REMOVED***
	if (!symToStr) ***REMOVED***
		throw new $SyntaxError('Symbols are not supported in this environment');
	***REMOVED***
	var str = symToStr(symbol); // will throw if not a symbol

	if (getInferredName) ***REMOVED***
		var name = getInferredName(symbol);
		if (name === '') ***REMOVED*** return; ***REMOVED***
		// eslint-disable-next-line consistent-return
		return name.slice(1, -1); // name.slice('['.length, -']'.length);
	***REMOVED***

	var desc = str.slice(7, -1); // str.slice('Symbol('.length, -')'.length);
	if (desc) ***REMOVED***
		// eslint-disable-next-line consistent-return
		return desc;
	***REMOVED***
***REMOVED***;
