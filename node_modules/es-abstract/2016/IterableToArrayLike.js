'use strict';

var GetIntrinsic = require('../GetIntrinsic');

var $iterator = GetIntrinsic('%Symbol.iterator%', true);

var callBound = require('../helpers/callBound');

var $arrayJoin = callBound('Array.prototype.join');
var $arrayPush = callBound('Array.prototype.push');
var $stringSlice = callBound('String.prototype.slice');
var $stringSplit = callBound('String.prototype.split');

var AdvanceStringIndex = require('./AdvanceStringIndex');
var GetIterator = require('./GetIterator');
var GetMethod = require('./GetMethod');
var IsArray = require('./IsArray');
var IteratorStep = require('./IteratorStep');
var IteratorValue = require('./IteratorValue');
var ToObject = require('./ToObject');
var Type = require('./Type');

// https://www.ecma-international.org/ecma-262/7.0/#sec-iterabletoarraylike

module.exports = function IterableToArrayLike(items) ***REMOVED***
	var usingIterator;
	if ($iterator) ***REMOVED***
		usingIterator = GetMethod(items, $iterator);
	***REMOVED*** else if (IsArray(items)) ***REMOVED***
		usingIterator = function () ***REMOVED***
			var i = -1;
			var arr = this; // eslint-disable-line no-invalid-this
			return ***REMOVED***
				next: function () ***REMOVED***
					i += 1;
					return ***REMOVED***
						done: i >= arr.length,
						value: arr[i]
					***REMOVED***;
				***REMOVED***
			***REMOVED***;
		***REMOVED***;
	***REMOVED*** else if (Type(items) === 'String') ***REMOVED***
		usingIterator = function () ***REMOVED***
			var i = 0;
			return ***REMOVED***
				next: function () ***REMOVED***
					var nextIndex = AdvanceStringIndex(items, i, true);
					var value = $arrayJoin($stringSplit($stringSlice(items, i, nextIndex), ''), '');
					i = nextIndex;
					return ***REMOVED***
						done: nextIndex > items.length,
						value: value
					***REMOVED***;
				***REMOVED***
			***REMOVED***;
		***REMOVED***;
	***REMOVED***
	if (typeof usingIterator !== 'undefined') ***REMOVED***
		var iterator = GetIterator(items, usingIterator);
		var values = [];
		var next = true;
		while (next) ***REMOVED***
			next = IteratorStep(iterator);
			if (next) ***REMOVED***
				var nextValue = IteratorValue(next);
				$arrayPush(values, nextValue);
			***REMOVED***
		***REMOVED***
		return values;
	***REMOVED***

	return ToObject(items);
***REMOVED***;
