'use strict';

var forEach = require('foreach');
var debug = require('object-inspect');

var assertRecord = require('../../helpers/assertRecord');
var v = require('./values');

module.exports = function assertRecordTests(ES, test) ***REMOVED***
	test('Property Descriptor', function (t) ***REMOVED***
		var record = 'Property Descriptor';

		forEach(v.nonUndefinedPrimitives, function (primitive) ***REMOVED***
			t['throws'](
				function () ***REMOVED*** assertRecord(ES.Type, record, 'arg', primitive); ***REMOVED***,
				TypeError,
				debug(primitive) + ' is not a Property Descriptor'
			);
		***REMOVED***);

		t['throws'](
			function () ***REMOVED*** assertRecord(ES.Type, record, 'arg', ***REMOVED*** invalid: true ***REMOVED***); ***REMOVED***,
			TypeError,
			'invalid keys not allowed on a Property Descriptor'
		);

		t.doesNotThrow(
			function () ***REMOVED*** assertRecord(ES.Type, record, 'arg', ***REMOVED******REMOVED***); ***REMOVED***,
			'empty object is an incomplete Property Descriptor'
		);

		t.doesNotThrow(
			function () ***REMOVED*** assertRecord(ES.Type, record, 'arg', v.accessorDescriptor()); ***REMOVED***,
			'accessor descriptor is a Property Descriptor'
		);

		t.doesNotThrow(
			function () ***REMOVED*** assertRecord(ES.Type, record, 'arg', v.mutatorDescriptor()); ***REMOVED***,
			'mutator descriptor is a Property Descriptor'
		);

		t.doesNotThrow(
			function () ***REMOVED*** assertRecord(ES.Type, record, 'arg', v.dataDescriptor()); ***REMOVED***,
			'data descriptor is a Property Descriptor'
		);

		t.doesNotThrow(
			function () ***REMOVED*** assertRecord(ES.Type, record, 'arg', v.genericDescriptor()); ***REMOVED***,
			'generic descriptor is a Property Descriptor'
		);

		t['throws'](
			function () ***REMOVED*** assertRecord(ES.Type, record, 'arg', v.bothDescriptor()); ***REMOVED***,
			TypeError,
			'a Property Descriptor can not be both a Data and an Accessor Descriptor'
		);

		t.end();
	***REMOVED***);
***REMOVED***;
