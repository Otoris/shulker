"use strict";
/***
 * Node External Editor
 *
 * Kevin Gravier <kevin@mrkmg.com>
 * MIT 2019
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
var chardet_1 = require("chardet");
var child_process_1 = require("child_process");
var fs_1 = require("fs");
var iconv_lite_1 = require("iconv-lite");
var tmp_1 = require("tmp");
var CreateFileError_1 = require("./errors/CreateFileError");
exports.CreateFileError = CreateFileError_1.CreateFileError;
var LaunchEditorError_1 = require("./errors/LaunchEditorError");
exports.LaunchEditorError = LaunchEditorError_1.LaunchEditorError;
var ReadFileError_1 = require("./errors/ReadFileError");
exports.ReadFileError = ReadFileError_1.ReadFileError;
var RemoveFileError_1 = require("./errors/RemoveFileError");
exports.RemoveFileError = RemoveFileError_1.RemoveFileError;
function edit(text, fileOptions) ***REMOVED***
    if (text === void 0) ***REMOVED*** text = ""; ***REMOVED***
    var editor = new ExternalEditor(text, fileOptions);
    editor.run();
    editor.cleanup();
    return editor.text;
***REMOVED***
exports.edit = edit;
function editAsync(text, callback, fileOptions) ***REMOVED***
    if (text === void 0) ***REMOVED*** text = ""; ***REMOVED***
    var editor = new ExternalEditor(text, fileOptions);
    editor.runAsync(function (err, result) ***REMOVED***
        if (err) ***REMOVED***
            setImmediate(callback, err, null);
        ***REMOVED***
        else ***REMOVED***
            try ***REMOVED***
                editor.cleanup();
                setImmediate(callback, null, result);
            ***REMOVED***
            catch (cleanupError) ***REMOVED***
                setImmediate(callback, cleanupError, null);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***);
***REMOVED***
exports.editAsync = editAsync;
var ExternalEditor = /** @class */ (function () ***REMOVED***
    function ExternalEditor(text, fileOptions) ***REMOVED***
        if (text === void 0) ***REMOVED*** text = ""; ***REMOVED***
        this.text = "";
        this.fileOptions = ***REMOVED******REMOVED***;
        this.text = text;
        if (fileOptions) ***REMOVED***
            this.fileOptions = fileOptions;
        ***REMOVED***
        this.determineEditor();
        this.createTemporaryFile();
    ***REMOVED***
    ExternalEditor.splitStringBySpace = function (str) ***REMOVED***
        var pieces = [];
        var currentString = "";
        for (var strIndex = 0; strIndex < str.length; strIndex++) ***REMOVED***
            var currentLetter = str[strIndex];
            if (strIndex > 0 && currentLetter === " " && str[strIndex - 1] !== "\\" && currentString.length > 0) ***REMOVED***
                pieces.push(currentString);
                currentString = "";
            ***REMOVED***
            else ***REMOVED***
                currentString += currentLetter;
            ***REMOVED***
        ***REMOVED***
        if (currentString.length > 0) ***REMOVED***
            pieces.push(currentString);
        ***REMOVED***
        return pieces;
    ***REMOVED***;
    Object.defineProperty(ExternalEditor.prototype, "temp_file", ***REMOVED***
        get: function () ***REMOVED***
            console.log("DEPRECATED: temp_file. Use tempFile moving forward.");
            return this.tempFile;
        ***REMOVED***,
        enumerable: true,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(ExternalEditor.prototype, "last_exit_status", ***REMOVED***
        get: function () ***REMOVED***
            console.log("DEPRECATED: last_exit_status. Use lastExitStatus moving forward.");
            return this.lastExitStatus;
        ***REMOVED***,
        enumerable: true,
        configurable: true
    ***REMOVED***);
    ExternalEditor.prototype.run = function () ***REMOVED***
        this.launchEditor();
        this.readTemporaryFile();
        return this.text;
    ***REMOVED***;
    ExternalEditor.prototype.runAsync = function (callback) ***REMOVED***
        var _this = this;
        try ***REMOVED***
            this.launchEditorAsync(function () ***REMOVED***
                try ***REMOVED***
                    _this.readTemporaryFile();
                    setImmediate(callback, null, _this.text);
                ***REMOVED***
                catch (readError) ***REMOVED***
                    setImmediate(callback, readError, null);
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***
        catch (launchError) ***REMOVED***
            setImmediate(callback, launchError, null);
        ***REMOVED***
    ***REMOVED***;
    ExternalEditor.prototype.cleanup = function () ***REMOVED***
        this.removeTemporaryFile();
    ***REMOVED***;
    ExternalEditor.prototype.determineEditor = function () ***REMOVED***
        var editor = process.env.VISUAL ? process.env.VISUAL :
            process.env.EDITOR ? process.env.EDITOR :
                /^win/.test(process.platform) ? "notepad" :
                    "vim";
        var editorOpts = ExternalEditor.splitStringBySpace(editor).map(function (piece) ***REMOVED*** return piece.replace("\\ ", " "); ***REMOVED***);
        var bin = editorOpts.shift();
        this.editor = ***REMOVED*** args: editorOpts, bin: bin ***REMOVED***;
    ***REMOVED***;
    ExternalEditor.prototype.createTemporaryFile = function () ***REMOVED***
        try ***REMOVED***
            this.tempFile = tmp_1.tmpNameSync(this.fileOptions);
            var opt = ***REMOVED*** encoding: "utf8" ***REMOVED***;
            if (this.fileOptions.hasOwnProperty("mode")) ***REMOVED***
                opt.mode = this.fileOptions.mode;
            ***REMOVED***
            fs_1.writeFileSync(this.tempFile, this.text, opt);
        ***REMOVED***
        catch (createFileError) ***REMOVED***
            throw new CreateFileError_1.CreateFileError(createFileError);
        ***REMOVED***
    ***REMOVED***;
    ExternalEditor.prototype.readTemporaryFile = function () ***REMOVED***
        try ***REMOVED***
            var tempFileBuffer = fs_1.readFileSync(this.tempFile);
            if (tempFileBuffer.length === 0) ***REMOVED***
                this.text = "";
            ***REMOVED***
            else ***REMOVED***
                var encoding = chardet_1.detect(tempFileBuffer).toString();
                if (!iconv_lite_1.encodingExists(encoding)) ***REMOVED***
                    // Probably a bad idea, but will at least prevent crashing
                    encoding = "utf8";
                ***REMOVED***
                this.text = iconv_lite_1.decode(tempFileBuffer, encoding);
            ***REMOVED***
        ***REMOVED***
        catch (readFileError) ***REMOVED***
            throw new ReadFileError_1.ReadFileError(readFileError);
        ***REMOVED***
    ***REMOVED***;
    ExternalEditor.prototype.removeTemporaryFile = function () ***REMOVED***
        try ***REMOVED***
            fs_1.unlinkSync(this.tempFile);
        ***REMOVED***
        catch (removeFileError) ***REMOVED***
            throw new RemoveFileError_1.RemoveFileError(removeFileError);
        ***REMOVED***
    ***REMOVED***;
    ExternalEditor.prototype.launchEditor = function () ***REMOVED***
        try ***REMOVED***
            var editorProcess = child_process_1.spawnSync(this.editor.bin, this.editor.args.concat([this.tempFile]), ***REMOVED*** stdio: "inherit" ***REMOVED***);
            this.lastExitStatus = editorProcess.status;
        ***REMOVED***
        catch (launchError) ***REMOVED***
            throw new LaunchEditorError_1.LaunchEditorError(launchError);
        ***REMOVED***
    ***REMOVED***;
    ExternalEditor.prototype.launchEditorAsync = function (callback) ***REMOVED***
        var _this = this;
        try ***REMOVED***
            var editorProcess = child_process_1.spawn(this.editor.bin, this.editor.args.concat([this.tempFile]), ***REMOVED*** stdio: "inherit" ***REMOVED***);
            editorProcess.on("exit", function (code) ***REMOVED***
                _this.lastExitStatus = code;
                setImmediate(callback);
            ***REMOVED***);
        ***REMOVED***
        catch (launchError) ***REMOVED***
            throw new LaunchEditorError_1.LaunchEditorError(launchError);
        ***REMOVED***
    ***REMOVED***;
    return ExternalEditor;
***REMOVED***());
exports.ExternalEditor = ExternalEditor;
