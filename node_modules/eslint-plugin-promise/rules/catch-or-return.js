/**
 * Rule: catch-or-return
 * Ensures that promises either include a catch() handler
 * or are returned (to be handled upstream)
 */

'use strict'

const getDocsUrl = require('./lib/get-docs-url')
const isPromise = require('./lib/is-promise')

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      url: getDocsUrl('catch-or-return')
    ***REMOVED***,
    messages: ***REMOVED***
      terminationMethod: 'Expected ***REMOVED******REMOVED*** terminationMethod ***REMOVED******REMOVED***() or return'
    ***REMOVED***
  ***REMOVED***,
  create(context) ***REMOVED***
    const options = context.options[0] || ***REMOVED******REMOVED***
    const allowThen = options.allowThen
    const allowFinally = options.allowFinally
    let terminationMethod = options.terminationMethod || 'catch'

    if (typeof terminationMethod === 'string') ***REMOVED***
      terminationMethod = [terminationMethod]
    ***REMOVED***

    function isAllowedPromiseTermination(expression) ***REMOVED***
      // somePromise.then(a, b)
      if (
        allowThen &&
        expression.type === 'CallExpression' &&
        expression.callee.type === 'MemberExpression' &&
        expression.callee.property.name === 'then' &&
        expression.arguments.length === 2
      ) ***REMOVED***
        return true
      ***REMOVED***

      // somePromise.catch().finally(fn)
      if (
        allowFinally &&
        expression.type === 'CallExpression' &&
        expression.callee.type === 'MemberExpression' &&
        expression.callee.property.name === 'finally' &&
        isPromise(expression.callee.object) &&
        isAllowedPromiseTermination(expression.callee.object)
      ) ***REMOVED***
        return true
      ***REMOVED***

      // somePromise.catch()
      if (
        expression.type === 'CallExpression' &&
        expression.callee.type === 'MemberExpression' &&
        terminationMethod.indexOf(expression.callee.property.name) !== -1
      ) ***REMOVED***
        return true
      ***REMOVED***

      // somePromise['catch']()
      if (
        expression.type === 'CallExpression' &&
        expression.callee.type === 'MemberExpression' &&
        expression.callee.property.type === 'Literal' &&
        expression.callee.property.value === 'catch'
      ) ***REMOVED***
        return true
      ***REMOVED***

      return false
    ***REMOVED***

    return ***REMOVED***
      ExpressionStatement(node) ***REMOVED***
        if (!isPromise(node.expression)) ***REMOVED***
          return
        ***REMOVED***

        if (isAllowedPromiseTermination(node.expression)) ***REMOVED***
          return
        ***REMOVED***

        context.report(***REMOVED***
          node,
          messageId: 'terminationMethod',
          data: ***REMOVED*** terminationMethod ***REMOVED***
        ***REMOVED***)
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***
