/**
 * Rule: no-callback-in-promise
 * Avoid calling back inside of a promise
 */

'use strict'

const getDocsUrl = require('./lib/get-docs-url')
const hasPromiseCallback = require('./lib/has-promise-callback')
const isInsidePromise = require('./lib/is-inside-promise')
const isCallback = require('./lib/is-callback')

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      url: getDocsUrl('no-callback-in-promise')
    ***REMOVED***,
    messages: ***REMOVED***
      callback: 'Avoid calling back inside of a promise.'
    ***REMOVED***
  ***REMOVED***,
  create(context) ***REMOVED***
    return ***REMOVED***
      CallExpression(node) ***REMOVED***
        const options = context.options[0] || ***REMOVED******REMOVED***
        const exceptions = options.exceptions || []
        if (!isCallback(node, exceptions)) ***REMOVED***
          // in general we send you packing if you're not a callback
          // but we also need to watch out for whatever.then(cb)
          if (hasPromiseCallback(node)) ***REMOVED***
            const name =
              node.arguments && node.arguments[0] && node.arguments[0].name
            if (
              name === 'callback' ||
              name === 'cb' ||
              name === 'next' ||
              name === 'done'
            ) ***REMOVED***
              context.report(***REMOVED***
                node: node.arguments[0],
                messageId: 'callback'
              ***REMOVED***)
            ***REMOVED***
          ***REMOVED***
          return
        ***REMOVED***
        if (context.getAncestors().some(isInsidePromise)) ***REMOVED***
          context.report(***REMOVED***
            node,
            messageId: 'callback'
          ***REMOVED***)
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***
