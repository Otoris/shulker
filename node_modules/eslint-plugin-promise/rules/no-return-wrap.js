/**
 * Rule: no-return-wrap function
 * Prevents uneccessary wrapping of results in Promise.resolve
 * or Promise.reject as the Promise will do that for us
 */

'use strict'

const getDocsUrl = require('./lib/get-docs-url')
const isPromise = require('./lib/is-promise')

function isInPromise(context) ***REMOVED***
  let functionNode = context
    .getAncestors()
    .filter(node => ***REMOVED***
      return (
        node.type === 'ArrowFunctionExpression' ||
        node.type === 'FunctionExpression'
      )
    ***REMOVED***)
    .reverse()[0]
  while (
    functionNode &&
    functionNode.parent &&
    functionNode.parent.type === 'MemberExpression' &&
    functionNode.parent.object === functionNode &&
    functionNode.parent.property.type === 'Identifier' &&
    functionNode.parent.property.name === 'bind' &&
    functionNode.parent.parent &&
    functionNode.parent.parent.type === 'CallExpression' &&
    functionNode.parent.parent.callee === functionNode.parent
  ) ***REMOVED***
    functionNode = functionNode.parent.parent
  ***REMOVED***
  return functionNode && functionNode.parent && isPromise(functionNode.parent)
***REMOVED***

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      url: getDocsUrl('no-return-wrap')
    ***REMOVED***,
    messages: ***REMOVED***
      resolve: 'Avoid wrapping return values in Promise.resolve',
      reject: 'Expected throw instead of Promise.reject'
    ***REMOVED***
  ***REMOVED***,
  create(context) ***REMOVED***
    const options = context.options[0] || ***REMOVED******REMOVED***
    const allowReject = options.allowReject

    return ***REMOVED***
      ReturnStatement(node) ***REMOVED***
        if (isInPromise(context)) ***REMOVED***
          if (node.argument) ***REMOVED***
            if (node.argument.type === 'CallExpression') ***REMOVED***
              if (node.argument.callee.type === 'MemberExpression') ***REMOVED***
                if (node.argument.callee.object.name === 'Promise') ***REMOVED***
                  if (node.argument.callee.property.name === 'resolve') ***REMOVED***
                    context.report(***REMOVED*** node, messageId: 'resolve' ***REMOVED***)
                  ***REMOVED*** else if (
                    !allowReject &&
                    node.argument.callee.property.name === 'reject'
                  ) ***REMOVED***
                    context.report(***REMOVED*** node, messageId: 'reject' ***REMOVED***)
                  ***REMOVED***
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***
