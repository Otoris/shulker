'use strict'

const getDocsUrl = require('./lib/get-docs-url')

module.exports = ***REMOVED***
  meta: ***REMOVED***
    docs: ***REMOVED***
      url: getDocsUrl('prefer-await-to-callbacks')
    ***REMOVED***,
    messages: ***REMOVED***
      error: 'Avoid callbacks. Prefer Async/Await.'
    ***REMOVED***
  ***REMOVED***,
  create(context) ***REMOVED***
    function checkLastParamsForCallback(node) ***REMOVED***
      const lastParam = node.params[node.params.length - 1] || ***REMOVED******REMOVED***
      if (lastParam.name === 'callback' || lastParam.name === 'cb') ***REMOVED***
        context.report(***REMOVED*** node: lastParam, messageId: 'error' ***REMOVED***)
      ***REMOVED***
    ***REMOVED***
    function isInsideYieldOrAwait() ***REMOVED***
      return context.getAncestors().some(parent => ***REMOVED***
        return (
          parent.type === 'AwaitExpression' || parent.type === 'YieldExpression'
        )
      ***REMOVED***)
    ***REMOVED***
    return ***REMOVED***
      CallExpression(node) ***REMOVED***
        // Callbacks aren't allowed.
        if (node.callee.name === 'cb' || node.callee.name === 'callback') ***REMOVED***
          context.report(***REMOVED*** node, messageId: 'error' ***REMOVED***)
          return
        ***REMOVED***

        // Then-ables aren't allowed either.
        const args = node.arguments
        const lastArgIndex = args.length - 1
        const arg = lastArgIndex > -1 && node.arguments[lastArgIndex]
        if (
          (arg && arg.type === 'FunctionExpression') ||
          arg.type === 'ArrowFunctionExpression'
        ) ***REMOVED***
          // Ignore event listener callbacks.
          if (
            node.callee.property &&
            (node.callee.property.name === 'on' ||
              node.callee.property.name === 'once')
          ) ***REMOVED***
            return
          ***REMOVED***
          if (arg.params && arg.params[0] && arg.params[0].name === 'err') ***REMOVED***
            if (!isInsideYieldOrAwait()) ***REMOVED***
              context.report(***REMOVED*** node: arg, messageId: 'error' ***REMOVED***)
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***,
      FunctionDeclaration: checkLastParamsForCallback,
      FunctionExpression: checkLastParamsForCallback,
      ArrowFunctionExpression: checkLastParamsForCallback
    ***REMOVED***
  ***REMOVED***
***REMOVED***
