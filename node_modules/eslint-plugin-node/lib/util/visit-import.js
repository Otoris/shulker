/**
 * @author Toru Nagashima
 * See LICENSE file in root directory for full license.
 */
"use strict"

const path = require("path")
const resolve = require("resolve")
const getResolvePaths = require("./get-resolve-paths")
const getTryExtensions = require("./get-try-extensions")
const ImportTarget = require("./import-target")
const stripImportPathParams = require("./strip-import-path-params")

/**
 * Gets a list of `import`/`export` declaration targets.
 *
 * Core modules of Node.js (e.g. `fs`, `http`) are excluded.
 *
 * @param ***REMOVED***RuleContext***REMOVED*** context - The rule context.
 * @param ***REMOVED***Object***REMOVED*** [options] - The flag to include core modules.
 * @param ***REMOVED***boolean***REMOVED*** [options.includeCore] - The flag to include core modules.
 * @param ***REMOVED***number***REMOVED*** [options.optionIndex] - The index of rule options.
 * @param ***REMOVED***function(ImportTarget[]):void***REMOVED*** callback The callback function to get result.
 * @returns ***REMOVED***ImportTarget[]***REMOVED*** A list of found target's information.
 */
module.exports = function visitImport(
    context,
    ***REMOVED*** includeCore = false, optionIndex = 0 ***REMOVED*** = ***REMOVED******REMOVED***,
    callback
) ***REMOVED***
    const targets = []
    const basedir = path.dirname(path.resolve(context.getFilename()))
    const paths = getResolvePaths(context, optionIndex)
    const extensions = getTryExtensions(context, optionIndex)
    const options = ***REMOVED*** basedir, paths, extensions ***REMOVED***

    return ***REMOVED***
        [[
            "ExportAllDeclaration",
            "ExportNamedDeclaration",
            "ImportDeclaration",
            "ImportExpression",
        ]](node) ***REMOVED***
            const sourceNode = node.source
            const name = sourceNode && stripImportPathParams(sourceNode.value)
            if (name && (includeCore || !resolve.isCore(name))) ***REMOVED***
                targets.push(new ImportTarget(sourceNode, name, options))
            ***REMOVED***
        ***REMOVED***,

        "Program:exit"() ***REMOVED***
            callback(targets)
        ***REMOVED***,
    ***REMOVED***
***REMOVED***
