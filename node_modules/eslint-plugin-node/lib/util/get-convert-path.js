/**
 * @author Toru Nagashima
 * See LICENSE file in root directory for full license.
 */
"use strict"

const Minimatch = require("minimatch").Minimatch

/**
 * @param ***REMOVED***any***REMOVED*** x - An any value.
 * @returns ***REMOVED***any***REMOVED*** Always `x`.
 */
function identity(x) ***REMOVED***
    return x
***REMOVED***

/**
 * Converts old-style value to new-style value.
 *
 * @param ***REMOVED***any***REMOVED*** x - The value to convert.
 * @returns ***REMOVED***(***REMOVED***include: string[], exclude: string[], replace: string[]***REMOVED***)[]***REMOVED*** Normalized value.
 */
function normalizeValue(x) ***REMOVED***
    if (Array.isArray(x)) ***REMOVED***
        return x
    ***REMOVED***

    return Object.keys(x).map(pattern => (***REMOVED***
        include: [pattern],
        exclude: [],
        replace: x[pattern],
    ***REMOVED***))
***REMOVED***

/**
 * Ensures the given value is a string array.
 *
 * @param ***REMOVED***any***REMOVED*** x - The value to ensure.
 * @returns ***REMOVED***string[]***REMOVED*** The string array.
 */
function toStringArray(x) ***REMOVED***
    if (Array.isArray(x)) ***REMOVED***
        return x.map(String)
    ***REMOVED***
    return []
***REMOVED***

/**
 * Creates the function which checks whether a file path is matched with the given pattern or not.
 *
 * @param ***REMOVED***string[]***REMOVED*** includePatterns - The glob patterns to include files.
 * @param ***REMOVED***string[]***REMOVED*** excludePatterns - The glob patterns to exclude files.
 * @returns ***REMOVED***function***REMOVED*** Created predicate function.
 */
function createMatch(includePatterns, excludePatterns) ***REMOVED***
    const include = includePatterns.map(pattern => new Minimatch(pattern))
    const exclude = excludePatterns.map(pattern => new Minimatch(pattern))

    return filePath =>
        include.some(m => m.match(filePath)) &&
        !exclude.some(m => m.match(filePath))
***REMOVED***

/**
 * Creates a function which replaces a given path.
 *
 * @param ***REMOVED***RegExp***REMOVED*** fromRegexp - A `RegExp` object to replace.
 * @param ***REMOVED***string***REMOVED*** toStr - A new string to replace.
 * @returns ***REMOVED***function***REMOVED*** A function which replaces a given path.
 */
function defineConvert(fromRegexp, toStr) ***REMOVED***
    return filePath => filePath.replace(fromRegexp, toStr)
***REMOVED***

/**
 * Combines given converters.
 * The result function converts a given path with the first matched converter.
 *
 * @param ***REMOVED******REMOVED***match: function, convert: function***REMOVED******REMOVED*** converters - A list of converters to combine.
 * @returns ***REMOVED***function***REMOVED*** A function which replaces a given path.
 */
function combine(converters) ***REMOVED***
    return filePath => ***REMOVED***
        for (const converter of converters) ***REMOVED***
            if (converter.match(filePath)) ***REMOVED***
                return converter.convert(filePath)
            ***REMOVED***
        ***REMOVED***
        return filePath
    ***REMOVED***
***REMOVED***

/**
 * Parses `convertPath` property from a given option object.
 *
 * @param ***REMOVED***object|undefined***REMOVED*** option - An option object to get.
 * @returns ***REMOVED***function|null***REMOVED*** A function which converts a path., or `null`.
 */
function parse(option) ***REMOVED***
    if (
        !option ||
        !option.convertPath ||
        typeof option.convertPath !== "object"
    ) ***REMOVED***
        return null
    ***REMOVED***

    const converters = []
    for (const pattern of normalizeValue(option.convertPath)) ***REMOVED***
        const include = toStringArray(pattern.include)
        const exclude = toStringArray(pattern.exclude)
        const fromRegexp = new RegExp(String(pattern.replace[0])) //eslint-disable-line require-unicode-regexp
        const toStr = String(pattern.replace[1])

        converters.push(***REMOVED***
            match: createMatch(include, exclude),
            convert: defineConvert(fromRegexp, toStr),
        ***REMOVED***)
    ***REMOVED***

    return combine(converters)
***REMOVED***

/**
 * Gets "convertPath" setting.
 *
 * 1. This checks `options` property, then returns it if exists.
 * 2. This checks `settings.node` property, then returns it if exists.
 * 3. This returns a function of identity.
 *
 * @param ***REMOVED***RuleContext***REMOVED*** context - The rule context.
 * @returns ***REMOVED***function***REMOVED*** A function which converts a path.
 */
module.exports = function getConvertPath(context) ***REMOVED***
    return (
        parse(context.options && context.options[0]) ||
        parse(context.settings && context.settings.node) ||
        identity
    )
***REMOVED***

/**
 * JSON Schema for `convertPath` option.
 */
module.exports.schema = ***REMOVED***
    anyOf: [
        ***REMOVED***
            type: "object",
            properties: ***REMOVED******REMOVED***,
            patternProperties: ***REMOVED***
                "^.+$": ***REMOVED***
                    type: "array",
                    items: ***REMOVED*** type: "string" ***REMOVED***,
                    minItems: 2,
                    maxItems: 2,
                ***REMOVED***,
            ***REMOVED***,
            additionalProperties: false,
        ***REMOVED***,
        ***REMOVED***
            type: "array",
            items: ***REMOVED***
                type: "object",
                properties: ***REMOVED***
                    include: ***REMOVED***
                        type: "array",
                        items: ***REMOVED*** type: "string" ***REMOVED***,
                        minItems: 1,
                        uniqueItems: true,
                    ***REMOVED***,
                    exclude: ***REMOVED***
                        type: "array",
                        items: ***REMOVED*** type: "string" ***REMOVED***,
                        uniqueItems: true,
                    ***REMOVED***,
                    replace: ***REMOVED***
                        type: "array",
                        items: ***REMOVED*** type: "string" ***REMOVED***,
                        minItems: 2,
                        maxItems: 2,
                    ***REMOVED***,
                ***REMOVED***,
                additionalProperties: false,
                required: ["include", "replace"],
            ***REMOVED***,
            minItems: 1,
        ***REMOVED***,
    ],
***REMOVED***
