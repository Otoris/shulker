/**
 * @author Toru Nagashima
 * See LICENSE file in root directory for full license.
 */
"use strict"

const DEFAULT_VALUE = Object.freeze([])

/**
 * Gets `resolvePaths` property from a given option object.
 *
 * @param ***REMOVED***object|undefined***REMOVED*** option - An option object to get.
 * @returns ***REMOVED***string[]|null***REMOVED*** The `allowModules` value, or `null`.
 */
function get(option) ***REMOVED***
    if (option && option.resolvePaths && Array.isArray(option.resolvePaths)) ***REMOVED***
        return option.resolvePaths.map(String)
    ***REMOVED***
    return null
***REMOVED***

/**
 * Gets "resolvePaths" setting.
 *
 * 1. This checks `options` property, then returns it if exists.
 * 2. This checks `settings.node` property, then returns it if exists.
 * 3. This returns `[]`.
 *
 * @param ***REMOVED***RuleContext***REMOVED*** context - The rule context.
 * @returns ***REMOVED***string[]***REMOVED*** A list of extensions.
 */
module.exports = function getResolvePaths(context, optionIndex = 0) ***REMOVED***
    return (
        get(context.options && context.options[optionIndex]) ||
        get(context.settings && context.settings.node) ||
        DEFAULT_VALUE
    )
***REMOVED***

module.exports.schema = ***REMOVED***
    type: "array",
    items: ***REMOVED*** type: "string" ***REMOVED***,
    uniqueItems: true,
***REMOVED***
