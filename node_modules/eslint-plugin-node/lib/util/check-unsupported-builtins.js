/**
 * @author Toru Nagashima
 * See LICENSE file in root directory for full license.
 */
"use strict"

const ***REMOVED*** Range ***REMOVED*** = require("semver") //eslint-disable-line no-unused-vars
const ***REMOVED*** ReferenceTracker ***REMOVED*** = require("eslint-utils")
const getConfiguredNodeVersion = require("./get-configured-node-version")
const getSemverRange = require("./get-semver-range")

/**
 * Parses the options.
 * @param ***REMOVED***RuleContext***REMOVED*** context The rule context.
 * @returns ***REMOVED******REMOVED***version:Range,ignores:Set<string>***REMOVED******REMOVED*** Parsed value.
 */
function parseOptions(context) ***REMOVED***
    const raw = context.options[0] || ***REMOVED******REMOVED***
    const filePath = context.getFilename()
    const version = getConfiguredNodeVersion(raw.version, filePath)
    const ignores = new Set(raw.ignores || [])

    return Object.freeze(***REMOVED*** version, ignores ***REMOVED***)
***REMOVED***

/**
 * Verify the code to report unsupported APIs.
 * @param ***REMOVED***RuleContext***REMOVED*** context The rule context.
 * @param ***REMOVED******REMOVED***modules:object,globals:object***REMOVED******REMOVED*** trackMap The map for APIs to report.
 * @returns ***REMOVED***void***REMOVED***
 */
module.exports = function checkUnsupportedBuiltins(context, trackMap) ***REMOVED***
    const options = parseOptions(context)
    const tracker = new ReferenceTracker(context.getScope(), ***REMOVED*** mode: "legacy" ***REMOVED***)
    const references = [
        ...tracker.iterateCjsReferences(trackMap.modules || ***REMOVED******REMOVED***),
        ...tracker.iterateEsmReferences(trackMap.modules || ***REMOVED******REMOVED***),
        ...tracker.iterateGlobalReferences(trackMap.globals || ***REMOVED******REMOVED***),
    ]

    for (const ***REMOVED*** node, path, info ***REMOVED*** of references) ***REMOVED***
        const name = path.join(".")
        const supported =
            Boolean(info.supported) &&
            !options.version.intersects(getSemverRange(`<$***REMOVED***info.supported***REMOVED***`))

        if (!supported && !options.ignores.has(name)) ***REMOVED***
            context.report(***REMOVED***
                node,
                messageId: "unsupported",
                data: ***REMOVED***
                    name,
                    supported: info.supported || "???",
                    version: options.version.raw,
                ***REMOVED***,
            ***REMOVED***)
        ***REMOVED***
    ***REMOVED***
***REMOVED***
