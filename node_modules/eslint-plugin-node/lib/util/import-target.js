/**
 * @author Toru Nagashima
 * See LICENSE file in root directory for full license.
 */
"use strict"

const path = require("path")
const resolve = require("resolve")

/**
 * Resolve the given id to file paths.
 * @param ***REMOVED***boolean***REMOVED*** isModule The flag which indicates this id is a module.
 * @param ***REMOVED***string***REMOVED*** id The id to resolve.
 * @param ***REMOVED***object***REMOVED*** options The options of node-resolve module.
 * It requires `options.basedir`.
 * @returns ***REMOVED***string|null***REMOVED*** The resolved path.
 */
function getFilePath(isModule, id, options) ***REMOVED***
    try ***REMOVED***
        return resolve.sync(id, options)
    ***REMOVED*** catch (_err) ***REMOVED***
        if (isModule) ***REMOVED***
            return null
        ***REMOVED***
        return path.resolve(options.basedir, id)
    ***REMOVED***
***REMOVED***

/**
 * Gets the module name of a given path.
 *
 * e.g. `eslint/lib/ast-utils` -> `eslint`
 *
 * @param ***REMOVED***string***REMOVED*** nameOrPath - A path to get.
 * @returns ***REMOVED***string***REMOVED*** The module name of the path.
 */
function getModuleName(nameOrPath) ***REMOVED***
    let end = nameOrPath.indexOf("/")
    if (end !== -1 && nameOrPath[0] === "@") ***REMOVED***
        end = nameOrPath.indexOf("/", 1 + end)
    ***REMOVED***

    return end === -1 ? nameOrPath : nameOrPath.slice(0, end)
***REMOVED***

/**
 * Information of an import target.
 */
module.exports = class ImportTarget ***REMOVED***
    /**
     * Initialize this instance.
     * @param ***REMOVED***ASTNode***REMOVED*** node - The node of a `require()` or a module declaraiton.
     * @param ***REMOVED***string***REMOVED*** name - The name of an import target.
     * @param ***REMOVED***object***REMOVED*** options - The options of `node-resolve` module.
     */
    constructor(node, name, options) ***REMOVED***
        const isModule = !/^(?:[./\\]|\w+:)/u.test(name)

        /**
         * The node of a `require()` or a module declaraiton.
         * @type ***REMOVED***ASTNode***REMOVED***
         */
        this.node = node

        /**
         * The name of this import target.
         * @type ***REMOVED***string***REMOVED***
         */
        this.name = name

        /**
         * The full path of this import target.
         * If the target is a module and it does not exist then this is `null`.
         * @type ***REMOVED***string|null***REMOVED***
         */
        this.filePath = getFilePath(isModule, name, options)

        /**
         * The module name of this import target.
         * If the target is a relative path then this is `null`.
         * @type ***REMOVED***string|null***REMOVED***
         */
        this.moduleName = isModule ? getModuleName(name) : null
    ***REMOVED***
***REMOVED***
