/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * See LICENSE file in root directory for full license.
 */
"use strict"

/**
 * Merge two visitors.
 * This function modifies `visitor1` directly to merge.
 * @param ***REMOVED***Visitor***REMOVED*** visitor1 The visitor which is assigned.
 * @param ***REMOVED***Visitor***REMOVED*** visitor2 The visitor which is assigning.
 * @returns ***REMOVED***Visitor***REMOVED*** `visitor1`.
 */
module.exports = function mergeVisitorsInPlace(visitor1, visitor2) ***REMOVED***
    for (const key of Object.keys(visitor2)) ***REMOVED***
        const handler1 = visitor1[key]
        const handler2 = visitor2[key]

        if (typeof handler1 === "function") ***REMOVED***
            if (handler1._handlers) ***REMOVED***
                handler1._handlers.push(handler2)
            ***REMOVED*** else ***REMOVED***
                const handlers = [handler1, handler2]
                visitor1[key] = Object.assign(dispatch.bind(null, handlers), ***REMOVED***
                    _handlers: handlers,
                ***REMOVED***)
            ***REMOVED***
        ***REMOVED*** else ***REMOVED***
            visitor1[key] = handler2
        ***REMOVED***
    ***REMOVED***

    return visitor1
***REMOVED***

/**
 * Dispatch all given functions with a node.
 * @param ***REMOVED***function[]***REMOVED*** handlers The function list to call.
 * @param ***REMOVED***Node***REMOVED*** node The AST node to be handled.
 * @returns ***REMOVED***void***REMOVED***
 */
function dispatch(handlers, node) ***REMOVED***
    for (const h of handlers) ***REMOVED***
        h(node)
    ***REMOVED***
***REMOVED***
