/**
 * @author Toru Nagashima
 * See LICENSE file in root directory for full license.
 */
"use strict"

const fs = require("fs")
const path = require("path")
const Cache = require("./cache")

const ROOT = /^(?:[/.]|\.\.|[A-Z]:\\|\\\\)(?:[/\\]\.\.)*$/u
const cache = new Cache()

/**
 * Check whether the file exists or not.
 * @param ***REMOVED***string***REMOVED*** filePath The file path to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the file exists.
 */
function existsCaseSensitive(filePath) ***REMOVED***
    let dirPath = filePath

    while (dirPath !== "" && !ROOT.test(dirPath)) ***REMOVED***
        const fileName = path.basename(dirPath)
        dirPath = path.dirname(dirPath)

        if (fs.readdirSync(dirPath).indexOf(fileName) === -1) ***REMOVED***
            return false
        ***REMOVED***
    ***REMOVED***

    return true
***REMOVED***

/**
 * Checks whether or not the file of a given path exists.
 *
 * @param ***REMOVED***string***REMOVED*** filePath - A file path to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the file of a given path exists.
 */
module.exports = function exists(filePath) ***REMOVED***
    let result = cache.get(filePath)
    if (result == null) ***REMOVED***
        try ***REMOVED***
            const relativePath = path.relative(process.cwd(), filePath)
            result =
                fs.statSync(relativePath).isFile() &&
                existsCaseSensitive(relativePath)
        ***REMOVED*** catch (error) ***REMOVED***
            if (error.code !== "ENOENT") ***REMOVED***
                throw error
            ***REMOVED***
            result = false
        ***REMOVED***
        cache.set(filePath, result)
    ***REMOVED***

    return result
***REMOVED***
