/**
 * @author Toru Nagashima
 * See LICENSE file in root directory for full license.
 */
"use strict"

const fs = require("fs")
const path = require("path")
const ignore = require("ignore")
const Cache = require("./cache")
const exists = require("./exists")
const getPackageJson = require("./get-package-json")

const cache = new Cache()
const SLASH_AT_BEGIN_AND_END = /^!?\/+|^!|\/+$/gu
const PARENT_RELATIVE_PATH = /^\.\./u
const NEVER_IGNORED = /^(?:readme\.[^.]*|(?:licen[cs]e|changes|changelog|history)(?:\.[^.]*)?)$/iu

/**
 * Checks whether or not a given file name is a relative path to a ancestor
 * directory.
 *
 * @param ***REMOVED***string***REMOVED*** filePath - A file name to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the file name is a relative path to a ancestor
 *      directory.
 */
function isAncestorFiles(filePath) ***REMOVED***
    return PARENT_RELATIVE_PATH.test(filePath)
***REMOVED***

/**
 * @param ***REMOVED***function***REMOVED*** f - A function.
 * @param ***REMOVED***function***REMOVED*** g - A function.
 * @returns ***REMOVED***function***REMOVED*** A logical-and function of `f` and `g`.
 */
function and(f, g) ***REMOVED***
    return filePath => f(filePath) && g(filePath)
***REMOVED***

/**
 * @param ***REMOVED***function***REMOVED*** f - A function.
 * @param ***REMOVED***function***REMOVED*** g - A function.
 * @param ***REMOVED***function|null***REMOVED*** h - A function.
 * @returns ***REMOVED***function***REMOVED*** A logical-or function of `f`, `g`, and `h`.
 */
function or(f, g, h) ***REMOVED***
    return filePath => f(filePath) || g(filePath) || (h && h(filePath))
***REMOVED***

/**
 * @param ***REMOVED***function***REMOVED*** f - A function.
 * @returns ***REMOVED***function***REMOVED*** A logical-not function of `f`.
 */
function not(f) ***REMOVED***
    return filePath => !f(filePath)
***REMOVED***

/**
 * Creates a function which checks whether or not a given file is ignoreable.
 *
 * @param ***REMOVED***object***REMOVED*** p - An object of package.json.
 * @returns ***REMOVED***function***REMOVED*** A function which checks whether or not a given file is ignoreable.
 */
function filterNeverIgnoredFiles(p) ***REMOVED***
    const basedir = path.dirname(p.filePath)
    const mainFilePath =
        typeof p.main === "string" ? path.join(basedir, p.main) : null

    return filePath =>
        path.join(basedir, filePath) !== mainFilePath &&
        filePath !== "package.json" &&
        !NEVER_IGNORED.test(path.relative(basedir, filePath))
***REMOVED***

/**
 * Creates a function which checks whether or not a given file should be ignored.
 *
 * @param ***REMOVED***string[]|null***REMOVED*** files - File names of whitelist.
 * @returns ***REMOVED***function|null***REMOVED*** A function which checks whether or not a given file should be ignored.
 */
function parseWhiteList(files) ***REMOVED***
    if (!files || !Array.isArray(files)) ***REMOVED***
        return null
    ***REMOVED***

    const ig = ignore()
    const igN = ignore()
    let hasN = false

    for (const file of files) ***REMOVED***
        if (typeof file === "string" && file) ***REMOVED***
            const body = file.replace(SLASH_AT_BEGIN_AND_END, "")
            if (file.startsWith("!")) ***REMOVED***
                igN.add(`$***REMOVED***body***REMOVED***`)
                igN.add(`$***REMOVED***body***REMOVED***/**`)
                hasN = true
            ***REMOVED*** else ***REMOVED***
                ig.add(`/$***REMOVED***body***REMOVED***`)
                ig.add(`/$***REMOVED***body***REMOVED***/**`)
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***

    return hasN
        ? or(ig.createFilter(), not(igN.createFilter()))
        : ig.createFilter()
***REMOVED***

/**
 * Creates a function which checks whether or not a given file should be ignored.
 *
 * @param ***REMOVED***string***REMOVED*** basedir - The directory path "package.json" exists.
 * @param ***REMOVED***boolean***REMOVED*** filesFieldExists - `true` if `files` field of `package.json` exists.
 * @returns ***REMOVED***function|null***REMOVED*** A function which checks whether or not a given file should be ignored.
 */
function parseNpmignore(basedir, filesFieldExists) ***REMOVED***
    let filePath = path.join(basedir, ".npmignore")
    if (!exists(filePath)) ***REMOVED***
        if (filesFieldExists) ***REMOVED***
            return null
        ***REMOVED***

        filePath = path.join(basedir, ".gitignore")
        if (!exists(filePath)) ***REMOVED***
            return null
        ***REMOVED***
    ***REMOVED***

    const ig = ignore()
    ig.add(fs.readFileSync(filePath, "utf8"))
    return not(ig.createFilter())
***REMOVED***

/**
 * Gets an object to check whether a given path should be ignored or not.
 * The object is created from:
 *
 * - `files` field of `package.json`
 * - `.npmignore`
 *
 * @param ***REMOVED***string***REMOVED*** startPath - A file path to lookup.
 * @returns ***REMOVED***object***REMOVED***
 *      An object to check whther or not a given path should be ignored.
 *      The object has a method `match`.
 *      `match` returns `true` if a given file path should be ignored.
 */
module.exports = function getNpmignore(startPath) ***REMOVED***
    const retv = ***REMOVED*** match: isAncestorFiles ***REMOVED***

    const p = getPackageJson(startPath)
    if (p) ***REMOVED***
        const data = cache.get(p.filePath)
        if (data) ***REMOVED***
            return data
        ***REMOVED***

        const filesIgnore = parseWhiteList(p.files)
        const npmignoreIgnore = parseNpmignore(
            path.dirname(p.filePath),
            Boolean(filesIgnore)
        )

        if (filesIgnore && npmignoreIgnore) ***REMOVED***
            retv.match = and(
                filterNeverIgnoredFiles(p),
                or(isAncestorFiles, filesIgnore, npmignoreIgnore)
            )
        ***REMOVED*** else if (filesIgnore) ***REMOVED***
            retv.match = and(
                filterNeverIgnoredFiles(p),
                or(isAncestorFiles, filesIgnore)
            )
        ***REMOVED*** else if (npmignoreIgnore) ***REMOVED***
            retv.match = and(
                filterNeverIgnoredFiles(p),
                or(isAncestorFiles, npmignoreIgnore)
            )
        ***REMOVED***

        cache.set(p.filePath, retv)
    ***REMOVED***

    return retv
***REMOVED***
