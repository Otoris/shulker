/**
 * @author Toru Nagashima
 * See LICENSE file in root directory for full license.
 */
"use strict"

const path = require("path")
const ***REMOVED*** CALL, ReferenceTracker, getStringIfConstant ***REMOVED*** = require("eslint-utils")
const resolve = require("resolve")
const getResolvePaths = require("./get-resolve-paths")
const getTryExtensions = require("./get-try-extensions")
const ImportTarget = require("./import-target")
const stripImportPathParams = require("./strip-import-path-params")

/**
 * Gets a list of `require()` targets.
 *
 * Core modules of Node.js (e.g. `fs`, `http`) are excluded.
 *
 * @param ***REMOVED***RuleContext***REMOVED*** context - The rule context.
 * @param ***REMOVED***Object***REMOVED*** [options] - The flag to include core modules.
 * @param ***REMOVED***boolean***REMOVED*** [options.includeCore] - The flag to include core modules.
 * @param ***REMOVED***function(ImportTarget[]):void***REMOVED*** callback The callback function to get result.
 * @returns ***REMOVED***Object***REMOVED*** The visitor.
 */
module.exports = function visitRequire(
    context,
    ***REMOVED*** includeCore = false ***REMOVED*** = ***REMOVED******REMOVED***,
    callback
) ***REMOVED***
    const targets = []
    const basedir = path.dirname(path.resolve(context.getFilename()))
    const paths = getResolvePaths(context)
    const extensions = getTryExtensions(context)
    const options = ***REMOVED*** basedir, paths, extensions ***REMOVED***

    return ***REMOVED***
        "Program:exit"() ***REMOVED***
            const tracker = new ReferenceTracker(context.getScope())
            const references = tracker.iterateGlobalReferences(***REMOVED***
                require: ***REMOVED***
                    [CALL]: true,
                    resolve: ***REMOVED*** [CALL]: true ***REMOVED***,
                ***REMOVED***,
            ***REMOVED***)

            for (const ***REMOVED*** node ***REMOVED*** of references) ***REMOVED***
                const targetNode = node.arguments[0]
                const rawName = getStringIfConstant(targetNode)
                const name = rawName && stripImportPathParams(rawName)
                if (name && (includeCore || !resolve.isCore(name))) ***REMOVED***
                    targets.push(new ImportTarget(targetNode, name, options))
                ***REMOVED***
            ***REMOVED***

            callback(targets)
        ***REMOVED***,
    ***REMOVED***
***REMOVED***
