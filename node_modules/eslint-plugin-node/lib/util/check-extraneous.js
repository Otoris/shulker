/**
 * @author Toru Nagashima
 * See LICENSE file in root directory for full license.
 */
"use strict"

const getAllowModules = require("./get-allow-modules")
const getPackageJson = require("./get-package-json")

/**
 * Checks whether or not each requirement target is published via package.json.
 *
 * It reads package.json and checks the target exists in `dependencies`.
 *
 * @param ***REMOVED***RuleContext***REMOVED*** context - A context to report.
 * @param ***REMOVED***string***REMOVED*** filePath - The current file path.
 * @param ***REMOVED***ImportTarget[]***REMOVED*** targets - A list of target information to check.
 * @returns ***REMOVED***void***REMOVED***
 */
module.exports = function checkForExtraneous(context, filePath, targets) ***REMOVED***
    const packageInfo = getPackageJson(filePath)
    if (!packageInfo) ***REMOVED***
        return
    ***REMOVED***

    const allowed = new Set(getAllowModules(context))
    const dependencies = new Set(
        [].concat(
            Object.keys(packageInfo.dependencies || ***REMOVED******REMOVED***),
            Object.keys(packageInfo.devDependencies || ***REMOVED******REMOVED***),
            Object.keys(packageInfo.peerDependencies || ***REMOVED******REMOVED***),
            Object.keys(packageInfo.optionalDependencies || ***REMOVED******REMOVED***)
        )
    )

    for (const target of targets) ***REMOVED***
        const extraneous =
            target.moduleName != null &&
            target.filePath != null &&
            !dependencies.has(target.moduleName) &&
            !allowed.has(target.moduleName)

        if (extraneous) ***REMOVED***
            context.report(***REMOVED***
                node: target.node,
                loc: target.node.loc,
                message: '"***REMOVED******REMOVED***moduleName***REMOVED******REMOVED***" is extraneous.',
                data: target,
            ***REMOVED***)
        ***REMOVED***
    ***REMOVED***
***REMOVED***
