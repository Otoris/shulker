/**
 * @author Toru Nagashima
 * See LICENSE file in root directory for full license.
 */
"use strict"

const ***REMOVED*** CALL, CONSTRUCT, ReferenceTracker ***REMOVED*** = require("eslint-utils")

const trackMap = ***REMOVED***
    dns: ***REMOVED***
        lookup: ***REMOVED*** [CALL]: true ***REMOVED***,
        lookupService: ***REMOVED*** [CALL]: true ***REMOVED***,
        Resolver: ***REMOVED*** [CONSTRUCT]: true ***REMOVED***,
        getServers: ***REMOVED*** [CALL]: true ***REMOVED***,
        resolve: ***REMOVED*** [CALL]: true ***REMOVED***,
        resolve4: ***REMOVED*** [CALL]: true ***REMOVED***,
        resolve6: ***REMOVED*** [CALL]: true ***REMOVED***,
        resolveAny: ***REMOVED*** [CALL]: true ***REMOVED***,
        resolveCname: ***REMOVED*** [CALL]: true ***REMOVED***,
        resolveMx: ***REMOVED*** [CALL]: true ***REMOVED***,
        resolveNaptr: ***REMOVED*** [CALL]: true ***REMOVED***,
        resolveNs: ***REMOVED*** [CALL]: true ***REMOVED***,
        resolvePtr: ***REMOVED*** [CALL]: true ***REMOVED***,
        resolveSoa: ***REMOVED*** [CALL]: true ***REMOVED***,
        resolveSrv: ***REMOVED*** [CALL]: true ***REMOVED***,
        resolveTxt: ***REMOVED*** [CALL]: true ***REMOVED***,
        reverse: ***REMOVED*** [CALL]: true ***REMOVED***,
        setServers: ***REMOVED*** [CALL]: true ***REMOVED***,
    ***REMOVED***,
***REMOVED***

module.exports = ***REMOVED***
    meta: ***REMOVED***
        docs: ***REMOVED***
            description: 'enforce `require("dns").promises`',
            category: "Stylistic Issues",
            recommended: false,
            url:
                "https://github.com/mysticatea/eslint-plugin-node/blob/v10.0.0/docs/rules/prefer-promises/dns.md",
        ***REMOVED***,
        fixable: null,
        messages: ***REMOVED***
            preferPromises: "Use 'dns.promises.***REMOVED******REMOVED***name***REMOVED******REMOVED***()' instead.",
            preferPromisesNew: "Use 'new dns.promises.***REMOVED******REMOVED***name***REMOVED******REMOVED***()' instead.",
        ***REMOVED***,
        schema: [],
        type: "suggestion",
    ***REMOVED***,

    create(context) ***REMOVED***
        return ***REMOVED***
            "Program:exit"() ***REMOVED***
                const scope = context.getScope()
                const tracker = new ReferenceTracker(scope, ***REMOVED*** mode: "legacy" ***REMOVED***)
                const references = [
                    ...tracker.iterateCjsReferences(trackMap),
                    ...tracker.iterateEsmReferences(trackMap),
                ]

                for (const ***REMOVED*** node, path ***REMOVED*** of references) ***REMOVED***
                    const name = path[path.length - 1]
                    const isClass = name[0] === name[0].toUpperCase()
                    context.report(***REMOVED***
                        node,
                        messageId: isClass
                            ? "preferPromisesNew"
                            : "preferPromises",
                        data: ***REMOVED*** name ***REMOVED***,
                    ***REMOVED***)
                ***REMOVED***
            ***REMOVED***,
        ***REMOVED***
    ***REMOVED***,
***REMOVED***
