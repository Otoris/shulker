/**
 * @author Toru Nagashima
 * See LICENSE file in root directory for full license.
 */
"use strict"

const semver = require("semver")
const ***REMOVED*** getInnermostScope, getPropertyName ***REMOVED*** = require("eslint-utils")
const getPackageJson = require("../util/get-package-json")

const VERSION_MAP = new Map([
    [0.1, "0.10.0"],
    [0.12, "0.12.0"],
    [4, "4.0.0"],
    [5, "5.0.0"],
    [6, "6.0.0"],
    [6.5, "6.5.0"],
    [7, "7.0.0"],
    [7.6, "7.6.0"],
    [8, "8.0.0"],
    [8.3, "8.3.0"],
    [9, "9.0.0"],
    [10, "10.0.0"],
])
const VERSION_SCHEMA = ***REMOVED***
    anyOf: [
        ***REMOVED*** enum: Array.from(VERSION_MAP.keys()) ***REMOVED***,
        ***REMOVED***
            type: "string",
            pattern: "^(?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)$",
        ***REMOVED***,
    ],
***REMOVED***
const DEFAULT_VERSION = "4.0.0"
const FUNC_TYPE = /^(?:Arrow)?Function(?:Declaration|Expression)$/u
const CLASS_TYPE = /^Class(?:Declaration|Expression)$/u
const DESTRUCTURING_PARENT_TYPE = /^(?:Function(?:Declaration|Expression)|ArrowFunctionExpression|AssignmentExpression|VariableDeclarator)$/u
const TOPLEVEL_SCOPE_TYPE = /^(?:global|function|module)$/u
const BINARY_NUMBER = /^0[bB]/u
const OCTAL_NUMBER = /^0[oO]/u
const UNICODE_ESC = /(\\+)u\***REMOVED***[0-9a-fA-F]+?\***REMOVED***/gu
const GET_OR_SET = /^(?:g|s)et$/u
const NEW_BUILTIN_TYPES = [
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Uint16Array",
    "Int32Array",
    "Uint32Array",
    "Float32Array",
    "Float64Array",
    "DataView",
    "Map",
    "Set",
    "WeakMap",
    "WeakSet",
    "Proxy",
    "Reflect",
    "Promise",
    "Symbol",
    "SharedArrayBuffer",
    "Atomics",
]
const SUBCLASSING_TEST_TARGETS = [
    "Array",
    "RegExp",
    "Function",
    "Promise",
    "Boolean",
    "Number",
    "String",
    "Map",
    "Set",
]
const PROPERTY_TEST_TARGETS = ***REMOVED***
    Object: [
        "assign",
        "is",
        "getOwnPropertySymbols",
        "setPrototypeOf",
        "values",
        "entries",
        "getOwnPropertyDescriptors",
    ],
    String: ["raw", "fromCodePoint"],
    Array: ["from", "of"],
    Number: [
        "isFinite",
        "isInteger",
        "isSafeInteger",
        "isNaN",
        "EPSILON",
        "MIN_SAFE_INTEGER",
        "MAX_SAFE_INTEGER",
    ],
    Math: [
        "clz32",
        "imul",
        "sign",
        "log10",
        "log2",
        "log1p",
        "expm1",
        "cosh",
        "sinh",
        "tanh",
        "acosh",
        "asinh",
        "atanh",
        "trunc",
        "fround",
        "cbrt",
        "hypot",
    ],
    Symbol: [
        "hasInstance",
        "isConcatSpreadablec",
        "iterator",
        "species",
        "replace",
        "search",
        "split",
        "match",
        "toPrimitive",
        "toStringTag",
        "unscopables",
    ],
    Atomics: [
        "add",
        "and",
        "compareExchange",
        "exchange",
        "wait",
        "wake",
        "isLockFree",
        "load",
        "or",
        "store",
        "sub",
        "xor",
    ],
***REMOVED***
const REGEXP_NAMED_GROUP = /(\\*)\(\?<[_$\w]/u
const REGEXP_LOOKBEHIND = /(\\*)\(\?<[=!]/u
const REGEXP_UNICODE_PROPERTY = /(\\*)\\[pP]\***REMOVED***.+?\***REMOVED***/u
const FEATURES = ***REMOVED***
    defaultParameters: ***REMOVED***
        alias: ["syntax"],
        name: "Default parameters",
        node: "6.0.0",
    ***REMOVED***,
    restParameters: ***REMOVED***
        alias: ["syntax"],
        name: "Rest parameters",
        node: "6.0.0",
    ***REMOVED***,
    spreadOperators: ***REMOVED***
        alias: ["syntax"],
        name: "Spread operators",
        node: "5.0.0",
    ***REMOVED***,
    objectLiteralExtensions: ***REMOVED***
        alias: ["syntax"],
        name: "Object literal extensions",
        node: "4.0.0",
    ***REMOVED***,
    objectPropertyShorthandOfGetSet: ***REMOVED***
        alias: ["syntax", "objectLiteralExtensions"],
        name: "Property shorthand of 'get' and 'set'",
        node: "6.0.0",
    ***REMOVED***,
    forOf: ***REMOVED***
        alias: ["syntax"],
        name: "'for..of' loops",
        node: "0.12.0",
    ***REMOVED***,
    binaryNumberLiterals: ***REMOVED***
        alias: ["syntax"],
        name: "Binary number literals",
        node: "4.0.0",
    ***REMOVED***,
    octalNumberLiterals: ***REMOVED***
        alias: ["syntax"],
        name: "Octal number literals",
        node: "4.0.0",
    ***REMOVED***,
    templateStrings: ***REMOVED***
        alias: ["syntax"],
        name: "Template strings",
        node: "4.0.0",
    ***REMOVED***,
    regexpY: ***REMOVED***
        alias: ["syntax"],
        name: "RegExp 'y' flags",
        node: "6.0.0",
    ***REMOVED***,
    regexpU: ***REMOVED***
        alias: ["syntax"],
        name: "RegExp 'u' flags",
        node: "6.0.0",
    ***REMOVED***,
    destructuring: ***REMOVED***
        alias: ["syntax"],
        name: "Destructuring",
        node: "6.0.0",
    ***REMOVED***,
    unicodeCodePointEscapes: ***REMOVED***
        alias: ["syntax"],
        name: "Unicode code point escapes",
        node: "4.0.0",
    ***REMOVED***,
    "new.target": ***REMOVED***
        alias: ["syntax"],
        name: "'new.target'",
        node: "5.0.0",
    ***REMOVED***,
    const: ***REMOVED***
        alias: ["syntax"],
        name: "'const' declarations",
        node: ***REMOVED***
            sloppy: "6.0.0",
            strict: "4.0.0",
        ***REMOVED***,
    ***REMOVED***,
    let: ***REMOVED***
        alias: ["syntax"],
        name: "'let' declarations",
        node: ***REMOVED***
            sloppy: "6.0.0",
            strict: "4.0.0",
        ***REMOVED***,
    ***REMOVED***,
    blockScopedFunctions: ***REMOVED***
        alias: ["syntax"],
        name: "Block-scoped functions",
        node: ***REMOVED***
            sloppy: "6.0.0",
            strict: "4.0.0",
        ***REMOVED***,
    ***REMOVED***,
    arrowFunctions: ***REMOVED***
        alias: ["syntax"],
        name: "Arrow functions",
        node: "4.0.0",
    ***REMOVED***,
    generatorFunctions: ***REMOVED***
        alias: ["syntax"],
        name: "Generator functions",
        node: "4.0.0",
    ***REMOVED***,
    classes: ***REMOVED***
        alias: ["syntax"],
        name: "Classes",
        node: ***REMOVED***
            sloppy: "6.0.0",
            strict: "4.0.0",
        ***REMOVED***,
    ***REMOVED***,
    modules: ***REMOVED***
        alias: ["syntax"],
        name: "Import and export declarations",
        node: null,
    ***REMOVED***,
    exponentialOperators: ***REMOVED***
        alias: ["syntax"],
        name: "Exponential operators (**)",
        node: "7.0.0",
    ***REMOVED***,
    asyncAwait: ***REMOVED***
        alias: ["syntax"],
        name: "Async functions",
        node: "7.6.0",
    ***REMOVED***,
    trailingCommasInFunctions: ***REMOVED***
        alias: ["syntax"],
        name: "Trailing commas in functions",
        node: "8.0.0",
    ***REMOVED***,
    //------------------------------------------
    templateLiteralRevision: ***REMOVED***
        alias: ["syntax"],
        name: "Illegal escape sequences in taggled templates",
        node: "9.0.0",
    ***REMOVED***,
    regexpS: ***REMOVED***
        alias: ["syntax"],
        name: "RegExp 's' flags",
        node: "9.0.0",
    ***REMOVED***,
    regexpNamedCaptureGroups: ***REMOVED***
        alias: ["syntax"],
        name: "RegExp named capture groups",
        node: "10.0.0",
    ***REMOVED***,
    regexpLookbehind: ***REMOVED***
        alias: ["syntax"],
        name: "RegExp lookbehind assertions",
        node: "9.0.0",
    ***REMOVED***,
    regexpUnicodeProperties: ***REMOVED***
        alias: ["syntax"],
        name: "RegExp Unicode property escapes",
        node: "10.0.0",
    ***REMOVED***,
    restProperties: ***REMOVED***
        alias: ["syntax"],
        name: "Rest properties",
        node: "8.3.0",
    ***REMOVED***,
    spreadProperties: ***REMOVED***
        alias: ["syntax"],
        name: "Spread properties",
        node: "8.3.0",
    ***REMOVED***,
    asyncGenerators: ***REMOVED***
        alias: ["syntax"],
        name: "Async generators",
        node: "10.0.0",
    ***REMOVED***,
    forAwaitOf: ***REMOVED***
        alias: ["syntax"],
        name: "for-await-of loops",
        node: "10.0.0",
    ***REMOVED***,

    Int8Array: ***REMOVED***
        alias: ["runtime", "globalObjects", "typedArrays"],
        name: "'Int8Array'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    Uint8Array: ***REMOVED***
        alias: ["runtime", "globalObjects", "typedArrays"],
        name: "'Uint8Array'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    Uint8ClampedArray: ***REMOVED***
        alias: ["runtime", "globalObjects", "typedArrays"],
        name: "'Uint8ClampedArray'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    Int16Array: ***REMOVED***
        alias: ["runtime", "globalObjects", "typedArrays"],
        name: "'Int16Array'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    Uint16Array: ***REMOVED***
        alias: ["runtime", "globalObjects", "typedArrays"],
        name: "'Uint16Array'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    Int32Array: ***REMOVED***
        alias: ["runtime", "globalObjects", "typedArrays"],
        name: "'Int32Array'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    Uint32Array: ***REMOVED***
        alias: ["runtime", "globalObjects", "typedArrays"],
        name: "'Uint32Array'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    Float32Array: ***REMOVED***
        alias: ["runtime", "globalObjects", "typedArrays"],
        name: "'Float32Array'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    Float64Array: ***REMOVED***
        alias: ["runtime", "globalObjects", "typedArrays"],
        name: "'Float64Array'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    DataView: ***REMOVED***
        alias: ["runtime", "globalObjects", "typedArrays"],
        name: "'DataView'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    Map: ***REMOVED***
        alias: ["runtime", "globalObjects"],
        name: "'Map'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    Set: ***REMOVED***
        alias: ["runtime", "globalObjects"],
        name: "'Set'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    WeakMap: ***REMOVED***
        alias: ["runtime", "globalObjects"],
        name: "'WeakMap'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    WeakSet: ***REMOVED***
        alias: ["runtime", "globalObjects"],
        name: "'WeakSet'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    Proxy: ***REMOVED***
        alias: ["runtime", "globalObjects"],
        name: "'Proxy'",
        singular: true,
        node: "6.0.0",
    ***REMOVED***,
    Reflect: ***REMOVED***
        alias: ["runtime", "globalObjects"],
        name: "'Reflect'",
        singular: true,
        node: "6.0.0",
    ***REMOVED***,
    Promise: ***REMOVED***
        alias: ["runtime", "globalObjects"],
        name: "'Promise'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    Symbol: ***REMOVED***
        alias: ["runtime", "globalObjects"],
        name: "'Symbol'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    SharedArrayBuffer: ***REMOVED***
        alias: ["runtime", "globalObjects"],
        name: "'SharedArrayBuffer'",
        singular: true,
        node: "9.0.0",
    ***REMOVED***,
    Atomics: ***REMOVED***
        alias: ["runtime", "globalObjects"],
        name: "'Atomics'",
        singular: true,
        node: "9.0.0",
    ***REMOVED***,

    "Object.assign": ***REMOVED***
        alias: ["runtime", "staticMethods", "Object.*"],
        name: "'Object.assign'",
        singular: true,
        node: "4.0.0",
    ***REMOVED***,
    "Object.is": ***REMOVED***
        alias: ["runtime", "staticMethods", "Object.*"],
        name: "'Object.is'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Object.getOwnPropertySymbols": ***REMOVED***
        alias: ["runtime", "staticMethods", "Object.*"],
        name: "'Object.getOwnPropertySymbols'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Object.setPrototypeOf": ***REMOVED***
        alias: ["runtime", "staticMethods", "Object.*"],
        name: "'Object.setPrototypeOf'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Object.values": ***REMOVED***
        alias: ["runtime", "staticMethods", "Object.*"],
        name: "'Object.values'",
        singular: true,
        node: "7.0.0",
    ***REMOVED***,
    "Object.entries": ***REMOVED***
        alias: ["runtime", "staticMethods", "Object.*"],
        name: "'Object.entries'",
        singular: true,
        node: "7.0.0",
    ***REMOVED***,
    "Object.getOwnPropertyDescriptors": ***REMOVED***
        alias: ["runtime", "staticMethods", "Object.*"],
        name: "'Object.getOwnPropertyDescriptors'",
        singular: true,
        node: "7.0.0",
    ***REMOVED***,

    "String.raw": ***REMOVED***
        alias: ["runtime", "staticMethods", "String.*"],
        name: "'String.raw'",
        singular: true,
        node: "4.0.0",
    ***REMOVED***,
    "String.fromCodePoint": ***REMOVED***
        alias: ["runtime", "staticMethods", "String.*"],
        name: "'String.fromCodePoint'",
        singular: true,
        node: "4.0.0",
    ***REMOVED***,

    "Array.from": ***REMOVED***
        alias: ["runtime", "staticMethods", "Array.*"],
        name: "'Array.from'",
        singular: true,
        node: "4.0.0",
    ***REMOVED***,
    "Array.of": ***REMOVED***
        alias: ["runtime", "staticMethods", "Array.*"],
        name: "'Array.of'",
        singular: true,
        node: "4.0.0",
    ***REMOVED***,

    "Number.isFinite": ***REMOVED***
        alias: ["runtime", "staticMethods", "Number.*"],
        name: "'Number.isFinite'",
        singular: true,
        node: "0.10.0",
    ***REMOVED***,
    "Number.isInteger": ***REMOVED***
        alias: ["runtime", "staticMethods", "Number.*"],
        name: "'Number.isInteger'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Number.isSafeInteger": ***REMOVED***
        alias: ["runtime", "staticMethods", "Number.*"],
        name: "'Number.isSafeInteger'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Number.isNaN": ***REMOVED***
        alias: ["runtime", "staticMethods", "Number.*"],
        name: "'Number.isNaN'",
        singular: true,
        node: "0.10.0",
    ***REMOVED***,
    "Number.EPSILON": ***REMOVED***
        alias: ["runtime", "staticMethods", "Number.*"],
        name: "'Number.EPSILON'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Number.MIN_SAFE_INTEGER": ***REMOVED***
        alias: ["runtime", "staticMethods", "Number.*"],
        name: "'Number.MIN_SAFE_INTEGER'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Number.MAX_SAFE_INTEGER": ***REMOVED***
        alias: ["runtime", "staticMethods", "Number.*"],
        name: "'Number.MAX_SAFE_INTEGER'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,

    "Math.clz32": ***REMOVED***
        alias: ["runtime", "staticMethods", "Math.*"],
        name: "'Math.clz32'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Math.imul": ***REMOVED***
        alias: ["runtime", "staticMethods", "Math.*"],
        name: "'Math.imul'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Math.sign": ***REMOVED***
        alias: ["runtime", "staticMethods", "Math.*"],
        name: "'Math.sign'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Math.log10": ***REMOVED***
        alias: ["runtime", "staticMethods", "Math.*"],
        name: "'Math.log10'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Math.log2": ***REMOVED***
        alias: ["runtime", "staticMethods", "Math.*"],
        name: "'Math.log2'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Math.log1p": ***REMOVED***
        alias: ["runtime", "staticMethods", "Math.*"],
        name: "'Math.log1p'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Math.expm1": ***REMOVED***
        alias: ["runtime", "staticMethods", "Math.*"],
        name: "'Math.expm1'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Math.cosh": ***REMOVED***
        alias: ["runtime", "staticMethods", "Math.*"],
        name: "'Math.cosh'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Math.sinh": ***REMOVED***
        alias: ["runtime", "staticMethods", "Math.*"],
        name: "'Math.sinh'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Math.tanh": ***REMOVED***
        alias: ["runtime", "staticMethods", "Math.*"],
        name: "'Math.tanh'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Math.acosh": ***REMOVED***
        alias: ["runtime", "staticMethods", "Math.*"],
        name: "'Math.acosh'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Math.asinh": ***REMOVED***
        alias: ["runtime", "staticMethods", "Math.*"],
        name: "'Math.asinh'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Math.atanh": ***REMOVED***
        alias: ["runtime", "staticMethods", "Math.*"],
        name: "'Math.atanh'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Math.trunc": ***REMOVED***
        alias: ["runtime", "staticMethods", "Math.*"],
        name: "'Math.trunc'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Math.fround": ***REMOVED***
        alias: ["runtime", "staticMethods", "Math.*"],
        name: "'Math.fround'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Math.cbrt": ***REMOVED***
        alias: ["runtime", "staticMethods", "Math.*"],
        name: "'Math.cbrt'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Math.hypot": ***REMOVED***
        alias: ["runtime", "staticMethods", "Math.*"],
        name: "'Math.hypot'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,

    "Symbol.hasInstance": ***REMOVED***
        alias: ["runtime", "staticMethods", "Symbol.*"],
        name: "'Symbol.hasInstance'",
        singular: true,
        node: "6.5.0",
    ***REMOVED***,
    "Symbol.isConcatSpreadablec": ***REMOVED***
        alias: ["runtime", "staticMethods", "Symbol.*"],
        name: "'Symbol.isConcatSpreadablec'",
        singular: true,
        node: "6.0.0",
    ***REMOVED***,
    "Symbol.iterator": ***REMOVED***
        alias: ["runtime", "staticMethods", "Symbol.*"],
        name: "'Symbol.iterator'",
        singular: true,
        node: "0.12.0",
    ***REMOVED***,
    "Symbol.species": ***REMOVED***
        alias: ["runtime", "staticMethods", "Symbol.*"],
        name: "'Symbol.species'",
        singular: true,
        node: "6.5.0",
    ***REMOVED***,
    "Symbol.replace": ***REMOVED***
        alias: ["runtime", "staticMethods", "Symbol.*"],
        name: "'Symbol.replace'",
        singular: true,
        node: "6.0.0",
    ***REMOVED***,
    "Symbol.search": ***REMOVED***
        alias: ["runtime", "staticMethods", "Symbol.*"],
        name: "'Symbol.search'",
        singular: true,
        node: "6.0.0",
    ***REMOVED***,
    "Symbol.split": ***REMOVED***
        alias: ["runtime", "staticMethods", "Symbol.*"],
        name: "'Symbol.split'",
        singular: true,
        node: "6.0.0",
    ***REMOVED***,
    "Symbol.match": ***REMOVED***
        alias: ["runtime", "staticMethods", "Symbol.*"],
        name: "'Symbol.match'",
        singular: true,
        node: "6.0.0",
    ***REMOVED***,
    "Symbol.toPrimitive": ***REMOVED***
        alias: ["runtime", "staticMethods", "Symbol.*"],
        name: "'Symbol.toPrimitive'",
        singular: true,
        node: "6.0.0",
    ***REMOVED***,
    "Symbol.toStringTag": ***REMOVED***
        alias: ["runtime", "staticMethods", "Symbol.*"],
        name: "'Symbol.toStringTag'",
        singular: true,
        node: "6.0.0",
    ***REMOVED***,
    "Symbol.unscopables": ***REMOVED***
        alias: ["runtime", "staticMethods", "Symbol.*"],
        name: "'Symbol.unscopables'",
        singular: true,
        node: "4.0.0",
    ***REMOVED***,

    "Atomics.add": ***REMOVED***
        alias: ["runtime", "staticMethods", "Atomics.*"],
        name: "'Atomics.add'",
        singular: true,
        node: "9.0.0",
    ***REMOVED***,
    "Atomics.and": ***REMOVED***
        alias: ["runtime", "staticMethods", "Atomics.*"],
        name: "'Atomics.and'",
        singular: true,
        node: "9.0.0",
    ***REMOVED***,
    "Atomics.compareExchange": ***REMOVED***
        alias: ["runtime", "staticMethods", "Atomics.*"],
        name: "'Atomics.compareExchange'",
        singular: true,
        node: "9.0.0",
    ***REMOVED***,
    "Atomics.exchange": ***REMOVED***
        alias: ["runtime", "staticMethods", "Atomics.*"],
        name: "'Atomics.exchange'",
        singular: true,
        node: "9.0.0",
    ***REMOVED***,
    "Atomics.wait": ***REMOVED***
        alias: ["runtime", "staticMethods", "Atomics.*"],
        name: "'Atomics.wait'",
        singular: true,
        node: "9.0.0",
    ***REMOVED***,
    "Atomics.wake": ***REMOVED***
        alias: ["runtime", "staticMethods", "Atomics.*"],
        name: "'Atomics.wake'",
        singular: true,
        node: "9.0.0",
    ***REMOVED***,
    "Atomics.isLockFree": ***REMOVED***
        alias: ["runtime", "staticMethods", "Atomics.*"],
        name: "'Atomics.isLockFree'",
        singular: true,
        node: "9.0.0",
    ***REMOVED***,
    "Atomics.load": ***REMOVED***
        alias: ["runtime", "staticMethods", "Atomics.*"],
        name: "'Atomics.load'",
        singular: true,
        node: "9.0.0",
    ***REMOVED***,
    "Atomics.or": ***REMOVED***
        alias: ["runtime", "staticMethods", "Atomics.*"],
        name: "'Atomics.or'",
        singular: true,
        node: "9.0.0",
    ***REMOVED***,
    "Atomics.store": ***REMOVED***
        alias: ["runtime", "staticMethods", "Atomics.*"],
        name: "'Atomics.store'",
        singular: true,
        node: "9.0.0",
    ***REMOVED***,
    "Atomics.sub": ***REMOVED***
        alias: ["runtime", "staticMethods", "Atomics.*"],
        name: "'Atomics.sub'",
        singular: true,
        node: "9.0.0",
    ***REMOVED***,
    "Atomics.xor": ***REMOVED***
        alias: ["runtime", "staticMethods", "Atomics.*"],
        name: "'Atomics.xor'",
        singular: true,
        node: "9.0.0",
    ***REMOVED***,

    extendsArray: ***REMOVED***
        alias: ["runtime", "extends"],
        name: "Subclassing of 'Array'",
        singular: true,
        node: "6.0.0",
    ***REMOVED***,
    extendsRegExp: ***REMOVED***
        alias: ["runtime", "extends"],
        name: "Subclassing of 'RegExp'",
        singular: true,
        node: "5.0.0",
    ***REMOVED***,
    extendsFunction: ***REMOVED***
        alias: ["runtime", "extends"],
        name: "Subclassing of 'Function'",
        singular: true,
        node: "6.0.0",
    ***REMOVED***,
    extendsPromise: ***REMOVED***
        alias: ["runtime", "extends"],
        name: "Subclassing of 'Promise'",
        singular: true,
        node: "5.0.0",
    ***REMOVED***,
    extendsBoolean: ***REMOVED***
        alias: ["runtime", "extends"],
        name: "Subclassing of 'Boolean'",
        singular: true,
        node: "4.0.0",
    ***REMOVED***,
    extendsNumber: ***REMOVED***
        alias: ["runtime", "extends"],
        name: "Subclassing of 'Number'",
        singular: true,
        node: "4.0.0",
    ***REMOVED***,
    extendsString: ***REMOVED***
        alias: ["runtime", "extends"],
        name: "Subclassing of 'String'",
        singular: true,
        node: "4.0.0",
    ***REMOVED***,
    extendsMap: ***REMOVED***
        alias: ["runtime", "extends"],
        name: "Subclassing of 'Map'",
        singular: true,
        node: "4.0.0",
    ***REMOVED***,
    extendsSet: ***REMOVED***
        alias: ["runtime", "extends"],
        name: "Subclassing of 'Set'",
        singular: true,
        node: "4.0.0",
    ***REMOVED***,
    extendsNull: ***REMOVED***
        alias: ["runtime", "extends"],
        name: "'extends null'",
        singular: true,
        node: null,
    ***REMOVED***,
***REMOVED***
const OPTIONS = Object.keys(FEATURES)

/**
 * Gets default version configuration of this rule.
 *
 * This finds and reads 'package.json' file, then parses 'engines.node' field.
 * If it's nothing, this returns null.
 *
 * @param ***REMOVED***string***REMOVED*** filename - The file name of the current linting file.
 * @returns ***REMOVED***string***REMOVED*** The default version configuration.
 */
function getDefaultVersion(filename) ***REMOVED***
    const info = getPackageJson(filename)
    const nodeVersion = info && info.engines && info.engines.node

    return semver.validRange(nodeVersion) || DEFAULT_VERSION
***REMOVED***

/**
 * Gets values of the `ignores` option.
 *
 * @returns ***REMOVED***string[]***REMOVED*** Values of the `ignores` option.
 */
function getIgnoresEnum() ***REMOVED***
    return Object.keys(
        OPTIONS.reduce((retv, key) => ***REMOVED***
            for (const alias of FEATURES[key].alias) ***REMOVED***
                retv[alias] = true
            ***REMOVED***
            retv[key] = true
            return retv
        ***REMOVED***, Object.create(null))
    )
***REMOVED***

/**
 * Checks whether a given key should be ignored or not.
 *
 * @param ***REMOVED***string***REMOVED*** key - A key to check.
 * @param ***REMOVED***string[]***REMOVED*** ignores - An array of keys and aliases to be ignored.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the key should be ignored.
 */
function isIgnored(key, ignores) ***REMOVED***
    return (
        ignores.indexOf(key) !== -1 ||
        FEATURES[key].alias.some(alias => ignores.indexOf(alias) !== -1)
    )
***REMOVED***

/**
 * Parses the options.
 *
 * @param ***REMOVED***number|string|object|undefined***REMOVED*** options - An option object to parse.
 * @param ***REMOVED***number***REMOVED*** defaultVersion - The default version to use if the version option was omitted.
 * @returns ***REMOVED***object***REMOVED*** Parsed value.
 */
function parseOptions(options, defaultVersion) ***REMOVED***
    let version = null
    let range = null
    let ignores = []

    if (typeof options === "number") ***REMOVED***
        version = VERSION_MAP.get(options)
    ***REMOVED*** else if (typeof options === "string") ***REMOVED***
        version = options
    ***REMOVED*** else if (typeof options === "object") ***REMOVED***
        version =
            typeof options.version === "number"
                ? VERSION_MAP.get(options.version)
                : options.version

        ignores = options.ignores || []
    ***REMOVED***

    range = semver.validRange(version ? `>=$***REMOVED***version***REMOVED***` : defaultVersion)
    if (!version) ***REMOVED***
        version = defaultVersion
    ***REMOVED***

    return Object.freeze(***REMOVED***
        version,
        features: Object.freeze(
            OPTIONS.reduce((retv, key) => ***REMOVED***
                const feature = FEATURES[key]

                if (isIgnored(key, ignores)) ***REMOVED***
                    retv[key] = Object.freeze(***REMOVED***
                        name: feature.name,
                        singular: Boolean(feature.singular),
                        supported: true,
                        supportedInStrict: true,
                    ***REMOVED***)
                ***REMOVED*** else if (typeof feature.node === "string") ***REMOVED***
                    retv[key] = Object.freeze(***REMOVED***
                        name: feature.name,
                        singular: Boolean(feature.singular),
                        supported: !semver.intersects(
                            range,
                            `<$***REMOVED***feature.node***REMOVED***`
                        ),
                        supportedInStrict: !semver.intersects(
                            range,
                            `<$***REMOVED***feature.node***REMOVED***`
                        ),
                    ***REMOVED***)
                ***REMOVED*** else ***REMOVED***
                    retv[key] = Object.freeze(***REMOVED***
                        name: feature.name,
                        singular: Boolean(feature.singular),
                        supported:
                            feature.node != null &&
                            feature.node.sloppy != null &&
                            !semver.intersects(
                                range,
                                `<$***REMOVED***feature.node.sloppy***REMOVED***`
                            ),
                        supportedInStrict:
                            feature.node != null &&
                            feature.node.strict != null &&
                            !semver.intersects(
                                range,
                                `<$***REMOVED***feature.node.strict***REMOVED***`
                            ),
                    ***REMOVED***)
                ***REMOVED***

                return retv
            ***REMOVED***, Object.create(null))
        ),
    ***REMOVED***)
***REMOVED***

/**
 * Find the scope that a given node belongs to.
 * @param ***REMOVED***Scope***REMOVED*** initialScope The initial scope to find.
 * @param ***REMOVED***Node***REMOVED*** node The AST node.
 * @returns ***REMOVED***Scope***REMOVED*** The scope that the node belongs to.
 */
function normalizeScope(initialScope, node) ***REMOVED***
    let scope = getInnermostScope(initialScope, node)

    while (scope && scope.block === node) ***REMOVED***
        scope = scope.upper
    ***REMOVED***

    return scope
***REMOVED***

/**
 * Checks whether the given string has `\u***REMOVED***90ABCDEF***REMOVED***`-like escapes.
 *
 * @param ***REMOVED***string***REMOVED*** raw - The string to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the string has Unicode code point escapes.
 */
function hasUnicodeCodePointEscape(raw) ***REMOVED***
    let match = null

    UNICODE_ESC.lastIndex = 0
    while ((match = UNICODE_ESC.exec(raw)) != null) ***REMOVED***
        if (match[1].length % 2 === 1) ***REMOVED***
            return true
        ***REMOVED***
    ***REMOVED***

    return false
***REMOVED***

/**
 * Check a given string has a given pattern.
 * @param ***REMOVED***string***REMOVED*** s A string to check.
 * @param ***REMOVED***RegExp***REMOVED*** pattern A RegExp object to check.
 * @returns ***REMOVED***boolean***REMOVED*** `true` if the string has the pattern.
 */
function hasPattern(s, pattern) ***REMOVED***
    const m = pattern.exec(s)
    return m != null && (m[1] || "").length % 2 === 0
***REMOVED***

module.exports = ***REMOVED***
    meta: ***REMOVED***
        docs: ***REMOVED***
            description:
                "disallow unsupported ECMAScript features on the specified version",
            category: "Possible Errors",
            recommended: false,
            replacedBy: [
                "node/no-unsupported-features/es-syntax",
                "node/no-unsupported-features/es-builtins",
            ],
            url:
                "https://github.com/mysticatea/eslint-plugin-node/blob/v10.0.0/docs/rules/no-unsupported-features.md",
        ***REMOVED***,
        type: "problem",
        deprecated: true,
        fixable: null,
        schema: [
            ***REMOVED***
                anyOf: [
                    VERSION_SCHEMA.anyOf[0],
                    VERSION_SCHEMA.anyOf[1],
                    ***REMOVED***
                        type: "object",
                        properties: ***REMOVED***
                            version: VERSION_SCHEMA,
                            ignores: ***REMOVED***
                                type: "array",
                                items: ***REMOVED*** enum: getIgnoresEnum() ***REMOVED***,
                                uniqueItems: true,
                            ***REMOVED***,
                        ***REMOVED***,
                        additionalProperties: false,
                    ***REMOVED***,
                ],
            ***REMOVED***,
        ],
    ***REMOVED***,
    create(context) ***REMOVED***
        const sourceCode = context.getSourceCode()
        const supportInfo = parseOptions(
            context.options[0],
            getDefaultVersion(context.getFilename())
        )

        /**
         * Gets the references of the specified global variables.
         *
         * @param ***REMOVED***string[]***REMOVED*** names - Variable names to get.
         * @returns ***REMOVED***void***REMOVED***
         */
        function* getReferences(names) ***REMOVED***
            const globalScope = context.getScope()

            for (const name of names) ***REMOVED***
                const variable = globalScope.set.get(name)

                if (variable && variable.defs.length === 0) ***REMOVED***
                    yield* variable.references
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        /**
         * Checks whether the given function has trailing commas or not.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - The function node to check.
         * @returns ***REMOVED***boolean***REMOVED*** `true` if the function has trailing commas.
         */
        function hasTrailingCommaForFunction(node) ***REMOVED***
            const length = node.params.length

            return (
                length >= 1 &&
                sourceCode.getTokenAfter(node.params[length - 1]).value === ","
            )
        ***REMOVED***

        /**
         * Checks whether the given call expression has trailing commas or not.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - The call expression node to check.
         * @returns ***REMOVED***boolean***REMOVED*** `true` if the call expression has trailing commas.
         */
        function hasTrailingCommaForCall(node) ***REMOVED***
            return (
                node.arguments.length >= 1 &&
                sourceCode.getLastToken(node, 1).value === ","
            )
        ***REMOVED***

        /**
         * Checks whether the given class extends from null or not.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - The class node to check.
         * @returns ***REMOVED***boolean***REMOVED*** `true` if the class extends from null.
         */
        function extendsNull(node) ***REMOVED***
            return (
                node.superClass != null &&
                node.superClass.type === "Literal" &&
                node.superClass.value === null
            )
        ***REMOVED***

        /**
         * Reports a given node if the specified feature is not supported.
         *
         * @param ***REMOVED***ASTNode***REMOVED*** node - A node to be reported.
         * @param ***REMOVED***string***REMOVED*** key - A feature name to report.
         * @returns ***REMOVED***void***REMOVED***
         */
        function report(node, key) ***REMOVED***
            const version = supportInfo.version
            const feature = supportInfo.features[key]
            if (feature.supported) ***REMOVED***
                return
            ***REMOVED***

            if (!feature.supportedInStrict) ***REMOVED***
                context.report(***REMOVED***
                    node,
                    message:
                        "***REMOVED******REMOVED***feature***REMOVED******REMOVED*** ***REMOVED******REMOVED***be***REMOVED******REMOVED*** not supported yet on Node ***REMOVED******REMOVED***version***REMOVED******REMOVED***.",
                    data: ***REMOVED***
                        feature: feature.name,
                        be: feature.singular ? "is" : "are",
                        version,
                    ***REMOVED***,
                ***REMOVED***)
            ***REMOVED*** else if (!normalizeScope(context.getScope(), node).isStrict) ***REMOVED***
                context.report(***REMOVED***
                    node,
                    message:
                        "***REMOVED******REMOVED***feature***REMOVED******REMOVED*** ***REMOVED******REMOVED***be***REMOVED******REMOVED*** not supported yet on Node ***REMOVED******REMOVED***version***REMOVED******REMOVED***.",
                    data: ***REMOVED***
                        feature: `$***REMOVED***feature.name***REMOVED*** in non-strict mode`,
                        be: feature.singular ? "is" : "are",
                        version,
                    ***REMOVED***,
                ***REMOVED***)
            ***REMOVED***
        ***REMOVED***

        /**
         * Validate RegExp syntax.
         * @param ***REMOVED***string***REMOVED*** pattern A RegExp pattern to check.
         * @param ***REMOVED***string***REMOVED*** flags A RegExp flags to check.
         * @param ***REMOVED***ASTNode***REMOVED*** node A node to report.
         * @returns ***REMOVED***void***REMOVED***
         */
        function validateRegExp(pattern, flags, node) ***REMOVED***
            if (typeof pattern === "string") ***REMOVED***
                if (hasPattern(pattern, REGEXP_NAMED_GROUP)) ***REMOVED***
                    report(node, "regexpNamedCaptureGroups")
                ***REMOVED***
                if (hasPattern(pattern, REGEXP_LOOKBEHIND)) ***REMOVED***
                    report(node, "regexpLookbehind")
                ***REMOVED***
                if (hasPattern(pattern, REGEXP_UNICODE_PROPERTY)) ***REMOVED***
                    report(node, "regexpUnicodeProperties")
                ***REMOVED***
            ***REMOVED***
            if (typeof flags === "string") ***REMOVED***
                if (flags.indexOf("y") !== -1) ***REMOVED***
                    report(node, "regexpY")
                ***REMOVED***
                if (flags.indexOf("u") !== -1) ***REMOVED***
                    report(node, "regexpU")
                ***REMOVED***
                if (flags.indexOf("s") !== -1) ***REMOVED***
                    report(node, "regexpS")
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        /**
         * Validate RegExp syntax in a RegExp literal.
         * @param ***REMOVED***ASTNode***REMOVED*** node A Literal node to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function validateRegExpLiteral(node) ***REMOVED***
            validateRegExp(node.regex.pattern, node.regex.flags, node)
        ***REMOVED***

        /**
         * Validate RegExp syntax in the first argument of `new RegExp()`.
         * @param ***REMOVED***ASTNode***REMOVED*** node A NewExpression node to check.
         * @returns ***REMOVED***void***REMOVED***
         */
        function validateRegExpString(node) ***REMOVED***
            const patternNode = node.arguments[0]
            const flagsNode = node.arguments[1]
            const pattern =
                patternNode &&
                patternNode.type === "Literal" &&
                typeof patternNode.value === "string"
                    ? patternNode.value
                    : null
            const flags =
                flagsNode &&
                flagsNode.type === "Literal" &&
                typeof flagsNode.value === "string"
                    ? flagsNode.value
                    : null
            validateRegExp(pattern, flags, node)
        ***REMOVED***

        return ***REMOVED***
            "Program:exit"() ***REMOVED***
                // Check new global variables.
                for (const name of NEW_BUILTIN_TYPES) ***REMOVED***
                    for (const reference of getReferences([name])) ***REMOVED***
                        // Ignore if it's using new static methods.
                        const node = reference.identifier
                        const parentNode = node.parent
                        const properties = PROPERTY_TEST_TARGETS[name]
                        if (
                            properties &&
                            parentNode.type === "MemberExpression"
                        ) ***REMOVED***
                            const propertyName = getPropertyName(parentNode)
                            if (properties.indexOf(propertyName) !== -1) ***REMOVED***
                                continue
                            ***REMOVED***
                        ***REMOVED***

                        report(reference.identifier, name)
                    ***REMOVED***
                ***REMOVED***

                // Check static methods.
                for (const reference of getReferences(
                    Object.keys(PROPERTY_TEST_TARGETS)
                )) ***REMOVED***
                    const node = reference.identifier
                    const parentNode = node.parent
                    if (
                        parentNode.type !== "MemberExpression" ||
                        parentNode.object !== node
                    ) ***REMOVED***
                        continue
                    ***REMOVED***

                    const objectName = node.name
                    const properties = PROPERTY_TEST_TARGETS[objectName]
                    const propertyName = getPropertyName(parentNode)
                    if (
                        propertyName &&
                        properties.indexOf(propertyName) !== -1
                    ) ***REMOVED***
                        report(parentNode, `$***REMOVED***objectName***REMOVED***.$***REMOVED***propertyName***REMOVED***`)
                    ***REMOVED***
                ***REMOVED***

                // Check subclassing
                for (const reference of getReferences(
                    SUBCLASSING_TEST_TARGETS
                )) ***REMOVED***
                    const node = reference.identifier
                    const parentNode = node.parent
                    if (
                        CLASS_TYPE.test(parentNode.type) &&
                        parentNode.superClass === node
                    ) ***REMOVED***
                        report(node, `extends$***REMOVED***node.name***REMOVED***`)
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***,

            ArrowFunctionExpression(node) ***REMOVED***
                report(node, "arrowFunctions")
                if (node.async) ***REMOVED***
                    report(node, "asyncAwait")
                ***REMOVED***
                if (hasTrailingCommaForFunction(node)) ***REMOVED***
                    report(node, "trailingCommasInFunctions")
                ***REMOVED***
            ***REMOVED***,

            AssignmentPattern(node) ***REMOVED***
                if (FUNC_TYPE.test(node.parent.type)) ***REMOVED***
                    report(node, "defaultParameters")
                ***REMOVED***
            ***REMOVED***,

            FunctionDeclaration(node) ***REMOVED***
                const scope = context.getScope().upper
                if (!TOPLEVEL_SCOPE_TYPE.test(scope.type)) ***REMOVED***
                    report(node, "blockScopedFunctions")
                ***REMOVED***
                if (node.generator) ***REMOVED***
                    report(node, "generatorFunctions")
                ***REMOVED***
                if (node.async) ***REMOVED***
                    report(node, "asyncAwait")
                ***REMOVED***
                if (hasTrailingCommaForFunction(node)) ***REMOVED***
                    report(node, "trailingCommasInFunctions")
                ***REMOVED***
                if (node.async && node.generator) ***REMOVED***
                    report(node, "asyncGenerators")
                ***REMOVED***
            ***REMOVED***,

            FunctionExpression(node) ***REMOVED***
                if (node.generator) ***REMOVED***
                    report(node, "generatorFunctions")
                ***REMOVED***
                if (node.async) ***REMOVED***
                    report(node, "asyncAwait")
                ***REMOVED***
                if (hasTrailingCommaForFunction(node)) ***REMOVED***
                    report(node, "trailingCommasInFunctions")
                ***REMOVED***
                if (node.async && node.generator) ***REMOVED***
                    report(node, "asyncGenerators")
                ***REMOVED***
            ***REMOVED***,

            MetaProperty(node) ***REMOVED***
                const meta = node.meta.name || node.meta
                const property = node.property.name || node.property
                if (meta === "new" && property === "target") ***REMOVED***
                    report(node, "new.target")
                ***REMOVED***
            ***REMOVED***,

            ClassDeclaration(node) ***REMOVED***
                report(node, "classes")

                if (extendsNull(node)) ***REMOVED***
                    report(node, "extendsNull")
                ***REMOVED***
            ***REMOVED***,

            ClassExpression(node) ***REMOVED***
                report(node, "classes")

                if (extendsNull(node)) ***REMOVED***
                    report(node, "extendsNull")
                ***REMOVED***
            ***REMOVED***,

            ForOfStatement(node) ***REMOVED***
                report(node, "forOf")
                if (node.await) ***REMOVED***
                    report(node, "forAwaitOf")
                ***REMOVED***
            ***REMOVED***,

            VariableDeclaration(node) ***REMOVED***
                if (node.kind === "const") ***REMOVED***
                    report(node, "const")
                ***REMOVED*** else if (node.kind === "let") ***REMOVED***
                    report(node, "let")
                ***REMOVED***
            ***REMOVED***,

            ArrayPattern(node) ***REMOVED***
                if (DESTRUCTURING_PARENT_TYPE.test(node.parent.type)) ***REMOVED***
                    report(node, "destructuring")
                ***REMOVED***
            ***REMOVED***,

            AssignmentExpression(node) ***REMOVED***
                if (node.operator === "**=") ***REMOVED***
                    report(node, "exponentialOperators")
                ***REMOVED***
            ***REMOVED***,

            AwaitExpression(node) ***REMOVED***
                report(node, "asyncAwait")
            ***REMOVED***,

            BinaryExpression(node) ***REMOVED***
                if (node.operator === "**") ***REMOVED***
                    report(node, "exponentialOperators")
                ***REMOVED***
            ***REMOVED***,

            CallExpression(node) ***REMOVED***
                if (hasTrailingCommaForCall(node)) ***REMOVED***
                    report(node, "trailingCommasInFunctions")
                ***REMOVED***
            ***REMOVED***,

            Identifier(node) ***REMOVED***
                const raw = sourceCode.getText(node)
                if (hasUnicodeCodePointEscape(raw)) ***REMOVED***
                    report(node, "unicodeCodePointEscapes")
                ***REMOVED***
            ***REMOVED***,

            Literal(node) ***REMOVED***
                if (typeof node.value === "number") ***REMOVED***
                    if (BINARY_NUMBER.test(node.raw)) ***REMOVED***
                        report(node, "binaryNumberLiterals")
                    ***REMOVED*** else if (OCTAL_NUMBER.test(node.raw)) ***REMOVED***
                        report(node, "octalNumberLiterals")
                    ***REMOVED***
                ***REMOVED*** else if (typeof node.value === "string") ***REMOVED***
                    if (hasUnicodeCodePointEscape(node.raw)) ***REMOVED***
                        report(node, "unicodeCodePointEscapes")
                    ***REMOVED***
                ***REMOVED*** else if (node.regex) ***REMOVED***
                    validateRegExpLiteral(node)
                ***REMOVED***
            ***REMOVED***,

            NewExpression(node) ***REMOVED***
                if (
                    node.callee.type === "Identifier" &&
                    node.callee.name === "RegExp"
                ) ***REMOVED***
                    validateRegExpString(node)
                ***REMOVED***
                if (hasTrailingCommaForCall(node)) ***REMOVED***
                    report(node, "trailingCommasInFunctions")
                ***REMOVED***
            ***REMOVED***,

            ObjectPattern(node) ***REMOVED***
                if (DESTRUCTURING_PARENT_TYPE.test(node.parent.type)) ***REMOVED***
                    report(node, "destructuring")
                ***REMOVED***
            ***REMOVED***,

            Property(node) ***REMOVED***
                if (
                    node.parent.type === "ObjectExpression" &&
                    (node.computed || node.shorthand || node.method)
                ) ***REMOVED***
                    if (node.shorthand && GET_OR_SET.test(node.key.name)) ***REMOVED***
                        report(node, "objectPropertyShorthandOfGetSet")
                    ***REMOVED*** else ***REMOVED***
                        report(node, "objectLiteralExtensions")
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***,

            RestElement(node) ***REMOVED***
                if (FUNC_TYPE.test(node.parent.type)) ***REMOVED***
                    report(node, "restParameters")
                ***REMOVED*** else if (node.parent.type === "ObjectPattern") ***REMOVED***
                    report(node, "restProperties")
                ***REMOVED***
            ***REMOVED***,

            SpreadElement(node) ***REMOVED***
                if (node.parent.type === "ObjectExpression") ***REMOVED***
                    report(node, "spreadProperties")
                ***REMOVED*** else ***REMOVED***
                    report(node, "spreadOperators")
                ***REMOVED***
            ***REMOVED***,

            TemplateElement(node) ***REMOVED***
                if (node.value.cooked == null) ***REMOVED***
                    report(node, "templateLiteralRevision")
                ***REMOVED***
            ***REMOVED***,

            TemplateLiteral(node) ***REMOVED***
                report(node, "templateStrings")
            ***REMOVED***,

            ExperimentalRestProperty(node) ***REMOVED***
                report(node, "restProperties")
            ***REMOVED***,

            ExperimentalSpreadProperty(node) ***REMOVED***
                report(node, "spreadProperties")
            ***REMOVED***,

            RestProperty(node) ***REMOVED***
                report(node, "restProperties")
            ***REMOVED***,

            SpreadProperty(node) ***REMOVED***
                report(node, "spreadProperties")
            ***REMOVED***,

            ExportAllDeclaration(node) ***REMOVED***
                report(node, "modules")
            ***REMOVED***,

            ExportDefaultDeclaration(node) ***REMOVED***
                report(node, "modules")
            ***REMOVED***,

            ExportNamedDeclaration(node) ***REMOVED***
                report(node, "modules")
            ***REMOVED***,

            ImportDeclaration(node) ***REMOVED***
                report(node, "modules")
            ***REMOVED***,
        ***REMOVED***
    ***REMOVED***,
***REMOVED***
