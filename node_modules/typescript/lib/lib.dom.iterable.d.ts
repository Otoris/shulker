/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved. 
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0  
 
THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, 
MERCHANTABLITY OR NON-INFRINGEMENT. 
 
See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */



/// <reference no-default-lib="true"/>


/////////////////////////////
/// DOM Iterable APIs
/////////////////////////////

interface AudioParam ***REMOVED***
    setValueCurveAtTime(values: Iterable<number>, startTime: number, duration: number): AudioParam;
***REMOVED***

interface AudioParamMap extends ReadonlyMap<string, AudioParam> ***REMOVED***
***REMOVED***

interface AudioTrackList ***REMOVED***
    [Symbol.iterator](): IterableIterator<AudioTrack>;
***REMOVED***

interface BaseAudioContext ***REMOVED***
    createIIRFilter(feedforward: Iterable<number>, feedback: Iterable<number>): IIRFilterNode;
    createPeriodicWave(real: Iterable<number>, imag: Iterable<number>, constraints?: PeriodicWaveConstraints): PeriodicWave;
***REMOVED***

interface CSSRuleList ***REMOVED***
    [Symbol.iterator](): IterableIterator<CSSRule>;
***REMOVED***

interface CSSStyleDeclaration ***REMOVED***
    [Symbol.iterator](): IterableIterator<string>;
***REMOVED***

interface Cache ***REMOVED***
    addAll(requests: Iterable<RequestInfo>): Promise<void>;
***REMOVED***

interface CanvasPathDrawingStyles ***REMOVED***
    setLineDash(segments: Iterable<number>): void;
***REMOVED***

interface ClientRectList ***REMOVED***
    [Symbol.iterator](): IterableIterator<ClientRect>;
***REMOVED***

interface DOMRectList ***REMOVED***
    [Symbol.iterator](): IterableIterator<DOMRect>;
***REMOVED***

interface DOMStringList ***REMOVED***
    [Symbol.iterator](): IterableIterator<string>;
***REMOVED***

interface DOMTokenList ***REMOVED***
    [Symbol.iterator](): IterableIterator<string>;
    entries(): IterableIterator<[number, string]>;
    keys(): IterableIterator<number>;
    values(): IterableIterator<string>;
***REMOVED***

interface DataTransferItemList ***REMOVED***
    [Symbol.iterator](): IterableIterator<DataTransferItem>;
***REMOVED***

interface FileList ***REMOVED***
    [Symbol.iterator](): IterableIterator<File>;
***REMOVED***

interface FormData ***REMOVED***
    [Symbol.iterator](): IterableIterator<[string, FormDataEntryValue]>;
    /**
     * Returns an array of key, value pairs for every entry in the list.
     */
    entries(): IterableIterator<[string, FormDataEntryValue]>;
    /**
     * Returns a list of keys in the list.
     */
    keys(): IterableIterator<string>;
    /**
     * Returns a list of values in the list.
     */
    values(): IterableIterator<FormDataEntryValue>;
***REMOVED***

interface HTMLAllCollection ***REMOVED***
    [Symbol.iterator](): IterableIterator<Element>;
***REMOVED***

interface HTMLCollectionBase ***REMOVED***
    [Symbol.iterator](): IterableIterator<Element>;
***REMOVED***

interface HTMLCollectionOf<T extends Element> ***REMOVED***
    [Symbol.iterator](): IterableIterator<T>;
***REMOVED***

interface HTMLFormElement ***REMOVED***
    [Symbol.iterator](): IterableIterator<Element>;
***REMOVED***

interface HTMLSelectElement ***REMOVED***
    [Symbol.iterator](): IterableIterator<Element>;
***REMOVED***

interface Headers ***REMOVED***
    [Symbol.iterator](): IterableIterator<[string, string]>;
    /**
     * Returns an iterator allowing to go through all key/value pairs contained in this object.
     */
    entries(): IterableIterator<[string, string]>;
    /**
     * Returns an iterator allowing to go through all keys of the key/value pairs contained in this object.
     */
    keys(): IterableIterator<string>;
    /**
     * Returns an iterator allowing to go through all values of the key/value pairs contained in this object.
     */
    values(): IterableIterator<string>;
***REMOVED***

interface IDBObjectStore ***REMOVED***
    /**
     * Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a "ConstraintError" DOMException.
     * 
     * Throws an "InvalidStateError" DOMException if not called within an upgrade transaction.
     */
    createIndex(name: string, keyPath: string | Iterable<string>, options?: IDBIndexParameters): IDBIndex;
***REMOVED***

interface MediaKeyStatusMap ***REMOVED***
    [Symbol.iterator](): IterableIterator<[BufferSource, MediaKeyStatus]>;
    entries(): IterableIterator<[BufferSource, MediaKeyStatus]>;
    keys(): IterableIterator<BufferSource>;
    values(): IterableIterator<MediaKeyStatus>;
***REMOVED***

interface MediaList ***REMOVED***
    [Symbol.iterator](): IterableIterator<string>;
***REMOVED***

interface MimeTypeArray ***REMOVED***
    [Symbol.iterator](): IterableIterator<MimeType>;
***REMOVED***

interface NamedNodeMap ***REMOVED***
    [Symbol.iterator](): IterableIterator<Attr>;
***REMOVED***

interface Navigator ***REMOVED***
    requestMediaKeySystemAccess(keySystem: string, supportedConfigurations: Iterable<MediaKeySystemConfiguration>): Promise<MediaKeySystemAccess>;
***REMOVED***

interface NodeList ***REMOVED***
    [Symbol.iterator](): IterableIterator<Node>;
    /**
     * Returns an array of key, value pairs for every entry in the list.
     */
    entries(): IterableIterator<[number, Node]>;
    /**
     * Returns an list of keys in the list.
     */
    keys(): IterableIterator<number>;
    /**
     * Returns an list of values in the list.
     */
    values(): IterableIterator<Node>;
***REMOVED***

interface NodeListOf<TNode extends Node> ***REMOVED***
    [Symbol.iterator](): IterableIterator<TNode>;
    /**
     * Returns an array of key, value pairs for every entry in the list.
     */
    entries(): IterableIterator<[number, TNode]>;
    /**
     * Returns an list of keys in the list.
     */
    keys(): IterableIterator<number>;
    /**
     * Returns an list of values in the list.
     */
    values(): IterableIterator<TNode>;
***REMOVED***

interface Plugin ***REMOVED***
    [Symbol.iterator](): IterableIterator<MimeType>;
***REMOVED***

interface PluginArray ***REMOVED***
    [Symbol.iterator](): IterableIterator<Plugin>;
***REMOVED***

interface RTCRtpTransceiver ***REMOVED***
    setCodecPreferences(codecs: Iterable<RTCRtpCodecCapability>): void;
***REMOVED***

interface RTCStatsReport extends ReadonlyMap<string, any> ***REMOVED***
***REMOVED***

interface SVGLengthList ***REMOVED***
    [Symbol.iterator](): IterableIterator<SVGLength>;
***REMOVED***

interface SVGNumberList ***REMOVED***
    [Symbol.iterator](): IterableIterator<SVGNumber>;
***REMOVED***

interface SVGPointList ***REMOVED***
    [Symbol.iterator](): IterableIterator<DOMPoint>;
***REMOVED***

interface SVGStringList ***REMOVED***
    [Symbol.iterator](): IterableIterator<string>;
***REMOVED***

interface SourceBufferList ***REMOVED***
    [Symbol.iterator](): IterableIterator<SourceBuffer>;
***REMOVED***

interface SpeechGrammarList ***REMOVED***
    [Symbol.iterator](): IterableIterator<SpeechGrammar>;
***REMOVED***

interface SpeechRecognitionResult ***REMOVED***
    [Symbol.iterator](): IterableIterator<SpeechRecognitionAlternative>;
***REMOVED***

interface SpeechRecognitionResultList ***REMOVED***
    [Symbol.iterator](): IterableIterator<SpeechRecognitionResult>;
***REMOVED***

interface StyleSheetList ***REMOVED***
    [Symbol.iterator](): IterableIterator<StyleSheet>;
***REMOVED***

interface TextTrackCueList ***REMOVED***
    [Symbol.iterator](): IterableIterator<TextTrackCue>;
***REMOVED***

interface TextTrackList ***REMOVED***
    [Symbol.iterator](): IterableIterator<TextTrack>;
***REMOVED***

interface TouchList ***REMOVED***
    [Symbol.iterator](): IterableIterator<Touch>;
***REMOVED***

interface URLSearchParams ***REMOVED***
    [Symbol.iterator](): IterableIterator<[string, string]>;
    /**
     * Returns an array of key, value pairs for every entry in the search params.
     */
    entries(): IterableIterator<[string, string]>;
    /**
     * Returns a list of keys in the search params.
     */
    keys(): IterableIterator<string>;
    /**
     * Returns a list of values in the search params.
     */
    values(): IterableIterator<string>;
***REMOVED***

interface VRDisplay ***REMOVED***
    requestPresent(layers: Iterable<VRLayer>): Promise<void>;
***REMOVED***

interface VideoTrackList ***REMOVED***
    [Symbol.iterator](): IterableIterator<VideoTrack>;
***REMOVED***

interface WEBGL_draw_buffers ***REMOVED***
    drawBuffersWEBGL(buffers: Iterable<GLenum>): void;
***REMOVED***

interface WebAuthentication ***REMOVED***
    makeCredential(accountInformation: Account, cryptoParameters: Iterable<ScopedCredentialParameters>, attestationChallenge: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer | null, options?: ScopedCredentialOptions): Promise<ScopedCredentialInfo>;
***REMOVED***

interface WebGL2RenderingContextBase ***REMOVED***
    clearBufferfv(buffer: GLenum, drawbuffer: GLint, values: Iterable<GLfloat>, srcOffset?: GLuint): void;
    clearBufferiv(buffer: GLenum, drawbuffer: GLint, values: Iterable<GLint>, srcOffset?: GLuint): void;
    clearBufferuiv(buffer: GLenum, drawbuffer: GLint, values: Iterable<GLuint>, srcOffset?: GLuint): void;
    drawBuffers(buffers: Iterable<GLenum>): void;
    getActiveUniforms(program: WebGLProgram, uniformIndices: Iterable<GLuint>, pname: GLenum): any;
    getUniformIndices(program: WebGLProgram, uniformNames: Iterable<string>): Iterable<GLuint> | null;
    invalidateFramebuffer(target: GLenum, attachments: Iterable<GLenum>): void;
    invalidateSubFramebuffer(target: GLenum, attachments: Iterable<GLenum>, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
    transformFeedbackVaryings(program: WebGLProgram, varyings: Iterable<string>, bufferMode: GLenum): void;
    uniform1uiv(location: WebGLUniformLocation | null, data: Iterable<GLuint>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniform2uiv(location: WebGLUniformLocation | null, data: Iterable<GLuint>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniform3uiv(location: WebGLUniformLocation | null, data: Iterable<GLuint>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniform4uiv(location: WebGLUniformLocation | null, data: Iterable<GLuint>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniformMatrix2x3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniformMatrix2x4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniformMatrix3x2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniformMatrix3x4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniformMatrix4x2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniformMatrix4x3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;
    vertexAttribI4iv(index: GLuint, values: Iterable<GLint>): void;
    vertexAttribI4uiv(index: GLuint, values: Iterable<GLuint>): void;
***REMOVED***

interface WebGL2RenderingContextOverloads ***REMOVED***
    uniform1fv(location: WebGLUniformLocation | null, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniform1iv(location: WebGLUniformLocation | null, data: Iterable<GLint>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniform2fv(location: WebGLUniformLocation | null, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniform2iv(location: WebGLUniformLocation | null, data: Iterable<GLint>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniform3fv(location: WebGLUniformLocation | null, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniform3iv(location: WebGLUniformLocation | null, data: Iterable<GLint>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniform4fv(location: WebGLUniformLocation | null, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniform4iv(location: WebGLUniformLocation | null, data: Iterable<GLint>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniformMatrix3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;
    uniformMatrix4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset?: GLuint, srcLength?: GLuint): void;
***REMOVED***

interface WebGLRenderingContextBase ***REMOVED***
    vertexAttrib1fv(index: GLuint, values: Iterable<GLfloat>): void;
    vertexAttrib2fv(index: GLuint, values: Iterable<GLfloat>): void;
    vertexAttrib3fv(index: GLuint, values: Iterable<GLfloat>): void;
    vertexAttrib4fv(index: GLuint, values: Iterable<GLfloat>): void;
***REMOVED***

interface WebGLRenderingContextOverloads ***REMOVED***
    uniform1fv(location: WebGLUniformLocation | null, v: Iterable<GLfloat>): void;
    uniform1iv(location: WebGLUniformLocation | null, v: Iterable<GLint>): void;
    uniform2fv(location: WebGLUniformLocation | null, v: Iterable<GLfloat>): void;
    uniform2iv(location: WebGLUniformLocation | null, v: Iterable<GLint>): void;
    uniform3fv(location: WebGLUniformLocation | null, v: Iterable<GLfloat>): void;
    uniform3iv(location: WebGLUniformLocation | null, v: Iterable<GLint>): void;
    uniform4fv(location: WebGLUniformLocation | null, v: Iterable<GLfloat>): void;
    uniform4iv(location: WebGLUniformLocation | null, v: Iterable<GLint>): void;
    uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Iterable<GLfloat>): void;
    uniformMatrix3fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Iterable<GLfloat>): void;
    uniformMatrix4fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Iterable<GLfloat>): void;
***REMOVED***
