// Generated by LiveScript 1.6.0
(function()***REMOVED***
  var VERSION, ref$, id, map, compact, any, groupBy, partition, chars, isItNaN, keys, Obj, camelize, deepIs, closestString, nameToRaw, dasherize, naturalJoin, generateHelp, generateHelpForOption, parsedTypeCheck, parseType, parseLevn, camelizeKeys, parseString, main, toString$ = ***REMOVED******REMOVED***.toString, slice$ = [].slice, arrayFrom$ = Array.from || function(x)***REMOVED***return slice$.call(x);***REMOVED***;
  VERSION = '0.8.3';
  ref$ = require('prelude-ls'), id = ref$.id, map = ref$.map, compact = ref$.compact, any = ref$.any, groupBy = ref$.groupBy, partition = ref$.partition, chars = ref$.chars, isItNaN = ref$.isItNaN, keys = ref$.keys, Obj = ref$.Obj, camelize = ref$.camelize;
  deepIs = require('deep-is');
  ref$ = require('./util'), closestString = ref$.closestString, nameToRaw = ref$.nameToRaw, dasherize = ref$.dasherize, naturalJoin = ref$.naturalJoin;
  ref$ = require('./help'), generateHelp = ref$.generateHelp, generateHelpForOption = ref$.generateHelpForOption;
  ref$ = require('type-check'), parsedTypeCheck = ref$.parsedTypeCheck, parseType = ref$.parseType;
  parseLevn = require('levn').parsedTypeParse;
  camelizeKeys = function(obj)***REMOVED***
    var key, value, resultObj$ = ***REMOVED******REMOVED***;
    for (key in obj) ***REMOVED***
      value = obj[key];
      resultObj$[camelize(key)] = value;
    ***REMOVED***
    return resultObj$;
  ***REMOVED***;
  parseString = function(string)***REMOVED***
    var assignOpt, regex, replaceRegex, result;
    assignOpt = '--?[a-zA-Z][-a-z-A-Z0-9]*=';
    regex = RegExp('(?:' + assignOpt + ')?(?:\'(?:\\\\\'|[^\'])+\'|"(?:\\\\"|[^"])+")|[^\'"\\s]+', 'g');
    replaceRegex = RegExp('^(' + assignOpt + ')?[\'"]([\\s\\S]*)[\'"]$');
    result = map(function(it)***REMOVED***
      return it.replace(replaceRegex, '$1$2');
    ***REMOVED***, string.match(regex) || []);
    return result;
  ***REMOVED***;
  main = function(libOptions)***REMOVED***
    var opts, defaults, required, traverse, getOption, parse;
    opts = ***REMOVED******REMOVED***;
    defaults = ***REMOVED******REMOVED***;
    required = [];
    if (toString$.call(libOptions.stdout).slice(8, -1) === 'Undefined') ***REMOVED***
      libOptions.stdout = process.stdout;
    ***REMOVED***
    libOptions.positionalAnywhere == null && (libOptions.positionalAnywhere = true);
    libOptions.typeAliases == null && (libOptions.typeAliases = ***REMOVED******REMOVED***);
    libOptions.defaults == null && (libOptions.defaults = ***REMOVED******REMOVED***);
    if (libOptions.concatRepeatedArrays != null) ***REMOVED***
      libOptions.defaults.concatRepeatedArrays = libOptions.concatRepeatedArrays;
    ***REMOVED***
    if (libOptions.mergeRepeatedObjects != null) ***REMOVED***
      libOptions.defaults.mergeRepeatedObjects = libOptions.mergeRepeatedObjects;
    ***REMOVED***
    traverse = function(options)***REMOVED***
      var i$, len$, option, name, k, ref$, v, type, that, e, parsedPossibilities, parsedType, j$, len1$, possibility, rawDependsType, dependsOpts, dependsType, cra, alias, shortNames, longNames;
      if (toString$.call(options).slice(8, -1) !== 'Array') ***REMOVED***
        throw new Error('No options defined.');
      ***REMOVED***
      for (i$ = 0, len$ = options.length; i$ < len$; ++i$) ***REMOVED***
        option = options[i$];
        if (option.heading == null) ***REMOVED***
          name = option.option;
          if (opts[name] != null) ***REMOVED***
            throw new Error("Option '" + name + "' already defined.");
          ***REMOVED***
          for (k in ref$ = libOptions.defaults) ***REMOVED***
            v = ref$[k];
            option[k] == null && (option[k] = v);
          ***REMOVED***
          if (option.type === 'Boolean') ***REMOVED***
            option.boolean == null && (option.boolean = true);
          ***REMOVED***
          if (option.parsedType == null) ***REMOVED***
            if (!option.type) ***REMOVED***
              throw new Error("No type defined for option '" + name + "'.");
            ***REMOVED***
            try ***REMOVED***
              type = (that = libOptions.typeAliases[option.type]) != null
                ? that
                : option.type;
              option.parsedType = parseType(type);
            ***REMOVED*** catch (e$) ***REMOVED***
              e = e$;
              throw new Error("Option '" + name + "': Error parsing type '" + option.type + "': " + e.message);
            ***REMOVED***
          ***REMOVED***
          if (option['default']) ***REMOVED***
            try ***REMOVED***
              defaults[name] = parseLevn(option.parsedType, option['default']);
            ***REMOVED*** catch (e$) ***REMOVED***
              e = e$;
              throw new Error("Option '" + name + "': Error parsing default value '" + option['default'] + "' for type '" + option.type + "': " + e.message);
            ***REMOVED***
          ***REMOVED***
          if (option['enum'] && !option.parsedPossiblities) ***REMOVED***
            parsedPossibilities = [];
            parsedType = option.parsedType;
            for (j$ = 0, len1$ = (ref$ = option['enum']).length; j$ < len1$; ++j$) ***REMOVED***
              possibility = ref$[j$];
              try ***REMOVED***
                parsedPossibilities.push(parseLevn(parsedType, possibility));
              ***REMOVED*** catch (e$) ***REMOVED***
                e = e$;
                throw new Error("Option '" + name + "': Error parsing enum value '" + possibility + "' for type '" + option.type + "': " + e.message);
              ***REMOVED***
            ***REMOVED***
            option.parsedPossibilities = parsedPossibilities;
          ***REMOVED***
          if (that = option.dependsOn) ***REMOVED***
            if (that.length) ***REMOVED***
              ref$ = [].concat(option.dependsOn), rawDependsType = ref$[0], dependsOpts = slice$.call(ref$, 1);
              dependsType = rawDependsType.toLowerCase();
              if (dependsOpts.length) ***REMOVED***
                if (dependsType === 'and' || dependsType === 'or') ***REMOVED***
                  option.dependsOn = [dependsType].concat(arrayFrom$(dependsOpts));
                ***REMOVED*** else ***REMOVED***
                  throw new Error("Option '" + name + "': If you have more than one dependency, you must specify either 'and' or 'or'");
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                if ((ref$ = dependsType.toLowerCase()) === 'and' || ref$ === 'or') ***REMOVED***
                  option.dependsOn = null;
                ***REMOVED*** else ***REMOVED***
                  option.dependsOn = ['and', rawDependsType];
                ***REMOVED***
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              option.dependsOn = null;
            ***REMOVED***
          ***REMOVED***
          if (option.required) ***REMOVED***
            required.push(name);
          ***REMOVED***
          opts[name] = option;
          if (option.concatRepeatedArrays != null) ***REMOVED***
            cra = option.concatRepeatedArrays;
            if ('Boolean' === toString$.call(cra).slice(8, -1)) ***REMOVED***
              option.concatRepeatedArrays = [cra, ***REMOVED******REMOVED***];
            ***REMOVED*** else if (cra.length === 1) ***REMOVED***
              option.concatRepeatedArrays = [cra[0], ***REMOVED******REMOVED***];
            ***REMOVED*** else if (cra.length !== 2) ***REMOVED***
              throw new Error("Invalid setting for concatRepeatedArrays");
            ***REMOVED***
          ***REMOVED***
          if (option.alias || option.aliases) ***REMOVED***
            if (name === 'NUM') ***REMOVED***
              throw new Error("-NUM option can't have aliases.");
            ***REMOVED***
            if (option.alias) ***REMOVED***
              option.aliases == null && (option.aliases = [].concat(option.alias));
            ***REMOVED***
            for (j$ = 0, len1$ = (ref$ = option.aliases).length; j$ < len1$; ++j$) ***REMOVED***
              alias = ref$[j$];
              if (opts[alias] != null) ***REMOVED***
                throw new Error("Option '" + alias + "' already defined.");
              ***REMOVED***
              opts[alias] = option;
            ***REMOVED***
            ref$ = partition(fn$, option.aliases), shortNames = ref$[0], longNames = ref$[1];
            option.shortNames == null && (option.shortNames = shortNames);
            option.longNames == null && (option.longNames = longNames);
          ***REMOVED***
          if ((!option.aliases || option.shortNames.length === 0) && option.type === 'Boolean' && option['default'] === 'true') ***REMOVED***
            option.negateName = true;
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***
      function fn$(it)***REMOVED***
        return it.length === 1;
      ***REMOVED***
    ***REMOVED***;
    traverse(libOptions.options);
    getOption = function(name)***REMOVED***
      var opt, possiblyMeant;
      opt = opts[name];
      if (opt == null) ***REMOVED***
        possiblyMeant = closestString(keys(opts), name);
        throw new Error("Invalid option '" + nameToRaw(name) + "'" + (possiblyMeant ? " - perhaps you meant '" + nameToRaw(possiblyMeant) + "'?" : '.'));
      ***REMOVED***
      return opt;
    ***REMOVED***;
    parse = function(input, arg$)***REMOVED***
      var slice, obj, positional, restPositional, overrideRequired, prop, setValue, setDefaults, checkRequired, mutuallyExclusiveError, checkMutuallyExclusive, checkDependency, checkDependencies, checkProp, args, key, value, option, ref$, i$, len$, arg, that, result, short, argName, usingAssign, val, flags, len, j$, len1$, i, flag, opt, name, valPrime, negated, noedName;
      slice = (arg$ != null
        ? arg$
        : ***REMOVED******REMOVED***).slice;
      obj = ***REMOVED******REMOVED***;
      positional = [];
      restPositional = false;
      overrideRequired = false;
      prop = null;
      setValue = function(name, value)***REMOVED***
        var opt, val, cra, e, currentType;
        opt = getOption(name);
        if (opt.boolean) ***REMOVED***
          val = value;
        ***REMOVED*** else ***REMOVED***
          try ***REMOVED***
            cra = opt.concatRepeatedArrays;
            if (cra != null && cra[0] && cra[1].oneValuePerFlag && opt.parsedType.length === 1 && opt.parsedType[0].structure === 'array') ***REMOVED***
              val = [parseLevn(opt.parsedType[0].of, value)];
            ***REMOVED*** else ***REMOVED***
              val = parseLevn(opt.parsedType, value);
            ***REMOVED***
          ***REMOVED*** catch (e$) ***REMOVED***
            e = e$;
            throw new Error("Invalid value for option '" + name + "' - expected type " + opt.type + ", received value: " + value + ".");
          ***REMOVED***
          if (opt['enum'] && !any(function(it)***REMOVED***
            return deepIs(it, val);
          ***REMOVED***, opt.parsedPossibilities)) ***REMOVED***
            throw new Error("Option " + name + ": '" + val + "' not one of " + naturalJoin(opt['enum']) + ".");
          ***REMOVED***
        ***REMOVED***
        currentType = toString$.call(obj[name]).slice(8, -1);
        if (obj[name] != null) ***REMOVED***
          if (opt.concatRepeatedArrays != null && opt.concatRepeatedArrays[0] && currentType === 'Array') ***REMOVED***
            obj[name] = obj[name].concat(val);
          ***REMOVED*** else if (opt.mergeRepeatedObjects && currentType === 'Object') ***REMOVED***
            import$(obj[name], val);
          ***REMOVED*** else ***REMOVED***
            obj[name] = val;
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          obj[name] = val;
        ***REMOVED***
        if (opt.restPositional) ***REMOVED***
          restPositional = true;
        ***REMOVED***
        if (opt.overrideRequired) ***REMOVED***
          overrideRequired = true;
        ***REMOVED***
      ***REMOVED***;
      setDefaults = function()***REMOVED***
        var name, ref$, value;
        for (name in ref$ = defaults) ***REMOVED***
          value = ref$[name];
          if (obj[name] == null) ***REMOVED***
            obj[name] = value;
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***;
      checkRequired = function()***REMOVED***
        var i$, ref$, len$, name;
        if (overrideRequired) ***REMOVED***
          return;
        ***REMOVED***
        for (i$ = 0, len$ = (ref$ = required).length; i$ < len$; ++i$) ***REMOVED***
          name = ref$[i$];
          if (!obj[name]) ***REMOVED***
            throw new Error("Option " + nameToRaw(name) + " is required.");
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***;
      mutuallyExclusiveError = function(first, second)***REMOVED***
        throw new Error("The options " + nameToRaw(first) + " and " + nameToRaw(second) + " are mutually exclusive - you cannot use them at the same time.");
      ***REMOVED***;
      checkMutuallyExclusive = function()***REMOVED***
        var rules, i$, len$, rule, present, j$, len1$, element, k$, len2$, opt;
        rules = libOptions.mutuallyExclusive;
        if (!rules) ***REMOVED***
          return;
        ***REMOVED***
        for (i$ = 0, len$ = rules.length; i$ < len$; ++i$) ***REMOVED***
          rule = rules[i$];
          present = null;
          for (j$ = 0, len1$ = rule.length; j$ < len1$; ++j$) ***REMOVED***
            element = rule[j$];
            if (toString$.call(element).slice(8, -1) === 'Array') ***REMOVED***
              for (k$ = 0, len2$ = element.length; k$ < len2$; ++k$) ***REMOVED***
                opt = element[k$];
                if (opt in obj) ***REMOVED***
                  if (present != null) ***REMOVED***
                    mutuallyExclusiveError(present, opt);
                  ***REMOVED*** else ***REMOVED***
                    present = opt;
                    break;
                  ***REMOVED***
                ***REMOVED***
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              if (element in obj) ***REMOVED***
                if (present != null) ***REMOVED***
                  mutuallyExclusiveError(present, element);
                ***REMOVED*** else ***REMOVED***
                  present = element;
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***;
      checkDependency = function(option)***REMOVED***
        var dependsOn, type, targetOptionNames, i$, len$, targetOptionName, targetOption;
        dependsOn = option.dependsOn;
        if (!dependsOn || option.dependenciesMet) ***REMOVED***
          return true;
        ***REMOVED***
        type = dependsOn[0], targetOptionNames = slice$.call(dependsOn, 1);
        for (i$ = 0, len$ = targetOptionNames.length; i$ < len$; ++i$) ***REMOVED***
          targetOptionName = targetOptionNames[i$];
          targetOption = obj[targetOptionName];
          if (targetOption && checkDependency(targetOption)) ***REMOVED***
            if (type === 'or') ***REMOVED***
              return true;
            ***REMOVED***
          ***REMOVED*** else if (type === 'and') ***REMOVED***
            throw new Error("The option '" + option.option + "' did not have its dependencies met.");
          ***REMOVED***
        ***REMOVED***
        if (type === 'and') ***REMOVED***
          return true;
        ***REMOVED*** else ***REMOVED***
          throw new Error("The option '" + option.option + "' did not meet any of its dependencies.");
        ***REMOVED***
      ***REMOVED***;
      checkDependencies = function()***REMOVED***
        var name;
        for (name in obj) ***REMOVED***
          checkDependency(opts[name]);
        ***REMOVED***
      ***REMOVED***;
      checkProp = function()***REMOVED***
        if (prop) ***REMOVED***
          throw new Error("Value for '" + prop + "' of type '" + getOption(prop).type + "' required.");
        ***REMOVED***
      ***REMOVED***;
      switch (toString$.call(input).slice(8, -1)) ***REMOVED***
      case 'String':
        args = parseString(input.slice(slice != null ? slice : 0));
        break;
      case 'Array':
        args = input.slice(slice != null ? slice : 2);
        break;
      case 'Object':
        obj = ***REMOVED******REMOVED***;
        for (key in input) ***REMOVED***
          value = input[key];
          if (key !== '_') ***REMOVED***
            option = getOption(dasherize(key));
            if (parsedTypeCheck(option.parsedType, value)) ***REMOVED***
              obj[option.option] = value;
            ***REMOVED*** else ***REMOVED***
              throw new Error("Option '" + option.option + "': Invalid type for '" + value + "' - expected type '" + option.type + "'.");
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
        checkMutuallyExclusive();
        checkDependencies();
        setDefaults();
        checkRequired();
        return ref$ = camelizeKeys(obj), ref$._ = input._ || [], ref$;
      default:
        throw new Error("Invalid argument to 'parse': " + input + ".");
      ***REMOVED***
      for (i$ = 0, len$ = args.length; i$ < len$; ++i$) ***REMOVED***
        arg = args[i$];
        if (arg === '--') ***REMOVED***
          restPositional = true;
        ***REMOVED*** else if (restPositional) ***REMOVED***
          positional.push(arg);
        ***REMOVED*** else ***REMOVED***
          if (that = arg.match(/^(--?)([a-zA-Z][-a-zA-Z0-9]*)(=)?(.*)?$/)) ***REMOVED***
            result = that;
            checkProp();
            short = result[1].length === 1;
            argName = result[2];
            usingAssign = result[3] != null;
            val = result[4];
            if (usingAssign && val == null) ***REMOVED***
              throw new Error("No value for '" + argName + "' specified.");
            ***REMOVED***
            if (short) ***REMOVED***
              flags = chars(argName);
              len = flags.length;
              for (j$ = 0, len1$ = flags.length; j$ < len1$; ++j$) ***REMOVED***
                i = j$;
                flag = flags[j$];
                opt = getOption(flag);
                name = opt.option;
                if (restPositional) ***REMOVED***
                  positional.push(flag);
                ***REMOVED*** else if (i === len - 1) ***REMOVED***
                  if (usingAssign) ***REMOVED***
                    valPrime = opt.boolean ? parseLevn([***REMOVED***
                      type: 'Boolean'
                    ***REMOVED***], val) : val;
                    setValue(name, valPrime);
                  ***REMOVED*** else if (opt.boolean) ***REMOVED***
                    setValue(name, true);
                  ***REMOVED*** else ***REMOVED***
                    prop = name;
                  ***REMOVED***
                ***REMOVED*** else if (opt.boolean) ***REMOVED***
                  setValue(name, true);
                ***REMOVED*** else ***REMOVED***
                  throw new Error("Can't set argument '" + flag + "' when not last flag in a group of short flags.");
                ***REMOVED***
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              negated = false;
              if (that = argName.match(/^no-(.+)$/)) ***REMOVED***
                negated = true;
                noedName = that[1];
                opt = getOption(noedName);
              ***REMOVED*** else ***REMOVED***
                opt = getOption(argName);
              ***REMOVED***
              name = opt.option;
              if (opt.boolean) ***REMOVED***
                valPrime = usingAssign ? parseLevn([***REMOVED***
                  type: 'Boolean'
                ***REMOVED***], val) : true;
                if (negated) ***REMOVED***
                  setValue(name, !valPrime);
                ***REMOVED*** else ***REMOVED***
                  setValue(name, valPrime);
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                if (negated) ***REMOVED***
                  throw new Error("Only use 'no-' prefix for Boolean options, not with '" + noedName + "'.");
                ***REMOVED***
                if (usingAssign) ***REMOVED***
                  setValue(name, val);
                ***REMOVED*** else ***REMOVED***
                  prop = name;
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***
          ***REMOVED*** else if (that = arg.match(/^-([0-9]+(?:\.[0-9]+)?)$/)) ***REMOVED***
            opt = opts.NUM;
            if (!opt) ***REMOVED***
              throw new Error('No -NUM option defined.');
            ***REMOVED***
            setValue(opt.option, that[1]);
          ***REMOVED*** else ***REMOVED***
            if (prop) ***REMOVED***
              setValue(prop, arg);
              prop = null;
            ***REMOVED*** else ***REMOVED***
              positional.push(arg);
              if (!libOptions.positionalAnywhere) ***REMOVED***
                restPositional = true;
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***
      checkProp();
      checkMutuallyExclusive();
      checkDependencies();
      setDefaults();
      checkRequired();
      return ref$ = camelizeKeys(obj), ref$._ = positional, ref$;
    ***REMOVED***;
    return ***REMOVED***
      parse: parse,
      parseArgv: function(it)***REMOVED***
        return parse(it, ***REMOVED***
          slice: 2
        ***REMOVED***);
      ***REMOVED***,
      generateHelp: generateHelp(libOptions),
      generateHelpForOption: generateHelpForOption(getOption, libOptions)
    ***REMOVED***;
  ***REMOVED***;
  main.VERSION = VERSION;
  module.exports = main;
  function import$(obj, src)***REMOVED***
    var own = ***REMOVED******REMOVED***.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  ***REMOVED***
***REMOVED***).call(this);
