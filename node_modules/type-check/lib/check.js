// Generated by LiveScript 1.4.0
(function()***REMOVED***
  var ref$, any, all, isItNaN, types, defaultType, customTypes, toString$ = ***REMOVED******REMOVED***.toString;
  ref$ = require('prelude-ls'), any = ref$.any, all = ref$.all, isItNaN = ref$.isItNaN;
  types = ***REMOVED***
    Number: ***REMOVED***
      typeOf: 'Number',
      validate: function(it)***REMOVED***
        return !isItNaN(it);
      ***REMOVED***
    ***REMOVED***,
    NaN: ***REMOVED***
      typeOf: 'Number',
      validate: isItNaN
    ***REMOVED***,
    Int: ***REMOVED***
      typeOf: 'Number',
      validate: function(it)***REMOVED***
        return !isItNaN(it) && it % 1 === 0;
      ***REMOVED***
    ***REMOVED***,
    Float: ***REMOVED***
      typeOf: 'Number',
      validate: function(it)***REMOVED***
        return !isItNaN(it);
      ***REMOVED***
    ***REMOVED***,
    Date: ***REMOVED***
      typeOf: 'Date',
      validate: function(it)***REMOVED***
        return !isItNaN(it.getTime());
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***;
  defaultType = ***REMOVED***
    array: 'Array',
    tuple: 'Array'
  ***REMOVED***;
  function checkArray(input, type)***REMOVED***
    return all(function(it)***REMOVED***
      return checkMultiple(it, type.of);
    ***REMOVED***, input);
  ***REMOVED***
  function checkTuple(input, type)***REMOVED***
    var i, i$, ref$, len$, types;
    i = 0;
    for (i$ = 0, len$ = (ref$ = type.of).length; i$ < len$; ++i$) ***REMOVED***
      types = ref$[i$];
      if (!checkMultiple(input[i], types)) ***REMOVED***
        return false;
      ***REMOVED***
      i++;
    ***REMOVED***
    return input.length <= i;
  ***REMOVED***
  function checkFields(input, type)***REMOVED***
    var inputKeys, numInputKeys, k, numOfKeys, key, ref$, types;
    inputKeys = ***REMOVED******REMOVED***;
    numInputKeys = 0;
    for (k in input) ***REMOVED***
      inputKeys[k] = true;
      numInputKeys++;
    ***REMOVED***
    numOfKeys = 0;
    for (key in ref$ = type.of) ***REMOVED***
      types = ref$[key];
      if (!checkMultiple(input[key], types)) ***REMOVED***
        return false;
      ***REMOVED***
      if (inputKeys[key]) ***REMOVED***
        numOfKeys++;
      ***REMOVED***
    ***REMOVED***
    return type.subset || numInputKeys === numOfKeys;
  ***REMOVED***
  function checkStructure(input, type)***REMOVED***
    if (!(input instanceof Object)) ***REMOVED***
      return false;
    ***REMOVED***
    switch (type.structure) ***REMOVED***
    case 'fields':
      return checkFields(input, type);
    case 'array':
      return checkArray(input, type);
    case 'tuple':
      return checkTuple(input, type);
    ***REMOVED***
  ***REMOVED***
  function check(input, typeObj)***REMOVED***
    var type, structure, setting, that;
    type = typeObj.type, structure = typeObj.structure;
    if (type) ***REMOVED***
      if (type === '*') ***REMOVED***
        return true;
      ***REMOVED***
      setting = customTypes[type] || types[type];
      if (setting) ***REMOVED***
        return setting.typeOf === toString$.call(input).slice(8, -1) && setting.validate(input);
      ***REMOVED*** else ***REMOVED***
        return type === toString$.call(input).slice(8, -1) && (!structure || checkStructure(input, typeObj));
      ***REMOVED***
    ***REMOVED*** else if (structure) ***REMOVED***
      if (that = defaultType[structure]) ***REMOVED***
        if (that !== toString$.call(input).slice(8, -1)) ***REMOVED***
          return false;
        ***REMOVED***
      ***REMOVED***
      return checkStructure(input, typeObj);
    ***REMOVED*** else ***REMOVED***
      throw new Error("No type defined. Input: " + input + ".");
    ***REMOVED***
  ***REMOVED***
  function checkMultiple(input, types)***REMOVED***
    if (toString$.call(types).slice(8, -1) !== 'Array') ***REMOVED***
      throw new Error("Types must be in an array. Input: " + input + ".");
    ***REMOVED***
    return any(function(it)***REMOVED***
      return check(input, it);
    ***REMOVED***, types);
  ***REMOVED***
  module.exports = function(parsedType, input, options)***REMOVED***
    options == null && (options = ***REMOVED******REMOVED***);
    customTypes = options.customTypes || ***REMOVED******REMOVED***;
    return checkMultiple(input, parsedType);
  ***REMOVED***;
***REMOVED***).call(this);
