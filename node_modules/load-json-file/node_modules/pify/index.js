'use strict';

const processFn = (fn, options) => function (...args) ***REMOVED***
	const P = options.promiseModule;

	return new P((resolve, reject) => ***REMOVED***
		if (options.multiArgs) ***REMOVED***
			args.push((...result) => ***REMOVED***
				if (options.errorFirst) ***REMOVED***
					if (result[0]) ***REMOVED***
						reject(result);
					***REMOVED*** else ***REMOVED***
						result.shift();
						resolve(result);
					***REMOVED***
				***REMOVED*** else ***REMOVED***
					resolve(result);
				***REMOVED***
			***REMOVED***);
		***REMOVED*** else if (options.errorFirst) ***REMOVED***
			args.push((error, result) => ***REMOVED***
				if (error) ***REMOVED***
					reject(error);
				***REMOVED*** else ***REMOVED***
					resolve(result);
				***REMOVED***
			***REMOVED***);
		***REMOVED*** else ***REMOVED***
			args.push(resolve);
		***REMOVED***

		fn.apply(this, args);
	***REMOVED***);
***REMOVED***;

module.exports = (input, options) => ***REMOVED***
	options = Object.assign(***REMOVED***
		exclude: [/.+(Sync|Stream)$/],
		errorFirst: true,
		promiseModule: Promise
	***REMOVED***, options);

	const objType = typeof input;
	if (!(input !== null && (objType === 'object' || objType === 'function'))) ***REMOVED***
		throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`$***REMOVED***input === null ? 'null' : objType***REMOVED***\``);
	***REMOVED***

	const filter = key => ***REMOVED***
		const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);
		return options.include ? options.include.some(match) : !options.exclude.some(match);
	***REMOVED***;

	let ret;
	if (objType === 'function') ***REMOVED***
		ret = function (...args) ***REMOVED***
			return options.excludeMain ? input(...args) : processFn(input, options).apply(this, args);
		***REMOVED***;
	***REMOVED*** else ***REMOVED***
		ret = Object.create(Object.getPrototypeOf(input));
	***REMOVED***

	for (const key in input) ***REMOVED*** // eslint-disable-line guard-for-in
		const property = input[key];
		ret[key] = typeof property === 'function' && filter(key) ? processFn(property, options) : property;
	***REMOVED***

	return ret;
***REMOVED***;
