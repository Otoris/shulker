'use strict';
var ***REMOVED*** fromEvent ***REMOVED*** = require('rxjs');
var ***REMOVED*** filter, map, share ***REMOVED*** = require('rxjs/operators');

function normalizeKeypressEvents(value, key) ***REMOVED***
  return ***REMOVED*** value: value, key: key || ***REMOVED******REMOVED*** ***REMOVED***;
***REMOVED***

module.exports = function(rl) ***REMOVED***
  var keypress = fromEvent(rl.input, 'keypress', normalizeKeypressEvents)
    // Ignore `enter` key. On the readline, we only care about the `line` event.
    .pipe(filter((***REMOVED*** key ***REMOVED***) => key.name !== 'enter' && key.name !== 'return'));

  return ***REMOVED***
    line: fromEvent(rl, 'line'),
    keypress: keypress,

    normalizedUpKey: keypress.pipe(
      filter(
        (***REMOVED*** key ***REMOVED***) =>
          key.name === 'up' || key.name === 'k' || (key.name === 'p' && key.ctrl)
      ),
      share()
    ),

    normalizedDownKey: keypress.pipe(
      filter(
        (***REMOVED*** key ***REMOVED***) =>
          key.name === 'down' || key.name === 'j' || (key.name === 'n' && key.ctrl)
      ),
      share()
    ),

    numberKey: keypress.pipe(
      filter(e => e.value && '123456789'.indexOf(e.value) >= 0),
      map(e => Number(e.value)),
      share()
    ),

    spaceKey: keypress.pipe(
      filter((***REMOVED*** key ***REMOVED***) => key && key.name === 'space'),
      share()
    ),
    aKey: keypress.pipe(
      filter((***REMOVED*** key ***REMOVED***) => key && key.name === 'a'),
      share()
    ),
    iKey: keypress.pipe(
      filter((***REMOVED*** key ***REMOVED***) => key && key.name === 'i'),
      share()
    )
  ***REMOVED***;
***REMOVED***;
