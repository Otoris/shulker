'use strict';
var assert = require('assert');
var _ = require('lodash');
var Separator = require('./separator');
var Choice = require('./choice');

/**
 * Choices collection
 * Collection of multiple `choice` object
 * @constructor
 * @param ***REMOVED***Array***REMOVED*** choices  All `choice` to keep in the collection
 */

module.exports = class Choices ***REMOVED***
  constructor(choices, answers) ***REMOVED***
    this.choices = choices.map(val => ***REMOVED***
      if (val.type === 'separator') ***REMOVED***
        if (!(val instanceof Separator)) ***REMOVED***
          val = new Separator(val.line);
        ***REMOVED***

        return val;
      ***REMOVED***

      return new Choice(val, answers);
    ***REMOVED***);

    this.realChoices = this.choices
      .filter(Separator.exclude)
      .filter(item => !item.disabled);

    Object.defineProperty(this, 'length', ***REMOVED***
      get() ***REMOVED***
        return this.choices.length;
      ***REMOVED***,
      set(val) ***REMOVED***
        this.choices.length = val;
      ***REMOVED***
    ***REMOVED***);

    Object.defineProperty(this, 'realLength', ***REMOVED***
      get() ***REMOVED***
        return this.realChoices.length;
      ***REMOVED***,
      set() ***REMOVED***
        throw new Error('Cannot set `realLength` of a Choices collection');
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***

  /**
   * Get a valid choice from the collection
   * @param  ***REMOVED***Number***REMOVED*** selector  The selected choice index
   * @return ***REMOVED***Choice|Undefined***REMOVED*** Return the matched choice or undefined
   */

  getChoice(selector) ***REMOVED***
    assert(_.isNumber(selector));
    return this.realChoices[selector];
  ***REMOVED***

  /**
   * Get a raw element from the collection
   * @param  ***REMOVED***Number***REMOVED*** selector  The selected index value
   * @return ***REMOVED***Choice|Undefined***REMOVED*** Return the matched choice or undefined
   */

  get(selector) ***REMOVED***
    assert(_.isNumber(selector));
    return this.choices[selector];
  ***REMOVED***

  /**
   * Match the valid choices against a where clause
   * @param  ***REMOVED***Object***REMOVED*** whereClause Lodash `where` clause
   * @return ***REMOVED***Array***REMOVED***              Matching choices or empty array
   */

  where(whereClause) ***REMOVED***
    return _.filter(this.realChoices, whereClause);
  ***REMOVED***

  /**
   * Pluck a particular key from the choices
   * @param  ***REMOVED***String***REMOVED*** propertyName Property name to select
   * @return ***REMOVED***Array***REMOVED***               Selected properties
   */

  pluck(propertyName) ***REMOVED***
    return _.map(this.realChoices, propertyName);
  ***REMOVED***

  // Expose usual Array methods
  indexOf() ***REMOVED***
    return this.choices.indexOf.apply(this.choices, arguments);
  ***REMOVED***

  forEach() ***REMOVED***
    return this.choices.forEach.apply(this.choices, arguments);
  ***REMOVED***

  filter() ***REMOVED***
    return this.choices.filter.apply(this.choices, arguments);
  ***REMOVED***

  find(func) ***REMOVED***
    return _.find(this.choices, func);
  ***REMOVED***

  push() ***REMOVED***
    var objs = _.map(arguments, val => new Choice(val));
    this.choices.push.apply(this.choices, objs);
    this.realChoices = this.choices.filter(Separator.exclude);
    return this.choices;
  ***REMOVED***
***REMOVED***;
