'use strict';
/**
 * `rawlist` type prompt
 */

var _ = require('lodash');
var chalk = require('chalk');
var ***REMOVED*** map, takeUntil ***REMOVED*** = require('rxjs/operators');
var Base = require('./base');
var Separator = require('../objects/separator');
var observe = require('../utils/events');
var Paginator = require('../utils/paginator');

class ExpandPrompt extends Base ***REMOVED***
  constructor(questions, rl, answers) ***REMOVED***
    super(questions, rl, answers);

    if (!this.opt.choices) ***REMOVED***
      this.throwParamError('choices');
    ***REMOVED***

    this.validateChoices(this.opt.choices);

    // Add the default `help` (/expand) option
    this.opt.choices.push(***REMOVED***
      key: 'h',
      name: 'Help, list all options',
      value: 'help'
    ***REMOVED***);

    this.opt.validate = choice => ***REMOVED***
      if (choice == null) ***REMOVED***
        return 'Please enter a valid command';
      ***REMOVED***

      return choice !== 'help';
    ***REMOVED***;

    // Setup the default string (capitalize the default key)
    this.opt.default = this.generateChoicesString(this.opt.choices, this.opt.default);

    this.paginator = new Paginator(this.screen);
  ***REMOVED***

  /**
   * Start the Inquiry session
   * @param  ***REMOVED***Function***REMOVED*** cb      Callback when prompt is done
   * @return ***REMOVED***this***REMOVED***
   */

  _run(cb) ***REMOVED***
    this.done = cb;

    // Save user answer and update prompt to show selected option.
    var events = observe(this.rl);
    var validation = this.handleSubmitEvents(
      events.line.pipe(map(this.getCurrentValue.bind(this)))
    );
    validation.success.forEach(this.onSubmit.bind(this));
    validation.error.forEach(this.onError.bind(this));
    this.keypressObs = events.keypress
      .pipe(takeUntil(validation.success))
      .forEach(this.onKeypress.bind(this));

    // Init the prompt
    this.render();

    return this;
  ***REMOVED***

  /**
   * Render the prompt to screen
   * @return ***REMOVED***ExpandPrompt***REMOVED*** self
   */

  render(error, hint) ***REMOVED***
    var message = this.getQuestion();
    var bottomContent = '';

    if (this.status === 'answered') ***REMOVED***
      message += chalk.cyan(this.answer);
    ***REMOVED*** else if (this.status === 'expanded') ***REMOVED***
      var choicesStr = renderChoices(this.opt.choices, this.selectedKey);
      message += this.paginator.paginate(choicesStr, this.selectedKey, this.opt.pageSize);
      message += '\n  Answer: ';
    ***REMOVED***

    message += this.rl.line;

    if (error) ***REMOVED***
      bottomContent = chalk.red('>> ') + error;
    ***REMOVED***

    if (hint) ***REMOVED***
      bottomContent = chalk.cyan('>> ') + hint;
    ***REMOVED***

    this.screen.render(message, bottomContent);
  ***REMOVED***

  getCurrentValue(input) ***REMOVED***
    if (!input) ***REMOVED***
      input = this.rawDefault;
    ***REMOVED***

    var selected = this.opt.choices.where(***REMOVED*** key: input.toLowerCase().trim() ***REMOVED***)[0];
    if (!selected) ***REMOVED***
      return null;
    ***REMOVED***

    return selected.value;
  ***REMOVED***

  /**
   * Generate the prompt choices string
   * @return ***REMOVED***String***REMOVED***  Choices string
   */

  getChoices() ***REMOVED***
    var output = '';

    this.opt.choices.forEach(choice => ***REMOVED***
      output += '\n  ';

      if (choice.type === 'separator') ***REMOVED***
        output += ' ' + choice;
        return;
      ***REMOVED***

      var choiceStr = choice.key + ') ' + choice.name;
      if (this.selectedKey === choice.key) ***REMOVED***
        choiceStr = chalk.cyan(choiceStr);
      ***REMOVED***

      output += choiceStr;
    ***REMOVED***);

    return output;
  ***REMOVED***

  onError(state) ***REMOVED***
    if (state.value === 'help') ***REMOVED***
      this.selectedKey = '';
      this.status = 'expanded';
      this.render();
      return;
    ***REMOVED***

    this.render(state.isValid);
  ***REMOVED***

  /**
   * When user press `enter` key
   */

  onSubmit(state) ***REMOVED***
    this.status = 'answered';
    var choice = this.opt.choices.where(***REMOVED*** value: state.value ***REMOVED***)[0];
    this.answer = choice.short || choice.name;

    // Re-render prompt
    this.render();
    this.screen.done();
    this.done(state.value);
  ***REMOVED***

  /**
   * When user press a key
   */

  onKeypress() ***REMOVED***
    this.selectedKey = this.rl.line.toLowerCase();
    var selected = this.opt.choices.where(***REMOVED*** key: this.selectedKey ***REMOVED***)[0];
    if (this.status === 'expanded') ***REMOVED***
      this.render();
    ***REMOVED*** else ***REMOVED***
      this.render(null, selected ? selected.name : null);
    ***REMOVED***
  ***REMOVED***

  /**
   * Validate the choices
   * @param ***REMOVED***Array***REMOVED*** choices
   */

  validateChoices(choices) ***REMOVED***
    var formatError;
    var errors = [];
    var keymap = ***REMOVED******REMOVED***;
    choices.filter(Separator.exclude).forEach(choice => ***REMOVED***
      if (!choice.key || choice.key.length !== 1) ***REMOVED***
        formatError = true;
      ***REMOVED***

      if (keymap[choice.key]) ***REMOVED***
        errors.push(choice.key);
      ***REMOVED***

      keymap[choice.key] = true;
      choice.key = String(choice.key).toLowerCase();
    ***REMOVED***);

    if (formatError) ***REMOVED***
      throw new Error(
        'Format error: `key` param must be a single letter and is required.'
      );
    ***REMOVED***

    if (keymap.h) ***REMOVED***
      throw new Error(
        'Reserved key error: `key` param cannot be `h` - this value is reserved.'
      );
    ***REMOVED***

    if (errors.length) ***REMOVED***
      throw new Error(
        'Duplicate key error: `key` param must be unique. Duplicates: ' +
          _.uniq(errors).join(', ')
      );
    ***REMOVED***
  ***REMOVED***

  /**
   * Generate a string out of the choices keys
   * @param  ***REMOVED***Array***REMOVED***  choices
   * @param  ***REMOVED***Number|String***REMOVED*** default - the choice index or name to capitalize
   * @return ***REMOVED***String***REMOVED*** The rendered choices key string
   */
  generateChoicesString(choices, defaultChoice) ***REMOVED***
    var defIndex = choices.realLength - 1;
    if (_.isNumber(defaultChoice) && this.opt.choices.getChoice(defaultChoice)) ***REMOVED***
      defIndex = defaultChoice;
    ***REMOVED*** else if (_.isString(defaultChoice)) ***REMOVED***
      let index = _.findIndex(
        choices.realChoices,
        (***REMOVED*** value ***REMOVED***) => value === defaultChoice
      );
      defIndex = index === -1 ? defIndex : index;
    ***REMOVED***

    var defStr = this.opt.choices.pluck('key');
    this.rawDefault = defStr[defIndex];
    defStr[defIndex] = String(defStr[defIndex]).toUpperCase();
    return defStr.join('');
  ***REMOVED***
***REMOVED***

/**
 * Function for rendering checkbox choices
 * @param  ***REMOVED***String***REMOVED*** pointer Selected key
 * @return ***REMOVED***String***REMOVED***         Rendered content
 */

function renderChoices(choices, pointer) ***REMOVED***
  var output = '';

  choices.forEach(choice => ***REMOVED***
    output += '\n  ';

    if (choice.type === 'separator') ***REMOVED***
      output += ' ' + choice;
      return;
    ***REMOVED***

    var choiceStr = choice.key + ') ' + choice.name;
    if (pointer === choice.key) ***REMOVED***
      choiceStr = chalk.cyan(choiceStr);
    ***REMOVED***

    output += choiceStr;
  ***REMOVED***);

  return output;
***REMOVED***

module.exports = ExpandPrompt;
