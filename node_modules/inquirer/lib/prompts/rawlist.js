'use strict';
/**
 * `rawlist` type prompt
 */

var _ = require('lodash');
var chalk = require('chalk');
var ***REMOVED*** map, takeUntil ***REMOVED*** = require('rxjs/operators');
var Base = require('./base');
var Separator = require('../objects/separator');
var observe = require('../utils/events');
var Paginator = require('../utils/paginator');

class RawListPrompt extends Base ***REMOVED***
  constructor(questions, rl, answers) ***REMOVED***
    super(questions, rl, answers);

    if (!this.opt.choices) ***REMOVED***
      this.throwParamError('choices');
    ***REMOVED***

    this.opt.validChoices = this.opt.choices.filter(Separator.exclude);

    this.selected = 0;
    this.rawDefault = 0;

    _.extend(this.opt, ***REMOVED***
      validate: function(val) ***REMOVED***
        return val != null;
      ***REMOVED***
    ***REMOVED***);

    var def = this.opt.default;
    if (_.isNumber(def) && def >= 0 && def < this.opt.choices.realLength) ***REMOVED***
      this.selected = def;
      this.rawDefault = def;
    ***REMOVED*** else if (!_.isNumber(def) && def != null) ***REMOVED***
      let index = _.findIndex(this.opt.choices.realChoices, (***REMOVED*** value ***REMOVED***) => value === def);
      let safeIndex = Math.max(index, 0);
      this.selected = safeIndex;
      this.rawDefault = safeIndex;
    ***REMOVED***

    // Make sure no default is set (so it won't be printed)
    this.opt.default = null;

    this.paginator = new Paginator();
  ***REMOVED***

  /**
   * Start the Inquiry session
   * @param  ***REMOVED***Function***REMOVED*** cb      Callback when prompt is done
   * @return ***REMOVED***this***REMOVED***
   */

  _run(cb) ***REMOVED***
    this.done = cb;

    // Once user confirm (enter key)
    var events = observe(this.rl);
    var submit = events.line.pipe(map(this.getCurrentValue.bind(this)));

    var validation = this.handleSubmitEvents(submit);
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));

    events.keypress
      .pipe(takeUntil(validation.success))
      .forEach(this.onKeypress.bind(this));
    events.normalizedUpKey.pipe(takeUntil(events.line)).forEach(this.onUpKey.bind(this));
    events.normalizedDownKey
      .pipe(takeUntil(events.line))
      .forEach(this.onDownKey.bind(this));

    // Init the prompt
    this.render();

    return this;
  ***REMOVED***

  /**
   * Render the prompt to screen
   * @return ***REMOVED***RawListPrompt***REMOVED*** self
   */

  render(error) ***REMOVED***
    // Render question
    var message = this.getQuestion();
    var bottomContent = '';

    if (this.status === 'answered') ***REMOVED***
      message += chalk.cyan(this.answer);
    ***REMOVED*** else ***REMOVED***
      var choicesStr = renderChoices(this.opt.choices, this.selected);
      message +=
        '\n' + this.paginator.paginate(choicesStr, this.selected, this.opt.pageSize);
      message += '\n  Answer: ';
    ***REMOVED***

    message += this.rl.line;

    if (error) ***REMOVED***
      bottomContent = '\n' + chalk.red('>> ') + error;
    ***REMOVED***

    this.screen.render(message, bottomContent);
  ***REMOVED***

  /**
   * When user press `enter` key
   */

  getCurrentValue(index) ***REMOVED***
    if (index == null || index === '') ***REMOVED***
      index = this.rawDefault;
    ***REMOVED*** else ***REMOVED***
      index -= 1;
    ***REMOVED***

    var choice = this.opt.choices.getChoice(index);
    return choice ? choice.value : null;
  ***REMOVED***

  onEnd(state) ***REMOVED***
    this.status = 'answered';
    this.answer = state.value;

    // Re-render prompt
    this.render();

    this.screen.done();
    this.done(state.value);
  ***REMOVED***

  onError() ***REMOVED***
    this.render('Please enter a valid index');
  ***REMOVED***

  /**
   * When user press a key
   */

  onKeypress() ***REMOVED***
    var index = this.rl.line.length ? Number(this.rl.line) - 1 : 0;

    if (this.opt.choices.getChoice(index)) ***REMOVED***
      this.selected = index;
    ***REMOVED*** else ***REMOVED***
      this.selected = undefined;
    ***REMOVED***

    this.render();
  ***REMOVED***

  /**
   * When user press up key
   */

  onUpKey() ***REMOVED***
    this.onArrowKey('up');
  ***REMOVED***

  /**
   * When user press down key
   */

  onDownKey() ***REMOVED***
    this.onArrowKey('down');
  ***REMOVED***

  /**
   * When user press up or down key
   * @param ***REMOVED***String***REMOVED*** type Arrow type: up or down
   */

  onArrowKey(type) ***REMOVED***
    var index = this.rl.line.length ? Number(this.rl.line) - 1 : 0;
    if (type === 'up') index = index === 0 ? this.opt.choices.length - 1 : index - 1;
    else index = index === this.opt.choices.length - 1 ? 0 : index + 1;
    this.rl.line = String(index + 1);
    this.onKeypress();
  ***REMOVED***
***REMOVED***

/**
 * Function for rendering list choices
 * @param  ***REMOVED***Number***REMOVED*** pointer Position of the pointer
 * @return ***REMOVED***String***REMOVED***         Rendered content
 */

function renderChoices(choices, pointer) ***REMOVED***
  var output = '';
  var separatorOffset = 0;

  choices.forEach(function(choice, i) ***REMOVED***
    output += '\n  ';

    if (choice.type === 'separator') ***REMOVED***
      separatorOffset++;
      output += ' ' + choice;
      return;
    ***REMOVED***

    var index = i - separatorOffset;
    var display = index + 1 + ') ' + choice.name;
    if (index === pointer) ***REMOVED***
      display = chalk.cyan(display);
    ***REMOVED***

    output += display;
  ***REMOVED***);

  return output;
***REMOVED***

module.exports = RawListPrompt;
