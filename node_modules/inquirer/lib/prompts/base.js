'use strict';
/**
 * Base prompt implementation
 * Should be extended by prompt types.
 */

var _ = require('lodash');
var chalk = require('chalk');
var runAsync = require('run-async');
var ***REMOVED*** filter, flatMap, share, take, takeUntil ***REMOVED*** = require('rxjs/operators');
var Choices = require('../objects/choices');
var ScreenManager = require('../utils/screen-manager');

class Prompt ***REMOVED***
  constructor(question, rl, answers) ***REMOVED***
    // Setup instance defaults property
    _.assign(this, ***REMOVED***
      answers: answers,
      status: 'pending'
    ***REMOVED***);

    // Set defaults prompt options
    this.opt = _.defaults(_.clone(question), ***REMOVED***
      validate: () => true,
      filter: val => val,
      when: () => true,
      suffix: '',
      prefix: chalk.green('?')
    ***REMOVED***);

    // Make sure name is present
    if (!this.opt.name) ***REMOVED***
      this.throwParamError('name');
    ***REMOVED***

    // Set default message if no message defined
    if (!this.opt.message) ***REMOVED***
      this.opt.message = this.opt.name + ':';
    ***REMOVED***

    // Normalize choices
    if (Array.isArray(this.opt.choices)) ***REMOVED***
      this.opt.choices = new Choices(this.opt.choices, answers);
    ***REMOVED***

    this.rl = rl;
    this.screen = new ScreenManager(this.rl);
  ***REMOVED***

  /**
   * Start the Inquiry session and manage output value filtering
   * @return ***REMOVED***Promise***REMOVED***
   */

  run() ***REMOVED***
    return new Promise(resolve => ***REMOVED***
      this._run(value => resolve(value));
    ***REMOVED***);
  ***REMOVED***

  // Default noop (this one should be overwritten in prompts)
  _run(cb) ***REMOVED***
    cb();
  ***REMOVED***

  /**
   * Throw an error telling a required parameter is missing
   * @param  ***REMOVED***String***REMOVED*** name Name of the missing param
   * @return ***REMOVED***Throw Error***REMOVED***
   */

  throwParamError(name) ***REMOVED***
    throw new Error('You must provide a `' + name + '` parameter');
  ***REMOVED***

  /**
   * Called when the UI closes. Override to do any specific cleanup necessary
   */
  close() ***REMOVED***
    this.screen.releaseCursor();
  ***REMOVED***

  /**
   * Run the provided validation method each time a submit event occur.
   * @param  ***REMOVED***Rx.Observable***REMOVED*** submit - submit event flow
   * @return ***REMOVED***Object***REMOVED***        Object containing two observables: `success` and `error`
   */
  handleSubmitEvents(submit) ***REMOVED***
    var self = this;
    var validate = runAsync(this.opt.validate);
    var asyncFilter = runAsync(this.opt.filter);
    var validation = submit.pipe(
      flatMap(value =>
        asyncFilter(value, self.answers).then(
          filteredValue =>
            validate(filteredValue, self.answers).then(
              isValid => (***REMOVED*** isValid: isValid, value: filteredValue ***REMOVED***),
              err => (***REMOVED*** isValid: err ***REMOVED***)
            ),
          err => (***REMOVED*** isValid: err ***REMOVED***)
        )
      ),
      share()
    );

    var success = validation.pipe(
      filter(state => state.isValid === true),
      take(1)
    );
    var error = validation.pipe(
      filter(state => state.isValid !== true),
      takeUntil(success)
    );

    return ***REMOVED***
      success: success,
      error: error
    ***REMOVED***;
  ***REMOVED***

  /**
   * Generate the prompt question string
   * @return ***REMOVED***String***REMOVED*** prompt question string
   */

  getQuestion() ***REMOVED***
    var message =
      this.opt.prefix +
      ' ' +
      chalk.bold(this.opt.message) +
      this.opt.suffix +
      chalk.reset(' ');

    // Append the default if available, and if question isn't answered
    if (this.opt.default != null && this.status !== 'answered') ***REMOVED***
      // If default password is supplied, hide it
      if (this.opt.type === 'password') ***REMOVED***
        message += chalk.italic.dim('[hidden] ');
      ***REMOVED*** else ***REMOVED***
        message += chalk.dim('(' + this.opt.default + ') ');
      ***REMOVED***
    ***REMOVED***

    return message;
  ***REMOVED***
***REMOVED***

module.exports = Prompt;
