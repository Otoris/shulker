module.exports = deglob

var findRoot = require('find-root')
var fs = require('fs')
var glob = require('glob')
var ignorePkg = require('ignore')
var os = require('os')
var parallel = require('run-parallel')
var path = require('path')
var pkgConfig = require('pkg-config')
var uniq = require('uniq')

function deglob (files, opts, cb) ***REMOVED***
  if (typeof opts === 'function') return deglob(files, null, opts)
  opts = parseOpts(opts)

  if (typeof files === 'string') files = [files]
  if (files.length === 0) return nextTick(cb, null, [])

  // traverse filesystem
  parallel(files.map(function (pattern) ***REMOVED***
    return function (callback) ***REMOVED***
      glob(pattern, ***REMOVED***
        cwd: opts.cwd,
        ignore: opts._ignore,
        nodir: true
      ***REMOVED***, callback)
    ***REMOVED***
  ***REMOVED***), function (err, results) ***REMOVED***
    if (err) return cb(err)

    // flatten nested arrays
    var files = results.reduce(function (files, result) ***REMOVED***
      result.forEach(function (file) ***REMOVED***
        files.push(path.resolve(opts.cwd, file))
      ***REMOVED***)
      return files
    ***REMOVED***, [])

    // de-dupe
    files = uniq(files)

    if (opts._gitignore) ***REMOVED***
      files = toRelative(opts.cwd, files)
      if (os.platform() === 'win32') files = toUnix(files)
      files = opts._gitignore.filter(files)
      files = toAbsolute(opts.cwd, files)
      if (os.platform() === 'win32') files = toWin32(files)
    ***REMOVED***

    return cb(null, files)
  ***REMOVED***)
***REMOVED***

function parseOpts (opts) ***REMOVED***
  if (!opts) opts = ***REMOVED******REMOVED***
  opts = Object.assign(***REMOVED***
    useGitIgnore: true,
    usePackageJson: true,
    configKey: 'config',
    gitIgnoreFile: ['.gitignore', '.git/info/exclude']
  ***REMOVED***, opts)

  if (!opts.cwd) opts.cwd = process.cwd()
  if (!Array.isArray(opts.gitIgnoreFile)) opts.gitIgnoreFile = [opts.gitIgnoreFile]

  opts._ignore = []
  opts._gitignore = ignorePkg()

  function addIgnorePattern (patterns) ***REMOVED***
    opts._ignore = opts._ignore.concat(patterns)
    opts._gitignore.addPattern(patterns)
  ***REMOVED***

  if (opts.ignore) addIgnorePattern(opts.ignore)

  // return if we're not looking for packageJson or gitIgnore
  if (!opts.useGitIgnore && !opts.usePackageJson) ***REMOVED***
    return opts
  ***REMOVED***

  // Find package.json in the project root
  var root
  try ***REMOVED***
    root = findRoot(opts.cwd)
  ***REMOVED*** catch (e) ***REMOVED******REMOVED***

  if (root) ***REMOVED***
    if (opts.usePackageJson) ***REMOVED***
      var packageOpts = pkgConfig(opts.configKey, ***REMOVED*** root: false, cwd: opts.cwd ***REMOVED***)
      if (packageOpts && packageOpts.ignore) ***REMOVED***
        // Use ignore patterns from package.json ("config.ignore" property)
        addIgnorePattern(packageOpts.ignore)
      ***REMOVED***
    ***REMOVED***

    if (opts.useGitIgnore) ***REMOVED***
      // Use ignore patterns from project root .gitignore
      var gitignores = []
      gitignores = opts.gitIgnoreFile
        .map(function (f) ***REMOVED***
          try ***REMOVED***
            return fs.readFileSync(path.join(root, f), 'utf8')
          ***REMOVED*** catch (err) ***REMOVED******REMOVED***
        ***REMOVED***)
        .filter(Boolean)

      gitignores.forEach(function (gitignore) ***REMOVED***
        opts._gitignore.addPattern(gitignore.split(/\r?\n/))
      ***REMOVED***)
    ***REMOVED***
  ***REMOVED***

  return opts
***REMOVED***

function toAbsolute (cwd, files) ***REMOVED***
  return files.map(function (file) ***REMOVED***
    return path.join(cwd, file)
  ***REMOVED***)
***REMOVED***

function toRelative (cwd, files) ***REMOVED***
  return files.map(function (file) ***REMOVED***
    return path.relative(cwd, file)
  ***REMOVED***)
***REMOVED***

function toUnix (files) ***REMOVED***
  return files.map(function (file) ***REMOVED***
    return file.replace(/\\/g, '/')
  ***REMOVED***)
***REMOVED***

function toWin32 (files) ***REMOVED***
  return files.map(function (file) ***REMOVED***
    return file.replace(/\//g, '\\')
  ***REMOVED***)
***REMOVED***

function nextTick (cb, err, val) ***REMOVED***
  process.nextTick(function () ***REMOVED***
    cb(err, val)
  ***REMOVED***)
***REMOVED***
